<template>
<view class="list">
  <block wx:for="{{msgs}}" wx:key="idServer">
    <view class="item {{ user.accid === item.from ? 'mine':'opposite' }}">
      <view class="avatar">
        <image mode="scaleToFill" src="{{user.avatarUrl}}" />
      </view>
      <view class="content">
        <view wx:if="{{item.type === 'text' }}">
          <text>{{item.text}}</text>
        </view>
        <view wx:elif="{{item.type === 'image' }}">
          <image></image>
        </view>
      </view>
    </view>
  </block>
</view>

<view class="operation">
  <textarea auto-height fixed cursor-spacing="40" @input="setText" value="{{text}}" />
  <view class="button">
    <image @tap="chooseImage" src="../../static/icons/image.png" mode="scaleToFill" />
  </view>
  <view class="button">
    <image @tap="send" src="../../static/icons/send.png" mode="scaleToFill" />
  </view>
</view>
</template>

<style>
.operation {
  position: fixed;
  display: flex;
  width: 100%;
  bottom: 0;
  left: 0;
  align-items: flex-end;
  padding: 5px 5px;
  border-top: 1px solid #eee;
  z-index: 5;
  background-color: white;
}

.operation>view {
  padding: 10rpx;
}

.operation textarea {
  border: 1px solid #eee;
  padding: 5px;
  font-size: 35rpx;
  width: 60%;
}

.operation .buttons {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

.operation>.button {
  flex-grow: 1;
  padding: 0;
  text-align: center;
  line-height: 50rpx;
  height: 50rpx;
  margin-bottom: 10rpx;
  margin-top: 12rpx;
}

.operation>.button image {
  width: 50rpx;
  height: 50rpx;
}

.list {
  z-index: 0;
  padding: 50rpx;
  height: 100%;
  overflow: scroll;
}

.list>.item {
  display: flex;
  align-items: flex-start;
}

.list>.item .avatar {
  padding: 5px;
  margin: 0 10px;
}

.list>.item .avatar image {
  width: 100rpx;
  height: 100rpx;
}

.list>.item .content {
  padding: 20rpx;
  position: relative;
  border-radius: 5px;
  font-size: 30rpx;
  margin-top: 10px;
  max-width: 350rpx;
  display: flex;
}


.list>.item.mine {
  flex-direction: row-reverse;
}

.list>.item.mine .content {
  background-color: #51C332;
}

.list>.item.mine .content::after {
  content: '';
  position: absolute;
  width: 0;
  height: 0;
  right: -10px;
  border-top: 5px solid transparent;
  border-left: 10px solid #51C332;
  border-bottom: 5px solid transparent;
}

.list>.item.opposite .content {
  background-color: antiquewhite;
}

.list>.item.opposite .content::before {
  content: '';
  position: absolute;
  width: 0;
  height: 0;
  left: -10px;
  border-top: 5px solid transparent;
  border-right: 10px solid antiquewhite;
  border-bottom: 5px solid transparent;
}
</style>

<script>
import wepy from 'wepy'
import {
  connect
} from 'wepy-redux'
import NIM from '../utils/nim'
import * as log from '../utils/log'
import R from '../libs/ramda'

@connect({
  user: state => state.common.user,
  nim: state => state.common.nim,
  msgs: function(state) {
    return state.chat.msgs[this.to] || []
  }
})
export default class Chat extends wepy.page {
  config = {
    navigationBarTitleText: '聊天'
  }

  data = {
    text: '',
    friend: null
  }

  methods = {
    async chooseImage() {
      const res = await wepy.chooseImage({
        count: 1
      })
      console.log('tmp file paths', res)
      try {
        const file = await this.nim.previewFile({
          type: 'image',
          wxFilePath: res.tempFilePaths[0]
        })
        await this.nim.sendFile({
          scene: 'p2p',
          type: 'image',
          to: this.friend.accid,
          file: file
        })
      } catch (error) {
        log.error({
          page: 'chatrooms',
          opr: 'sendFile',
          info: error
        })
      }
    },
    async send() {
      const text = R.trim(this.text)
      this.text = ''
      if (text.length) {
        try {
          await this.nim.sendText({
            text,
            scene: 'p2p',
            to: this.friend.accid
          })
          this.text = ''
          this.$apply()
        } catch (e) {
          log.error({
            page: 'chat',
            opr: 'sendText',
            info: e
          })
          this.$apply()
        }
      }
    },
    setText(e) {
      this.text = e.detail.value
    }
  }

  async onLoad(options) {
    const {
      faccid
    } = options
    this.to = faccid
    // 获得好友对象
    const friend = await NIM.getUserInfo(faccid)
    this.friend = {
      accid: friend.accid,
      avatar: friend.icon,
      nickname: friend.name
    }
    this.$apply()
  }
}
</script>
