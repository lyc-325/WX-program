<template>
<view class="list">
  <view class="item opposite">
    <view class="avatar">
      <image mode="scaleToFill" src="https://avatars1.githubusercontent.com/u/8338436?v=3&u=6da5bc8d0fea875312c88b9e979726bdeafcd41a&s=400" />
    </view>
    <view class="content">
      <text>你在干嘛呢？</text>
    </view>
  </view>
  <view class="item mine">
    <view class="avatar">
      <image mode="scaleToFill" src="https://avatars1.githubusercontent.com/u/8338436?v=3&u=6da5bc8d0fea875312c88b9e979726bdeafcd41a&s=400" />
    </view>
    <view class="content">
      <text>你猜猜呢？</text>
    </view>
  </view>

  <view class="item mine">
    <view class="avatar">
      <image mode="scaleToFill" src="https://avatars1.githubusercontent.com/u/8338436?v=3&u=6da5bc8d0fea875312c88b9e979726bdeafcd41a&s=400" />
    </view>
    <view class="content">
      <image mode="aspectFit" src="https://i3.hoopchina.com.cn/blogfile/201706/21/BbsImg149801400021149_505x636.png?x-oss-process=image/resize,w_800/format,webp"></image>
    </view>
  </view>
</view>

<view class="operation">
  <textarea auto-height fixed cursor-spacing="40" @input="setText"/>
  <view class="button">
    <image @tap="chooseImage" src="../../static/icons/image.png" mode="scaleToFill" />
  </view>
  <view class="button">
    <image @tap="send" src="../../static/icons/send.png" mode="scaleToFill" />
  </view>
</view>
</template>

<style scoped>
.operation {
  position: fixed;
  display: flex;
  width: 100%;
  bottom: 0;
  left: 0;
  align-items: flex-end;
  padding: 5px 5px;
  border-top: 1px solid #eee;
  z-index: 5;
}

.operation > view {
  padding: 10rpx;
}

.operation textarea{
  border: 1px solid #eee;
  padding: 5px;
  font-size: 35rpx;
  width: 60%;
}

.operation .buttons {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

.operation > .button {
  flex-grow: 1;
  padding: 0;
  text-align: center;
  line-height: 50rpx;
  height: 50rpx;
  margin-bottom: 10rpx;
  margin-top: 12rpx;
}

.operation > .button image{
  width: 50rpx;
  height: 50rpx;
}

.list {
  padding: 50rpx;
}

.list > .item {
  display: flex;
  align-items: flex-start;
}

.list > .item .avatar {
  padding: 5px;
  margin: 0 10px;
}

.list > .item .avatar image{
  width: 100rpx;
  height: 100rpx;
}

.list > .item .content {
  padding: 20rpx;
  position: relative;
  border-radius: 5px;
  font-size: 30rpx;
  margin-top: 10px;
  max-width: 350rpx;
  display: flex;
}


.list > .item.mine {
  flex-direction: row-reverse;
}

.list > .item.mine .content{
  background-color: #51C332;
}

.list > .item.mine .content::after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    right: -10px;
    border-top: 5px solid transparent;
    border-left: 10px solid #51C332;
    border-bottom: 5px solid transparent;
}

.list > .item.opposite .content{
  background-color: antiquewhite;
}

.list > .item.opposite .content::before {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    left: -10px;
    border-top: 5px solid transparent;
    border-right: 10px solid antiquewhite;
    border-bottom: 5px solid transparent;
}
</style>

<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'
import NIM from '../utils/nim'
import log from '../utils/log'
import R from '../lib/R'

const genMsg = msg => ({
  ...msg
})

@connect({
  user: state => state.common.user,
  nim: state => state.common.nim
})
export default class Chat extends wepy.page {
  config = {
    navigationBarTitleText: '聊天'
  }

  data = {
    msgs: [],
    text: '',
    nimInstance: null,
    friend: null
  }

  methods = {
    async chooseImage() {
      const result = wepy.chooseImage()
      console.log('images', result)
    },
    async send() {
      const text = R.trim(this.text)
      if (text.length) {
        try {
          const msg = await this.nimInstance.sendText({
            text: this.text,
            scene: 'p2p',
            to: this.friend.accid
          })
          this.msgs = [...this.msgs, genMsg(msg)]
          this.$apply()
        } catch (e) {
          log.error({
            page: 'chat',
            opr: 'sendText',
            info: e
          })
          this.msgs = [...this.msgs, genMsg({
            content: text
          })]
          this.$apply()
        }
      }
    },
    setText(e) {
      this.text = e.detail.value
    }
  }

  async onLoad(options) {
    const { faccid } = options
    // 获得好友对象
    const friend = await NIM.getUserInfo(faccid)
    this.friend = {
      accid: friend.accid,
      avatar: friend.icon,
      nickname: friend.name
    }
    this.$apply()
    // 获得消息实例
    this.nimInstance = NIM.getInstance({
      account: this.user.accid,
      token: this.nim.token,
      onMsg: msg => {
        console.log('收到消息', msg.scene, msg.type, msg)
        if (msg.to === faccid || msg.from === faccid) {
          this.msgs = [...this.msgs, msg]
          this.$apply()
        }
      }
    })
  }
}
</script>
