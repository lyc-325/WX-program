<template>
  <view class="header" style="width:100%;position:fixed;z-index:101;font-size:35rpx; line-height:60rpx;">
    <view class="navbar">
      <view @tap="changeNav" wx:for="{{navs}}" wx:key="index" data-index="{{index}}" class="item {{currentNav == index ? 'active' : ''}}">
        {{item}}
      </view>
    </view>
  </view>
  <view wx:if="{{currentNav === 0}}" class="bodyBlock">
    <scroll-view scroll-y scroll-into-view="item{{intoView}}" class="{{ view }}" id="list">
      <view wx:for="{{msgs}}" wx:key="idClient" id="item{{item.idClient}}" class="list-item {{ user.accid === item.from ? 'mine':'opposite' }}">
        <view class="avatar">
          <image mode="scaleToFill" src="{{item.fromAvatar}}" />
        </view>
        <view class="content">
          <image wx:if="{{item.emji[0].type === 'emoji'}}"   class="avatar" src="{{'../static/faces/' + item.emji[0].data }}"
                 style="width: 25px;height: 25px;margin: 0 0 2px 0;float: left;" mode="scaleToFill"/>
          <view wx:elif="{{item.emji[0].type === 'txt'}}">
            <text>{{item.text}}</text>
          </view>
          <image wx:elif="{{item.type === 'image' }}" src="{{item.file.url}}" mode="scaleToFill"></image>

        </view>
      </view>
    </scroll-view>
    <view class="operation" class="{{ showem }}">
      <textarea wx:if="{{sended}}" value="" auto-height fixed cursor-spacing="40" @focus="handleFocus" @input="setText"/>
      <textarea wx:else auto-height auto-focus fixed cursor-spacing="40" @focus="handleFocus" @input="setText"/>
      <view class="button" @tap="openEmoji" mode="scaleToFill">
        <image src="../static/icons/emoj.png"/>
      </view>
      <view  class="button" @tap="chooseImage">
        <image  src="../static/icons/image.png" mode="scaleToFill" />
      </view>
      <view  class="button" @tap="send" style="width:15%; ">
        <image  src="../static/icons/send.png" mode="scaleToFill" />
      </view>
    </view>
    <swiper class="emoji_list" class="{{ show }}" indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}"
            interval="{{interval}}" duration="{{duration}}">
      <block>
        <swiper-item>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map1 }}" src="{{ emojiObj.path + item }}" wx:key=""
                   @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map2 }}" src="{{ emojiObj.path + item }}" wx:key=""
                   @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map3 }}" src="{{ emojiObj.path + item }}" wx:key=""
                   @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
        </swiper-item>
      </block>
      <block class="second">
        <swiper-item>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map4 }}" src="{{ emojiObj.path + item }}" wx:key=""
                   @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map5 }}" src="{{ emojiObj.path + item }}" wx:key=""
                   @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map6 }}" src="{{ emojiObj.path + item }}" wx:key=""
                   @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
        </swiper-item>
      </block>
    </swiper>
  </view>

  <view wx:if="{{currentNav === 1}}" class="detailBlock">
    <view class="detailList">
      <view class="userinfo" @tap="handleViewTap">
        <image class="userinfo-avatar" src="{{roomData.pic_url}}" background-size="cover"/>
        <view class="userinfo-nickname">{{roomData.name}}</view>
      </view>
      <view class="item">
        <view class="label">公告:</view>
        <view class="value" style="margin-left: 20rpx;">{{roomData.announcement}}</view>
      </view>
    </view>
  </view>
</template>

<style>
.operation {
  position: fixed;
  display: flex;
  width: 100%;
  bottom: 0;
  left: 0;
  /*align-items: flex-end;*/
  padding: 10px 5px;
  border-top: 1px solid #eee;
  z-index: 5;
  background-color: white;
}
.showEmojiOperation{
  position: fixed;
  display: flex;
  width: 100%;
  bottom: 150px;
  left: 0;
  /*align-items: flex-end;*/
  padding: 10px 5px;
  border-top: 1px solid #eee;
  z-index: 5;
  background-color: white;}
.operation>view {
  padding: 10rpx;
}
.showEmojiOperation>view {
  padding: 10rpx;
}
.avatar {
  width: 100rpx;
  height: 100rpx;
  margin: 0 10px 0 0;
  padding-top: 3px;
  border-radius: 3px;
  float: left;
}
.userinfo {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.userinfo-avatar {
  width: 240rpx;
  height: 240rpx;
  border-radius: 10%;
}

.userinfo>.userinfo-nickname {
  color: #aaa;
}

.detailBlock {
  width: 70%;
  margin: 0 15%;
  position: absolute;
}
.detailList {
  margin-top: 80rpx;
}
.detailList>.item {
  display: flex;
  padding: 20rpx 0;
  /*justify-content: space-between;*/
  color: #6b6b6b;
}

.operation textarea {
  border: 1px solid #eee;
  padding: 5px;
  font-size: 35rpx;
  width: 60%;
}
.showEmojiOperation textarea {
  border: 1px solid #eee;
  padding: 5px;
  font-size: 35rpx;
  width: 60%;
}

.operation .buttons {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

.showEmojiOperation .buttons {
  display: flex;
  align-items: center;
  justify-content: space-around;
}
.operation>.button {
  flex-grow: 1;
  padding: 0;
  text-align: center;
  line-height: 50rpx;
  height: 50rpx;
  margin-bottom: 10rpx;
  margin-top: 12rpx;
}
.showEmojiOperation>.button {
  flex-grow: 1;
  padding: 0;
  text-align: center;
  line-height: 50rpx;
  height: 50rpx;
  margin-bottom: 10rpx;
  margin-top: 12rpx;
}
.operation>.button image {
  width: 50rpx;
  height: 50rpx;
}
.showEmojiOperation>.button image {
  width: 50rpx;
  height: 50rpx;
}
scroll-view {
  top: 80rpx;
  left: 0;
  position: absolute;
  z-index: 0;
  height: 100%;
}

.list-item:last-child {
  margin-bottom: 180rpx;
}

.list-item {
  display: flex;
  align-items: flex-start;
}

.list-item .avatar {
  padding: 5px;
  margin: 0 10px;
}

.list-item .avatar image {
  width: 100rpx;
  height: 100rpx;
  border-radius: 50%;
}

.list-item .content {
  padding: 20rpx;
  position: relative;
  border-radius: 5px;
  font-size: 30rpx;
  margin-top: 10px;
  max-width: 350rpx;
  display: flex;
  word-wrap:break-word;
  word-break:normal;
}

.list-item .content view text {
  word-wrap:break-word;
  word-break:normal;
}

.list-item.mine {
  flex-direction: row-reverse;
}

.list-item.mine .content {
  background-color: #51C332;
}

.list-item.mine .content::after {
  content: '';
  position: absolute;
  width: 0;
  height: 0;
  right: -10px;
  border-top: 5px solid transparent;
  border-left: 10px solid #51C332;
  border-bottom: 5px solid transparent;
}

.list-item.opposite .content {
  background-color: antiquewhite;
}

.list-item.opposite .content::before {
  content: '';
  position: absolute;
  width: 0;
  height: 0;
  left: -10px;
  border-top: 5px solid transparent;
  border-right: 10px solid antiquewhite;
  border-bottom: 5px solid transparent;
}
.emoji_list {
  display: none;
}

.showEmoji {
  width: 100%;
  height: 145px;
  background-color: #dddddd;
  padding-top: 10px;
  padding-left: 3%;
  display: block;
  position: fixed;
  bottom: 0;
}

.emoji_list image, .showEmoji image {
  width: 26px;
  height: 26px;
  margin: 5px 2%;
}

.emoji {
  width: 26px;
  height: 26px;
  margin: 0 0;
}

.emoji_item {
  display: flex;
  justify-content: space-around;
  margin-right: 20px;
}
.open_emoji, .send_image, .open_camera, .v-record {
  width: 40px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
}
</style>

<script>
import wepy from 'wepy'
import R from '../libs/ramda'
import ChatroomSDK from '../utils/chatroom'
import NIM from '../utils/nim'
import FaceIM from '../utils/WebIM'
import * as log from '../utils/log'
import {
  refreshMsgs
} from '../actions/chatroom'
import * as chatroomApi from '../apis/chatroom'

import {
  connect
} from 'wepy-redux'

@connect({
  user: state => state.common.user,
  nim: state => state.common.nim,
  msgs: function (state) {
    return state.chatroom.msgs[this.roomId] || []
  },
  intoView: function(state) {
    const msgs = state.chatroom.msgs[this.roomId] || []
    const last = R.last(msgs)
    return last ? last.idClient : ''
  }
}, {
  refreshMsgs
})
export default class Chatroom extends wepy.page {
  config = {
    navigationBarTitleText: '聊天室'
  }

  data = {
    navs: ['聊天', '详情'],
    currentNav: 0,
    chatroom: null,
    roomId: null,
    sended: false,
    text: '',
    roomData: {
      name: '加载中...'
    },
    indicatorDots: true,
    autoplay: false,
    interval: 5000,
    duration: 1000,
    show: 'emoji_list',
    showem: 'operation',
    emoji: FaceIM.default.Emoji,
    emojiObj: FaceIM.default.EmojiObj
  }

  methods = {
    openEmoji (e) {
      if (this.show === 'showEmoji') {
        this.show = 'emoji_list'
        this.showem = 'operation'
      } else {
        this.show = 'showEmoji'
        this.showem = 'showEmojiOperation'
      }
      this.$apply()
    },
    async sendEmoji (event) {
      var that = this
      var emoji = event.target.dataset.emoji
      var msglen = that.data.text.length - 1
      if (emoji && emoji !== '[del]') {
        var str = that.data.text + emoji
      } else if (emoji === '[del]') {
        var start = that.data.text.lastIndexOf('[')
        var end = that.data.text.lastIndexOf(']')
        var len = end - start
        if (end !== -1 && end === msglen && len >= 3 && len <= 4) {
          str = that.data.text.slice(0, start)
        } else {
          str = that.data.text.slice(0, msglen)
        }
      }
      this.text = str
      const pushMsg = this.methods.pushMsg.bind(this)
      var text = R.trim(this.text)
      this.text = ''
      if (text.length) {
        try {
          const msg = await this.chatroom.sendText({
            text
          })
          this.text = ''
          pushMsg(msg)
          this.show = 'emoji_list'
          this.showem = 'operation'
          this.$apply()
        } catch (e) {
          log.error({
            page: 'chatroom',
            opr: 'sendText',
            info: e
          })
        }
      }
    },
    changeNav (e) {
      console.log(e)
      this.currentNav = e.currentTarget.dataset.index
      this.$apply()
    },
    async chooseImage() {
      // 进行图片选择并上传
      const pushMsg = this.methods.pushMsg.bind(this)
      const res = await wepy.chooseImage({
        count: 1
      })

      try {
        const file = await this.chatroom.previewFile({
          type: 'image',
          wxFilePath: res.tempFilePaths[0]
        })
        const msg = await this.chatroom.sendFile({
          type: 'image',
          file: file
        })
        pushMsg(msg)
      } catch (error) {
        log.error({
          page: 'chatroom',
          opr: 'sendFile',
          info: error
        })
      }
    },
    async send() {
      // ? why bind
      const pushMsg = this.methods.pushMsg.bind(this)
      const text = R.trim(this.text)
      this.text = ''
      if (text.length) {
        try {
          const msg = await this.chatroom.sendText({
            text
          })
          this.text = ''
          pushMsg(msg)
        } catch (e) {
          log.error({
            page: 'chatroom',
            opr: 'sendText',
            info: e
          })
        }
      }
    },
    setText(e) {
      this.text = e.detail.value
    },
    pushMsg: function (msgs) {
      const { refreshMsgs } = this.methods
      if (!Array.isArray(msgs)) {
        msgs = [msgs]
      }
      console.log('就是这个图')
      msgs = msgs.map(msg => {
        if (msg.type === 'text') {
          return {
            emji: FaceIM.default.parseEmoji(msg.text.replace(/\n/mg, '')),
            chatroomId: msg.chatroomId,
            flow: msg.flow,
            from: msg.from,
            fromAvatar: msg.fromAvatar,
            fromClientType: msg.fromClientType,
            fromCustom: msg.fromCustom,
            fromNick: msg.fromNick,
            idClient: msg.idClient,
            resend: msg.resend,
            status: msg.status,
            text: msg.text,
            time: msg.time,
            type: msg.type,
            userUpdateTime: msg.userUpdateTime
          }
        } else {
          return msg
        }
      })
      console.log(msgs)
      const roomId = msgs[0].chatroomId || this.roomId
      const merged = [...this.msgs, ...msgs]
      refreshMsgs(roomId, merged)
      this.sended = true
      this.$apply()
    },
    handleFocus() {
      this.sended = false
    }
  }

  async onLoad(options) {
    const { id } = options
    this.roomId = id
    const { pk } = options
    const roomInfo = await chatroomApi.getOneById(pk)
    this.roomData = roomInfo
    const pushMsg = this.methods.pushMsg.bind(this)
    const apply = this.$apply.bind(this)
    const hasMsgs = this.msgs.length > 0
    try {
      const { nimToken, accid } = this.user
      const roomId = this.roomId
      const address = await NIM.getChatroomAddresses(accid, roomId)
      const chatroom = ChatroomSDK.getInstance({
        debug: true,
        account: accid,
        token: nimToken,
        chatroomId: roomId,
        chatroomAddresses: address,
        onmsgs: function(msgs) {
          log.info({
            page: 'chatroom',
            opr: 'initialize sdk instance',
            info: msgs
          })
          pushMsg(msgs.map(msg => {
            if (msg.type === 'notification') {
              // 进入聊天室信息
              const tip = R.cond([
                [R.equals('memberEnter'), R.always('加入聊天室')],
                [R.equals('memberExit'), R.always('退出聊天室')]
              ])(msg.attach.type)
              console.log(`${msg.attach.fromNick} ${tip}`)
            } else {
              return msg
            }
          }))
        },
        async onconnect() {
          log.info({
            page: 'chatroom',
            opr: 'initialize sdk instance',
            info: '[NIM CHATROOM] connected'
          })
          if (!hasMsgs) {
            wepy.showLoading()
            // 拉取最近 100 条信息
            const res = await chatroom.getHistoryMsgs({
              limit: 100
            })
            const msgs = res.msgs.filter(msg => msg.type !== 'notification' && msg.type !== 'tip')
//            console.log('history messages', msgs)

            // 刷新消息
            pushMsg(msgs || [])
            apply()
            wepy.hideLoading()
          }
        }
      })
      this.chatroom = chatroom
    } catch (e) {
      log.error({
        page: 'chatroom',
        opr: 'getInstance',
        info: e
      })
    }
  }

//  async onShow() {
//
//  }
}
</script>
