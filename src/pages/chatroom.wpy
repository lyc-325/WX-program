<template>
  <view class="header" style="width:100%;position:fixed;z-index:101;font-size:35rpx; line-height:60rpx;">
    <view class="navbar">
      <view @tap="changeNav" wx:for="{{navs}}" wx:key="index" data-index="{{index}}" class="item {{currentNav == index ? 'active' : ''}}">
        {{item}}
      </view>
    </view>
  </view>
  <view wx:if="{{currentNav === 0}}" class="bodyBlock">
    <scroll-view scroll-y scroll-into-view="item{{intoView}}" bindscroll="scroll" class="{{ view }}" id="list" @tap="getFocus" >
      <view wx:for="{{msgs}}" wx:key="idClient" id="item{{item.idClient}}" class="list-item {{ user.accid === item.from ? 'mine':'opposite' }}">
        <view wx:if="{{item.type === 'notification'}}" class="notifiView">
          <view class="notifiView" >
            <text class="notifiText">{{item.text}}</text>
            <text class="notifiText">{{item.nowTime}}</text>
            <text class="notifiText">聊天室人数{{nowPeoples}}</text>
          </view>
        </view>
        <view wx:if="{{item.type !== 'notification'}}" class="avatar" @tap="handleName({{item}})">
          <image mode="scaleToFill" src="{{item.fromAvatar}}"/>
        </view>
        <view wx:if="{{item.type !== 'notification'}}">
          <view wx:if="{{!item.is_vip && !item.is_admin}}" style="font-size: 10px; color: #545a63; width: 100%; text-align: left; overflow: hidden;white-space: nowrap;text-overflow: ellipsis;">{{item.fromNick}}</view>
          <view wx:if="{{item.is_vip && !item.is_admin}}" style="font-size: 10px; color:red; width: 100%; text-align: left; overflow: hidden;white-space: nowrap;text-overflow: ellipsis;">[VIP]{{item.fromNick}}</view>
          <view wx:if="{{item.is_admin && !item.is_vip}}" style="font-size: 10px; color:red; width: 100%; text-align: left; overflow: hidden;white-space: nowrap;text-overflow: ellipsis;">[管理员]{{item.fromNick}}</view>
          <view wx:if="{{item.is_admin && item.is_vip}}" style="font-size: 10px; color:red; width: 100%; text-align: left; overflow: hidden;white-space: nowrap;text-overflow: ellipsis;">[VIP][管理员]{{item.fromNick}}</view>
          <view class="content">
            <image wx:if="{{item.emji[0].type === 'emoji'}}"   class="avatar" src="{{'../static/faces/' + item.emji[0].data }}"
            style="width: 25px;height: 25px;margin: 0 0 2px 0;float: left;" mode="scaleToFill"/>
            <view wx:elif="{{item.emji[0].type === 'text'}}">
              <text selectable="true" >{{item.text}}</text>
            </view>
            <image wx:elif="{{item.type === 'image' }}"  src="{{item.file.url}}" style="width: 300rpx; height: {{item.file.h/item.file.w*300}}rpx;" mode="aspectFit" @tap="imgPreview({{item.file.url}}, {{msgs}})"></image>
          </view>
        </view>
      </view>
    </scroll-view>
    <view wx:if="{{!isLIMIT}}" class="operation" class="{{ showem }}">
      <!-- <input wx:if="{{sended}}" value="" auto-height  fixed cursor-spacing="40" @focus="handleFocus" @input="setText"/>
        <input wx:else auto-height focus fixed @focus="handleFocus" cursor-spacing="40"  @input="setText"/> -->
        <textarea  auto-height fixed cursor-spacing="20"  @input="setText"  focus="{{sendFocus}}"
        value="{{searchinput}}"></textarea>
        <view class="button" @tap="openEmoji" mode="scaleToFill">
          <image src="../static/icons/emoj.png"/>
        </view>
        <view  class="button" @tap="chooseImage">
          <image  src="../static/icons/image.png" mode="scaleToFill" />
        </view>
        <view  class="button" @tap="send" style="width:15%; ">
          <image  src="../static/icons/send.png" mode="scaleToFill" />
        </view>
      </view>
      <view wx:if="{{isLIMIT}}" class="operation" class="{{ showem }}">
        <input  value="您已被禁言" auto-height fixed cursor-spacing="40" disabled="true" />
        <view class="button"  mode="scaleToFill">
          <image src="../static/icons/emoj.png"/>
        </view>
        <view  class="button" >
          <image  src="../static/icons/image.png" mode="scaleToFill" />
        </view>
        <view  class="button"  style="width:15%; ">
          <image  src="../static/icons/send.png" mode="scaleToFill" />
        </view>
      </view>
      <swiper class="emoji_list" class="{{ show }}" indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}"
      interval="{{interval}}" duration="{{duration}}">
      <block>
        <swiper-item>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map1 }}" src="{{ emojiObj.path + item }}" wx:key=""
            @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map2 }}" src="{{ emojiObj.path + item }}" wx:key=""
            @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map3 }}" src="{{ emojiObj.path + item }}" wx:key=""
            @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
        </swiper-item>
        <swiper-item>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map4 }}" src="{{ emojiObj.path + item }}" wx:key=""
            @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map5 }}" src="{{ emojiObj.path + item }}" wx:key=""
            @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
          <view class="emoji_item">
            <image wx:for="{{ emojiObj.map6 }}" src="{{ emojiObj.path + item }}" wx:key=""
            @tap="sendEmoji" data-emoji="{{ index }}"/>
          </view>
        </swiper-item>
      </block>
    </swiper>
  </view>
  <view wx:if="{{currentNav === 1}}" class="detailBlock">
    <view class="detailList">
      <view class="userinfo" @tap="handleViewTap">
        <image class="userinfo-avatar" src="{{roomData.pic_url}}" background-size="cover"/>
        <view class="userinfo-nickname">{{roomData.name}}</view>
      </view>
      <view class="item">
        <view class="label">公告:</view>
        <view class="value" style="margin-left: 20rpx;">{{roomData.announcement}}</view>
      </view>
      <view class="item">
        <view class="label">成员列表:</view>
      </view>
      <view wx:if="{{numList.length > 0}}" wx:for="{{numList}}"  wx:key="index"  class="userList" @tap="handleNameId({{item}})">
        <view class="cover">
          <image mode="scaleToFill" src="{{item.avator}}"/>
          <image wx:if="{{item.type === 'MANAGER'}}" src="../static/icons/guan.png" mode="aspectFit" style="width: 50rpx; height: 50rpx; line-height: 80rpx;" />
          <image wx:if="{{item.is_vip}}" src="../static/icons/V.png" mode="aspectFit" style="width: 50rpx; height: 50rpx; line-height: 80rpx;" />
        </view>
        <view class="info">
          <view wx:if="{{!item.is_vip && item.type !== 'MANAGER'}}" class="title">{{item.name}}</view>
          <view wx:if="{{item.is_vip || item.type === 'MANAGER'}}" class="title" style="color: red;">{{item.name}}</view>
          <view wx:if="{{!item.is_vip && item.type !== 'MANAGER'}}" class="content">{{item.company}}</view>
          <view wx:if="{{item.is_vip || item.type === 'MANAGER'}}" class="content" style="color: red;">{{item.company}}</view>
        </view>
      </view>
    </view>
  </view>
</template>
<style>
.operation {
  position: fixed;
  display: flex;
  width: 100%;
  bottom: 0;
  left: 0;
  /*align-items: flex-end;*/
  padding: 10px 5px;
  border-top: 1px solid #eee;
  z-index: 5;
  background-color: white;
}
.showEmojiOperation{
  position: fixed;
  display: flex;
  width: 100%;
  bottom: 150px;
  left: 0;
  /*align-items: flex-end;*/
  padding: 10px 5px;
  border-top: 1px solid #eee;
  z-index: 5;
  background-color: white;}
  .operation>view {
    padding: 10rpx;
  }
  .showEmojiOperation>view {
    padding: 10rpx;
  }
  .avatar {
    width: 100rpx;
    height: 100rpx;
    margin: 0 10px 0 0;
    padding-top: 3px;
    border-radius: 3px;
    float: left;
  }
  .userinfo {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .userinfo-avatar {
    width: 240rpx;
    height: 240rpx;
    border-radius: 10%;
  }
  .userinfo>.userinfo-nickname {
    color: #aaa;
    margin-top: 20rpx;
  }
  .detailBlock {
    width: 80%;
    margin: 0 10%;
    position: absolute;
  }
  .detailList {
    margin-top: 80rpx;
  }
  .detailList>.item {
    display: flex;
    padding: 20rpx 0;
    /*justify-content: space-between;*/
    color: #6b6b6b;
  }
  .bodyBlock .notifiView{
    width: 100%;
    text-align: center;
  }
  .bodyBlock .notifiText{
    font-size: 12px;
    color: #545a63;
    padding-right: 10rpx;
  }
  .operation textarea {
    border: 1px solid #eee;
    padding: 5px;
    font-size: 35rpx;
    width: 60%;
  }
  .showEmojiOperation textarea {
    border: 1px solid #eee;
    padding: 5px;
    font-size: 35rpx;
    width: 60%;
  }
  .operation .buttons {
    display: flex;
    align-items: center;
    justify-content: space-around;
  }
  .showEmojiOperation .buttons {
    display: flex;
    align-items: center;
    justify-content: space-around;
  }
  .operation>.button {
    flex-grow: 1;
    padding: 0;
    text-align: center;
    line-height: 50rpx;
    height: 50rpx;
    margin-bottom: 10rpx;
    margin-top: 12rpx;
  }
  .showEmojiOperation>.button {
    flex-grow: 1;
    padding: 0;
    text-align: center;
    line-height: 50rpx;
    height: 50rpx;
    margin-bottom: 10rpx;
    margin-top: 12rpx;
  }
  .operation>.button image {
    width: 50rpx;
    height: 50rpx;
  }
  .showEmojiOperation>.button image {
    width: 50rpx;
    height: 50rpx;
  }
  scroll-view {
    top: 80rpx;
    left: 0;
    position: absolute;
    z-index: 0;
    bottom: 100rpx;
  }
  .list-item:last-child {
    padding-bottom:60rpx;
  }
  .list-item {
    display: flex;
    align-items: flex-start;
    padding: 3px 0;
  }
  .list-item .avatar {
    padding: 1px;
    margin: 0 10px;
  }
  .list-item .avatar image {
    width: 100rpx;
    height: 100rpx;
    border-radius: 50%;
  }
  .list-item .content {
    padding: 20rpx;
    position: relative;
    border-radius: 5px;
    font-size: 30rpx;
    margin-top: 5px;
    max-width: 350rpx;
    display: flex;
    word-wrap:break-word;
    word-break:normal;
  }
  .list-item .content view text {
    word-wrap:break-word;
    word-break:normal;
  }
  .list-item.mine {
    flex-direction: row-reverse;
  }
  .userList{
    position: relative;
    /*border-top: 2rpx solid #eee;*/
    height: 80rpx;
    display: flex;
  }
  .userList .cover {
    width: 30%;
    height: 60rpx;
    padding: 10rpx;
  }
  .userList .cover image {
    width: 70rpx;
    height: 70rpx;
    border-radius: 50%;
  }
  .userList .info {
    width: 70%;
    height: 70rpx;
    padding: 5rpx;
    display: flex;
    line-height: 70rpx;
    /*flex-direction: column;*/
    justify-content: space-around;
    font-size: 32rpx;
    color: dimgray;
  }
  .userList .info .title {
    width: 40%;
    overflow: hidden;
  }
  .userList .info .content {
    width: 60%;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
  .list-item.mine .content {
    background-color: #51C332;
  }
  .list-item.mine .content::after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    right: -10px;
    border-top: 5px solid transparent;
    border-left: 10px solid #51C332;
    border-bottom: 5px solid transparent;
  }
  .list-item.opposite .content {
    background-color: antiquewhite;
  }
  .list-item.opposite .content::before {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    left: -10px;
    border-top: 5px solid transparent;
    border-right: 10px solid antiquewhite;
    border-bottom: 5px solid transparent;
  }
  .emoji_list {
    display: none;
  }
  .showEmoji {
    width: 100%;
    height: 145px;
    background-color: #dddddd;
    padding-bottom: 70px;
    padding-top: 10px;
    padding-left: 3%;
    display: block;
    position: fixed;
    bottom: 0;
  }
  .emoji_list image, .showEmoji image {
    width: 26px;
    height: 26px;
    margin: 5px 2%;
  }
  .emoji {
    width: 26px;
    height: 26px;
    margin: 0 0;
  }
  .emoji_item {
    display: flex;
    justify-content: space-around;
    margin-right: 20px;
  }
  .open_emoji, .send_image, .open_camera, .v-record {
    width: 40px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  </style>
  <script>
  import wepy from 'wepy'
  import R from '../libs/ramda'
  import ChatroomSDK from '../utils/chatroom'
  import NIM from '../utils/nim'
  import FaceIM from '../utils/WebIM'
  import * as log from '../utils/log'
  import {
    refreshMsgs
  } from '../actions/chatroom'
  import * as chatroomApi from '../apis/chatroom'
  import * as accountApi from '../apis/account'
  import {
    connect
  } from 'wepy-redux'
  @connect({
    user: state => state.common.user,
    nim: state => state.common.nim,
    msgs: function (state) {
      return state.chatroom.msgs[this.roomId] || []
    },
    intoView: function(state) {
      const msgs = state.chatroom.msgs[this.roomId] || []
      const last = R.last(msgs)
      if (this.scrolltoper) {
        return ''
      }
      return last ? last.idClient : ''
    }
  }, {
    refreshMsgs
  })
  export default class Chatroom extends wepy.page {
    config = {
      navigationBarTitleText: '聊天室'
    }
    data = {
      navs: ['聊天', '详情'],
      currentNav: 0,
      numList: [],
      isLIMIT: false,
      chatroom: null,
      roomId: null,
      sended: false,
      text: '',
      roomData: {
        name: '加载中...'
      },
      indicatorDots: true,
      autoplay: false,
      interval: 5000,
      duration: 1000,
      show: 'emoji_list',
      showem: 'operation',
      emoji: FaceIM.default.Emoji,
      emojiObj: FaceIM.default.EmojiObj,
      nowTime: '',
      nowPeoples: 0,
      searchinput:'',
      sendFocus: false,
      userLimitArr:[],
      vipUserList:[],
      adminUserList:[],
    }
    methods = {
      async scroll (e) {
        // console.log(e.detail.scrollHeight)判断是否在查看历史记录不滚动
        if (e.detail.scrollTop < e.detail.scrollHeight*0.5 || e.detail.scrollTop < 100) {
          // console.log(e.detail.deltaX)
          this.scrolltoper = 1
        }else {
          this.scrolltoper = 0
        }
        if(e.detail.scrollTop < 10 && this.msgs.length < 150) {
        }
      },
      async getCountsNum(id, jfToken) {
        const { total_members_count } = await chatroomApi.getOneById(id, jfToken)
        this.nowPeoples = total_members_count-1
        this.$apply()
      },
      async handleName (item) {
        const type = this.type
        const banId = this.userLimitArr.map((item)=>item.id)
        let roomId = this.roomId
        const itemAccid = item.from
        const {id} = await chatroomApi.getItemId(itemAccid)
        wepy.navigateTo({
          url: `userInfo?id=${id}&roomId=${roomId}&banId=${banId}&type=${type}`
        })
      },
      handleNameId (item) {
        const type = this.type
        const banId = this.userLimitArr.map((item)=>item.id)
        const itemid = item.id
        let roomId = this.roomId
        wepy.navigateTo({
          url: `userInfo?id=${itemid}&roomId=${roomId}&banId=${banId}&type=${type}`
        })
      },
      getFocus () {
        this.setData({
          sendFocus : false
        })
      },
      openEmoji (e) {
        if (this.show === 'showEmoji') {
          this.show = 'emoji_list'
          this.showem = 'operation'
        } else {
          this.show = 'showEmoji'
          
        }
        this.$apply()
      },
      imgPreview (items, msgs) {
        const imgUrl = items
        const isImg = msg => msg.type === 'image'
        const imgArr = R.filter(isImg)(msgs)
        const imgUrlArr = imgArr.map(msg => {
          return msg.file.url
        })
        wepy.previewImage({
          current: imgUrl,
          urls: imgUrlArr,
          success: function (res) {
            console.log(res)
          }
        })
      },
      async sendEmoji (event) {
        var that = this
        var emoji = event.target.dataset.emoji
        var msglen = that.data.text.length - 1
        if (emoji && emoji !== '[del]') {
          var str = that.data.text + emoji
        } else if (emoji === '[del]') {
          var start = that.data.text.lastIndexOf('[')
          var end = that.data.text.lastIndexOf(']')
          var len = end - start
          if (end !== -1 && end === msglen && len >= 3 && len <= 4) {
            str = that.data.text.slice(0, start)
          } else {
            str = that.data.text.slice(0, msglen)
          }
        }
        this.text = str
        const pushMsg = this.methods.pushMsg.bind(this)
        var text = R.trim(this.text)
        this.text = ''
        if (text.length) {
          try {
            const msg = await this.chatroom.sendText({
              text
            })
            this.text = ''
            pushMsg(msg)
            this.show = 'emoji_list'
            this.setData({  
              searchinput: '',  
            })  
            this.$apply()
          } catch (e) {
            log.error({
              page: 'chatroom',
              opr: 'sendText',
              info: e
            })
          }
        }
      },
      changeNav (e) {
        this.currentNav = e.currentTarget.dataset.index
        this.sended = false
        this.$apply()
      },
      async chooseImage() {
      // 进行图片选择并上传
      const pushMsg = this.methods.pushMsg.bind(this)
      const res = await wepy.chooseImage({
        count: 1
      })
      try {
        const file = await this.chatroom.previewFile({
          type: 'image',
          wxFilePath: res.tempFilePaths[0]
        })
        const msg = await this.chatroom.sendFile({
          type: 'image',
          file: file
        })
        pushMsg(msg)
      } catch (error) {
        log.error({
          page: 'chatroom',
          opr: 'sendFile',
          info: error
        })
      }
    },
    async send(e) {
      //? why bind
      this.setData({  
        searchinput: '',  
        sendFocus: true,
      }) 
      this.scrolltoper = 0
      const pushMsgText = this.methods.pushMsgText.bind(this)
      const text = R.trim(this.text)
      this.text = ''
      if (text.length) {
        try {
          const msg = await this.chatroom.sendText({
            text
          })
          this.text = ''
          pushMsgText(msg)
        } catch (e) {
          log.error({
            page: 'chatroom',
            opr: 'sendText',
            info: e
          })
        }
      }
    },
    setText(e) {
      this.text = e.detail.value
    },
    async getMsgs() {
      wepy.showLoading()
      const pushMsg = this.methods.pushMsg.bind(this)
      const chatroom1 = this.chatroom
      const res = await chatroom1.getHistoryMsgs({
        limit: 50
      })
      const msgs = res.msgs.filter(msg => msg.type !== 'notification' && msg.type !== 'tip').reverse()
      pushMsg(msgs || [])
      this.$apply()
      wepy.hideLoading()
    },
    pushMsg: function (msgs) {
      const { refreshMsgs } = this.methods
      if (!Array.isArray(msgs)) {
        msgs = [msgs]
      }
      //VIP 显示
      const vipNick = this.vipUserList.map((item) => item.nick)
      const isVip = function(msg){
        for (var i = vipNick.length - 1; i >= 0; i--) {
          if (vipNick[i] === msg.fromNick) {
            return msg.fromNick
          }
        }
      }
      const adminNick = this.adminUserList.map((item) => item.nick)
      const isAdmin = function(msg){
        for (var i = adminNick.length - 1; i >= 0; i--) {
          if (adminNick[i] === msg.fromNick) {
            return msg.fromNick
          }
        }
      }
      R.filter(isAdmin)(msgs).map(item => item.is_admin = true)
      R.filter(isVip)(msgs).map(item => item.is_vip = true)
      msgs = msgs.map(msg => {
        if (msg.type === 'text') {
          return {
            emji: FaceIM.default.parseEmoji(msg.text.replace(/\n/mg, '')),
            chatroomId: msg.chatroomId,
            flow: msg.flow,
            from: msg.from,
            fromAvatar: msg.fromAvatar,
            fromClientType: msg.fromClientType,
            fromCustom: msg.fromCustom,
            fromNick: msg.fromNick,
            idClient: msg.idClient,
            resend: msg.resend,
            status: msg.status,
            text: msg.text,
            time: msg.time,
            type: msg.type,
            userUpdateTime: msg.userUpdateTime,
            is_vip: msg.is_vip,
            is_admin: msg.is_admin,
          }
        } else {
          return msg
        }
      })
      let roomId = this.roomId
      if (msgs.length > 0) {
        roomId = msgs[0].chatroomId
      }
      const merged = [...this.msgs, ...msgs]
      refreshMsgs(roomId, merged)
      this.sended = true
      this.$apply()
    },
    pushMsgText: function (msgs) {
      const { refreshMsgs } = this.methods
      if (!Array.isArray(msgs)) {
        msgs = [msgs]
      }
      const vipNick = this.vipUserList.map((item) => item.nick)
      const isVip = function(msg){
        for (var i = vipNick.length - 1; i >= 0; i--) {
          if (vipNick[i] === msg.fromNick) {
            return msg.fromNick
          }
        }
      }
      const adminNick = this.adminUserList.map((item) => item.nick)
      const isAdmin = function(msg){
        for (var i = adminNick.length - 1; i >= 0; i--) {
          if (adminNick[i] === msg.fromNick) {
            return msg.fromNick
          }
        }
      }
      R.filter(isAdmin)(msgs).map(item => item.is_admin = true)
      R.filter(isVip)(msgs).map(item => item.is_vip = true)
      msgs = msgs.map(msg => {
        if (msg.type === 'text') {
          return {
            emji: FaceIM.default.parseEmoji(msg.text.replace(/\n/mg, '')),
            chatroomId: msg.chatroomId,
            flow: msg.flow,
            from: msg.from,
            fromAvatar: msg.fromAvatar,
            fromClientType: msg.fromClientType,
            fromCustom: msg.fromCustom,
            fromNick: msg.fromNick,
            idClient: msg.idClient,
            resend: msg.resend,
            status: msg.status,
            text: msg.text,
            time: msg.time,
            type: msg.type,
            userUpdateTime: msg.userUpdateTime,
            is_vip: msg.is_vip,
            is_admin: msg.is_admin,
          }
        } else {
          return msg
        }
      })
      let roomId = this.roomId
      if (msgs.length > 0) {
        roomId = msgs[0].chatroomId
      }
      const merged = [...this.msgs, ...msgs]
      refreshMsgs(roomId, merged)
      this.sended = true
      this.$apply()
    },
  }
  async onLoad(options) {
    const { id } = options
    const {roomid} = options
    const {creator} = options
    this.roomId = roomid
    const { refreshMsgs } = this.methods
    const pushMsg = this.methods.pushMsg.bind(this)
    const getCountsNum = this.methods.getCountsNum.bind(this)
    const apply = this.$apply.bind(this)
    const hasMsgs = this.msgs.length > 0
    
    wepy.showLoading()
    const { nimToken, accid, avatarUrl, jfToken } = this.user
    await chatroomApi.addToRoom(roomid, creator, accid)
    const roomInfo = await chatroomApi.getOneById(id, jfToken)
    //获取当前用户type 传入之后页面判断权限
    const [object] = await accountApi.getUserInfo(roomid,accid)
    this.type = object.type
    if (this.type === 'LIMITED') {
      this.isLIMIT = true
      wx.showToast({
        title: '被禁言，请联系管理员解除',
        icon: 'success',
        duration: 2000
      })
    }
    this.roomData = roomInfo
    const roomId = this.roomId
    const address = await NIM.getChatroomAddresses(accid, roomId)
    const [chatroom0,chatroom1] = ChatroomSDK.getInstance({
      account: accid,
      token: nimToken,
      chatroomId: roomId,
      chatroomAddresses: address,
      onmsgs: function(msgs) {
        log.info({
          page: 'chatroom',
          opr: 'initialize sdk instance',
          info: msgs
        })
        pushMsg(msgs.map(msg => {
          if (msg.type === 'notification') {
            getCountsNum(id, jfToken)
              // 进入聊天室信息
              const tip = R.cond([
                [R.equals('memberEnter'), R.always('加入聊天室')],
                [R.equals('memberExit'), R.always('退出聊天室')]
                ])(msg.attach.type)
                const tipMsg = `${msg.attach.fromNick} ${tip}`
                return {
                  ...msg,
                  type: 'notification',
                  text: tipMsg,
                  fromAvatar: avatarUrl,
                  nowTime: new Date(Date.parse(new Date()) + 28800000).toISOString().split('T')[0] + ' ' + new Date().toTimeString().substr(0, 8)
                }
              } else {
                return msg
              }
            }))
      },
      async onconnect() {
        log.info({
          page: 'chatroom',
          opr: 'initialize sdk instance',
          info: '[NIM CHATROOM] connected'
        })
        refreshMsgs(roomid,[])
        wepy.hideLoading()
        if (!hasMsgs) {
          const res = await chatroom1.getHistoryMsgs({
            limit: 100
          })
          const msgs = res.msgs.filter(msg => msg.type !== 'notification' && msg.type !== 'tip').reverse()
          pushMsg(msgs || [])
          refreshMsgs(roomid,[])
          apply() 
        }
      }
    })
    this.chatroom = chatroom1
    this.chatroom0 = chatroom0
  //循环加载分页人员
  const Takemin = (Arr) => Math.min.apply( Math, Arr)
  let data = []
  while(true){
    let data1 = await chatroomApi.getUserList(roomid, jfToken,minTime)
    if (data1.length == 0) {
      break
    }
    let timeArr = data1.map((item) => item.enterTime)
    let minTime = Takemin(timeArr)
    data = data.concat(data1)
  }
  //管理员，vip排上面
  data.sort((o,p) => {
    let c = o.is_vip
    let d = p.is_vip
    if (c === d) {
      return 0
    }
    if (c === true && d === false) {
      return -1
    }
  })
  // const accidArr = data.map((item)=>item.accid)
  // this.type = data[accidArr.indexOf(accid)].type
  //聊天VIP显示
  const isVip = data => data.is_vip === true
  const vipUserList = R.filter(isVip)(data)
  this.vipUserList = vipUserList
  const isAdmin = data => data.type === 'MANAGER'
  const adminUserList = R.filter(isAdmin)(data)
  this.adminUserList = adminUserList
  const isUser = data => data.name && data.name !== null
  this.numList = R.filter(isUser)(data)
  this.$apply()
}
onShareAppMessage = function (res) {
  return {
    title: this.roomData.name
  }
}
onShow() {
  this.isLIMIT = false
  this.currentNav = 0
}
onUnload() {
  this.chatroom0.disconnect()
}
}
</script>
