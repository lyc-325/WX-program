<template>
<view class="list">
  <view class="item" wx:for="{{notifications}}" wx:key="id">
    <view class="avatar">
      <image mode="aspectFit" src="https://avatars1.githubusercontent.com/u/8338436?v=3&u=6da5bc8d0fea875312c88b9e979726bdeafcd41a&s=400" />
    </view>
    <view class="info">
      <view>老张 请求加你为好友</view>
      <view>验证 我是老张</view>
    </view>

    <view wx:if={{item.completed}} class="operation">
      <view class="accept" @tap="feedback({{index}}, 'accept')">同意</view>
      <view class="reject" @tap="feedback({{index}}, 'reject')">拒绝</view>
    </view>
    <view wx:else class="operation">
      <view class="status">已完成</view>
    </view>
  </view>
</view>
</template>

<style scoped>
.list {
  display: flex;
}

.list > .item {
  display: flex;
  border-bottom: 1px solid #eee;
  width: 100%;
  justify-content: center;
  height: 150rpx;
  padding: 10rpx;
}

.list .item:first-child {
  border-top: 1px solid #eee;
}

.list > .item .avatar {
  flex: 1;
  padding: 10rpx;
  text-align: center;
}

.list > .item .avatar image{
  flex: 1;
  width: 130rpx;
  height: 130rpx;
  text-align: center;
}


.list > .item .info {
  flex: 2;
  padding: 10rpx;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  font-size: 35rpx;
}

.list > .item .operation {
  padding: 10rpx;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}

.list > .item .operation > view {
  height: 50rpx;
  line-height: 50rpx;
  text-align: center;
  padding: 10rpx;
  border: 1px solid #eee;
  border-radius: 5px;
}

.list > .item .operation .accept {
  background-color: red;
  color: white;
  margin-bottom: 10rpx;
}
</style>

<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'
import NIM from '../utils/nim'
import log from '../utils/log'
import R from '../libs/ramda'

@connect({
  user: state => state.common.user,
  nim: state => state.common.nim
})
export default class Notifications extends wepy.page {
  config = {
    navigationBarTitleText: '通知'
  }

  data = {
    notifications: []
  }

  onLoad() {
    // 初始化 NIM 对象用于接收系统通知
    NIM.getInstance({
      account: this.user.accid,
      token: this.nim.token,
      onsysmsg: (sysMsgs) => {
        log.info({
          page: 'notifications',
          opr: 'onsysmsg',
          info: sysMsgs
        })
        this.notifications = notifications.map(notification => ({
          ...notification
        }))
      }
    })
  }

  methods = {
    async feedback(index, type) {
      const notification = notifications[index]
      const operation = R.cond([
        [R.equals('accept'), () => NIM.acceptFriendApply],
        [R.equals('reject'), () => NIM.rejectFriendApply]
      ])(type)
      try {
        wepy.showLoading()
        const result = await operation(this.user.accid, notification.faccid)
        wepy.hideLoading()
      } catch (e) {
        log.error({
          page: 'notifications',
          opr: 'feedback',
          info: e
        })
        wepy.hideLoading()
      }
    }
  }
}
</script>
