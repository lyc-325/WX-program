<template>
  <view class="section" style=" display: flex;justify-content: flex-end; padding: 5px 10px;">
    <input class="searchInput" value="{{searchValue}}" bindinput="searchKeyInput" placeholder="搜索标题"/>
    <button @tap="searchTap" style="margin: 0; line-height:80rpx;  width: 160rpx; height: 80rpx;">搜索</button>
  </view>
   <view scroll-x="true" style="width:100%;background:#f5f5f5;" class="navbar">
   <view style="display:flex; padding:10rpx 0; background:#f5f5f5; border-bottom: 2rpx solid #eee;">
   <view @tap="changeNav" wx:for-items="{{navs}}" wx:key="index" data-index="{{index}}" class="item {{currentNav == index ? 'active' : ''}}">
    {{item}}
   </view>
   </view>
   </view>
  <view class="list" style="margin-top: 10rpx;">
  <view wx:if="{{list.length > 0}}"wx:for="{{list}}" @tap="handleItemTap" wx:key="index" data-index="{{index}}" class="item">
    <view class="cover">
      <image mode="scaleToFill" src="{{item.cover}}" />
    </view>
    <view class="info">
      <view class="title">{{item.title}}</view>
      <view class="content">{{item.content}}</view>
      <view class="footer">
        <view class="createdBy">{{item.createdBy}}</view>
        <view class="createdAt">{{item.createdAt}}</view>
        <view class="read">
          {{item.read}} 阅读
        </view>
      </view>
    </view>
  </view>
    <view wx:if="{{list.length === 0}}"  class="item">
      <view style="text-align: center; margin-top: 80rpx; color: #545a63; width: 100%;">当前分类没有信息</view>
    </view>
</view>
<view @tap="handlePublishTap" loading="{{loading}}" disabled="{{disabled}}" class="publish">发布</view>
</template>

<style scoped>
::-webkit-scrollbar {
  width: 0;
  height: 0;
  color: transparent;
}
.navbar{
   /*position: fixed;*/
   z-index: 101;
   font-size: 35rpx;
 }
.navbar .item{
   padding: 10rpx 30rpx;
}
.list{
  padding-left: 20rpx;
  padding-right: 20rpx;
  background-color: #fff;
}
.list>.item {
  position: relative;
  border-top: 2rpx solid #eee;
  height: 200rpx;
  display: flex;
}

.list>.item:first-child {
  border-top: none;
}

.searchInput{
  display:block;
  height: 2rem;
  text-overflow:clip;
  overflow:hidden;
  white-space:nowrap;
  font-family:UICTFontTextStyleBody;
  min-height: 2rem;
  border-bottom:1px solid #eee;

}
.list>.item:last-child {
  border-bottom: 2rpx solid #eee;
}

.list>.item .cover {
  width: 150rpx;
  height: 150rpx;
  padding: 30rpx;
}

.list>.item .cover image {
  width: 150rpx;
  height: 150rpx;
  border-radius: 10rpx;
}

.list>.item .info {
  width: 500rpx;
  padding: 20rpx;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}

.list>.item .info .title {
  width: 100%;
  font-size: 32rpx;
}

.list>.item .info .content {
  font-size: 26rpx;
  line-height: 30rpx;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  color: dimgray;
}

.list>.item .info .footer {
  display: flex;
  justify-content: space-between;
  font-size: 25rpx;
  color: darkgray;
}

.list>.item .info .footer {
  display: flex;
}

.publish {
  position: fixed;
  bottom: 20rpx;
  right: 20rpx;
  width: 180rpx;
  height: 80rpx;
  line-height: 80rpx;
  border-radius: 20rpx;
  text-align: center;
  background-color: #1eb571;
  color: white;
  font-size: 36rpx;
  font-weight: 700;
  box-shadow: 1px 1px 5px #ccc;
}
</style>
<!--import wepy from 'wepy'-->
<!--import { connect } from 'wepy-redux'-->
<!--import * as api from '../apis/board'-->
<!--import * as apiA from '../apis/account'-->
<!--import R from '../libs/ramda'-->
<!--import { jf, wx as config } from '../config'-->
<!--import * as log from '../utils/log'-->
<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'
import * as api from '../apis/board'
import { jf } from '../config'

import {
  setUser
} from '../actions/common'

@connect({
  user: state => state.common.user
}, {
  setUser
})

export default class Boards extends wepy.page {
  config = {
    navigationBarTitleText: '商友圈'
  }

  data = {
    list: [],
    navs: [],
    currentNav: 0,
    categories: [],
    searchValue: ''
  }

  methods = {
    changeNav (e) {
//      const { jfToken } = this.user
      this.currentNav = e.currentTarget.dataset.index
      this.searchValue = ''
      api.boardList(this.categories[this.currentNav].id).then(res => {
        this.list = res.map(item => ({
          id: item.id,
          title: item.title,
          content: item.text,
          createdBy: item.author.name,
          createdAt: item.dateline,
          cover: item.pic_urls[0] ? `${jf.baseServer}${item.pic_urls[0]}` : '',
          read: item.click_num
        }))
        this.$apply()
      })
    },
    searchKeyInput(e) {
      this.setData({
        [`searchValue`]: e.detail.value
      })
      this.searchValue = e.detail.value
      this.$apply()
    },
    searchTap(e) {
      api.searchList(this.categories[this.currentNav].id, this.searchValue).then(res => {
        this.list = res.map(item => ({
          id: item.id,
          title: item.title,
          content: item.text,
          createdBy: item.author.name,
          createdAt: item.dateline,
          cover: item.pic_urls[0] ? `${jf.baseServer}${item.pic_urls[0]}` : '',
          read: item.click_num
        }))
        this.$apply()
      })
    },
    handlePublishTap(e) {
      wepy.navigateTo({
        url: 'publish'
      })
    },
    handleItemTap(e) {
//      console.log('item', this.list[e.currentTarget.dataset.index])
      const id = this.list[e.currentTarget.dataset.index].id
//      console.log('id', id)
//      console.log(`board?id=${id}`)
      wepy.navigateTo({
        url: `board?id=${id}`
      })
    }
  }

//  async onLoad(options) {
//    const { setUser } = this.methods
//
//    wepy.showLoading()
//    const { code } = await wepy.login()
//    const { data } = await wepy.request({
//      url: `https://api.weixin.qq.com/sns/jscode2session?appid=${config.appId}&secret=${config.appSecrete}&js_code=${code}&grant_type=authorization_code`
//    })
//    const { openid } = data
//    const { userInfo } = await wepy.getUserInfo()
//    const password = R.takeLast(5)(openid)
//
//    const user = {
//      ...userInfo,
//      accid: openid.toLowerCase()
//    }
//    setUser(user)
// 如果用户尚未在 则先注册
//    try {
//      const userId = await apiA.getTokenUserId(openid, password.toLowerCase())
//      this.jfUserid = userId.id
//      const Token = userId.Token
//      if (!Token) {
//        throw new Error('user not exist')
//      }
//
//      setUser({
//        ...this.user,
//        jfToken: Token,
//        userData: userId
//      })
//      this.$apply()
//      wepy.hideLoading()
//    } catch (e) {
//      log.error({
//        page: 'chatrooms',
//        opr: 'init',
//        info: e
//      })
//      wepy.hideLoading()
//      wepy.navigateTo({
//        url: '/pages/register'
//      })
//    }
//  }

  async onShow(option) {
//    const { jfToken } = this.user
    // const token = await getToken()
    // console.log(api)
    const results = await api.categoryList()
    // console.log('results', results)
    this.navs = results.map(({name}) => name)
    this.categories = results
    // if (option.categoryId) {
    //   results.forEach((item, index) => {
    //     if (item.id === option.categoryId) {
    //       this.currentNav = index
    //     }
    //   })
    // }
    const res = await api.boardList(results[this.currentNav].id)
    this.list = res.map(item => ({
      id: item.id,
      title: item.title,
      content: item.text,
      createdBy: item.author.name,
      createdAt: item.dateline,
      cover: item.pic_urls[0] ? `${jf.baseServer}${item.pic_urls[0]}` : '',
      read: item.click_num
    }))
    // console.log('board', res)
    // await res.forEach(item => {
    //   if (item.pic_urls[0]) {
    //     api.downloadImage(item.pic_urls[0]).then(res => {
    //       self.list.push({
    //         id: item.id,
    //         title: item.title,
    //         content: item.text,
    //         createdBy: item.creator,
    //         createdAt: item.dateline,
    //         cover: res.tempFilePath,
    //         read: 200
    //       })
    //     })
    //   }
    // })
    this.$apply()
    // const boards = res.data;
    // const reses = await api.downloadImages(boards.map(({ cover_img }) => cover_img))
    // const tempFiles = reses.map(({tempFilePath}) => tempFilePath)
    // this.list = boards.map(board => ({title, text, creator, author, cover_img}) => ({ title, content: text, createdBy: creator, author: read, cover: cover_img }))
  }
}
</script>
