<template>
  <view class="root">
    <view class="userinfo">
      <image class="userinfo-avatar" src="{{userData.icon}}" background-size="cover"/>
      <view wx:if="{{isStar === false}}" class="infoEdit" @tap="collectUserTap">关 注</view>
      <view wx:if="{{isStar === true}}" class="infoEdit" @tap="DelCollectUserTap">已关注</view>
      <view wx:if="{{type}}">
        <view wx:if="{{isBan === false}}" class="banSomeone" @tap="banSomeoneTap">禁言</view>
        <view wx:if="{{isBan === true}}" class="banSomeone" @tap="delBanSomeoneTap">恢复</view>
      </view>
    </view>
    <view class="details">
      <view class="item">
        <view class="label">姓名</view>
        <view  class="value">{{userData.name}}</view>
      </view>
      <view class="item">
        <view class="label">公司</view>
        <view  class="value">{{userData.company}}</view>
      </view>
      <view class="item">
        <view class="label">联系方式</view>
        <view  class="value">{{userData.mobile}}</view>
      </view>
      <view class="item">
        <view class="label">主要经营</view>
        <view  class="value">{{userData.ex}}</view>
      </view>
      <view class="item">
        <view class="label">职位</view>
        <view  class="value">{{userData.token}}</view>
      </view>
    </view>
  </view>
  <view class="list">
    <view style="color:#6b6b6b; padding:10px;">发布列表</view>
    <view wx:for="{{list}}" @tap="handleItemTap" wx:key="index" data-index="{{index}}" class="item">
      <view class="cover">
        <image mode="scaleToFill" src="{{item.cover}}" />
      </view>
      <view class="info">
        <view class="title">{{item.title}}</view>
        <view class="content">{{item.content}}</view>
        <view class="footer">
          <view class="createdBy">{{item.createdBy}}</view>
          <view class="createdAt">{{item.createdAt}}</view>
          <view class="read">
            {{item.read}} 阅读
          </view>
        </view>
      </view>
    </view>
  </view>
  <view @tap="handlePublishTap" loading="{{loading}}" disabled="{{disabled}}" class="publish">发布</view>
</template>
<style scoped>
.userinfo {
  display: flex;
  flex-direction: column;
  align-items: center;
}
.infoEdit{
  position:absolute;
  right:10%;
  padding:5px 10px;
  border:1px solid #eee;
  border-radius:10%;
  top:2%;
  color: red;
}
.banSomeone{
  position:absolute;
  left:10%;
  padding:5px 10px;
  border:1px solid #eee;
  border-radius:10%;
  top:2%;
  color: red;
}
.userinfo-avatar {
  width: 120rpx;
  height: 120rpx;
  display: inline-block;
  border-radius: 50%;
}
.userinfo-nickname {
  color: #aaa;
}
.root {
  width: 90%;
  margin: 0 5%;
}
.root>view {
  padding: 20rpx;
  border-bottom: 1px solid #eee;
}
.base {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.base>view:first-child {
  display: flex;
  align-items: center;
}
.base .avatar {
  margin-right: 10rpx;
}
.base .avatar image {
  width: 100rpx;
  height: 100rpx;
}
.details>.item {
  display: flex;
  padding: 10rpx 0;
  justify-content: space-between;
  color: #6b6b6b;
}
.list{
  padding:0 5%;
  background-color: #fff;
}
.list>.item {
  position: relative;
  border-top: 2rpx solid #eee;
  height: 200rpx;
  display: flex;
}
.list>.item:first-child {
  border-top: none;
}
.list>.item:last-child {
  border-bottom: 2rpx solid #eee;
}
.list>.item .cover {
  width: 150rpx;
  height: 150rpx;
  padding: 30rpx;
}
.list>.item .cover image {
  width: 150rpx;
  height: 150rpx;
  border-radius: 10rpx;
}
.list>.item .info {
  width: 500rpx;
  padding: 20rpx;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
.list>.item .info .title {
  width: 100%;
  font-size: 32rpx;
}
.list>.item .info .content {
  font-size: 26rpx;
  line-height: 30rpx;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  color: dimgray;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.list>.item .info .footer {
  display: flex;
  justify-content: space-between;
  font-size: 25rpx;
  color: darkgray;
}
.list>.item .info .footer {
  display: flex;
}
.publish {
  position: fixed;
  bottom: 20rpx;
  right: 20rpx;
  width: 180rpx;
  height: 80rpx;
  line-height: 80rpx;
  border-radius: 20rpx;
  text-align: center;
  background-color: #1eb571;
  color: white;
  font-size: 36rpx;
  font-weight: 700;
  box-shadow: 1px 1px 5px #ccc;
}
</style>
<script>
import wepy from 'wepy'
import * as api from '../apis/userInfo'
import * as accountApi from '../apis/account'
import * as chatroomApi from '../apis/chatroom'
import R from '../libs/ramda'
import * as log from '../utils/log'
import NIM from '../utils/nim'
import { jf } from '../config'
import { connect } from 'wepy-redux'
import { setUser } from '../actions/common'
import {
  wx as config
} from '../config'
@connect({
  user(state) {
    return state.common.user
  }
}, {
  setUser
})
export default class UserInfo extends wepy.page {
  config = {
    navigationBarTitleText: '用户详情'
  }
  data = {
    list: [],
    userData: {
      name: '加载中...'
    },
    levelData: '',
    userId: '',
    isStar: null,
    isAdmin: null,
    isBan: null,
    type: null,
  }
  methods = {
    handlePublishTap(e) {
      wepy.navigateTo({
        url: 'publish'
      })
    },
    handleItemTap(e) {
      const id = this.list[e.currentTarget.dataset.index].id
      wepy.navigateTo({
        url: `board?id=${id}`
      })
    },
    async collectUserTap(){
      let userId = +this.userId
      let {id} = this.user.userData
      if (id === userId) {
        wx.showToast({
          title: '您不能关注自己',
          icon: 'loading',
          duration: 2000
        })
      }else{
        await accountApi.userStar(id,userId)
        this.isStar = true
        wx.showToast({
          title: '已关注',
          icon: 'success',
          duration: 2000
        })
        this.$apply()
      }
    },
    async DelCollectUserTap(){
      let userId = +this.userId
      let {id} = this.user.userData
      await accountApi.userUnstar(id,userId)
      this.isStar = false
      wx.showToast({
        title: '已取消关注',
        icon: 'success',
        duration: 2000
      })
      this.$apply()
    },
    async banSomeoneTap(){
      let {accid} = this.user.userData
      let otherAccid = this.otherAccid
      let roomId = this.roomId
      const {jfToken} = this.user
      await chatroomApi.BanSomeone(roomId,accid,otherAccid,jfToken)
      wx.showToast({
        title: '已禁言',
        icon: 'success',
        duration: 2000
      })
      this.isBan = true
      this.$apply()
    },
    async delBanSomeoneTap(){
      let {accid} = this.user.userData
      let roomId = this.roomId
      let otherAccid = this.otherAccid
      await chatroomApi.changeRole(roomId,accid,otherAccid,2)
      wx.showToast({
        title: '已恢复',
        icon: 'success',
        duration: 2000
      })
      this.isBan = false
      this.$apply()
    },
  }
  onShareAppMessage = function (res) {
    return {
      title: this.userData.name+'的个人名片'
    }
  }
  async onLoad(options) {
    const { setUser } = this.methods
    const { code } = await wepy.login()
    const data = await accountApi.getSession(code,config.appId,config.appSecrete)
    const { openid } = data 
    const { userInfo } = await wepy.getUserInfo()
    const password = R.takeLast(5)(openid)
    const user = {
      ...userInfo,
      accid: openid.toLowerCase()
    }

    setUser(user)
      // 如果用户尚未在 网易云注册 则先注册
      try {
        const token = await NIM.login(openid)
        const userId = await accountApi.getToken(openid, password.toLowerCase())
        const {Token} = userId

        if (!Token) {
          throw new Error('user not exist')
        }

        setUser({
          ...this.user,
          jfToken: Token,
          nimToken: token,
          userData: userId
        })
      }catch (e) {
        log.error({
          page: 'chatroom',
          opr: 'init',
          info: e
        })
        wepy.navigateTo({
          url: '/pages/register'
        })
      }

    this.roomId = options.roomId
    this.userId = options.id
    const { jfToken } = this.user
    if (options.type === "MANAGER"||options.type === "CREATOR") {
      this.type = true
    }
    let self = this
    let resData = await api.getOtherUserInfo(options.id,jfToken)
    const {is_stared} = resData
    let {accid} = resData
    this.otherAccid = accid
    this.isAdmin = this.user.userData.is_admin 
    this.isStar = is_stared
    self.userData = resData
    const res = await api.getMsgList(options.id)
    this.list = res.map(item => ({
      id: item.id,
      title: item.title,
      content: item.text,
      createdBy: item.author.name,
      createdAt: item.dateline,
      cover: item.pic_urls[0] ? `${jf.baseServer}${item.pic_urls[0]}` : '',
      read: item.click_num
    }))
    this.$apply()
    //判断用户有没有被禁言
    let userId = this.userId
    let banId = options.banId
    if (banId == null) {
      return false
    }else{
      if (banId.indexOf(userId) === -1) {
        this.isBan = false
      }else{
        this.isBan = true
      }
    }
  }
}
</script>