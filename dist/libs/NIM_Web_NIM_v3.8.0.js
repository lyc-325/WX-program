"use strict";

var _freeze = require('./../npm/babel-runtime/core-js/object/freeze.js');

var _freeze2 = _interopRequireDefault(_freeze);

var _promise = require('./../npm/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty = require('./../npm/babel-runtime/core-js/object/define-property.js');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _setPrototypeOf = require('./../npm/babel-runtime/core-js/object/set-prototype-of.js');

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _getOwnPropertySymbols = require('./../npm/babel-runtime/core-js/object/get-own-property-symbols.js');

var _getOwnPropertySymbols2 = _interopRequireDefault(_getOwnPropertySymbols);

var _getOwnPropertyNames = require('./../npm/babel-runtime/core-js/object/get-own-property-names.js');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _assign = require('./../npm/babel-runtime/core-js/object/assign.js');

var _assign2 = _interopRequireDefault(_assign);

var _create = require('./../npm/babel-runtime/core-js/object/create.js');

var _create2 = _interopRequireDefault(_create);

var _keys = require('./../npm/babel-runtime/core-js/object/keys.js');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('./../npm/babel-runtime/core-js/json/stringify.js');

var _stringify2 = _interopRequireDefault(_stringify);

var _iterator = require('./../npm/babel-runtime/core-js/symbol/iterator.js');

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require('./../npm/babel-runtime/core-js/symbol.js');

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof2 = require('./../npm/babel-runtime/helpers/typeof.js');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!function (e, t) {
	"object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) && "object" == (typeof module === "undefined" ? "undefined" : (0, _typeof3.default)(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) ? exports.NIM = t() : e.NIM = t();
}(undefined, function () {
	return function (e) {
		function t(r) {
			if (n[r]) return n[r].exports;var i = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
		}var n = {};return t.m = e, t.c = n, t.p = "", t(0);
	}([function (e, t, n) {
		"use strict";
		n(56), e.exports = n(115);
	}, function (e, t, n) {
		"use strict";
		var r = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
			return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		} : function (e) {
			return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		},
		    i = n(11),
		    s = n(17),
		    o = n(39),
		    a = n(25);n(68);var c = n(3),
		    u = n(41),
		    l = u.getGlobal(),
		    d = /\s+/;u.shouldDisplayInstallFlashHint = function () {
			var e = i.name.toLowerCase();if ("ie" === e) {
				var t = +i.version || 0;return t = Math.floor(t), 7 === t && !s.Transport.flashsocket.check();
			}return !1;
		}, u.deduplicate = function (e) {
			var t = [];return e.forEach(function (e) {
				t.indexOf(e) === -1 && t.push(e);
			}), t;
		}, u.capFirstLetter = function (e) {
			return e ? (e = "" + e, e.slice(0, 1).toUpperCase() + e.slice(1)) : "";
		}, u.guid = function () {
			var e = function e() {
				return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
			};return function () {
				return e() + e() + e() + e() + e() + e() + e() + e();
			};
		}(), u.extend = function (e, t, n) {
			for (var r in t) {
				"undefined" != typeof e[r] && n !== !0 || (e[r] = t[r]);
			}
		}, u.filterObj = function (e, t) {
			var n = {};return u.isString(t) && (t = t.split(d)), t.forEach(function (t) {
				e.hasOwnProperty(t) && (n[t] = e[t]);
			}), n;
		}, u.simpleClone = function (e) {
			return JSON.parse((0, _stringify2.default)(e));
		}, u.copy = function (e, t) {
			return t = t || {}, e ? ((0, _keys2.default)(e).forEach(function (n) {
				u.exist(e[n]) && (t[n] = e[n]);
			}), t) : t;
		}, u.copyWithNull = function (e, t) {
			return t = t || {}, e ? ((0, _keys2.default)(e).forEach(function (n) {
				(u.exist(e[n]) || u.isnull(e[n])) && (t[n] = e[n]);
			}), t) : t;
		}, u.findObjIndexInArray = function (e, t) {
			e = e || [];var n = t.keyPath || "id",
			    r = -1;return e.some(function (e, i) {
				if (a(e, n) === t.value) return r = i, !0;
			}), r;
		}, u.findObjInArray = function (e, t) {
			var n = u.findObjIndexInArray(e, t);return n === -1 ? null : e[n];
		}, u.mergeObjArray = function () {
			var e = [],
			    t = [].slice.call(arguments, 0, -1),
			    n = arguments[arguments.length - 1];u.isArray(n) && (t.push(n), n = {});var r = n.keyPath = n.keyPath || "id";for (n.sortPath = n.sortPath || r; !e.length && t.length;) {
				e = t.shift() || [], e = e.slice(0);
			}var i;return t.forEach(function (t) {
				t && t.forEach(function (t) {
					i = u.findObjIndexInArray(e, { keyPath: r, value: a(t, r) }), i !== -1 ? e[i] = u.merge({}, e[i], t) : e.push(t);
				});
			}), n.notSort || (e = u.sortObjArray(e, n)), e;
		}, u.cutObjArray = function (e) {
			var t = e.slice(0),
			    n = arguments.length,
			    r = [].slice.call(arguments, 1, n - 1),
			    i = arguments[n - 1];u.isObject(i) || (r.push(i), i = {});var s,
			    o = i.keyPath = i.keyPath || "id";return r.forEach(function (e) {
				u.isArray(e) || (e = [e]), e.forEach(function (e) {
					e && (i.value = a(e, o), s = u.findObjIndexInArray(t, i), s !== -1 && t.splice(s, 1));
				});
			}), t;
		}, u.sortObjArray = function (e, t) {
			t = t || {};var n = t.sortPath || "id";o.insensitive = !!t.insensitive;var r,
			    i,
			    s,
			    c = !!t.desc;return s = u.isFunction(t.compare) ? t.compare : function (e, t) {
				return r = a(e, n), i = a(t, n), c ? o(i, r) : o(r, i);
			}, e.sort(s);
		}, u.emptyFunc = function () {}, u.isEmptyFunc = function (e) {
			return e === u.emptyFunc;
		}, u.notEmptyFunc = function (e) {
			return e !== u.emptyFunc;
		}, u.splice = function (e, t, n) {
			return [].splice.call(e, t, n);
		}, u.reshape2d = function (e, t) {
			if (Array.isArray(e)) {
				u.verifyParamType("type", t, "number");var n = e.length;if (n <= t) return [e];for (var r = Math.ceil(n / t), i = [], s = 0; s < r; s++) {
					i.push(e.slice(s * t, (s + 1) * t));
				}return i;
			}return e;
		}, u.flatten2d = function (e) {
			if (Array.isArray(e)) {
				var t = function () {
					var t = [];return e.forEach(function (e) {
						t = t.concat(e);
					}), { v: t };
				}();if ("object" === ("undefined" == typeof t ? "undefined" : r(t))) return t.v;
			}return e;
		}, u.dropArrayDuplicates = function (e) {
			if (Array.isArray(e)) {
				for (var t = {}, n = []; e.length > 0;) {
					var r = e.shift();t[r] = !0;
				}for (var i in t) {
					t[i] === !0 && n.push(i);
				}return n;
			}return e;
		}, u.onError = function (e) {
			throw new c(e);
		}, u.verifyParamPresent = function (e, t, n) {
			n = n || "";var r = !1;switch (u.typeOf(t)) {case "undefined":case "null":
					r = !0;break;case "string":
					"" === t && (r = !0);break;case "object":
					(0, _keys2.default)(t).length || (r = !0);break;case "array":
					t.length ? t.some(function (e) {
						if (u.notexist(e)) return r = !0, !0;
					}) : r = !0;}r && u.onParamAbsent(n + e);
		}, u.onParamAbsent = function (e) {
			u.onParamError('缺少参数"' + e + '", 请确保参数不是 空字符串、空对象、空数组、null或undefined, 或者数组的内容不是 null/undefined');
		}, u.verifyParamAbsent = function (e, t, n) {
			n = n || "", void 0 !== t && u.onParamPresent(n + e);
		}, u.onParamPresent = function (e) {
			u.onParamError('多余的参数"' + e + '"');
		}, u.verifyParamType = function (e, t, n) {
			var r = u.typeOf(t).toLowerCase();u.isArray(n) || (n = [n]), n = n.map(function (e) {
				return e.toLowerCase();
			});var i = !0;switch (n.indexOf(r) === -1 && (i = !1), r) {case "number":
					isNaN(t) && (i = !1);}i || u.onParamInvalidType(e, n);
		}, u.onParamInvalidType = function (e, t, n) {
			n = n || "", u.isArray(t) ? (t = t.map(function (e) {
				return '"' + e + '"';
			}), t = t.join(", ")) : t = '"' + t + '"', u.onParamError('参数"' + n + e + '"类型错误, 合法的类型包括: [' + t + "]");
		}, u.verifyParamValid = function (e, t, n) {
			u.isArray(n) || (n = [n]), n.indexOf(t) === -1 && u.onParamInvalidValue(e, n);
		}, u.onParamInvalidValue = function (e, t) {
			u.isArray(t) || (t = [t]), t = t.map(function (e) {
				return '"' + e + '"';
			}), u.isArray(t) && (t = t.join(", ")), u.onParamError('参数"' + e + '"值错误, 合法的值包括: [' + t + "]");
		}, u.verifyParamMin = function (e, t, n) {
			t < n && u.onParamError("参数" + e + "的值不能小于" + n);
		}, u.verifyParamMax = function (e, t, n) {
			t > n && u.onParamError("参数" + e + "的值不能大于" + n);
		}, u.verifyArrayMax = function (e, t, n) {
			t.length > n && u.onParamError("参数" + e + "的长度不能大于" + n);
		}, u.verifyEmail = function () {
			var e = /^\S+@\S+$/;return function (t, n) {
				e.test(n) || u.onParamError("参数" + t + "邮箱格式错误, 合法格式必须包含@符号, @符号前后至少要各有一个字符");
			};
		}(), u.verifyTel = function () {
			var e = /^[+\-()\d]+$/;return function (t, n) {
				e.test(n) || u.onParamError("参数" + t + "电话号码格式错误, 合法字符包括+、-、英文括号和数字");
			};
		}(), u.verifyBirth = function () {
			var e = /^(\d{4})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;return function (t, n) {
				e.test(n) || u.onParamError("参数" + t + '生日格式错误, 合法为"yyyy-MM-dd"');
			};
		}(), u.onParamError = function (e) {
			u.onError(e);
		}, u.verifyOptions = function (e, t, n, r) {
			if (e = e || {}, t && (u.isString(t) && (t = t.split(d)), u.isArray(t))) {
				n = void 0 === n || !!n;var i = n ? u.verifyParamPresent : u.verifyParamAbsent;t.forEach(function (t) {
					i.call(u, t, e[t], r);
				});
			}return e;
		}, u.verifyParamAtLeastPresentOne = function (e, t) {
			if (t && (u.isString(t) && (t = t.split(d)), u.isArray(t))) {
				var n = t.some(function (t) {
					return u.exist(e[t]);
				});n || u.onParamError("以下参数[" + t.join(", ") + "]至少需要传入一个");
			}
		}, u.verifyParamPresentJustOne = function (e, t) {
			if (t && (u.isString(t) && (t = t.split(d)), u.isArray(t))) {
				var n = t.reduce(function (t, n) {
					return u.exist(e[n]) && t++, t;
				}, 0);1 !== n && u.onParamError("以下参数[" + t.join(", ") + "]必须且只能传入一个");
			}
		}, u.verifyBooleanWithDefault = function (e, t, n, r) {
			u.undef(n) && (n = !0), d.test(t) && (t = t.split(d)), u.isArray(t) ? t.forEach(function (t) {
				u.verifyBooleanWithDefault(e, t, n, r);
			}) : "undefined" == typeof e[t] ? e[t] = n : u.isBoolean(e[t]) || u.onParamInvalidType(t, "boolean", r);
		}, u.verifyFileInput = function (e) {
			return u.verifyParamPresent("fileInput", e), u.isString(e) && (e = document.getElementById(e), e || u.onParamError("找不到要上传的文件对应的input, 请检查fileInput id")), e.tagName && "input" === e.tagName.toLowerCase() && "file" === e.type.toLowerCase() || u.onParamError("请提供正确的 fileInput, 必须为 file 类型的 input 节点"), e;
		}, u.verifyFileType = function (e) {
			u.verifyParamValid("type", e, u.validFileTypes);
		}, u.verifyCallback = function (e, t) {
			d.test(t) && (t = t.split(d)), u.isArray(t) ? t.forEach(function (t) {
				u.verifyCallback(e, t);
			}) : e[t] ? u.isFunction(e[t]) || u.onParamInvalidType(t, "function") : e[t] = u.emptyFunc;
		}, u.verifyFileUploadCallback = function (e) {
			u.verifyCallback(e, "uploadprogress uploaddone uploaderror uploadcancel");
		}, u.validFileTypes = ["image", "audio", "video", "file"], u.validFileExts = { image: ["bmp", "gif", "jpg", "jpeg", "jng", "png", "webp"], audio: ["mp3", "wav", "aac", "wma", "wmv", "amr", "mp2", "flac", "vorbis", "ac3"], video: ["mp4", "rm", "rmvb", "wmv", "avi", "mpg", "mpeg"] }, u.filterFiles = function (e, t) {
			t = t.toLowerCase();var n,
			    r,
			    i,
			    s = "file" === t,
			    o = [];return [].forEach.call(e, function (e) {
				if (s) o.push(e);else if (n = e.name.slice(e.name.lastIndexOf(".") + 1), r = e.type.split("/"), r[0] && r[1]) {
					i = r[0].toLowerCase();var a = !1;a = i === t || u.validFileExts[t].indexOf(n) !== -1, a && o.push(e);
				}
			}), o;
		};var m = u.supportFormData = u.notundef(l.FormData);u.getFileName = function () {
			return function (e) {
				return e = u.verifyFileInput(e), m ? e.files[0].name : e.value.slice(e.value.lastIndexOf("\\") + 1);
			};
		}(), u.sizeText = function () {
			var e = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "BB"];return function (t) {
				var n,
				    r = 0;do {
					t = Math.floor(100 * t) / 100;var i = e[r];n = t + i, t /= 1024, r++;
				} while (t > 1);return n;
			};
		}(), u.promises2cmds = function (e) {
			return e.map(function (e) {
				return e.cmd;
			});
		}, u.objs2accounts = function (e) {
			return e.map(function (e) {
				return e.account;
			});
		}, u.teams2ids = function (e) {
			return e.map(function (e) {
				return e.teamId;
			});
		}, u.objs2ids = function (e) {
			return e.map(function (e) {
				return e.id;
			});
		}, u.getMaxUpdateTime = function (e) {
			var t = e.map(function (e) {
				return +e.updateTime;
			});return Math.max.apply(Math, t);
		}, u.genCheckUniqueFunc = function (e, t) {
			var n = [],
			    r = {};return e = e || "id", t = t || 1e3, function (i) {
				var s;return n.length >= t && (s = n.shift(), delete r[s]), s = a(i, e), !r[s] && (r[s] = !0, n.push(s), !0);
			};
		}, e.exports = u, n(71);
	}, function (e, t, n) {
		(function (t, r) {
			/*!
   * @overview es6-promise - a tiny implementation of Promises/A+.
   * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
   * @license   Licensed under MIT license
   *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
   * @version   4.0.5
   */
			!function (t, n) {
				e.exports = n();
			}(this, function () {
				"use strict";
				function e(e) {
					return "function" == typeof e || "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && null !== e;
				}function i(e) {
					return "function" == typeof e;
				}function s(e) {
					G = e;
				}function o(e) {
					J = e;
				}function a() {
					return function () {
						return t.nextTick(m);
					};
				}function c() {
					return "undefined" != typeof z ? function () {
						z(m);
					} : d();
				}function u() {
					var e = 0,
					    t = new Z(m),
					    n = document.createTextNode("");return t.observe(n, { characterData: !0 }), function () {
						n.data = e = ++e % 2;
					};
				}function l() {
					var e = new MessageChannel();return e.port1.onmessage = m, function () {
						return e.port2.postMessage(0);
					};
				}function d() {
					var e = setTimeout;return function () {
						return e(m, 1);
					};
				}function m() {
					for (var e = 0; e < K; e += 2) {
						var t = ne[e],
						    n = ne[e + 1];t(n), ne[e] = void 0, ne[e + 1] = void 0;
					}K = 0;
				}function f() {
					try {
						var e = n(84);return z = e.runOnLoop || e.runOnContext, c();
					} catch (e) {
						return d();
					}
				}function p(e, t) {
					var n = arguments,
					    r = this,
					    i = new this.constructor(h);void 0 === i[ie] && F(i);var s = r._state;return s ? !function () {
						var e = n[s - 1];J(function () {
							return A(s, i, e, r._result);
						});
					}() : O(r, i, e, t), i;
				}function y(e) {
					var t = this;if (e && "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && e.constructor === t) return e;var n = new t(h);return w(n, e), n;
				}function h() {}function g() {
					return new TypeError("You cannot resolve a promise with itself");
				}function v() {
					return new TypeError("A promises callback cannot return that same promise.");
				}function b(e) {
					try {
						return e.then;
					} catch (error) {
						return ce.error = error, ce;
					}
				}function M(e, t, n, r) {
					try {
						e.call(t, n, r);
					} catch (e) {
						return e;
					}
				}function T(e, t, n) {
					J(function (e) {
						var r = !1,
						    i = M(n, t, function (n) {
							r || (r = !0, t !== n ? w(e, n) : I(e, n));
						}, function (t) {
							r || (r = !0, P(e, t));
						}, "Settle: " + (e._label || " unknown promise"));!r && i && (r = !0, P(e, i));
					}, e);
				}function k(e, t) {
					t._state === oe ? I(e, t._result) : t._state === ae ? P(e, t._result) : O(t, void 0, function (t) {
						return w(e, t);
					}, function (t) {
						return P(e, t);
					});
				}function S(e, t, n) {
					t.constructor === e.constructor && n === p && t.constructor.resolve === y ? k(e, t) : n === ce ? P(e, ce.error) : void 0 === n ? I(e, t) : i(n) ? T(e, t, n) : I(e, t);
				}function w(t, n) {
					t === n ? P(t, g()) : e(n) ? S(t, n, b(n)) : I(t, n);
				}function C(e) {
					e._onerror && e._onerror(e._result), E(e);
				}function I(e, t) {
					e._state === se && (e._result = t, e._state = oe, 0 !== e._subscribers.length && J(E, e));
				}function P(e, t) {
					e._state === se && (e._state = ae, e._result = t, J(C, e));
				}function O(e, t, n, r) {
					var i = e._subscribers,
					    s = i.length;e._onerror = null, i[s] = t, i[s + oe] = n, i[s + ae] = r, 0 === s && e._state && J(E, e);
				}function E(e) {
					var t = e._subscribers,
					    n = e._state;if (0 !== t.length) {
						for (var r = void 0, i = void 0, s = e._result, o = 0; o < t.length; o += 3) {
							r = t[o], i = t[o + n], r ? A(n, r, i, s) : i(s);
						}e._subscribers.length = 0;
					}
				}function x() {
					this.error = null;
				}function _(e, t) {
					try {
						return e(t);
					} catch (e) {
						return ue.error = e, ue;
					}
				}function A(e, t, n, r) {
					var s = i(n),
					    o = void 0,
					    a = void 0,
					    c = void 0,
					    u = void 0;if (s) {
						if (o = _(n, r), o === ue ? (u = !0, a = o.error, o = null) : c = !0, t === o) return void P(t, v());
					} else o = r, c = !0;t._state !== se || (s && c ? w(t, o) : u ? P(t, a) : e === oe ? I(t, o) : e === ae && P(t, o));
				}function j(e, t) {
					try {
						t(function (t) {
							w(e, t);
						}, function (t) {
							P(e, t);
						});
					} catch (e) {
						P(e, e);
					}
				}function R() {
					return le++;
				}function F(e) {
					e[ie] = le++, e._state = void 0, e._result = void 0, e._subscribers = [];
				}function N(e, t) {
					this._instanceConstructor = e, this.promise = new e(h), this.promise[ie] || F(this.promise), V(t) ? (this._input = t, this.length = t.length, this._remaining = t.length, this._result = new Array(this.length), 0 === this.length ? I(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(), 0 === this._remaining && I(this.promise, this._result))) : P(this.promise, U());
				}function U() {
					return new Error("Array Methods must be provided an Array");
				}function D(e) {
					return new N(this, e).promise;
				}function L(e) {
					var t = this;return new t(V(e) ? function (n, r) {
						for (var i = e.length, s = 0; s < i; s++) {
							t.resolve(e[s]).then(n, r);
						}
					} : function (e, t) {
						return t(new TypeError("You must pass an array to race."));
					});
				}function B(e) {
					var t = this,
					    n = new t(h);return P(n, e), n;
				}function q() {
					throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
				}function W() {
					throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
				}function H(e) {
					this[ie] = R(), this._result = this._state = void 0, this._subscribers = [], h !== e && ("function" != typeof e && q(), this instanceof H ? j(this, e) : W());
				}function $() {
					var e = void 0;if ("undefined" != typeof r) e = r;else if ("undefined" != typeof self) e = self;else try {
						e = Function("return this")();
					} catch (e) {
						throw new Error("polyfill failed because global object is unavailable in this environment");
					}var t = e.Promise;if (t) {
						var n = null;try {
							n = Object.prototype.toString.call(t.resolve());
						} catch (e) {}if ("[object Promise]" === n && !t.cast) return;
					}e.Promise = H;
				}var X = void 0;X = Array.isArray ? Array.isArray : function (e) {
					return "[object Array]" === Object.prototype.toString.call(e);
				};var V = X,
				    K = 0,
				    z = void 0,
				    G = void 0,
				    J = function J(e, t) {
					ne[K] = e, ne[K + 1] = t, K += 2, 2 === K && (G ? G(m) : re());
				},
				    Y = "undefined" != typeof window ? window : void 0,
				    Q = Y || {},
				    Z = Q.MutationObserver || Q.WebKitMutationObserver,
				    ee = "undefined" == typeof self && "undefined" != typeof t && "[object process]" === {}.toString.call(t),
				    te = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel,
				    ne = new Array(1e3),
				    re = void 0;re = ee ? a() : Z ? u() : te ? l() : void 0 === Y ? f() : d();var ie = Math.random().toString(36).substring(16),
				    se = void 0,
				    oe = 1,
				    ae = 2,
				    ce = new x(),
				    ue = new x(),
				    le = 0;return N.prototype._enumerate = function () {
					for (var e = this.length, t = this._input, n = 0; this._state === se && n < e; n++) {
						this._eachEntry(t[n], n);
					}
				}, N.prototype._eachEntry = function (e, t) {
					var n = this._instanceConstructor,
					    r = n.resolve;if (r === y) {
						var i = b(e);if (i === p && e._state !== se) this._settledAt(e._state, t, e._result);else if ("function" != typeof i) this._remaining--, this._result[t] = e;else if (n === H) {
							var s = new n(h);S(s, e, i), this._willSettleAt(s, t);
						} else this._willSettleAt(new n(function (t) {
							return t(e);
						}), t);
					} else this._willSettleAt(r(e), t);
				}, N.prototype._settledAt = function (e, t, n) {
					var r = this.promise;r._state === se && (this._remaining--, e === ae ? P(r, n) : this._result[t] = n), 0 === this._remaining && I(r, this._result);
				}, N.prototype._willSettleAt = function (e, t) {
					var n = this;O(e, void 0, function (e) {
						return n._settledAt(oe, t, e);
					}, function (e) {
						return n._settledAt(ae, t, e);
					});
				}, H.all = D, H.race = L, H.resolve = y, H.reject = B, H._setScheduler = s, H._setAsap = o, H._asap = J, H.prototype = { constructor: H, then: p, "catch": function _catch(e) {
						return this.then(null, e);
					} }, H.polyfill = $, H.Promise = H, H;
			});
		}).call(t, n(80), function () {
			return this;
		}());
	}, function (e, t) {
		"use strict";
		function n(e, t) {
			var n = this;n.message = e, n.code = t, n.time = new Date(), n.timetag = +n.time;
		}n.prototype = (0, _create2.default)(Error.prototype), n.prototype.name = "NIMError", n.prototype.appendMessage = function (e) {
			var t = this;t.message ? e && (t.message += "(" + e + ")") : t.message = e;
		};var r = { 201: "客户端版本不对, 需升级sdk", 302: "用户名或密码错误, 请检查appKey和token是否有效, account和token是否匹配", 403: "非法操作或没有权限", 404: "对象(用户/群/聊天室)不存在", 405: "参数长度过长", 408: "客户端请求超时", 414: "参数错误", 415: "服务不可用/没有聊天室服务器可分配", 416: "频率控制", 417: "重复操作", 422: "帐号被禁用", 500: "服务器内部错误", 501: "数据库操作失败", 503: "服务器繁忙", 508: "删除有效期过了", 509: "已失效", 7101: "被拉黑", 801: "群人数达到上限", 802: "没有权限", 803: "群不存在或未发生变化", 804: "用户不在群里面", 805: "群类型不匹配", 806: "创建群数量达到限制", 807: "群成员状态不对", 809: "已经在群里", 997: "协议已失效", 998: "解包错误", 999: "打包错误", 9102: "通道失效", 9103: "已经在其他端接听/拒绝过这通电话", 11001: "对方离线, 通话不可送达", 13002: "聊天室状态异常", 13003: "在黑名单中", 13004: "在禁言名单中", 13006: "聊天室处于整体禁言状态,只有管理员能发言", Connect_Failed: "无法建立连接, 请确保能 ping/telnet 到云信服务器; 如果是IE8/9, 请确保项目部署在 HTTPS 环境下", Error_Internet_Disconnected: "网断了", Error_Connection_is_not_Established: "连接未建立", Error_Connection_Socket_State_not_Match: "socket状态不对", Error_Timeout: "超时", Param_Error: "参数错误", No_File_Selected: "请选择文件", Wrong_File_Type: "文件类型错误", File_Too_Large: "文件过大", Cross_Origin_Iframe: "不能获取跨域Iframe的内容", Not_Support: "不支持", NO_DB: "无数据库", DB: "数据库错误", Still_In_Team: "还在群里", Session_Exist: "会话已存在", Session_Not_Exist: "会话不存在", Error_Unknown: "未知错误", Operation_Canceled: "操作取消" };[200, 406, 808, 810].forEach(function (e) {
			r[e] = null;
		}), n.genError = function (e) {
			var t = r[e];return void 0 === t && (t = "操作失败"), null === t ? null : new n(t, e);
		}, n.multiInstance = function () {
			return new n("不允许初始化多个实例", "Not_Allow_Multi_Instance");
		}, n.newNetworkError = function () {
			var e = "Error_Internet_Disconnected";return new n(r[e], e);
		}, n.newConnectError = function (e) {
			var t = "Connect_Failed";return new n(r[t] || e, t);
		}, n.newConnectionError = function () {
			var e = "Error_Connection_is_not_Established";return new n(r[e], e);
		}, n.newSocketStateError = function () {
			var e = "Error_Connection_Socket_State_not_Match";return new n(r[e], e);
		}, n.newTimeoutError = function () {
			var e = "Error_Timeout";return new n(r[e], e);
		}, n.newFrequencyControlError = function () {
			var e = 416,
			    t = new n(r[e], e);return t.from = "local", t;
		}, n.newParamError = function (e) {
			var t = "Param_Error";return new n(e || r[t], t);
		}, n.newNoFileError = function (e) {
			var t = "No_File_Selected";return new n(e || r[t], t);
		}, n.newWrongFileTypeError = function (e) {
			var t = "Wrong_File_Type";return new n(e || r[t], t);
		}, n.newFileTooLargeError = function (e) {
			var t = "File_Too_Large";return new n(e || r[t], t);
		}, n.newCORSIframeError = function () {
			var e = "Cross_Origin_Iframe";return new n(r[e], e);
		}, n.newSupportError = function (e, t) {
			return new n("不支持" + e, "Not_Support_" + t);
		}, n.newSupportDBError = function () {
			return n.newSupportError("数据库", "DB");
		}, n.noDBError = function () {
			var e = "NO_DB";return new n(r[e], e);
		}, n.newDBError = function () {
			var e = "DB";return new n(r[e], e);
		}, n.newUnknownError = function () {
			var e = "Error_Unknown";return new n(r[e], e);
		}, n.stillInTeamError = function () {
			var e = "Still_In_Team";return new n(r[e], e);
		}, n.sessionExist = function () {
			var e = "Session_Exist";return new n(r[e], e);
		}, n.sessionNotExist = function () {
			var e = "Session_Not_Exist";return new n(r[e], e);
		}, n.cancel = function () {
			var e = "Operation_Canceled";return new n(r[e], e);
		}, e.exports = n;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;u.verifyOptions(e, "appKey account token"), u.verifyCallback(e, ["onconnect", "onerror", "onwillreconnect", "ondisconnect", "onloginportschange", "onmyinfo", "onblacklist", "onmutelist", "onfriends", "onusers", "onteams", "onsessions", "onroamingmsgs", "onofflinemsgs", "onofflinefiltermsgs", "onroamingsysmsgs", "onofflinesysmsgs", "onofflinefiltersysmsgs", "onofflinecustomsysmsgs", "onofflinefiltercustomsysmsgs", "onsysmsgunread", "onsyncdone", "onteammembers", "onsyncteammembersdone", "onmsg", "onsysmsg", "oncustomsysmsg", "onupdatemyinfo", "onupdateuser", "onupdateteammember", "onCreateTeam", "onUpdateTeam", "onAddTeamMembers", "onRemoveTeamMembers", "onUpdateTeamManagers", "onDismissTeam", "onTransferTeam", "onUpdateTeamMembersMute", "onupdatesession", "onupdatesysmsgunread", "onupdatesysmsg", "onsynccreateteam", "onsyncmarkinblacklist", "onsyncmarkinmutelist", "onsyncfriendaction", "shouldIgnoreNotification", "onPushNotificationMultiportConfig", "onPushNotificationMultiportConfigUpdate"]), t.db = e.api.db = new s({ logger: e.logger }), o.call(t, e);
		}var i = n(2).Promise,
		    s = n(8),
		    o = n(10),
		    a = n(3),
		    c = n(6),
		    u = n(1),
		    l = u.undef,
		    d = n(45),
		    m = n(14).getInstance("IM"),
		    f = n(20),
		    p = o.fn,
		    y = r.fn = r.prototype = (0, _create2.default)(p);y.init = function () {
			var e = this;p.init.call(e), e.socketUrls = [], e.parser = m, e.syncing = !0, e.hasSynced = !1, e.hasSyncedTeamMembers = !1, e.syncPromiseArray = [], e.syncResult = {}, e.syncTeamMembersPromiseArray = [], e.syncTeamMembersResult = {}, e.timetags = {}, e.sysMsgUnread = f.completeUnread({}), e.resetUnsettledMsgs(), e.resetUnsettledSysMsgs(), e.msgPromise = i.resolve(), e.sysMsgPromise = i.resolve(), e.sessionSet = {}, e.msgReceiptTasks = {}, e.userSet = {}, e.pushNotificationMultiportConfig = d.getDefaultConfig();
		}, y.reset = function () {
			var e = this;p.reset.call(e);var t = e.options;e.db.reset(t.db), l(t.lbsUrl) && (t.lbsUrl = c.lbsUrl), e.resetAutoMarkRead();
		}, y.resetAutoMarkRead = function () {
			var e = this.options;u.verifyBooleanWithDefault(e, "autoMarkRead", !0);
		}, y.resetUnsettledMsgs = function () {
			var e = this;e.unhandledMsgs = [], e.unupdatedMsgs = [];
		}, y.resetUnsettledSysMsgs = function () {
			var e = this;e.unhandledSysMsgs = [], e.unupdatedSysMsgs = [];
		}, y.packetFromSync = function (e) {
			return !e.obj || !!e.obj.sync;
		}, y.onDBError = function (e) {
			var t = a.newDBError();t.event = e, this.notifyError(t);
		}, e.exports = r, n(143), n(141), n(153), n(156), n(146), n(155), n(150), n(147), n(149), n(148), n(154), n(151), n(152), n(142), n(145), n(144);
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;return t.subType = "im", e.Protocol = s, e.Message = a, e.constructor = r, t.init(e);
		}var i = n(7),
		    s = n(4),
		    o = n(6),
		    a = n(129),
		    c = n(14).getInstance("IM");r.Protocol = s, r.parser = c, r.use = i.use, r.getInstance = i.getInstance, r.genInstanceName = function (e) {
			return "NIM-account-" + e.account;
		};var u = r.fn = r.prototype = (0, _create2.default)(i.prototype);r.info = u.info = o.info, e.exports = r, n(94), n(90), n(99), n(103), n(93), n(102), n(100), n(95), n(101), n(89), n(96), n(97), n(88), n(91), n(98), n(92);
	}, function (e, t, n) {
		"use strict";
		var r = "'b424a0449d7e69c3151be16b9d098142cbf1c7c0",
		    i = "b424a04'",
		    s = "3.8.0",
		    o = "2.0.0.524",
		    a = 35,
		    c = 1,
		    u = "https://lbs.netease.im/lbs/webconf.jsp",
		    l = "development" === { WEIXIN_APP: !0 }.NODE_ENV ? 6e3 : 42e3,
		    d = { info: { hash: r, shortHash: i, version: s, sdkVersion: a, protocolVersion: c }, agentVersion: o, lbsUrl: u, connectTimeout: l, xhrTimeout: l, socketTimeout: l, reconnectionDelay: 656.25, reconnectionDelayMax: l, reconnectionJitter: .1, heartbeatInterval: 18e4, cmdTimeout: l };d.formatSocketUrl = function (e) {
			var t = e.url,
			    n = e.secure,
			    r = n ? "https" : "http";return t.indexOf("http") === -1 ? r + "://" + t : t;
		}, d.fileServerUrl = "https://nos.netease.com", d.replaceUrl = "http://nos.netease.im", d.genUploadUrl = function (e) {
			return d.uploadUrl ? d.uploadUrl + "/" + e : d.fileServerUrl + "/" + e;
		}, d.genDownloadUrl = function (e, t) {
			return d.downloadUrl ? d.replaceUrl + "/" + e + "/" + t : d.fileServerUrl + "/" + e + "/" + t;
		}, e.exports = d;
	}, function (e, t, n) {
		"use strict";
		function r() {}var i = n(76),
		    s = n(2).Promise,
		    o = n(1),
		    a = o.notundef,
		    c = n(69),
		    u = n(6),
		    l = {};r.getInstance = function (e) {
			var t = this;o.verifyOptions(e, "account");var n = t.genInstanceName(e),
			    i = l[n];return i ? r.updateInstance(i, e) : i = l[n] = new t(e), i;
		}, r.updateInstance = function (e, t) {
			e.setOptions(t), e.connect();
		};var d = r.fn = r.prototype = (0, _create2.default)(new i());d.init = function (e) {
			var t = this;o.verifyOptions(e, "account");var n = t.account = e.account = e.account + "",
			    i = e.constructor,
			    s = i.genInstanceName(e),
			    a = l[s];if (e._disableSingleton && (a = null), a) return r.updateInstance(a, e), a;t.name = s, l[s] = t, t.logger = e.logger = new c({ debug: e.debug, logFunc: e.logFunc, prefix: t.subType }), e.api = t;var d = t.protocol = new e.Protocol(e);return d.name = "Protocol-" + s, d.account = n, d.api = t, d.message = t.message = new e.Message({ account: n }), t.options = o.copy(e), e.uploadUrl && e.downloadUrl && (u.uploadUrl = e.uploadUrl, u.downloadUrl = e.downloadUrl), t.reset(), t;
		}, d.reset = function () {
			var e = this,
			    t = e.options;o.verifyBooleanWithDefault(t, "exifOrientation", !0);
		}, d.setOptions = function (e) {
			this.reset(), this.protocol.setOptions(e);
		}, d.processCallback = function (e, t) {
			m(e, t);
		}, d.processCallbackPromise = function (e, t) {
			var n = new s(function (n, r) {
				m(e, t, !0, n, r);
			});return n;
		};var m = function m(e, t, n, r, i) {
			o.verifyCallback(e, "done"), e.callback = function (s, c) {
				var u = e.callback.options;if (c = c || u, t && (c = u), o.isFunction(e.cbaop)) {
					var l = e.cbaop(s, c);a(l) && (c = l);
				}var d = e.done;o.isObject(c) && (delete c.done, delete c.cb, delete c.callback), n ? s ? i(s) : r(c) : d(s, c);
			}, e.callback.options = o.copy(e);
		};d.processPs = function (e) {
			o.notexist(e.ps) && (e.ps = "");
		}, d.processCustom = function (e) {
			o.notexist(e.custom) && (e.custom = "");
		}, d.sendCmd = function () {
			this.protocol.sendCmd.apply(this.protocol, arguments);
		}, d.sendCmdWithResp = function (e, t, n) {
			this.sendCmd(e, t, function (e, t, r) {
				o.isFunction(n) && (e ? n(e, t) : n(null, r));
			});
		}, d.cbAndSendCmd = function (e, t) {
			var n = this.processCallbackPromise(t);return this.sendCmd(e, t), n;
		}, r.use = function (e, t) {
			e && e.install && o.isFunction(e.install) && e.install(this, t);
		}, e.exports = r, n(51), n(53), n(54), n(55), n(52);
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			h = e, l.set("db", e, c);
		}function i(e) {
			this.concurrency = 0, this.pendingTasks = [], this.queue = s.resolve(), this.logger = e.logger;
		}var s = n(2).Promise,
		    o = n(11),
		    a = n(25),
		    c = n(42),
		    u = n(1),
		    l = n(47),
		    d = n(3),
		    m = d.newSupportDBError,
		    f = d.noDBError,
		    p = n(104),
		    y = "nim-",
		    h = !1,
		    g = u.getGlobal();if (r(!!g.indexedDB), "IE" === o.name && r(!1), "Microsoft Edge" === o.name && r(!1), "Safari" === o.name) {
			var v = parseInt(o.version.split(".")[0], 10);v < 9 && r(!1), r(!1);
		}var b = i.fn = i.prototype;b.reset = u.emptyFunc, h && (b.reset = function (e) {
			this.enable = e !== !1;
		}), b.addTask = function (e) {
			var t = this;return new s(function (n, r) {
				function i(e) {
					t.concurrency--;var n = t.pendingTasks.shift();n && t.addTask(n), e();
				}return t.concurrency < 100 ? (t.concurrency++, e().then(function (t) {
					i(function () {
						n(t), e.resolve && e.resolve(t);
					});
				}, function (t) {
					i(function () {
						r(t), e.reject && e.reject(t);
					});
				})) : (e.resolve || (e.resolve = n, e.reject = r), void t.pendingTasks.push(e));
			});
		}, b.init = function (e) {
			var t = this;return t.addTask(function () {
				return t.enable ? t.server ? s.resolve() : (t.name = y + e, c.open({ server: t.name, version: p.version, schema: p.schema }).then(function (e) {
					t.logger.warn("init db", t.name), t.server = e;
				}, function (e) {
					throw r(!1), t.server = null, t.name = null, e;
				})) : s.reject(m());
			});
		}, b.destroy = function () {
			var e = this;return e.addTask(function () {
				return e.enable ? e.server ? c.remove(e.name).then(function () {
					e.logger.warn("delete db", e.name), e.server = null, e.name = null;
				}) : s.resolve() : s.reject(m());
			});
		}, b.clear = function () {
			var e = this;return e.addTask(function () {
				return e.enable ? e.server ? e.server.clear("timetag").then(function () {
					var t = [].slice.call(e.server.getIndexedDB().objectStoreNames),
					    n = [];if (t.forEach(function (t) {
						n.push(e.server.clear(t));
					}), n.length) return s.all(n).then(function () {
						e.logger.warn("clear db", e.name);
					});
				}) : s.resolve() : s.reject(m());
			});
		}, b.close = function () {
			var e = this;e.server && (e.server.close(), e.server = null, e.name = null);
		}, b.remove = function (e, t) {
			var n = this;return n.addTask(function () {
				return n.enable ? n.server ? (u.isArray(t) || (t = [t]), n.server.remove(e, t).then(function () {
					n.logger.warn("delete", e, 1 === t.length ? t[0] : t);
				})) : s.reject(f()) : s.reject(m());
			});
		}, b.put = function (e, t) {
			var n = this;return n.addTask(function () {
				return n.enable ? n.server ? (u.isArray(t) || (t = [t]), n.server.update(e, t).then(function (t) {
					var r = ["put", e],
					    i = p.keyPath(e),
					    s = [];return i && (t.forEach(function (e) {
						s.push(a(e, i));
					}), r.push(1 === s.length ? s[0] : s)), r.push(1 === t.length ? t[0] : t), n.logger.warn.apply(n.logger.warn, r), t;
				})) : s.reject(f()) : s.reject(m());
			});
		}, b.modifyOrPut = function (e) {
			var t = this,
			    n = e.table,
			    r = u.copy(e.obj),
			    i = e.key,
			    s = e.modifyObjWhenPut,
			    o = u.copy(r);return delete o[i], t.getOne(n, null, r[i], { modifyObj: o }).then(function (e) {
				return e ? (t.logger.warn("update table " + n, r), e) : (r = u.merge(r, s), t.put(n, r).then(function (e) {
					return e[0];
				}));
			});
		}, b.updateAndDelete = function (e, t, n) {
			var r = this;return r.addTask(function () {
				return r.enable ? r.server ? r.server.updateAndDelete(e, t, n) : s.reject(f()) : s.reject(m());
			});
		}, b.get = function (e, t) {
			var n = this;return n.addTask(function () {
				return n.enable ? n.server ? n.server.get(e, t) : s.reject(f()) : s.reject(m());
			});
		}, b.getAll = function (e, t) {
			var n = this;return n.addTask(function () {
				return n.enable ? n.server ? (t = t || {}, t.keys = t.keys === !0, t.desc = t.desc === !0, t.distinct = t.distinct === !0, n.server.query(e, t.index).filter(t.filter).keys(t.keys).desc(t.desc).limit(t.limit).distinct(t.distinct).map(t.mapper).modify(t.modifyObj).execute()) : s.reject(f()) : s.reject(m());
			});
		}, b.getOnly = function (e, t, n, r) {
			var i = this;return i.addTask(function () {
				if (!i.enable) throw m();if (!i.server) throw f();return r = r || {}, r.keys = r.keys === !0, r.desc = r.desc === !0, r.distinct = r.distinct === !0, r.remove = r.remove === !0, i.server.query(e, t).only(n).filter(r.filter).keys(r.keys).desc(r.desc).limit(r.limit).distinct(r.distinct).map(r.mapper).modify(r.modifyObj).remove(r.remove).execute();
			});
		}, b.getOne = function () {
			var e = this;return e.getOnly.apply(e, arguments).then(function (e) {
				return e[0];
			});
		}, b.clearTable = function (e) {
			var t = this;return t.addTask(function () {
				if (!t.enable) throw m();if (!t.server) throw f();return t.server.clear(e);
			});
		}, b.checkDB = function () {
			var e = this;if (!e.enable) throw m();if (!e.server) throw f();
		}, e.exports = i, n(106), n(112), n(108), n(105), n(111), n(113), n(107), n(110), n(109);
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = {};i.init = function () {
			i.deviceId = r.guid();
		}, i.init(), i.clientTypeMap = { 1: "Android", 2: "iOS", 4: "PC", 8: "WindowsPhone", 16: "Web", 32: "Server" }, e.exports = i;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;i.undef(e.secure) && (e.secure = !0), t.options = i.copy(e), t.init(), t.connect();
		}var i = n(1),
		    s = n(6),
		    o = n(3),
		    a = r.fn = r.prototype;a.init = function () {
			var e = this;e.logger = e.options.logger, e.cmdTaskArray = [], e.timerMap = {}, e.cmdCallbackMap = {}, e.cmdContentMap = {}, e.initConnect(), e.reset();
		}, a.reset = function () {
			var e = this;e.resetConnect();
		}, a.setOptions = function (e) {
			var t = this,
			    n = t.options,
			    r = (0, _keys2.default)(n),
			    s = r.indexOf("account");s !== -1 && r.splice(s, 1), e = i.filterObj(e, r), t.options = i.merge(n, e), t.reset();
		}, a.sendCmd = function (e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
			    n = arguments[2],
			    r = this;r.heartbeat(), "heartbeat" !== e && r.logger.log("Protocol Command    " + e + "\t", t);var i = e;e = r.parser.createCmd(e, t);var s,
			    o = e.SER;t = t || {}, r.cmdContentMap[o] = t, t.single && (delete t.single, s = (0, _keys2.default)(t), 1 === s.length && (r.cmdContentMap[o] = t[s[0]])), t.NOTSTORE && (s = t.NOTSTORE.split(" "), s.forEach(function (e) {
				delete t[e];
			}), delete t.NOTSTORE), n = n || t.callback, n && (r.cmdCallbackMap[o] = n), r.cmdTaskArray.push({ cmdName: i, cmd: e }), r.startCmdTaskTimer();
		}, a.startCmdTaskTimer = function () {
			var e = this;e.cmdTaskTimer || (e.cmdTaskTimer = setTimeout(function () {
				var t = e.cmdTaskArray.shift();e.cmdTaskTimer = null, t && e.executeCmdTask(t), e.cmdTaskArray.length && e.startCmdTaskTimer();
			}, 0));
		}, a.executeCmdTask = function (e) {
			var t = this,
			    n = e.cmdName,
			    r = e.cmd,
			    i = r.SER;t.isFrequencyControlled(n) ? (t.logger.warn("hit frequency control " + n), t.markCallbackInvalid(i, o.newFrequencyControlError())) : t.isConnected() ? t.doSendCmd(r) : t.markCallbackInvalid(i, o.newSocketStateError());
		}, a.isFrequencyControlled = function (e) {
			var t = this.frequencyControlMap && this.frequencyControlMap[e];if (t) {
				if (Date.now() < t.from + t.duration) return !0;delete this.frequencyControlMap[e];
			}
		}, a.doSendCmd = function (e) {
			var t = this,
			    n = e.SER;t.timerMap[n] = setTimeout(function () {
				t.markCallbackInvalid(n, o.newTimeoutError());
			}, s.cmdTimeout);try {
				t.socket.send((0, _stringify2.default)(e));
			} catch (e) {
				t.markCallbackInvalid(n, o.newSocketStateError()), t.onDisconnect(!0);
			}
		}, a.getObjWithSer = function (e) {
			var t = this,
			    n = t.cmdContentMap[e];return delete t.cmdContentMap[e], n && i.copy(n);
		}, a.getCallbackWithSer = function (e) {
			var t = this,
			    n = t.cmdCallbackMap[e];return delete t.cmdCallbackMap[e], n;
		}, a.getTimerWithSer = function (e) {
			var t = this,
			    n = t.timerMap[e];return delete t.timerMap[e], n;
		}, a.clearTimerWithSer = function (e) {
			var t = this,
			    n = t.getTimerWithSer(e);n && clearTimeout(n);
		}, a.markCallbackInvalid = function (e, t) {
			var n = this;n.getObjWithSer(e), n.clearTimerWithSer(e);var r = n.getCallbackWithSer(e);if (r) {
				var i = r.options;setTimeout(function () {
					r(t || o.newUnknownError(), i);
				}, 0);
			}
		}, a.markAllCallbackInvalid = function (e) {
			var t = this;(0, _keys2.default)(this.cmdCallbackMap).forEach(function (n) {
				t.markCallbackInvalid(n, e);
			});
		}, a.getPacketObj = function (e) {
			var t = null;if (e && e.raw) {
				var n = e.raw.ser;i.notundef(n) && (t = this.getObjWithSer(n));
			}return t;
		}, a.callPacketAckCallback = function (e) {
			var t = this;if (e && e.raw) {
				var n = e.raw.ser;if (i.notundef(n)) {
					t.clearTimerWithSer(n);var r = t.getCallbackWithSer(n);r && (e.promise ? e.promise.then(function () {
						r(e.error, e.obj);
					}, function (n) {
						var i = o.newDBError();i.event = n, t.logger.error("promise error", i, n), r(i, e.obj, e.content);
					}) : r(e.error, e.obj, e.content));
				}
			}
		}, a.onMessage = function (e) {
			var t = this;t.heartbeat();var n = t.parser.parseResponse(e);n.notFound && t.logger.log("no config for", n.notFound), n.frequencyControlDuration && (t.logger.warn("server frequency control " + n.cmd), t.frequencyControlMap = t.frequencyControlMap || {}, t.frequencyControlMap[n.cmd] = { from: +new Date(), duration: n.frequencyControlDuration }), n.obj = t.getPacketObj(n), "heartbeat" !== n.cmd && t.logger.log("Protocol Response   " + n.cmd + "\t", n, n.error || (n.content ? n.content : ""));var r = "process" + i.capFirstLetter(n.service);t[r] && t[r](n), t.callPacketAckCallback(n);
		}, a.onMiscError = function (e, t, n) {
			e && (e.appendMessage(n), this.notifyError(e, t));
		}, a.notifyError = function (e, t) {
			var n = this;if (n.isConnected()) {
				var r = ["onError " + n.name, e];e.event && r.push(e.event), t && r.push(t), n.logger.error.apply(n.logger.error, r), n.options.onerror(e, t);
			}
		}, a.emitAPI = function (e) {
			var t = e.type,
			    n = e.obj;this.api.emit(t, n);
		}, e.exports = r, n(60), n(59), n(61), n(62);
	}, function (e, t, n) {
		var r;(function (e, i) {
			(function () {
				"use strict";
				function s(e) {
					return e = String(e), e.charAt(0).toUpperCase() + e.slice(1);
				}function o(e, t, n) {
					var r = { "10.0": "10", 6.4: "10 Technical Preview", 6.3: "8.1", 6.2: "8", 6.1: "Server 2008 R2 / 7", "6.0": "Server 2008 / Vista", 5.2: "Server 2003 / XP 64-bit", 5.1: "XP", 5.01: "2000 SP1", "5.0": "2000", "4.0": "NT", "4.90": "ME" };return t && n && /^Win/i.test(e) && !/^Windows Phone /i.test(e) && (r = r[/[\d.]+$/.exec(e)]) && (e = "Windows " + r), e = String(e), t && n && (e = e.replace(RegExp(t, "i"), n)), e = c(e.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]);
				}function a(e, t) {
					var n = -1,
					    r = e ? e.length : 0;if ("number" == typeof r && r > -1 && r <= k) for (; ++n < r;) {
						t(e[n], n, e);
					} else u(e, t);
				}function c(e) {
					return e = p(e), /^(?:webOS|i(?:OS|P))/.test(e) ? e : s(e);
				}function u(e, t) {
					for (var n in e) {
						I.call(e, n) && t(e[n], n, e);
					}
				}function l(e) {
					return null == e ? s(e) : P.call(e).slice(8, -1);
				}function d(e, t) {
					var n = null != e ? (0, _typeof3.default)(e[t]) : "number";return !(/^(?:boolean|number|string|undefined)$/.test(n) || "object" == n && !e[t]);
				}function m(e) {
					return String(e).replace(/([ -])(?!$)/g, "$1?");
				}function f(e, t) {
					var n = null;return a(e, function (r, i) {
						n = t(n, r, i, e);
					}), n;
				}function p(e) {
					return String(e).replace(/^ +| +$/g, "");
				}function y(e) {
					function t(t) {
						return f(t, function (t, n) {
							return t || RegExp("\\b" + (n.pattern || m(n)) + "\\b", "i").exec(e) && (n.label || n);
						});
					}function n(t) {
						return f(t, function (t, n, r) {
							return t || (n[G] || n[/^[a-z]+(?: +[a-z]+\b)*/i.exec(G)] || RegExp("\\b" + m(r) + "(?:\\b|\\w*\\d)", "i").exec(e)) && r;
						});
					}function r(t) {
						return f(t, function (t, n) {
							return t || RegExp("\\b" + (n.pattern || m(n)) + "\\b", "i").exec(e) && (n.label || n);
						});
					}function i(t) {
						return f(t, function (t, n) {
							var r = n.pattern || m(n);return !t && (t = RegExp("\\b" + r + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(e)) && (t = o(t, r, n.label || n)), t;
						});
					}function s(t) {
						return f(t, function (t, n) {
							var r = n.pattern || m(n);return !t && (t = RegExp("\\b" + r + " *\\d+[.\\w_]*", "i").exec(e) || RegExp("\\b" + r + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(e)) && ((t = String(n.label && !RegExp(r, "i").test(n.label) ? n.label : t).split("/"))[1] && !/[\d.]+/.test(t[0]) && (t[0] += " " + t[1]), n = n.label || n, t = c(t[0].replace(RegExp(r, "i"), n).replace(RegExp("; *(?:" + n + "[_-])?", "i"), " ").replace(RegExp("(" + n + ")[-_.]?(\\w)", "i"), "$1 $2"))), t;
						});
					}function a(t) {
						return f(t, function (t, n) {
							return t || (RegExp(n + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(e) || 0)[1] || null;
						});
					}function h() {
						return this.description || "";
					}var b = g,
					    M = e && "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "String" != l(e);M && (b = e, e = null);var T = b.navigator || {},
					    k = T.userAgent || "";e || (e = k);var C,
					    I,
					    O = M || w == v,
					    E = M ? !!T.likeChrome : /\bChrome\b/.test(e) && !/internal|\n/i.test(P.toString()),
					    x = "Object",
					    _ = M ? x : "ScriptBridgingProxyObject",
					    A = M ? x : "Environment",
					    j = M && b.java ? "JavaPackage" : l(b.java),
					    R = M ? x : "RuntimeObject",
					    F = /\bJava/.test(j) && b.java,
					    N = F && l(b.environment) == A,
					    U = F ? "a" : "α",
					    D = F ? "b" : "β",
					    L = b.document || {},
					    B = b.operamini || b.opera,
					    q = S.test(q = M && B ? B["[[Class]]"] : l(B)) ? q : B = null,
					    W = e,
					    H = [],
					    $ = null,
					    X = e == k,
					    V = X && B && "function" == typeof B.version && B.version(),
					    K = t([{ label: "EdgeHTML", pattern: "Edge" }, "Trident", { label: "WebKit", pattern: "AppleWebKit" }, "iCab", "Presto", "NetFront", "Tasman", "KHTML", "Gecko"]),
					    z = r(["Adobe AIR", "Arora", "Avant Browser", "Breach", "Camino", "Epiphany", "Fennec", "Flock", "Galeon", "GreenBrowser", "iCab", "Iceweasel", "K-Meleon", "Konqueror", "Lunascape", "Maxthon", { label: "Microsoft Edge", pattern: "Edge" }, "Midori", "Nook Browser", "PaleMoon", "PhantomJS", "Raven", "Rekonq", "RockMelt", "SeaMonkey", { label: "Silk", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Sleipnir", "SlimBrowser", { label: "SRWare Iron", pattern: "Iron" }, "Sunrise", "Swiftfox", "WebPositive", "Opera Mini", { label: "Opera Mini", pattern: "OPiOS" }, "Opera", { label: "Opera", pattern: "OPR" }, "Chrome", { label: "Chrome Mobile", pattern: "(?:CriOS|CrMo)" }, { label: "Firefox", pattern: "(?:Firefox|Minefield)" }, { label: "Firefox for iOS", pattern: "FxiOS" }, { label: "IE", pattern: "IEMobile" }, { label: "IE", pattern: "MSIE" }, "Safari"]),
					    G = s([{ label: "BlackBerry", pattern: "BB10" }, "BlackBerry", { label: "Galaxy S", pattern: "GT-I9000" }, { label: "Galaxy S2", pattern: "GT-I9100" }, { label: "Galaxy S3", pattern: "GT-I9300" }, { label: "Galaxy S4", pattern: "GT-I9500" }, "Google TV", "Lumia", "iPad", "iPod", "iPhone", "Kindle", { label: "Kindle Fire", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Nexus", "Nook", "PlayBook", "PlayStation 3", "PlayStation 4", "PlayStation Vita", "TouchPad", "Transformer", { label: "Wii U", pattern: "WiiU" }, "Wii", "Xbox One", { label: "Xbox 360", pattern: "Xbox" }, "Xoom"]),
					    J = n({ Apple: { iPad: 1, iPhone: 1, iPod: 1 }, Archos: {}, Amazon: { Kindle: 1, "Kindle Fire": 1 }, Asus: { Transformer: 1 }, "Barnes & Noble": { Nook: 1 }, BlackBerry: { PlayBook: 1 }, Google: { "Google TV": 1, Nexus: 1 }, HP: { TouchPad: 1 }, HTC: {}, LG: {}, Microsoft: { Xbox: 1, "Xbox One": 1 }, Motorola: { Xoom: 1 }, Nintendo: { "Wii U": 1, Wii: 1 }, Nokia: { Lumia: 1 }, Samsung: { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 }, Sony: { "PlayStation 4": 1, "PlayStation 3": 1, "PlayStation Vita": 1 } }),
					    Y = i(["Windows Phone", "Android", "CentOS", { label: "Chrome OS", pattern: "CrOS" }, "Debian", "Fedora", "FreeBSD", "Gentoo", "Haiku", "Kubuntu", "Linux Mint", "OpenBSD", "Red Hat", "SuSE", "Ubuntu", "Xubuntu", "Cygwin", "Symbian OS", "hpwOS", "webOS ", "webOS", "Tablet OS", "Linux", "Mac OS X", "Macintosh", "Mac", "Windows 98;", "Windows "]);if (K && (K = [K]), J && !G && (G = s([J])), (C = /\bGoogle TV\b/.exec(G)) && (G = C[0]), /\bSimulator\b/i.test(e) && (G = (G ? G + " " : "") + "Simulator"), "Opera Mini" == z && /\bOPiOS\b/.test(e) && H.push("running in Turbo/Uncompressed mode"), "IE" == z && /\blike iPhone OS\b/.test(e) ? (C = y(e.replace(/like iPhone OS/, "")), J = C.manufacturer, G = C.product) : /^iP/.test(G) ? (z || (z = "Safari"), Y = "iOS" + ((C = / OS ([\d_]+)/i.exec(e)) ? " " + C[1].replace(/_/g, ".") : "")) : "Konqueror" != z || /buntu/i.test(Y) ? J && "Google" != J && (/Chrome/.test(z) && !/\bMobile Safari\b/i.test(e) || /\bVita\b/.test(G)) || /\bAndroid\b/.test(Y) && /^Chrome/.test(z) && /\bVersion\//i.test(e) ? (z = "Android Browser", Y = /\bAndroid\b/.test(Y) ? Y : "Android") : "Silk" == z ? (/\bMobi/i.test(e) || (Y = "Android", H.unshift("desktop mode")), /Accelerated *= *true/i.test(e) && H.unshift("accelerated")) : "PaleMoon" == z && (C = /\bFirefox\/([\d.]+)\b/.exec(e)) ? H.push("identifying as Firefox " + C[1]) : "Firefox" == z && (C = /\b(Mobile|Tablet|TV)\b/i.exec(e)) ? (Y || (Y = "Firefox OS"), G || (G = C[1])) : z && !(C = !/\bMinefield\b/i.test(e) && /\b(?:Firefox|Safari)\b/.exec(z)) || (z && !G && /[\/,]|^[^(]+?\)/.test(e.slice(e.indexOf(C + "/") + 8)) && (z = null), (C = G || J || Y) && (G || J || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(Y)) && (z = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(Y) ? Y : C) + " Browser")) : Y = "Kubuntu", V || (V = a(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\d.]+$))", "Version", m(z), "(?:Firefox|Minefield|NetFront)"])), (C = "iCab" == K && parseFloat(V) > 3 && "WebKit" || /\bOpera\b/.test(z) && (/\bOPR\b/.test(e) ? "Blink" : "Presto") || /\b(?:Midori|Nook|Safari)\b/i.test(e) && !/^(?:Trident|EdgeHTML)$/.test(K) && "WebKit" || !K && /\bMSIE\b/i.test(e) && ("Mac OS" == Y ? "Tasman" : "Trident") || "WebKit" == K && /\bPlayStation\b(?! Vita\b)/i.test(z) && "NetFront") && (K = [C]), "IE" == z && (C = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(e) || 0)[1]) ? (z += " Mobile", Y = "Windows Phone " + (/\+$/.test(C) ? C : C + ".x"), H.unshift("desktop mode")) : /\bWPDesktop\b/i.test(e) ? (z = "IE Mobile", Y = "Windows Phone 8.x", H.unshift("desktop mode"), V || (V = (/\brv:([\d.]+)/.exec(e) || 0)[1])) : "IE" != z && "Trident" == K && (C = /\brv:([\d.]+)/.exec(e)) && (z && H.push("identifying as " + z + (V ? " " + V : "")), z = "IE", V = C[1]), X) {
						if (d(b, "global")) {
							if (F && (C = F.lang.System, W = C.getProperty("os.arch"), Y = Y || C.getProperty("os.name") + " " + C.getProperty("os.version")), O && d(b, "system") && (C = [b.system])[0]) {
								Y || (Y = C[0].os || null);
							} else "object" == (0, _typeof3.default)(b.process) && !b.process.browser && (C = b.process) ? (z = "Node.js", W = C.arch, Y = C.platform, V = /[\d.]+/.exec(C.version)[0]) : N && (z = "Rhino");
						} else l(C = b.runtime) == _ ? (z = "Adobe AIR", Y = C.flash.system.Capabilities.os) : l(C = b.phantom) == R ? (z = "PhantomJS", V = (C = C.version || null) && C.major + "." + C.minor + "." + C.patch) : "number" == typeof L.documentMode && (C = /\bTrident\/(\d+)/i.exec(e)) && (V = [V, L.documentMode], (C = +C[1] + 4) != V[1] && (H.push("IE " + V[1] + " mode"), K && (K[1] = ""), V[1] = C), V = "IE" == z ? String(V[1].toFixed(1)) : V[0]);Y = Y && c(Y);
					}V && (C = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(V) || /(?:alpha|beta)(?: ?\d)?/i.exec(e + ";" + (X && T.appMinorVersion)) || /\bMinefield\b/i.test(e) && "a") && ($ = /b/i.test(C) ? "beta" : "alpha", V = V.replace(RegExp(C + "\\+?$"), "") + ("beta" == $ ? D : U) + (/\d+\+?/.exec(C) || "")), "Fennec" == z || "Firefox" == z && /\b(?:Android|Firefox OS)\b/.test(Y) ? z = "Firefox Mobile" : "Maxthon" == z && V ? V = V.replace(/\.[\d.]+/, ".x") : /\bXbox\b/i.test(G) ? (Y = null, "Xbox 360" == G && /\bIEMobile\b/.test(e) && H.unshift("mobile mode")) : !/^(?:Chrome|IE|Opera)$/.test(z) && (!z || G || /Browser|Mobi/.test(z)) || "Windows CE" != Y && !/Mobi/i.test(e) ? "IE" == z && X && null === b.external ? H.unshift("platform preview") : (/\bBlackBerry\b/.test(G) || /\bBB10\b/.test(e)) && (C = (RegExp(G.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(e) || 0)[1] || V) ? (C = [C, /BB10/.test(e)], Y = (C[1] ? (G = null, J = "BlackBerry") : "Device Software") + " " + C[0], V = null) : this != u && "Wii" != G && (X && B || /Opera/.test(z) && /\b(?:MSIE|Firefox)\b/i.test(e) || "Firefox" == z && /\bOS X (?:\d+\.){2,}/.test(Y) || "IE" == z && (Y && !/^Win/.test(Y) && V > 5.5 || /\bWindows XP\b/.test(Y) && V > 8 || 8 == V && !/\bTrident\b/.test(e))) && !S.test(C = y.call(u, e.replace(S, "") + ";")) && C.name && (C = "ing as " + C.name + ((C = C.version) ? " " + C : ""), S.test(z) ? (/\bIE\b/.test(C) && "Mac OS" == Y && (Y = null), C = "identify" + C) : (C = "mask" + C, z = q ? c(q.replace(/([a-z])([A-Z])/g, "$1 $2")) : "Opera", /\bIE\b/.test(C) && (Y = null), X || (V = null)), K = ["Presto"], H.push(C)) : z += " Mobile", (C = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(e) || 0)[1]) && (C = [parseFloat(C.replace(/\.(\d)$/, ".0$1")), C], "Safari" == z && "+" == C[1].slice(-1) ? (z = "WebKit Nightly", $ = "alpha", V = C[1].slice(0, -1)) : V != C[1] && V != (C[2] = (/\bSafari\/([\d.]+\+?)/i.exec(e) || 0)[1]) || (V = null), C[1] = (/\bChrome\/([\d.]+)/i.exec(e) || 0)[1], 537.36 == C[0] && 537.36 == C[2] && parseFloat(C[1]) >= 28 && "WebKit" == K && (K = ["Blink"]), X && (E || C[1]) ? (K && (K[1] = "like Chrome"), C = C[1] || (C = C[0], C < 530 ? 1 : C < 532 ? 2 : C < 532.05 ? 3 : C < 533 ? 4 : C < 534.03 ? 5 : C < 534.07 ? 6 : C < 534.1 ? 7 : C < 534.13 ? 8 : C < 534.16 ? 9 : C < 534.24 ? 10 : C < 534.3 ? 11 : C < 535.01 ? 12 : C < 535.02 ? "13+" : C < 535.07 ? 15 : C < 535.11 ? 16 : C < 535.19 ? 17 : C < 536.05 ? 18 : C < 536.1 ? 19 : C < 537.01 ? 20 : C < 537.11 ? "21+" : C < 537.13 ? 23 : C < 537.18 ? 24 : C < 537.24 ? 25 : C < 537.36 ? 26 : "Blink" != K ? "27" : "28")) : (K && (K[1] = "like Safari"), C = C[0], C = C < 400 ? 1 : C < 500 ? 2 : C < 526 ? 3 : C < 533 ? 4 : C < 534 ? "4+" : C < 535 ? 5 : C < 537 ? 6 : C < 538 ? 7 : C < 601 ? 8 : "8"), K && (K[1] += " " + (C += "number" == typeof C ? ".x" : /[.+]/.test(C) ? "" : "+")), "Safari" == z && (!V || parseInt(V) > 45) && (V = C)), "Opera" == z && (C = /\bzbov|zvav$/.exec(Y)) ? (z += " ", H.unshift("desktop mode"), "zvav" == C ? (z += "Mini", V = null) : z += "Mobile", Y = Y.replace(RegExp(" *" + C + "$"), "")) : "Safari" == z && /\bChrome\b/.exec(K && K[1]) && (H.unshift("desktop mode"), z = "Chrome Mobile", V = null, /\bOS X\b/.test(Y) ? (J = "Apple", Y = "iOS 4.3+") : Y = null), V && 0 == V.indexOf(C = /[\d.]+$/.exec(Y)) && e.indexOf("/" + C + "-") > -1 && (Y = p(Y.replace(C, ""))), K && !/\b(?:Avant|Nook)\b/.test(z) && (/Browser|Lunascape|Maxthon/.test(z) || "Safari" != z && /^iOS/.test(Y) && /\bSafari\b/.test(K[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(z) && K[1]) && (C = K[K.length - 1]) && H.push(C), H.length && (H = ["(" + H.join("; ") + ")"]), J && G && G.indexOf(J) < 0 && H.push("on " + J), G && H.push((/^on /.test(H[H.length - 1]) ? "" : "on ") + G), Y && (C = / ([\d.+]+)$/.exec(Y), I = C && "/" == Y.charAt(Y.length - C[0].length - 1), Y = { architecture: 32, family: C && !I ? Y.replace(C[0], "") : Y, version: C ? C[1] : null, toString: function toString() {
							var e = this.version;return this.family + (e && !I ? " " + e : "") + (64 == this.architecture ? " 64-bit" : "");
						} }), (C = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(W)) && !/\bi686\b/i.test(W) ? (Y && (Y.architecture = 64, Y.family = Y.family.replace(RegExp(" *" + C), "")), z && (/\bWOW64\b/i.test(e) || X && /\w(?:86|32)$/.test(T.cpuClass || T.platform) && !/\bWin64; x64\b/i.test(e)) && H.unshift("32-bit")) : Y && /^OS X/.test(Y.family) && "Chrome" == z && parseFloat(V) >= 39 && (Y.architecture = 64), e || (e = null);var Q = {};return Q.description = e, Q.layout = K && K[0], Q.manufacturer = J, Q.name = z, Q.prerelease = $, Q.product = G, Q.ua = e, Q.version = z && V, Q.os = Y || { architecture: null, family: null, version: null, toString: function toString() {
							return "null";
						} }, Q.parse = y, Q.toString = h, Q.version && H.unshift(V), Q.name && H.unshift(z), Y && z && (Y != String(Y).split(" ")[0] || Y != z.split(" ")[0] && !G) && H.push(G ? "(" + Y + ")" : "on " + Y), H.length && (Q.description = H.join(" ")), Q;
				}var h = { "function": !0, object: !0 },
				    g = h[typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)] && window || this,
				    v = g,
				    b = h[typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)] && t,
				    M = h[typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)] && e && !e.nodeType && e,
				    T = b && M && "object" == (typeof i === "undefined" ? "undefined" : (0, _typeof3.default)(i)) && i;!T || T.global !== T && T.window !== T && T.self !== T || (g = T);var k = Math.pow(2, 53) - 1,
				    S = /\bOpera/,
				    w = this,
				    C = Object.prototype,
				    I = C.hasOwnProperty,
				    P = C.toString,
				    O = y();g.platform = O, r = function () {
					return O;
				}.call(t, n, t, e), !(void 0 !== r && (e.exports = r));
			}).call(this);
		}).call(t, n(40)(e), function () {
			return this;
		}());
	},, function (e, t, n) {
		"use strict";
		function r(e) {
			i.verifyOptions(e, "scene to type"), i.verifyParamValid("scene", e.scene, f);var t = this;t.scene = d[e.scene], t.to = "" + e.to, t.type = p[e.type], t.resend = e.resend ? 1 : 0, e.resend ? (i.verifyOptions(e, "idClient"), t.idClient = e.idClient) : t.idClient = i.guid(), o(e.text) && (t.body = "" + e.text), o(e.custom) && (t.custom = "" + e.custom), o(e.pushContent) && (t.pushContent = "" + e.pushContent), o(e.pushPayload) && (t.pushPayload = "" + e.pushPayload);var n = e.apns;if (o(n) && "team" === e.scene) {
				var r = n.accounts;o(r) && i.verifyParamType("apns.accounts", r, "array"), t.apnsAccounts = r ? (0, _stringify2.default)(r) : l, t.apnsContent = n.content || e.pushContent || "", i.verifyBooleanWithDefault(n, "forcePush", !0, "options.apns"), t.apnsForcePush = n.forcePush ? 1 : 0;
			}o(e.isHistoryable) && (t.isHistoryable = e.isHistoryable ? 1 : 0), o(e.isRoamingable) && (t.isRoamingable = e.isRoamingable ? 1 : 0), o(e.isSyncable) && (t.isSyncable = e.isSyncable ? 1 : 0), o(e.cc) && (t.cc = e.cc ? 1 : 0), o(e.isPushable) && (t.isPushable = e.isPushable ? 1 : 0), o(e.isOfflinable) && (t.isOfflinable = e.isOfflinable ? 1 : 0), o(e.isUnreadable) && (t.isUnreadable = e.isUnreadable ? 1 : 0), o(e.needPushNick) && (t.needPushNick = e.needPushNick ? 1 : 0), o(e.yidunEnable) && (t.yidunEnable = e.yidunEnable ? 1 : 0), o(e.antiSpamContent) && (t.antiSpamContent = "" + e.antiSpamContent);
		}var i = n(1),
		    s = i.undef,
		    o = i.notundef,
		    a = i.exist,
		    c = n(18),
		    u = n(48),
		    l = "#%@all@%#",
		    d = { p2p: 0, team: 1 },
		    m = { 0: "p2p", 1: "team" },
		    f = (0, _keys2.default)(d),
		    p = u.typeMap,
		    y = u.validTypes;r.prototype.getScene = function () {
			return m[this.scene];
		}, r.getScene = function (e) {
			var t = e.scene;return m[t] || t;
		}, r.getType = u.getType, r.reverse = function (e) {
			var t = m[e.scene],
			    n = { scene: t || e.scene, from: e.from, fromNick: e.fromNick, fromClientType: c.reverseType(e.fromClientType), fromDeviceId: e.fromDeviceId, to: "" + e.to, time: +e.time, type: r.getType(e), text: a(e.body) ? e.body : "", isHistoryable: s(e.isHistoryable) || 1 === +e.isHistoryable, isRoamingable: s(e.isRoamingable) || 1 === +e.isRoamingable, isSyncable: s(e.isSyncable) || 1 === +e.isSyncable, cc: s(e.cc) || 1 === +e.cc, isPushable: s(e.isPushable) || 1 === +e.isPushable, isOfflinable: s(e.isOfflinable) || 1 === +e.isOfflinable, isUnreadable: s(e.isUnreadable) || 1 === +e.isUnreadable, needPushNick: s(e.needPushNick) || 1 === +e.needPushNick, isLocal: !1 };if (o(e.isMuted) && (n.isMuted = 1 === +e.isMuted), o(e.resend) && (n.resend = 1 === +e.resend), o(e.idClient) && (n.idClient = e.idClient), o(e.idServer) && (n.idServer = "" + e.idServer), o(e.userUpdateTime) && (n.userUpdateTime = +e.userUpdateTime), o(e.custom) && (n.custom = e.custom), o(e.pushContent) && (n.pushContent = e.pushContent), o(e.pushPayload) && (n.pushPayload = e.pushPayload), o(e.apnsAccounts)) {
				if (n.apns = {}, e.apnsAccounts !== l) {
					var i = e.apnsAccounts;try {
						n.apns.accounts = JSON.parse(i);
					} catch (error) {
						n.apns.accounts = [];
					}
				}n.apns.content = e.apnsContent || "", n.apns.forcePush = 1 === +e.apnsForcePush;
			}return n.status = e.status || "success", o(e.filter) && (n.filter = e.filter), n;
		}, r.setExtra = function (e, t) {
			e.target = r.getMsgTarget(e, t), e.sessionId = e.scene + "-" + e.target, u.setFlow(e, t);
		}, r.getMsgTarget = function (e, t) {
			return "p2p" === e.scene ? e.to === t ? e.from : e.to : "team" === e.scene ? e.to : void 0;
		}, r.deduplication = function (e) {
			var t,
			    n = {},
			    r = [];return e.forEach(function (e) {
				t = e.idClient, n[t] || (n[t] = !0, r.push(e));
			}), r;
		}, r.sortMsgs = function (e) {
			return e = e.slice(0), i.sortObjArray(e, { sortPath: "time" }), e;
		}, r.getLastMsg = function (e) {
			return e = r.sortMsgs(e), e[e.length - 1];
		}, r.getLastNotIgnoredMsg = function (e) {
			e = r.sortMsgs(e);for (var t = null, n = e.length - 1; n >= 0; n--) {
				if (t = e[n], !t.ignore) return t;
			}return null;
		}, r.getMaxTimetag = function (e) {
			return r.getLastMsg(e).time;
		}, r.validScenes = f, r.validTypes = y, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			this.mixin(e);
		}var i = n(1),
		    s = i.undef,
		    o = n(3),
		    a = n(46),
		    c = n(65),
		    u = n(67),
		    l = n(63),
		    d = n(64),
		    m = n(66);r.prototype.mixin = function (e) {
			var t = this;this.configMap = this.configMap || {}, ["idMap", "cmdConfig", "packetConfig"].forEach(function (n) {
				t.configMap[n] = i.merge({}, t.configMap[n], e.configMap && e.configMap[n]);
			}), ["serializeMap", "unserializeMap"].forEach(function (n) {
				t[n] = i.merge({}, t[n], e[n]);
			});
		};var f = new r({ configMap: a, serializeMap: c, unserializeMap: u }),
		    p = new r({ configMap: l, serializeMap: d, unserializeMap: m });r.getInstance = function (e) {
			switch (e) {case "IM":
					return f;case "Chatroom":
					return p;}
		}, r.prototype.createCmd = function () {
			var e = 1;return function (t, n) {
				var r = this,
				    i = this.configMap.cmdConfig[t];return t = { SID: i.sid, CID: i.cid, SER: "heartbeat" === t ? 0 : e++ }, i.params && (t.Q = [], i.params.forEach(function (e) {
					var i = e.type,
					    o = e.name,
					    a = e.entity,
					    c = n[o];if (!s(c)) {
						switch (i) {case "PropertyArray":
								i = "ArrayMable", c = c.map(function (e) {
									return { t: "Property", v: r.serialize(e, a) };
								});break;case "Property":
								c = r.serialize(c, o);break;case "bool":
								c = c ? "true" : "false";}t.Q.push({ t: i, v: c });
					}
				})), t;
			};
		}(), r.prototype.parseResponse = function (e) {
			var t = this,
			    n = JSON.parse(e),
			    r = { raw: n, rawStr: e, error: o.genError(n.code) },
			    s = t.configMap.packetConfig[n.sid + "_" + n.cid];if (!s) return r.notFound = { sid: n.sid, cid: n.cid }, r;var a = n.r,
			    c = "notify" === s.service && !s.cmd;if (r.isNotify = c, c) {
				var u = n.r[1].headerPacket;if (s = t.configMap.packetConfig[u.sid + "_" + u.cid], a = n.r[1].body, !s) return r.notFound = { sid: u.sid, cid: u.cid }, r;
			}if (r.service = s.service, r.cmd = s.cmd, r.error && 416 === r.error.code) {
				var l = a[0];l && (r.frequencyControlDuration = 1e3 * l);
			}var d = !1;return r.error && s.trivialErrorCodes && (d = s.trivialErrorCodes.indexOf(r.error.code) !== -1), r.error && !d || !s.response || (r.content = {}, s.response.forEach(function (e, s) {
				var o = a[s];if (!i.undef(o)) {
					var u = e.type,
					    l = e.name,
					    d = e.entity || l;switch (u) {case "Property":
							r.content[l] = t.unserialize(o, d);break;case "PropertyArray":
							r.content[l] = [], o.forEach(function (e) {
								r.content[l].push(t.unserialize(e, d));
							});break;case "KVArray":
							r.content[l] = o;break;case "long":case "Long":case "byte":case "Byte":case "Number":
							r.content[l] = +o;break;default:
							r.content[l] = o;}if (c && "msg" === l || "sysMsg" === l) {
						var m = r.content[l];i.isObject(m) && !m.idServer && (m.idServer = "" + n.r[0], m.type && "8" === m.type && m.deletedIdClient && (m.idServer = m.deletedIdClient));
					}
				}
			})), r;
		}, r.prototype.serialize = function (e, t) {
			var n = this.serializeMap[t],
			    r = {};for (var i in n) {
				e.hasOwnProperty(i) && (r[n[i]] = e[i]);
			}return r;
		}, r.prototype.unserialize = function (e, t) {
			var n = this.unserializeMap[t],
			    r = {};if (e) for (var i in n) {
				e.hasOwnProperty(i) && (r[n[i]] = e[i]);
			}return r;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;i.verifyOptions(e, "teamId"), i.verifyParamAtLeastPresentOne(e, "nickInTeam muteTeam custom"), t.teamId = e.teamId, s(e.account) && (t.account = e.account), s(e.nickInTeam) && (t.nickInTeam = e.nickInTeam), s(e.muteTeam) && (t.bits = 0, e.muteTeam && (t.bits += 1)), s(e.mute) && (t.mute = e.mute ? 1 : 0), s(e.custom) && (t.custom = "" + e.custom);
		}var i = n(1),
		    s = i.notundef,
		    o = i.fillPropertyWithDefault,
		    a = { 0: "normal", 1: "owner", 2: "manager" };r.reverse = function (e) {
			var t = i.copy(e);if (s(t.teamId) && (t.teamId = "" + t.teamId), s(t.type) && (t.type = a[t.type]), s(t.active) && (t.active = 1 === +t.active), s(t.valid) && (t.valid = 1 === +t.valid), s(t.mute) && (t.mute = 1 === +t.mute), s(t.joinTime) && (t.joinTime = +t.joinTime), s(t.updateTime) && (t.updateTime = +t.updateTime), s(t.bits)) {
				var n = t.bits;delete t.bits, t.muteTeam = !!(1 & n);
			}return s(t.teamId) && s(t.account) && (t.id = r.genId(t.teamId, t.account)), t;
		}, r.reverseMembers = function (e) {
			return e.map(function (e) {
				return r.reverse(e);
			});
		}, r.fillProperties = function (e) {
			var t = o(e, "mute", !1),
			    n = o(e, "custom", "");return t || n;
		}, r.genId = function (e, t) {
			return e + "-" + t;
		}, r.accounts2ids = function (e, t) {
			return t.map(function (t) {
				return r.genId(e, t);
			});
		}, r.assembleMembers = function (e, t) {
			return i.isArray(t) || (t = [t]), t.map(function (t) {
				return r.assembleMember(e, t);
			});
		}, r.assembleMember = function (e, t) {
			return { id: r.genId(e.teamId, t), account: t, teamId: e.teamId, type: "normal", nickInTeam: "", muteTeam: !1, mute: !1, joinTime: e.memberUpdateTime, updateTime: e.memberUpdateTime, active: !0, valid: !0 };
		}, r.assembleOwner = function (e) {
			var t = r.assembleMember(e, e.owner);return t.type = "owner", t;
		}, e.exports = r;
	}, function (e, t, n) {
		!function (t, r) {
			e.exports = r(n(41));
		}(this, function (e) {
			return function (e) {
				function t(r) {
					if (n[r]) return n[r].exports;var i = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
				}var n = {};return t.m = e, t.c = n, t.p = "", t(0);
			}([function (e, t, n) {
				"use strict";
				var r = n(1),
				    i = n(11),
				    s = n(12);r.json = i, r.upload = s, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = e.mode,
					    n = f,
					    r = m.getGlobal();return r.FormData || (t = "iframe"), "iframe" === t && (n = e.upload ? p : y), new n(e);
				}function i(e) {
					var t = e.upload = "multipart/form-data" === (e.headers || m.o)["Content-Type"],
					    n = !1;try {
						var i = (location.protocol + "//" + location.host).toLowerCase(),
						    s = m.url2origin(e.url);n = i !== s;
					} catch (error) {}return e.cors = n, t || n || e.mode ? r(e) : new f(e);
				}function s(e) {
					var t = h[e];t && (t.req.destroy(), delete h[e]);
				}function o(e, t) {
					t = { data: t };var n = e.result.headers;return n && (t.headers = e.req.header(n)), t;
				}function a(e, t, n) {
					var r = h[e];if (r) {
						"onload" === t && r.result && (n = o(r, n)), s(e);var i = { type: t, result: n };g(i), i.stopped || r[t](i.result);
					}
				}function c(e, t) {
					a(e, "onload", t);
				}function u(e, t) {
					a(e, "onerror", t);
				}function l(e, t) {
					var n = m.genUrlSep(e);return t = t || "", m.isObject(t) && (t = m.object2query(t)), t && (e += n + t), e;
				}function d(e, t) {
					t = t || {};var n = m.uniqueID(),
					    r = { result: t.result, onload: t.onload || m.f, onerror: t.onerror || m.f };h[n] = r, t.onload = c.bind(null, n), t.onerror = u.bind(null, n), t.query && (e = l(e, t.query));var s = t.method || "";return s && !/get/i.test(s) || !t.data || (e = l(e, t.data), t.data = null), t.url = e, r.req = i(t), n;
				}var m = n(2),
				    f = n(3),
				    p = n(7),
				    y = n(10),
				    h = {},
				    g = m.f;d.filter = function (e) {
					m.isFunction(e) && (g = e);
				}, d.abort = function (e) {
					var t = h[e];t && t.req.abort();
				}, e.exports = d;
			}, function (t, n) {
				t.exports = e;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;e.onuploading && t.on("uploading", e.onuploading), o.call(t, e);
				}var i = n(2),
				    s = n(4),
				    o = n(5),
				    a = o.prototype,
				    c = r.prototype = (0, _create2.default)(a);c.doSend = function () {
					var e = this,
					    t = e.options,
					    n = t.headers,
					    r = e.xhr = new XMLHttpRequest();if ("multipart/form-data" === n["Content-Type"]) {
						delete n["Content-Type"], r.upload.onprogress = e.onProgress.bind(e), r.upload.onload = e.onProgress.bind(e);var o = t.data;t.data = new window.FormData(), o && s.getKeys(o, t.putFileAtEnd).forEach(function (e) {
							var n = o[e];n.tagName && "INPUT" === n.tagName.toUpperCase() ? "file" === n.type && [].forEach.call(n.files, function (e) {
								t.data.append(i.dataset(n, "name") || n.name || e.name || "file-" + i.uniqueID(), e);
							}) : t.data.append(e, n);
						});
					}r.onreadystatechange = e.onStateChange.bind(e), 0 !== t.timeout && (e.timer = setTimeout(e.onTimeout.bind(e), t.timeout)), r.open(t.method, t.url, !t.sync), (0, _keys2.default)(n).forEach(function (e) {
						r.setRequestHeader(e, n[e]);
					}), t.cookie && "withCredentials" in r && (r.withCredentials = !0), r.send(t.data), e.afterSend();
				}, c.onProgress = function (e) {
					e.lengthComputable && e.loaded <= e.total && this.emit("uploading", e);
				}, c.onStateChange = function () {
					var e = this,
					    t = e.xhr;4 === t.readyState && e.onLoad({ status: t.status, result: t.responseText || "" });
				}, c.getResponseHeader = function (e) {
					var t = this.xhr;return t ? t.getResponseHeader(e) : "";
				}, c.destroy = function () {
					var e = this;clearTimeout(e.timer);try {
						e.xhr.onreadystatechange = i.f, e.xhr.abort();
					} catch (e) {}a.destroy.call(e);
				}, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				var r = n(2),
				    i = {};i.isFileInput = function (e) {
					var t = r.getGlobal();return e.tagName && "INPUT" === e.tagName.toUpperCase() || t.Blob && e instanceof t.Blob;
				}, i.getKeys = function (e, t) {
					var n = (0, _keys2.default)(e);return t && n.sort(function (t, n) {
						var r = i.isFileInput(e[t]),
						    s = i.isFileInput(e[n]);return r === s ? 0 : r ? 1 : -1;
					}), n;
				}, e.exports = i;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;e.onload && t.once("load", e.onload), e.onerror && t.once("error", e.onerror), e.onbeforesend && t.once("beforesend", e.onbeforesend), e.onaftersend && t.once("aftersend", e.onaftersend), e = t.options = i.fetch({ method: "GET", url: "", sync: !1, data: null, headers: {}, cookie: !1, timeout: 6e4, type: "text", form: null, input: null, putFileAtEnd: !1, proxyUrl: "" }, e);var n = e.headers,
					    r = "Content-Type";i.notexist(n[r]) && (n[r] = "application/x-www-form-urlencoded"), t.send();
				}var i = n(2),
				    s = i.f,
				    o = n(6),
				    a = r.prototype = (0, _create2.default)(o.prototype);a.send = function () {
					var e = this,
					    t = e.options;setTimeout(function () {
						try {
							try {
								e.emit("beforesend", t);
							} catch (error) {}e.doSend();
						} catch (error) {
							e.onError("serverError", "请求失败:" + error.message);
						}
					}, 0);
				}, a.doSend = s, a.afterSend = function () {
					var e = this;setTimeout(function () {
						e.emit("aftersend", e.options);
					}, 0);
				}, a.onLoad = function (e) {
					var t = this,
					    n = t.options,
					    r = e.status,
					    i = e.result;if (0 !== ("" + r).indexOf("2")) return void t.onError("serverError", "服务器返回异常状态", { status: r, result: i });if ("json" === n.type) try {
						i = JSON.parse(i);
					} catch (e) {
						return void t.onError("parseError", i);
					}t.emit("load", i);
				}, a.onError = function (e, t, n) {
					var r = i.isObject(n) ? n : {};r.code = e || "error", r.message = t || "发生错误", this.emit("error", r);
				}, a.onTimeout = function () {
					this.onError("timeout", "请求超时");
				}, a.abort = function () {
					this.onError("abort", "客户端中止");
				}, a.header = function (e) {
					var t = this;if (!i.isArray(e)) return t.getResponseHeader(e || "");var n = {};return e.forEach(function (e) {
						n[e] = t.header(e);
					}), n;
				}, a.getResponseHeader = s, a.destroy = s, e.exports = r;
			}, function (e, t, n) {
				var r;!function (t) {
					"use strict";
					function i() {}function s(e, t) {
						for (var n = e.length; n--;) {
							if (e[n].listener === t) return n;
						}return -1;
					}function o(e) {
						return function () {
							return this[e].apply(this, arguments);
						};
					}function a(e) {
						return "function" == typeof e || e instanceof RegExp || !(!e || "object" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e))) && a(e.listener);
					}var c = i.prototype,
					    u = t.EventEmitter;c.getListeners = function (e) {
						var t,
						    n,
						    r = this._getEvents();if (e instanceof RegExp) {
							t = {};for (n in r) {
								r.hasOwnProperty(n) && e.test(n) && (t[n] = r[n]);
							}
						} else t = r[e] || (r[e] = []);return t;
					}, c.flattenListeners = function (e) {
						var t,
						    n = [];for (t = 0; t < e.length; t += 1) {
							n.push(e[t].listener);
						}return n;
					}, c.getListenersAsObject = function (e) {
						var t,
						    n = this.getListeners(e);return n instanceof Array && (t = {}, t[e] = n), t || n;
					}, c.addListener = function (e, t) {
						if (!a(t)) throw new TypeError("listener must be a function");var n,
						    r = this.getListenersAsObject(e),
						    i = "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t));for (n in r) {
							r.hasOwnProperty(n) && s(r[n], t) === -1 && r[n].push(i ? t : { listener: t, once: !1 });
						}return this;
					}, c.on = o("addListener"), c.addOnceListener = function (e, t) {
						return this.addListener(e, { listener: t, once: !0 });
					}, c.once = o("addOnceListener"), c.defineEvent = function (e) {
						return this.getListeners(e), this;
					}, c.defineEvents = function (e) {
						for (var t = 0; t < e.length; t += 1) {
							this.defineEvent(e[t]);
						}return this;
					}, c.removeListener = function (e, t) {
						var n,
						    r,
						    i = this.getListenersAsObject(e);for (r in i) {
							i.hasOwnProperty(r) && (n = s(i[r], t), n !== -1 && i[r].splice(n, 1));
						}return this;
					}, c.off = o("removeListener"), c.addListeners = function (e, t) {
						return this.manipulateListeners(!1, e, t);
					}, c.removeListeners = function (e, t) {
						return this.manipulateListeners(!0, e, t);
					}, c.manipulateListeners = function (e, t, n) {
						var r,
						    i,
						    s = e ? this.removeListener : this.addListener,
						    o = e ? this.removeListeners : this.addListeners;if ("object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) || t instanceof RegExp) for (r = n.length; r--;) {
							s.call(this, t, n[r]);
						} else for (r in t) {
							t.hasOwnProperty(r) && (i = t[r]) && ("function" == typeof i ? s.call(this, r, i) : o.call(this, r, i));
						}return this;
					}, c.removeEvent = function (e) {
						var t,
						    n = typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e),
						    r = this._getEvents();if ("string" === n) delete r[e];else if (e instanceof RegExp) for (t in r) {
							r.hasOwnProperty(t) && e.test(t) && delete r[t];
						} else delete this._events;return this;
					}, c.removeAllListeners = o("removeEvent"), c.emitEvent = function (e, t) {
						var n,
						    r,
						    i,
						    s,
						    o,
						    a = this.getListenersAsObject(e);for (s in a) {
							if (a.hasOwnProperty(s)) for (n = a[s].slice(0), i = 0; i < n.length; i++) {
								r = n[i], r.once === !0 && this.removeListener(e, r.listener), o = r.listener.apply(this, t || []), o === this._getOnceReturnValue() && this.removeListener(e, r.listener);
							}
						}return this;
					}, c.trigger = o("emitEvent"), c.emit = function (e) {
						var t = Array.prototype.slice.call(arguments, 1);return this.emitEvent(e, t);
					}, c.setOnceReturnValue = function (e) {
						return this._onceReturnValue = e, this;
					}, c._getOnceReturnValue = function () {
						return !this.hasOwnProperty("_onceReturnValue") || this._onceReturnValue;
					}, c._getEvents = function () {
						return this._events || (this._events = {});
					}, i.noConflict = function () {
						return t.EventEmitter = u, i;
					}, r = function () {
						return i;
					}.call(t, n, t, e), !(void 0 !== r && (e.exports = r));
				}(this || {});
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;t.init(), o.call(t, e);
				}var i = n(2),
				    s = n(4),
				    o = n(5),
				    a = n(8),
				    c = "NEJ-UPLOAD-RESULT:",
				    u = {},
				    l = o.prototype,
				    d = r.prototype = (0, _create2.default)(l);d.init = function () {
					function e(e) {
						var t = e.data;if (0 === t.indexOf(c)) {
							t = JSON.parse(t.replace(c, ""));var n = t.key,
							    r = u[n];r && (delete u[n], t.result = decodeURIComponent(t.result || ""), r.onLoad(t.result));
						}
					}function t() {
						if (!n) {
							n = !0;var t = i.getGlobal();t.postMessage ? i.on(t, "message", e) : (a.addMsgListener(e), a.startTimer());
						}
					}var n = !1;return function () {
						t();
					};
				}(), d.doSend = function () {
					function e() {
						d.forEach(function (e, t) {
							var n = m[t];n.parentNode && (e.name = n.name, i.isFunction(e.setAttribute) && e.setAttribute("form", n.getAttribute("form")), n.parentNode.replaceChild(e, n));
						});
					}var t = this,
					    n = t.options,
					    r = t.key = "zoro-ajax-upload-iframe-" + i.uniqueID();u[r] = t;var o = t.form = i.html2node('<form style="display:none;"></form>');document.body.appendChild(o), o.target = r, o.method = "POST", o.enctype = "multipart/form-data", o.encoding = "multipart/form-data";var a = n.url,
					    c = i.genUrlSep(a);o.action = a + c + "_proxy_=form";var l = n.data,
					    d = [],
					    m = [];l && s.getKeys(l, n.putFileAtEnd).forEach(function (e) {
						var t = l[e];if (t.tagName && "INPUT" === t.tagName.toUpperCase()) {
							if ("file" === t.type) {
								var n = t,
								    r = n.cloneNode(!0);n.parentNode.insertBefore(r, n);var s = i.dataset(n, "name");s && (n.name = s), o.appendChild(n), i.isFunction(n.setAttribute) && (n.setAttribute("form", ""), n.removeAttribute("form")), d.push(t), m.push(r);
							}
						} else {
							var a = i.html2node('<input type="hidden"/>');a.name = e, a.value = t, o.appendChild(a);
						}
					});var f = t.iframe = i.createIframe({ name: r, onload: function onload() {
							return t.aborted ? void e() : (i.on(f, "load", t.checkResult.bind(t)), o.submit(), e(), void t.afterSend());
						} });
				}, d.checkResult = function () {
					var e,
					    t,
					    n = this;try {
						if (e = n.iframe.contentWindow.document.body, t = (e.innerText || e.textContent || "").trim(), t.indexOf(c) >= 0 || e.innerHTML.indexOf(c) >= 0) return;
					} catch (error) {
						return;
					}n.onLoad(t);
				}, d.onLoad = function (e) {
					var t = this;l.onLoad.call(t, { status: 200, result: e }), i.remove(t.form), i.remove(t.iframe), l.destroy.call(t);
				}, d.destroy = function () {
					i.remove(this.iframe), i.remove(this.form);
				}, d.abort = function () {
					var e = this;e.aborted = !0, delete u[e.key], l.abort.call(e);
				}, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}var i = n(9),
				    s = r(i),
				    o = s["default"].getGlobal(),
				    a = {},
				    c = o.name || "_parent",
				    u = [],
				    l = "MSG|",
				    d = [];a.addMsgListener = function (e) {
					u.push(e);
				};var m = function m(e) {
					for (var t = 0, n = u.length; t < n; t++) {
						try {
							u[t].call(null, e);
						} catch (e) {}
					}
				},
				    f = function () {
					var e = /^([\w]+?:\/\/.*?(?=\/|$))/i;return function (t) {
						return t = t || "", e.test(t) ? RegExp.$1 : "*";
					};
				}(),
				    p = function p() {
					var e = unescape(o.name || "").trim();if (e && 0 === e.indexOf(l)) {
						o.name = "";var t = s["default"].string2object(e.replace(l, ""), "|"),
						    n = (t.origin || "").toLowerCase();n && "*" !== n && 0 !== location.href.toLowerCase().indexOf(n) || m({ data: JSON.parse(t.data || "null"), source: o.frames[t.self] || t.self, origin: f(t.ref || document.referrer) });
					}
				},
				    y = function () {
					var e,
					    t = function t(e, _t) {
						for (var n = 0, r = e.length; n < r; n++) {
							if (e[n] === _t) return !0;
						}return !1;
					};return function () {
						if (d.length) {
							e = [];for (var n, r = d.length - 1; r >= 0; r--) {
								n = d[r], t(e, n.w) || (e.push(n.w), d.splice(r, 1), n.w.name = n.d);
							}e = null;
						}
					};
				}(),
				    h = a.startTimer = function () {
					var e = !1;return function () {
						e || (e = !0, o.postMessage || (setInterval(y, 100), setInterval(p, 20)));
					};
				}();a.postMessage = function (e) {
					var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (s["default"].fillUndef(t, { origin: "*", source: c }), o.postMessage) {
						var n = t.data;o.FormData || (n = (0, _stringify2.default)(n)), e.postMessage(n, t.origin);
					} else {
						if (h(), s["default"].isObject(t)) {
							var r = {};r.origin = t.origin || "", r.ref = location.href, r.self = t.source, r.data = (0, _stringify2.default)(t.data), t = l + s["default"].object2string(r, "|", !0);
						}d.unshift({ w: e, d: escape(t) });
					}
				}, e.exports = a;
			}, function (e, t, n) {
				"use strict";
				e.exports = n(2);
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;t.init(), o.call(t, e);
				}var i = n(2),
				    s = n(8),
				    o = n(5),
				    a = {},
				    c = o.prototype,
				    u = r.prototype = (0, _create2.default)(c);u.init = function () {
					function e(e) {
						var t = e.data;if (0 === t.indexOf(n)) {
							t = JSON.parse(t.replace(n, ""));var r = t.key,
							    i = a[r];i && (delete a[r], t.result = decodeURIComponent(t.result || ""), i.onLoad(t));
						}
					}function t() {
						if (!r) {
							r = !0;var t = i.getGlobal();t.postMessage ? i.on(t, "message", e) : s.addMsgListener(e);
						}
					}var n = "NEJ-AJAX-DATA:",
					    r = !1;return function () {
						t();
					};
				}(), u.doSend = function () {
					var e = this,
					    t = e.options,
					    n = i.url2origin(t.url),
					    r = t.proxyUrl || n + "/res/nej_proxy_frame.html",
					    o = a[r];if (i.isArray(o)) return void o.push(e.doSend.bind(e, t));if (!o) return a[r] = [e.doSend.bind(e, t)], void i.createIframe({ src: r, onload: function onload(e) {
							var t = a[r];a[r] = i.target(e).contentWindow, t.forEach(function (e) {
								try {
									e();
								} catch (e) {}
							});
						} });if (!e.aborted) {
						var c = e.key = i.uniqueID();a[c] = e;var u = i.fetch({ method: "GET", url: "", data: null, headers: {}, timeout: 0 }, t);u.key = c, s.postMessage(o, { data: u }), e.afterSend();
					}
				}, u.abort = function () {
					var e = this;e.aborted = !0, delete a[e.key], c.abort.call(e);
				}, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				var r = n(2),
				    i = n(1),
				    s = function () {
					var e = /json/i,
					    t = /post/i;return function (n, s) {
						s = s || {};var o = s.data = s.data || {},
						    a = s.headers = s.headers || {},
						    c = r.checkWithDefault(a, "Accept", "application/json"),
						    u = r.checkWithDefault(a, "Content-Type", "application/json");return e.test(c) && (s.type = "json"), t.test(s.method) && e.test(u) && (s.data = (0, _stringify2.default)(o)), i(n, s);
					};
				}();e.exports = s;
			}, function (e, t, n) {
				"use strict";
				var r = n(1),
				    i = function i(e, t) {
					return t.method = "POST", t.headers = t.headers || {}, t.headers["Content-Type"] = "multipart/form-data", t.timeout = 0, t.type = t.type || "json", r(e, t);
				};e.exports = i;
			}]);
		});
	}, function (module, exports, __webpack_require__) {
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (module) {
			/*! Socket.IO.js build:0.9.11, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */
			var io = module.exports;window.io ? module && (module.exports = io = window.io) : window.io = io, function () {
				if (function (e, t) {
					var n = e;n.version = "0.9.11", n.protocol = 1, n.transports = [], n.j = [], n.sockets = {}, n.connect = function (e, r) {
						var i,
						    s,
						    o = n.util.parseUri(e);t && t.location && (o.protocol = o.protocol || t.location.protocol.slice(0, -1), o.host = o.host || (t.document ? t.document.domain : t.location.hostname), o.port = o.port || t.location.port), i = n.util.uniqueUri(o);var a = { host: o.host, secure: "https" == o.protocol, port: o.port || ("https" == o.protocol ? 443 : 80), query: o.query || "" };return n.util.merge(a, r), !a["force new connection"] && n.sockets[i] || (s = new n.Socket(a)), !a["force new connection"] && s && (n.sockets[i] = s), s = s || n.sockets[i], s.of(o.path.length > 1 ? o.path : "");
					};
				}(module.exports, window), function (e, t) {
					var n = e.util = {},
					    r = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
					    i = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];n.parseUri = function (e) {
						for (var t = r.exec(e || ""), n = {}, s = 14; s--;) {
							n[i[s]] = t[s] || "";
						}return n;
					}, n.uniqueUri = function (e) {
						var n = e.protocol,
						    r = e.host,
						    i = e.port;return "document" in t ? (r = r || document.domain, i = i || ("https" == n && "https:" !== document.location.protocol ? 443 : document.location.port)) : (r = r || "localhost", i || "https" != n || (i = 443)), (n || "http") + "://" + r + ":" + (i || 80);
					}, n.query = function (e, t) {
						var r = n.chunkQuery(e || ""),
						    i = [];n.merge(r, n.chunkQuery(t || ""));for (var s in r) {
							r.hasOwnProperty(s) && i.push(s + "=" + r[s]);
						}return i.length ? "?" + i.join("&") : "";
					}, n.chunkQuery = function (e) {
						for (var t, n = {}, r = e.split("&"), i = 0, s = r.length; i < s; ++i) {
							t = r[i].split("="), t[0] && (n[t[0]] = t[1]);
						}return n;
					};var s = !1;n.load = function (e) {
						return "document" in t && "complete" === document.readyState || s ? e() : void n.on(t, "load", e, !1);
					}, n.on = function (e, t, n, r) {
						e.attachEvent ? e.attachEvent("on" + t, n) : e.addEventListener && e.addEventListener(t, n, r);
					}, n.request = function (e) {
						if (e && "undefined" != typeof XDomainRequest && !n.ua.hasCORS) return new XDomainRequest();if ("undefined" != typeof XMLHttpRequest && (!e || n.ua.hasCORS)) return new XMLHttpRequest();if (!e) try {
							return new window[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
						} catch (e) {}return null;
					}, "undefined" != typeof window && n.load(function () {
						s = !0;
					}), n.defer = function (e) {
						return n.ua.webkit && "undefined" == typeof importScripts ? void n.load(function () {
							setTimeout(e, 100);
						}) : e();
					}, n.merge = function (e, t, r, i) {
						var s,
						    o = i || [],
						    a = "undefined" == typeof r ? 2 : r;for (s in t) {
							t.hasOwnProperty(s) && n.indexOf(o, s) < 0 && ("object" == (0, _typeof3.default)(e[s]) && a ? n.merge(e[s], t[s], a - 1, o) : (e[s] = t[s], o.push(t[s])));
						}return e;
					}, n.mixin = function (e, t) {
						n.merge(e.prototype, t.prototype);
					}, n.inherit = function (e, t) {
						function n() {}n.prototype = t.prototype, e.prototype = new n();
					}, n.isArray = Array.isArray || function (e) {
						return "[object Array]" === Object.prototype.toString.call(e);
					}, n.intersect = function (e, t) {
						for (var r = [], i = e.length > t.length ? e : t, s = e.length > t.length ? t : e, o = 0, a = s.length; o < a; o++) {
							~n.indexOf(i, s[o]) && r.push(s[o]);
						}return r;
					}, n.indexOf = function (e, t, n) {
						for (var r = e.length, n = n < 0 ? n + r < 0 ? 0 : n + r : n || 0; n < r && e[n] !== t; n++) {}return r <= n ? -1 : n;
					}, n.toArray = function (e) {
						for (var t = [], n = 0, r = e.length; n < r; n++) {
							t.push(e[n]);
						}return t;
					}, n.ua = {}, n.ua.hasCORS = "undefined" != typeof XMLHttpRequest && function () {
						try {
							var e = new XMLHttpRequest();
						} catch (e) {
							return !1;
						}return void 0 != e.withCredentials;
					}(), n.ua.webkit = "undefined" != typeof navigator && /webkit/i.test(navigator.userAgent), n.ua.iDevice = "undefined" != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent);
				}("undefined" != typeof io ? io : module.exports, window), function (e, t) {
					function n() {}e.EventEmitter = n, n.prototype.on = function (e, n) {
						return this.$events || (this.$events = {}), this.$events[e] ? t.util.isArray(this.$events[e]) ? this.$events[e].push(n) : this.$events[e] = [this.$events[e], n] : this.$events[e] = n, this;
					}, n.prototype.addListener = n.prototype.on, n.prototype.once = function (e, t) {
						function n() {
							r.removeListener(e, n), t.apply(this, arguments);
						}var r = this;return n.listener = t, this.on(e, n), this;
					}, n.prototype.removeListener = function (e, n) {
						if (this.$events && this.$events[e]) {
							var r = this.$events[e];if (t.util.isArray(r)) {
								for (var i = -1, s = 0, o = r.length; s < o; s++) {
									if (r[s] === n || r[s].listener && r[s].listener === n) {
										i = s;break;
									}
								}if (i < 0) return this;r.splice(i, 1), r.length || delete this.$events[e];
							} else (r === n || r.listener && r.listener === n) && delete this.$events[e];
						}return this;
					}, n.prototype.removeAllListeners = function (e) {
						return void 0 === e ? (this.$events = {}, this) : (this.$events && this.$events[e] && (this.$events[e] = null), this);
					}, n.prototype.listeners = function (e) {
						return this.$events || (this.$events = {}), this.$events[e] || (this.$events[e] = []), t.util.isArray(this.$events[e]) || (this.$events[e] = [this.$events[e]]), this.$events[e];
					}, n.prototype.emit = function (e) {
						if (!this.$events) return !1;var n = this.$events[e];if (!n) return !1;var r = Array.prototype.slice.call(arguments, 1);if ("function" == typeof n) n.apply(this, r);else {
							if (!t.util.isArray(n)) return !1;for (var i = n.slice(), s = 0, o = i.length; s < o; s++) {
								i[s].apply(this, r);
							}
						}return !0;
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (exports, nativeJSON) {
					"use strict";
					function f(e) {
						return e < 10 ? "0" + e : e;
					}function date(e, t) {
						return isFinite(e.valueOf()) ? e.getUTCFullYear() + "-" + f(e.getUTCMonth() + 1) + "-" + f(e.getUTCDate()) + "T" + f(e.getUTCHours()) + ":" + f(e.getUTCMinutes()) + ":" + f(e.getUTCSeconds()) + "Z" : null;
					}function quote(e) {
						return escapable.lastIndex = 0, escapable.test(e) ? '"' + e.replace(escapable, function (e) {
							var t = meta[e];return "string" == typeof t ? t : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
						}) + '"' : '"' + e + '"';
					}function str(e, t) {
						var n,
						    r,
						    i,
						    s,
						    o,
						    a = gap,
						    c = t[e];switch (c instanceof Date && (c = date(e)), "function" == typeof rep && (c = rep.call(t, e, c)), typeof c === "undefined" ? "undefined" : (0, _typeof3.default)(c)) {case "string":
								return quote(c);case "number":
								return isFinite(c) ? String(c) : "null";case "boolean":case "null":
								return String(c);case "object":
								if (!c) return "null";if (gap += indent, o = [], "[object Array]" === Object.prototype.toString.apply(c)) {
									for (s = c.length, n = 0; n < s; n += 1) {
										o[n] = str(n, c) || "null";
									}return i = 0 === o.length ? "[]" : gap ? "[\n" + gap + o.join(",\n" + gap) + "\n" + a + "]" : "[" + o.join(",") + "]", gap = a, i;
								}if (rep && "object" == (typeof rep === "undefined" ? "undefined" : (0, _typeof3.default)(rep))) for (s = rep.length, n = 0; n < s; n += 1) {
									"string" == typeof rep[n] && (r = rep[n], i = str(r, c), i && o.push(quote(r) + (gap ? ": " : ":") + i));
								} else for (r in c) {
									Object.prototype.hasOwnProperty.call(c, r) && (i = str(r, c), i && o.push(quote(r) + (gap ? ": " : ":") + i));
								}return i = 0 === o.length ? "{}" : gap ? "{\n" + gap + o.join(",\n" + gap) + "\n" + a + "}" : "{" + o.join(",") + "}", gap = a, i;}
					}if (nativeJSON && nativeJSON.parse) return exports.JSON = { parse: nativeJSON.parse, stringify: nativeJSON.stringify };var JSON = exports.JSON = {},
					    cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
					    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
					    gap,
					    indent,
					    meta = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" },
					    rep;JSON.stringify = function (e, t, n) {
						var r;if (gap = "", indent = "", "number" == typeof n) for (r = 0; r < n; r += 1) {
							indent += " ";
						} else "string" == typeof n && (indent = n);if (rep = t, t && "function" != typeof t && ("object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) || "number" != typeof t.length)) throw new Error("JSON.stringify");return str("", { "": e });
					}, JSON.parse = function (text, reviver) {
						function walk(e, t) {
							var n,
							    r,
							    i = e[t];if (i && "object" == (typeof i === "undefined" ? "undefined" : (0, _typeof3.default)(i))) for (n in i) {
								Object.prototype.hasOwnProperty.call(i, n) && (r = walk(i, n), void 0 !== r ? i[n] = r : delete i[n]);
							}return reviver.call(e, t, i);
						}var j;if (text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx, function (e) {
							return "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
						})), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return j = eval("(" + text + ")"), "function" == typeof reviver ? walk({ "": j }, "") : j;throw new SyntaxError("JSON.parse");
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof JSON ? JSON : void 0), function (e, t) {
					var n = e.parser = {},
					    r = n.packets = ["disconnect", "connect", "heartbeat", "message", "json", "event", "ack", "error", "noop"],
					    i = n.reasons = ["transport not supported", "client not handshaken", "unauthorized"],
					    s = n.advice = ["reconnect"],
					    o = t.JSON,
					    a = t.util.indexOf;n.encodePacket = function (e) {
						var t = a(r, e.type),
						    n = e.id || "",
						    c = e.endpoint || "",
						    u = e.ack,
						    l = null;switch (e.type) {case "error":
								var d = e.reason ? a(i, e.reason) : "",
								    m = e.advice ? a(s, e.advice) : "";"" === d && "" === m || (l = d + ("" !== m ? "+" + m : ""));break;case "message":
								"" !== e.data && (l = e.data);break;case "event":
								var f = { name: e.name };e.args && e.args.length && (f.args = e.args), l = o.stringify(f);break;case "json":
								l = o.stringify(e.data);break;case "connect":
								e.qs && (l = e.qs);break;case "ack":
								l = e.ackId + (e.args && e.args.length ? "+" + o.stringify(e.args) : "");}var p = [t, n + ("data" == u ? "+" : ""), c];return null !== l && void 0 !== l && p.push(l), p.join(":");
					}, n.encodePayload = function (e) {
						var t = "";if (1 == e.length) return e[0];for (var n = 0, r = e.length; n < r; n++) {
							var i = e[n];t += "�" + i.length + "�" + e[n];
						}return t;
					};var c = /([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/;n.decodePacket = function (e) {
						var t = e.match(c);if (!t) return {};var n = t[2] || "",
						    e = t[5] || "",
						    a = { type: r[t[1]], endpoint: t[4] || "" };switch (n && (a.id = n, t[3] ? a.ack = "data" : a.ack = !0), a.type) {case "error":
								var t = e.split("+");a.reason = i[t[0]] || "", a.advice = s[t[1]] || "";break;case "message":
								a.data = e || "";break;case "event":
								try {
									var u = o.parse(e);a.name = u.name, a.args = u.args;
								} catch (e) {}a.args = a.args || [];break;case "json":
								try {
									a.data = o.parse(e);
								} catch (e) {}break;case "connect":
								a.qs = e || "";break;case "ack":
								var t = e.match(/^([0-9]+)(\+)?(.*)/);if (t && (a.ackId = t[1], a.args = [], t[3])) try {
									a.args = t[3] ? o.parse(t[3]) : [];
								} catch (e) {}break;case "disconnect":case "heartbeat":}return a;
					}, n.decodePayload = function (e) {
						var t = function t(e, _t2) {
							for (var n = 0, r = e; r < _t2.length; r++) {
								if ("�" == _t2.charAt(r)) return n;n++;
							}return n;
						};if ("�" == e.charAt(0)) {
							for (var r = [], i = 1, s = ""; i < e.length; i++) {
								if ("�" == e.charAt(i)) {
									var o = e.substr(i + 1).substr(0, s);if ("�" != e.charAt(i + 1 + Number(s)) && i + 1 + Number(s) != e.length) {
										var a = Number(s);l = t(i + a + 1, e), o = e.substr(i + 1).substr(0, a + l), i += l;
									}r.push(n.decodePacket(o)), i += Number(s) + 1, s = "";
								} else s += e.charAt(i);
							}return r;
						}return [n.decodePacket(e)];
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t) {
					function n(e, t) {
						this.socket = e, this.sessid = t;
					}e.Transport = n, t.util.mixin(n, t.EventEmitter), n.prototype.heartbeats = function () {
						return !0;
					}, n.prototype.onData = function (e) {
						if (this !== this.socket.transport) return this;if (this.clearCloseTimeout(), (this.socket.connected || this.socket.connecting || this.socket.reconnecting) && this.setCloseTimeout(), "" !== e) {
							var n = t.parser.decodePayload(e);if (n && n.length) for (var r = 0, i = n.length; r < i; r++) {
								this.onPacket(n[r]);
							}
						}return this;
					}, n.prototype.onPacket = function (e) {
						return this.socket.setHeartbeatTimeout(), "heartbeat" == e.type ? this.onHeartbeat() : ("connect" == e.type && "" == e.endpoint && this.onConnect(), "error" == e.type && "reconnect" == e.advice && (this.isOpen = !1), this.socket.onPacket(e), this);
					}, n.prototype.setCloseTimeout = function () {
						if (!this.closeTimeout) {
							var e = this;this.closeTimeout = setTimeout(function () {
								e.onDisconnect();
							}, this.socket.closeTimeout);
						}
					}, n.prototype.onDisconnect = function () {
						return this.isOpen && this.close(), this.clearTimeouts(), this.socket.transport === this ? this.socket.onDisconnect() : this.socket.setBuffer(!1), this;
					}, n.prototype.onConnect = function () {
						return this.socket.onConnect(), this;
					}, n.prototype.clearCloseTimeout = function () {
						this.closeTimeout && (clearTimeout(this.closeTimeout), this.closeTimeout = null);
					}, n.prototype.clearTimeouts = function () {
						this.clearCloseTimeout(), this.reopenTimeout && clearTimeout(this.reopenTimeout);
					}, n.prototype.packet = function (e) {
						this.send(t.parser.encodePacket(e));
					}, n.prototype.onHeartbeat = function (e) {
						this.packet({ type: "heartbeat" });
					}, n.prototype.onOpen = function () {
						this.isOpen = !0, this.clearCloseTimeout(), this.socket.onOpen();
					}, n.prototype.onClose = function () {
						this.isOpen = !1, this.socket.transport === this ? this.socket.onClose() : this.socket.setBuffer(!1), this.onDisconnect();
					}, n.prototype.prepareUrl = function () {
						var e = this.socket.options;return this.scheme() + "://" + e.host + ":" + e.port + "/" + e.resource + "/" + t.protocol + "/" + this.name + "/" + this.sessid;
					}, n.prototype.ready = function (e, t) {
						t.call(this);
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t, n) {
					function r(e) {
						if (this.options = { port: 80, secure: !1, document: "document" in n && document, resource: "socket.io", transports: e.transports || t.transports, "connect timeout": 1e4, "try multiple transports": !0, reconnect: !0, "reconnection delay": 500, "reconnection limit": 1 / 0, "reopen delay": 3e3, "max reconnection attempts": 10, "sync disconnect on unload": !1, "auto connect": !0, "flash policy port": 10843, manualFlush: !1 }, t.util.merge(this.options, e), this.connected = !1, this.open = !1, this.connecting = !1, this.reconnecting = !1, this.namespaces = {}, this.buffer = [], this.doBuffer = !1, this.options["sync disconnect on unload"] && (!this.isXDomain() || t.util.ua.hasCORS)) {
							var r = this;t.util.on(n, "beforeunload", function () {
								r.disconnectSync();
							}, !1);
						}this.options["auto connect"] && this.connect();
					}function i() {}e.Socket = r, t.util.mixin(r, t.EventEmitter), r.prototype.of = function (e) {
						return this.namespaces[e] || (this.namespaces[e] = new t.SocketNamespace(this, e), "" !== e && this.namespaces[e].packet({ type: "connect" })), this.namespaces[e];
					}, r.prototype.publish = function () {
						this.emit.apply(this, arguments);var e;for (var t in this.namespaces) {
							this.namespaces.hasOwnProperty(t) && (e = this.of(t), e.$emit.apply(e, arguments));
						}
					}, r.prototype.handshake = function (e) {
						function n(t) {
							t instanceof Error ? (r.connecting = !1, r.onError(t.message)) : e.apply(null, t.split(":"));
						}var r = this,
						    s = this.options,
						    o = ["http" + (s.secure ? "s" : "") + ":/", s.host + ":" + s.port, s.resource, t.protocol, t.util.query(this.options.query, "t=" + +new Date())].join("/");if (this.isXDomain() && !t.util.ua.hasCORS) {
							var a = document.getElementsByTagName("script")[0],
							    c = document.createElement("script");c.src = o + "&jsonp=" + t.j.length, c.onreadystatechange = function () {
								"loaded" == this.readyState && c.parentNode && (c.parentNode.removeChild(c), r.connecting = !1, !r.reconnecting && r.onError("Server down or port not open"), r.publish("handshake_failed"));
							}, a.parentNode.insertBefore(c, a), t.j.push(function (e) {
								n(e), c.parentNode.removeChild(c);
							});
						} else {
							var u = t.util.request();u.open("GET", o, !0), this.isXDomain() && (u.withCredentials = !0), u.onreadystatechange = function () {
								4 == u.readyState && (u.onreadystatechange = i, 200 == u.status ? n(u.responseText) : 403 == u.status ? (r.onError(u.responseText), r.publish("handshake_failed")) : (r.connecting = !1, !r.reconnecting && r.onError(u.responseText), r.publish("handshake_failed")));
							}, u.send(null);
						}
					}, r.prototype.connect = function (e) {
						if (this.connecting) return this;var n = this;return n.connecting = !0, this.handshake(function (r, i, s, o) {
							n.sessionid = r, n.closeTimeout = 1e3 * s, n.heartbeatTimeout = 1e3 * i, n.transports || (n.transports = n.origTransports = o ? t.util.intersect(o.split(","), n.options.transports) : n.options.transports), n.setHeartbeatTimeout(), n.once("connect", function () {
								clearTimeout(n.connectTimeoutTimer), n.connectTimeoutTimer = null, e && "function" == typeof e && e();
							}), n.doConnect();
						}), this;
					}, r.prototype.doConnect = function () {
						var e = this;return e.transport && e.transport.clearTimeouts(), e.transport = e.getTransport(e.transports), e.transport ? void e.transport.ready(e, function () {
							e.connecting = !0, e.publish("connecting", e.transport.name), e.transport.open(), e.options["connect timeout"] && (e.connectTimeoutTimer && clearTimeout(e.connectTimeoutTimer), e.connectTimeoutTimer = setTimeout(e.tryNextTransport.bind(e), e.options["connect timeout"]));
						}) : e.publish("connect_failed");
					}, r.prototype.getTransport = function (e) {
						for (var n, r = e || this.transports, i = 0; n = r[i]; i++) {
							if (t.Transport[n] && t.Transport[n].check(this) && (!this.isXDomain() || t.Transport[n].xdomainCheck(this))) {
								var s = new t.Transport[n](this, this.sessionid);return s;
							}
						}return null;
					}, r.prototype.tryNextTransport = function () {
						var e = this;if (!e.connected && (e.connecting = !1, e.options["try multiple transports"])) {
							for (var t = e.transports; t.length > 0 && t.splice(0, 1)[0] != e.transport.name;) {}t.length ? e.doConnect() : e.publish("connect_failed");
						}
					}, r.prototype.setHeartbeatTimeout = function () {
						if (clearTimeout(this.heartbeatTimeoutTimer), !this.transport || this.transport.heartbeats()) {
							var e = this;this.heartbeatTimeoutTimer = setTimeout(function () {
								e.transport && e.transport.onClose();
							}, this.heartbeatTimeout);
						}
					}, r.prototype.packet = function (e) {
						return this.connected && !this.doBuffer ? this.transport.packet(e) : this.buffer.push(e), this;
					}, r.prototype.setBuffer = function (e) {
						this.doBuffer = e, !e && this.connected && this.buffer.length && (this.options.manualFlush || this.flushBuffer());
					}, r.prototype.flushBuffer = function () {
						this.transport.payload(this.buffer), this.buffer = [];
					}, r.prototype.disconnect = function () {
						return (this.connected || this.connecting) && (this.open && this.of("").packet({ type: "disconnect" }), this.onDisconnect("booted")), this;
					}, r.prototype.disconnectSync = function () {
						var e = t.util.request(),
						    n = ["http" + (this.options.secure ? "s" : "") + ":/", this.options.host + ":" + this.options.port, this.options.resource, t.protocol, "", this.sessionid].join("/") + "/?disconnect=1";e.open("GET", n, !1), e.send(null), this.onDisconnect("booted");
					}, r.prototype.isXDomain = function () {
						var e = n.location.port || ("https:" == n.location.protocol ? 443 : 80);return this.options.host !== n.location.hostname || this.options.port != e;
					}, r.prototype.onConnect = function () {
						this.connected || (this.connected = !0, this.connecting = !1, this.doBuffer || this.setBuffer(!1), this.emit("connect"));
					}, r.prototype.onOpen = function () {
						this.open = !0;
					}, r.prototype.onClose = function () {
						this.open = !1, clearTimeout(this.heartbeatTimeoutTimer);
					}, r.prototype.onPacket = function (e) {
						this.of(e.endpoint).onPacket(e);
					}, r.prototype.onError = function (e) {
						e && e.advice && "reconnect" === e.advice && (this.connected || this.connecting) && (this.disconnect(), this.options.reconnect && this.reconnect()), this.publish("error", e && e.reason ? e.reason : e);
					}, r.prototype.onDisconnect = function (e) {
						var t = this.connected,
						    n = this.connecting;this.connected = !1, this.connecting = !1, this.open = !1, (t || n) && (this.transport.close(), this.transport.clearTimeouts(), t && (this.publish("disconnect", e), "booted" != e && this.options.reconnect && !this.reconnecting && this.reconnect()), n && this.tryNextTransport());
					}, r.prototype.reconnect = function () {
						function e() {
							if (n.connected) {
								for (var e in n.namespaces) {
									n.namespaces.hasOwnProperty(e) && "" !== e && n.namespaces[e].packet({ type: "connect" });
								}n.publish("reconnect", n.transport.name, n.reconnectionAttempts);
							}clearTimeout(n.reconnectionTimer), n.removeListener("connect_failed", t), n.removeListener("connect", t), n.reconnecting = !1, delete n.reconnectionAttempts, delete n.reconnectionDelay, delete n.reconnectionTimer, delete n.redoTransports, n.options["try multiple transports"] = i;
						}function t() {
							if (n.reconnecting) return n.connected ? e() : n.connecting && n.reconnecting ? n.reconnectionTimer = setTimeout(t, 1e3) : void (n.reconnectionAttempts++ >= r ? n.redoTransports ? (n.publish("reconnect_failed"), e()) : (n.on("connect_failed", t), n.options["try multiple transports"] = !0, n.transports = n.origTransports, n.transport = n.getTransport(), n.redoTransports = !0, n.connect()) : (n.reconnectionDelay < s && (n.reconnectionDelay *= 2), n.connect(), n.publish("reconnecting", n.reconnectionDelay, n.reconnectionAttempts), n.reconnectionTimer = setTimeout(t, n.reconnectionDelay)));
						}this.reconnecting = !0, this.reconnectionAttempts = 0, this.reconnectionDelay = this.options["reconnection delay"];var n = this,
						    r = this.options["max reconnection attempts"],
						    i = this.options["try multiple transports"],
						    s = this.options["reconnection limit"];this.options["try multiple transports"] = !1, this.reconnectionTimer = setTimeout(t, this.reconnectionDelay), this.on("connect", t);
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t) {
					function n(e, t) {
						this.socket = e, this.name = t || "", this.flags = {}, this.json = new r(this, "json"), this.ackPackets = 0, this.acks = {};
					}function r(e, t) {
						this.namespace = e, this.name = t;
					}e.SocketNamespace = n, t.util.mixin(n, t.EventEmitter), n.prototype.$emit = t.EventEmitter.prototype.emit, n.prototype.of = function () {
						return this.socket.of.apply(this.socket, arguments);
					}, n.prototype.packet = function (e) {
						return e.endpoint = this.name, this.socket.packet(e), this.flags = {}, this;
					}, n.prototype.send = function (e, t) {
						var n = { type: this.flags.json ? "json" : "message", data: e };return "function" == typeof t && (n.id = ++this.ackPackets, n.ack = !0, this.acks[n.id] = t), this.packet(n);
					}, n.prototype.emit = function (e) {
						var t = Array.prototype.slice.call(arguments, 1),
						    n = t[t.length - 1],
						    r = { type: "event", name: e };return "function" == typeof n && (r.id = ++this.ackPackets, r.ack = "data", this.acks[r.id] = n, t = t.slice(0, t.length - 1)), r.args = t, this.packet(r);
					}, n.prototype.disconnect = function () {
						return "" === this.name ? this.socket.disconnect() : (this.packet({ type: "disconnect" }), this.$emit("disconnect")), this;
					}, n.prototype.onPacket = function (e) {
						function n() {
							r.packet({ type: "ack", args: t.util.toArray(arguments), ackId: e.id });
						}var r = this;switch (e.type) {case "connect":
								this.$emit("connect");break;case "disconnect":
								"" === this.name ? this.socket.onDisconnect(e.reason || "booted") : this.$emit("disconnect", e.reason);break;case "message":case "json":
								var i = ["message", e.data];"data" == e.ack ? i.push(n) : e.ack && this.packet({ type: "ack", ackId: e.id }), this.$emit.apply(this, i);break;case "event":
								var i = [e.name].concat(e.args);"data" == e.ack && i.push(n), this.$emit.apply(this, i);break;case "ack":
								this.acks[e.ackId] && (this.acks[e.ackId].apply(this, e.args), delete this.acks[e.ackId]);break;case "error":
								e.advice ? this.socket.onError(e) : "unauthorized" == e.reason ? this.$emit("connect_failed", e.reason) : this.$emit("error", e.reason);}
					}, r.prototype.send = function () {
						this.namespace.flags[this.name] = !0, this.namespace.send.apply(this.namespace, arguments);
					}, r.prototype.emit = function () {
						this.namespace.flags[this.name] = !0, this.namespace.emit.apply(this.namespace, arguments);
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t, n) {
					function r(e) {
						t.Transport.apply(this, arguments);
					}e.websocket = r, t.util.inherit(r, t.Transport), r.prototype.name = "websocket", r.prototype.open = function () {
						var e,
						    r = t.util.query(this.socket.options.query),
						    i = this;return e || (e = n.MozWebSocket || n.WebSocket), this.websocket = new e(this.prepareUrl() + r), this.websocket.onopen = function () {
							i.onOpen(), i.socket.setBuffer(!1);
						}, this.websocket.onmessage = function (e) {
							i.onData(e.data);
						}, this.websocket.onclose = function () {
							i.socket.setBuffer(!0), i.onClose();
						}, this.websocket.onerror = function (e) {
							i.onError(e);
						}, this;
					}, t.util.ua.iDevice ? r.prototype.send = function (e) {
						var t = this;return setTimeout(function () {
							t.websocket.send(e);
						}, 0), this;
					} : r.prototype.send = function (e) {
						return this.websocket.send(e), this;
					}, r.prototype.payload = function (e) {
						for (var t = 0, n = e.length; t < n; t++) {
							this.packet(e[t]);
						}return this;
					}, r.prototype.close = function () {
						return this.websocket.close(), this;
					}, r.prototype.onError = function (e) {
						this.socket.onError(e);
					}, r.prototype.scheme = function () {
						return this.socket.options.secure ? "wss" : "ws";
					}, r.check = function () {
						return "WebSocket" in n && !("__addTask" in WebSocket) || "MozWebSocket" in n;
					}, r.xdomainCheck = function () {
						return !0;
					}, t.transports.push("websocket");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t) {
					function n() {
						t.Transport.websocket.apply(this, arguments);
					}e.flashsocket = n, t.util.inherit(n, t.Transport.websocket), n.prototype.name = "flashsocket", n.prototype.open = function () {
						var e = this,
						    n = arguments;return WebSocket.__addTask(function () {
							t.Transport.websocket.prototype.open.apply(e, n);
						}), this;
					}, n.prototype.send = function () {
						var e = this,
						    n = arguments;return WebSocket.__addTask(function () {
							t.Transport.websocket.prototype.send.apply(e, n);
						}), this;
					}, n.prototype.close = function () {
						return WebSocket.__tasks.length = 0, t.Transport.websocket.prototype.close.call(this), this;
					}, n.prototype.ready = function (e, r) {
						function i() {
							var t = e.options,
							    i = t["flash policy port"],
							    o = ["http" + (t.secure ? "s" : "") + ":/", t.host + ":" + t.port, t.resource, "static/flashsocket", "WebSocketMain" + (e.isXDomain() ? "Insecure" : "") + ".swf"];n.loaded || ("undefined" == typeof WEB_SOCKET_SWF_LOCATION && (WEB_SOCKET_SWF_LOCATION = o.join("/")), 843 !== i && WebSocket.loadFlashPolicyFile("xmlsocket://" + t.host + ":" + i), WebSocket.__initialize(), n.loaded = !0), r.call(s);
						}var s = this;return document.body ? i() : void t.util.load(i);
					}, n.check = function () {
						return !!("undefined" != typeof WebSocket && "__initialize" in WebSocket && swfobject) && swfobject.getFlashPlayerVersion().major >= 10;
					}, n.xdomainCheck = function () {
						return !0;
					}, "undefined" != typeof window && (window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = !0), t.transports.push("flashsocket");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports), "undefined" != typeof window && "undefined" != typeof window.document) var swfobject = function () {
					function e() {
						if (!H) {
							try {
								var e = N.getElementsByTagName("body")[0].appendChild(h("span"));e.parentNode.removeChild(e);
							} catch (aa) {
								return;
							}H = !0;for (var t = L.length, n = 0; n < t; n++) {
								L[n]();
							}
						}
					}function t(e) {
						H ? e() : L[L.length] = e;
					}function n(e) {
						if ((0, _typeof3.default)(F.addEventListener) != O) F.addEventListener("load", e, !1);else if ((0, _typeof3.default)(N.addEventListener) != O) N.addEventListener("load", e, !1);else if ((0, _typeof3.default)(F.attachEvent) != O) g(F, "onload", e);else if ("function" == typeof F.onload) {
							var t = F.onload;F.onload = function () {
								t(), e();
							};
						} else F.onload = e;
					}function r() {
						D ? i() : s();
					}function i() {
						var e = N.getElementsByTagName("body")[0],
						    t = h(E);t.setAttribute("type", A);var n = e.appendChild(t);if (n) {
							var r = 0;!function () {
								if ((0, _typeof3.default)(n.GetVariable) != O) {
									var i = n.GetVariable("$version");i && (i = i.split(" ")[1].split(","), V.pv = [parseInt(i[0], 10), parseInt(i[1], 10), parseInt(i[2], 10)]);
								} else if (r < 10) return r++, void setTimeout(arguments.callee, 10);e.removeChild(t), n = null, s();
							}();
						} else s();
					}function s() {
						var e = B.length;if (e > 0) for (var t = 0; t < e; t++) {
							var n = B[t].id,
							    r = B[t].callbackFn,
							    i = { success: !1, id: n };if (V.pv[0] > 0) {
								var s = y(n);if (s) if (!v(B[t].swfVersion) || V.wk && V.wk < 312) {
									if (B[t].expressInstall && a()) {
										var l = {};l.data = B[t].expressInstall, l.width = s.getAttribute("width") || "0", l.height = s.getAttribute("height") || "0", s.getAttribute("class") && (l.styleclass = s.getAttribute("class")), s.getAttribute("align") && (l.align = s.getAttribute("align"));for (var d = {}, m = s.getElementsByTagName("param"), f = m.length, p = 0; p < f; p++) {
											"movie" != m[p].getAttribute("name").toLowerCase() && (d[m[p].getAttribute("name")] = m[p].getAttribute("value"));
										}c(l, d, n, r);
									} else u(s), r && r(i);
								} else M(n, !0), r && (i.success = !0, i.ref = o(n), r(i));
							} else if (M(n, !0), r) {
								var h = o(n);h && (0, _typeof3.default)(h.SetVariable) != O && (i.success = !0, i.ref = h), r(i);
							}
						}
					}function o(e) {
						var t = null,
						    n = y(e);if (n && "OBJECT" == n.nodeName) if ((0, _typeof3.default)(n.SetVariable) != O) t = n;else {
							var r = n.getElementsByTagName(E)[0];r && (t = r);
						}return t;
					}function a() {
						return !$ && v("6.0.65") && (V.win || V.mac) && !(V.wk && V.wk < 312);
					}function c(e, t, n, r) {
						$ = !0, w = r || null, C = { success: !1, id: n };var i = y(n);if (i) {
							"OBJECT" == i.nodeName ? (k = l(i), S = null) : (k = i, S = n), e.id = j, ((0, _typeof3.default)(e.width) == O || !/%$/.test(e.width) && parseInt(e.width, 10) < 310) && (e.width = "310"), ((0, _typeof3.default)(e.height) == O || !/%$/.test(e.height) && parseInt(e.height, 10) < 137) && (e.height = "137"), N.title = N.title.slice(0, 47) + " - Flash Player Installation";var s = V.ie && V.win ? ["Active"].concat("").join("X") : "PlugIn",
							    o = "MMredirectURL=" + F.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + s + "&MMdoctitle=" + N.title;if ((0, _typeof3.default)(t.flashvars) != O ? t.flashvars += "&" + o : t.flashvars = o, V.ie && V.win && 4 != i.readyState) {
								var a = h("div");n += "SWFObjectNew", a.setAttribute("id", n), i.parentNode.insertBefore(a, i), i.style.display = "none", function () {
									4 == i.readyState ? i.parentNode.removeChild(i) : setTimeout(arguments.callee, 10);
								}();
							}d(e, t, n);
						}
					}function u(e) {
						if (V.ie && V.win && 4 != e.readyState) {
							var t = h("div");e.parentNode.insertBefore(t, e), t.parentNode.replaceChild(l(e), t), e.style.display = "none", function () {
								4 == e.readyState ? e.parentNode.removeChild(e) : setTimeout(arguments.callee, 10);
							}();
						} else e.parentNode.replaceChild(l(e), e);
					}function l(e) {
						var t = h("div");if (V.win && V.ie) t.innerHTML = e.innerHTML;else {
							var n = e.getElementsByTagName(E)[0];if (n) {
								var r = n.childNodes;if (r) for (var i = r.length, s = 0; s < i; s++) {
									1 == r[s].nodeType && "PARAM" == r[s].nodeName || 8 == r[s].nodeType || t.appendChild(r[s].cloneNode(!0));
								}
							}
						}return t;
					}function d(e, t, n) {
						var r,
						    i = y(n);if (V.wk && V.wk < 312) return r;if (i) if ((0, _typeof3.default)(e.id) == O && (e.id = n), V.ie && V.win) {
							var s = "";for (var o in e) {
								e[o] != Object.prototype[o] && ("data" == o.toLowerCase() ? t.movie = e[o] : "styleclass" == o.toLowerCase() ? s += ' class="' + e[o] + '"' : "classid" != o.toLowerCase() && (s += " " + o + '="' + e[o] + '"'));
							}var a = "";for (var c in t) {
								t[c] != Object.prototype[c] && (a += '<param name="' + c + '" value="' + t[c] + '" />');
							}i.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + s + ">" + a + "</object>", q[q.length] = e.id, r = y(e.id);
						} else {
							var u = h(E);u.setAttribute("type", A);for (var l in e) {
								e[l] != Object.prototype[l] && ("styleclass" == l.toLowerCase() ? u.setAttribute("class", e[l]) : "classid" != l.toLowerCase() && u.setAttribute(l, e[l]));
							}for (var d in t) {
								t[d] != Object.prototype[d] && "movie" != d.toLowerCase() && m(u, d, t[d]);
							}i.parentNode.replaceChild(u, i), r = u;
						}return r;
					}function m(e, t, n) {
						var r = h("param");r.setAttribute("name", t), r.setAttribute("value", n), e.appendChild(r);
					}function f(e) {
						var t = y(e);t && "OBJECT" == t.nodeName && (V.ie && V.win ? (t.style.display = "none", function () {
							4 == t.readyState ? p(e) : setTimeout(arguments.callee, 10);
						}()) : t.parentNode.removeChild(t));
					}function p(e) {
						var t = y(e);if (t) {
							for (var n in t) {
								"function" == typeof t[n] && (t[n] = null);
							}t.parentNode.removeChild(t);
						}
					}function y(e) {
						var t = null;try {
							t = N.getElementById(e);
						} catch (Y) {}return t;
					}function h(e) {
						return N.createElement(e);
					}function g(e, t, n) {
						e.attachEvent(t, n), W[W.length] = [e, t, n];
					}function v(e) {
						var t = V.pv,
						    n = e.split(".");return n[0] = parseInt(n[0], 10), n[1] = parseInt(n[1], 10) || 0, n[2] = parseInt(n[2], 10) || 0, t[0] > n[0] || t[0] == n[0] && t[1] > n[1] || t[0] == n[0] && t[1] == n[1] && t[2] >= n[2];
					}function b(e, t, n, r) {
						if (!V.ie || !V.mac) {
							var i = N.getElementsByTagName("head")[0];if (i) {
								var s = n && "string" == typeof n ? n : "screen";if (r && (I = null, P = null), !I || P != s) {
									var o = h("style");o.setAttribute("type", "text/css"), o.setAttribute("media", s), I = i.appendChild(o), V.ie && V.win && (0, _typeof3.default)(N.styleSheets) != O && N.styleSheets.length > 0 && (I = N.styleSheets[N.styleSheets.length - 1]), P = s;
								}V.ie && V.win ? I && (0, _typeof3.default)(I.addRule) == E && I.addRule(e, t) : I && (0, _typeof3.default)(N.createTextNode) != O && I.appendChild(N.createTextNode(e + " {" + t + "}"));
							}
						}
					}function M(e, t) {
						if (X) {
							var n = t ? "visible" : "hidden";H && y(e) ? y(e).style.visibility = n : b("#" + e, "visibility:" + n);
						}
					}function T(e) {
						var t = /[\\\"<>\.;]/,
						    n = null != t.exec(e);return n && (typeof encodeURIComponent === "undefined" ? "undefined" : (0, _typeof3.default)(encodeURIComponent)) != O ? encodeURIComponent(e) : e;
					}var k,
					    S,
					    w,
					    C,
					    I,
					    P,
					    O = "undefined",
					    E = "object",
					    x = "Shockwave Flash",
					    _ = "ShockwaveFlash.ShockwaveFlash",
					    A = "application/x-shockwave-flash",
					    j = "SWFObjectExprInst",
					    R = "onreadystatechange",
					    F = window,
					    N = document,
					    U = navigator,
					    D = !1,
					    L = [r],
					    B = [],
					    q = [],
					    W = [],
					    H = !1,
					    $ = !1,
					    X = !0,
					    V = function () {
						var e = (0, _typeof3.default)(N.getElementById) != O && (0, _typeof3.default)(N.getElementsByTagName) != O && (0, _typeof3.default)(N.createElement) != O,
						    t = U.userAgent.toLowerCase(),
						    n = U.platform.toLowerCase(),
						    r = n ? /win/.test(n) : /win/.test(t),
						    i = n ? /mac/.test(n) : /mac/.test(t),
						    s = !!/webkit/.test(t) && parseFloat(t.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")),
						    o = !1,
						    a = [0, 0, 0],
						    c = null;if ((0, _typeof3.default)(U.plugins) != O && (0, _typeof3.default)(U.plugins[x]) == E) c = U.plugins[x].description, !c || (0, _typeof3.default)(U.mimeTypes) != O && U.mimeTypes[A] && !U.mimeTypes[A].enabledPlugin || (D = !0, o = !1, c = c.replace(/^.*\s+(\S+\s+\S+$)/, "$1"), a[0] = parseInt(c.replace(/^(.*)\..*$/, "$1"), 10), a[1] = parseInt(c.replace(/^.*\.(.*)\s.*$/, "$1"), 10), a[2] = /[a-zA-Z]/.test(c) ? parseInt(c.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0);else if ((0, _typeof3.default)(F[["Active"].concat("Object").join("X")]) != O) try {
							var u = new window[["Active"].concat("Object").join("X")](_);u && (c = u.GetVariable("$version"), c && (o = !0, c = c.split(" ")[1].split(","), a = [parseInt(c[0], 10), parseInt(c[1], 10), parseInt(c[2], 10)]));
						} catch (Z) {}return { w3: e, pv: a, wk: s, ie: o, win: r, mac: i };
					}();(function () {
						V.w3 && (((0, _typeof3.default)(N.readyState) != O && "complete" == N.readyState || (0, _typeof3.default)(N.readyState) == O && (N.getElementsByTagName("body")[0] || N.body)) && e(), H || ((0, _typeof3.default)(N.addEventListener) != O && N.addEventListener("DOMContentLoaded", e, !1), V.ie && V.win && (N.attachEvent(R, function () {
							"complete" == N.readyState && (N.detachEvent(R, arguments.callee), e());
						}), F == top && !function () {
							if (!H) {
								try {
									N.documentElement.doScroll("left");
								} catch (X) {
									return void setTimeout(arguments.callee, 0);
								}e();
							}
						}()), V.wk && !function () {
							if (!H) return (/loaded|complete/.test(N.readyState) ? void e() : void setTimeout(arguments.callee, 0)
							);
						}(), n(e)));
					})(), function () {
						V.ie && V.win && window.attachEvent("onunload", function () {
							for (var e = W.length, t = 0; t < e; t++) {
								W[t][0].detachEvent(W[t][1], W[t][2]);
							}for (var n = q.length, r = 0; r < n; r++) {
								f(q[r]);
							}for (var i in V) {
								V[i] = null;
							}V = null;for (var s in swfobject) {
								swfobject[s] = null;
							}swfobject = null;
						});
					}();return { registerObject: function registerObject(e, t, n, r) {
							if (V.w3 && e && t) {
								var i = {};i.id = e, i.swfVersion = t, i.expressInstall = n, i.callbackFn = r, B[B.length] = i, M(e, !1);
							} else r && r({ success: !1, id: e });
						}, getObjectById: function getObjectById(e) {
							if (V.w3) return o(e);
						}, embedSWF: function embedSWF(e, n, r, i, s, o, u, l, m, f) {
							var p = { success: !1, id: n };V.w3 && !(V.wk && V.wk < 312) && e && n && r && i && s ? (M(n, !1), t(function () {
								r += "", i += "";var t = {};if (m && (typeof m === "undefined" ? "undefined" : (0, _typeof3.default)(m)) === E) for (var y in m) {
									t[y] = m[y];
								}t.data = e, t.width = r, t.height = i;var h = {};if (l && (typeof l === "undefined" ? "undefined" : (0, _typeof3.default)(l)) === E) for (var g in l) {
									h[g] = l[g];
								}if (u && (typeof u === "undefined" ? "undefined" : (0, _typeof3.default)(u)) === E) for (var b in u) {
									(0, _typeof3.default)(h.flashvars) != O ? h.flashvars += "&" + b + "=" + u[b] : h.flashvars = b + "=" + u[b];
								}if (v(s)) {
									var T = d(t, h, n);t.id == n && M(n, !0), p.success = !0, p.ref = T;
								} else {
									if (o && a()) return t.data = o, void c(t, h, n, f);M(n, !0);
								}f && f(p);
							})) : f && f(p);
						}, switchOffAutoHideShow: function switchOffAutoHideShow() {
							X = !1;
						}, ua: V, getFlashPlayerVersion: function getFlashPlayerVersion() {
							return { major: V.pv[0], minor: V.pv[1], release: V.pv[2] };
						}, hasFlashPlayerVersion: v, createSWF: function createSWF(e, t, n) {
							return V.w3 ? d(e, t, n) : void 0;
						}, showExpressInstall: function showExpressInstall(e, t, n, r) {
							V.w3 && a() && c(e, t, n, r);
						}, removeSWF: function removeSWF(e) {
							V.w3 && f(e);
						}, createCSS: function createCSS(e, t, n, r) {
							V.w3 && b(e, t, n, r);
						}, addDomLoadEvent: t, addLoadEvent: n, getQueryParamValue: function getQueryParamValue(e) {
							var t = N.location.search || N.location.hash;if (t) {
								if (/\?/.test(t) && (t = t.split("?")[1]), null == e) return T(t);for (var n = t.split("&"), r = 0; r < n.length; r++) {
									if (n[r].substring(0, n[r].indexOf("=")) == e) return T(n[r].substring(n[r].indexOf("=") + 1));
								}
							}return "";
						}, expressInstallCallback: function expressInstallCallback() {
							if ($) {
								var e = y(j);e && k && (e.parentNode.replaceChild(k, e), S && (M(S, !0), V.ie && V.win && (k.style.display = "block")), w && w(C)), $ = !1;
							}
						} };
				}();!function () {
					if ("undefined" != typeof window && !window.WebSocket) {
						var e = window.console;if (e && e.log && e.error || (e = { log: function log() {}, error: function error() {} }), !swfobject.hasFlashPlayerVersion("10.0.0")) return void e.error("Flash Player >= 10.0.0 is required.");"file:" == location.protocol && e.error("WARNING: web-socket-js doesn't work in file:///... URL unless you set Flash Security Settings properly. Open the page via Web server i.e. http://..."), WebSocket = function (_WebSocket) {
							function WebSocket(_x, _x2, _x3, _x4, _x5) {
								return _WebSocket.apply(this, arguments);
							}

							WebSocket.toString = function () {
								return _WebSocket.toString();
							};

							return WebSocket;
						}(function (e, t, n, r, i) {
							var s = this;s.__id = WebSocket.__nextId++, WebSocket.__instances[s.__id] = s, s.readyState = WebSocket.CONNECTING, s.bufferedAmount = 0, s.__events = {}, t ? "string" == typeof t && (t = [t]) : t = [], setTimeout(function () {
								WebSocket.__addTask(function () {
									WebSocket.__flash.create(s.__id, e, t, n || null, r || 0, i || null);
								});
							}, 0);
						}), WebSocket.prototype.send = function (e) {
							if (this.readyState == WebSocket.CONNECTING) throw "INVALID_STATE_ERR: Web Socket connection has not been established";var t = WebSocket.__flash.send(this.__id, encodeURIComponent(e));return t < 0 || (this.bufferedAmount += t, !1);
						}, WebSocket.prototype.close = function () {
							this.readyState != WebSocket.CLOSED && this.readyState != WebSocket.CLOSING && (this.readyState = WebSocket.CLOSING, WebSocket.__flash.close(this.__id));
						}, WebSocket.prototype.addEventListener = function (e, t, n) {
							e in this.__events || (this.__events[e] = []), this.__events[e].push(t);
						}, WebSocket.prototype.removeEventListener = function (e, t, n) {
							if (e in this.__events) for (var r = this.__events[e], i = r.length - 1; i >= 0; --i) {
								if (r[i] === t) {
									r.splice(i, 1);break;
								}
							}
						}, WebSocket.prototype.dispatchEvent = function (e) {
							for (var t = this.__events[e.type] || [], n = 0; n < t.length; ++n) {
								t[n](e);
							}var r = this["on" + e.type];r && r(e);
						}, WebSocket.prototype.__handleEvent = function (e) {
							"readyState" in e && (this.readyState = e.readyState), "protocol" in e && (this.protocol = e.protocol);var t;if ("open" == e.type || "error" == e.type) t = this.__createSimpleEvent(e.type);else if ("close" == e.type) t = this.__createSimpleEvent("close");else {
								if ("message" != e.type) throw "unknown event type: " + e.type;var n = decodeURIComponent(e.message);t = this.__createMessageEvent("message", n);
							}this.dispatchEvent(t);
						}, WebSocket.prototype.__createSimpleEvent = function (e) {
							if (document.createEvent && window.Event) {
								var t = document.createEvent("Event");return t.initEvent(e, !1, !1), t;
							}return { type: e, bubbles: !1, cancelable: !1 };
						}, WebSocket.prototype.__createMessageEvent = function (e, t) {
							if (document.createEvent && window.MessageEvent && !window.opera) {
								var n = document.createEvent("MessageEvent");return n.initMessageEvent("message", !1, !1, t, null, null, window, null), n;
							}return { type: e, data: t, bubbles: !1, cancelable: !1 };
						}, WebSocket.CONNECTING = 0, WebSocket.OPEN = 1, WebSocket.CLOSING = 2, WebSocket.CLOSED = 3, WebSocket.__flash = null, WebSocket.__instances = {}, WebSocket.__tasks = [], WebSocket.__nextId = 0, WebSocket.loadFlashPolicyFile = function (e) {
							WebSocket.__addTask(function () {
								WebSocket.__flash.loadManualPolicyFile(e);
							});
						}, WebSocket.__initialize = function () {
							if (!WebSocket.__flash) {
								if (WebSocket.__swfLocation && (window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation), !window.WEB_SOCKET_SWF_LOCATION) return void e.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");var t = document.createElement("div");t.id = "webSocketContainer", t.style.position = "absolute", WebSocket.__isFlashLite() ? (t.style.left = "0px", t.style.top = "0px") : (t.style.left = "-100px", t.style.top = "-100px");var n = document.createElement("div");n.id = "webSocketFlash", t.appendChild(n), document.body.appendChild(t), swfobject.embedSWF(WEB_SOCKET_SWF_LOCATION, "webSocketFlash", "1", "1", "10.0.0", null, null, { hasPriority: !0, swliveconnect: !0, allowScriptAccess: "always" }, null, function (t) {
									t.success || e.error("[WebSocket] swfobject.embedSWF failed");
								});
							}
						}, WebSocket.__onFlashInitialized = function () {
							setTimeout(function () {
								WebSocket.__flash = document.getElementById("webSocketFlash"), WebSocket.__flash.setCallerUrl(location.href), WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);for (var e = 0; e < WebSocket.__tasks.length; ++e) {
									WebSocket.__tasks[e]();
								}WebSocket.__tasks = [];
							}, 0);
						}, WebSocket.__onFlashEvent = function () {
							return setTimeout(function () {
								try {
									for (var t = WebSocket.__flash.receiveEvents(), n = 0; n < t.length; ++n) {
										WebSocket.__instances[t[n].webSocketId].__handleEvent(t[n]);
									}
								} catch (e) {
									e.error(e);
								}
							}, 0), !0;
						};var t = function t() {
							var e = function e(_e, t) {
								t = t || 2;for (var n = "" + _e; n.length < t;) {
									n = "0" + n;
								}return n;
							},
							    t = new Date(),
							    n = t.getFullYear() + "-" + e(t.getMonth() + 1) + "-" + e(t.getDate()) + " " + e(t.getHours()) + ":" + e(t.getMinutes()) + ":" + e(t.getSeconds()) + ":" + e(t.getMilliseconds(), 3);return n;
						};WebSocket.__log = function (n) {
							e.log(t(), decodeURIComponent(n));
						}, WebSocket.__error = function (n) {
							e.error(t(), decodeURIComponent(n));
						}, WebSocket.__addTask = function (e) {
							WebSocket.__flash ? e() : WebSocket.__tasks.push(e);
						}, WebSocket.__isFlashLite = function () {
							if (!window.navigator || !window.navigator.mimeTypes) return !1;var e = window.navigator.mimeTypes["application/x-shockwave-flash"];return !!(e && e.enabledPlugin && e.enabledPlugin.filename) && !!e.enabledPlugin.filename.match(/flashlite/i);
						}, window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION || (window.addEventListener ? window.addEventListener("load", function () {
							WebSocket.__initialize();
						}, !1) : window.attachEvent("onload", function () {
							WebSocket.__initialize();
						}));
					}
				}(), function (e, t, n) {
					function r(e) {
						e && (t.Transport.apply(this, arguments), this.sendBuffer = []);
					}function i() {}e.XHR = r, t.util.inherit(r, t.Transport), r.prototype.open = function () {
						return this.socket.setBuffer(!1), this.onOpen(), this.get(), this.setCloseTimeout(), this;
					}, r.prototype.payload = function (e) {
						for (var n = [], r = 0, i = e.length; r < i; r++) {
							n.push(t.parser.encodePacket(e[r]));
						}this.send(t.parser.encodePayload(n));
					}, r.prototype.send = function (e) {
						return this.post(e), this;
					}, r.prototype.post = function (e) {
						function t() {
							4 == this.readyState && (this.onreadystatechange = i, s.posting = !1, 200 == this.status ? s.socket.setBuffer(!1) : s.onClose());
						}function r() {
							this.onload = i, s.socket.setBuffer(!1);
						}var s = this;this.socket.setBuffer(!0), this.sendXHR = this.request("POST"), n.XDomainRequest && this.sendXHR instanceof XDomainRequest ? this.sendXHR.onload = this.sendXHR.onerror = r : this.sendXHR.onreadystatechange = t, this.sendXHR.send(e);
					}, r.prototype.close = function () {
						return this.onClose(), this;
					}, r.prototype.request = function (e) {
						var n = t.util.request(this.socket.isXDomain()),
						    r = t.util.query(this.socket.options.query, "t=" + +new Date());if (n.open(e || "GET", this.prepareUrl() + r, !0), "POST" == e) try {
							n.setRequestHeader ? n.setRequestHeader("Content-type", "text/plain;charset=UTF-8") : n.contentType = "text/plain";
						} catch (e) {}return n;
					}, r.prototype.scheme = function () {
						return this.socket.options.secure ? "https" : "http";
					}, r.check = function (e, r) {
						try {
							var i = t.util.request(r),
							    s = n.XDomainRequest && i instanceof XDomainRequest,
							    o = e && e.options && e.options.secure ? "https:" : "http:",
							    a = n.location && o != n.location.protocol;if (i && (!s || !a)) return !0;
						} catch (e) {}return !1;
					}, r.xdomainCheck = function (e) {
						return r.check(e, !0);
					};
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t) {
					function n(e) {
						t.Transport.XHR.apply(this, arguments);
					}e.htmlfile = n, t.util.inherit(n, t.Transport.XHR), n.prototype.name = "htmlfile", n.prototype.get = function () {
						this.doc = new window[["Active"].concat("Object").join("X")]("htmlfile"), this.doc.open(), this.doc.write("<html></html>"), this.doc.close(), this.doc.parentWindow.s = this;var e = this.doc.createElement("div");e.className = "socketio", this.doc.body.appendChild(e), this.iframe = this.doc.createElement("iframe"), e.appendChild(this.iframe);var n = this,
						    r = t.util.query(this.socket.options.query, "t=" + +new Date());this.iframe.src = this.prepareUrl() + r, t.util.on(window, "unload", function () {
							n.destroy();
						});
					}, n.prototype._ = function (e, t) {
						this.onData(e);try {
							var n = t.getElementsByTagName("script")[0];n.parentNode.removeChild(n);
						} catch (e) {}
					}, n.prototype.destroy = function () {
						if (this.iframe) {
							try {
								this.iframe.src = "about:blank";
							} catch (e) {}this.doc = null, this.iframe.parentNode.removeChild(this.iframe), this.iframe = null, CollectGarbage();
						}
					}, n.prototype.close = function () {
						return this.destroy(), t.Transport.XHR.prototype.close.call(this);
					}, n.check = function (e) {
						if ("undefined" != typeof window && ["Active"].concat("Object").join("X") in window) try {
							var n = new window[["Active"].concat("Object").join("X")]("htmlfile");return n && t.Transport.XHR.check(e);
						} catch (e) {}return !1;
					}, n.xdomainCheck = function () {
						return !1;
					}, t.transports.push("htmlfile");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t, n) {
					function r() {
						t.Transport.XHR.apply(this, arguments);
					}function i() {}e["xhr-polling"] = r, t.util.inherit(r, t.Transport.XHR), t.util.merge(r, t.Transport.XHR), r.prototype.name = "xhr-polling", r.prototype.heartbeats = function () {
						return !1;
					}, r.prototype.open = function () {
						var e = this;return t.Transport.XHR.prototype.open.call(e), !1;
					}, r.prototype.get = function () {
						function e() {
							4 == this.readyState && (this.onreadystatechange = i, 200 == this.status ? (s.onData(this.responseText), s.get()) : s.onClose());
						}function t() {
							this.onload = i, this.onerror = i, s.retryCounter = 1, s.onData(this.responseText), s.get();
						}function r() {
							s.retryCounter++, !s.retryCounter || s.retryCounter > 3 ? s.onClose() : s.get();
						}if (this.isOpen) {
							var s = this;this.xhr = this.request(), n.XDomainRequest && this.xhr instanceof XDomainRequest ? (this.xhr.onload = t, this.xhr.onerror = r) : this.xhr.onreadystatechange = e, this.xhr.send(null);
						}
					}, r.prototype.onClose = function () {
						if (t.Transport.XHR.prototype.onClose.call(this), this.xhr) {
							this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = i;try {
								this.xhr.abort();
							} catch (e) {}this.xhr = null;
						}
					}, r.prototype.ready = function (e, n) {
						var r = this;t.util.defer(function () {
							n.call(r);
						});
					}, t.transports.push("xhr-polling");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t, n) {
					function r(e) {
						t.Transport["xhr-polling"].apply(this, arguments), this.index = t.j.length;var n = this;t.j.push(function (e) {
							n._(e);
						});
					}var i = n.document && "MozAppearance" in n.document.documentElement.style;e["jsonp-polling"] = r, t.util.inherit(r, t.Transport["xhr-polling"]), r.prototype.name = "jsonp-polling", r.prototype.post = function (e) {
						function n() {
							r(), i.socket.setBuffer(!1);
						}function r() {
							i.iframe && i.form.removeChild(i.iframe);try {
								o = document.createElement('<iframe name="' + i.iframeId + '">');
							} catch (e) {
								o = document.createElement("iframe"), o.name = i.iframeId;
							}o.id = i.iframeId, i.form.appendChild(o), i.iframe = o;
						}var i = this,
						    s = t.util.query(this.socket.options.query, "t=" + +new Date() + "&i=" + this.index);if (!this.form) {
							var o,
							    a = document.createElement("form"),
							    c = document.createElement("textarea"),
							    u = this.iframeId = "socketio_iframe_" + this.index;a.className = "socketio", a.style.position = "absolute", a.style.top = "0px", a.style.left = "0px", a.style.display = "none", a.target = u, a.method = "POST", a.setAttribute("accept-charset", "utf-8"), c.name = "d", a.appendChild(c), document.body.appendChild(a), this.form = a, this.area = c;
						}this.form.action = this.prepareUrl() + s, r(), this.area.value = t.JSON.stringify(e);try {
							this.form.submit();
						} catch (e) {}this.iframe.attachEvent ? o.onreadystatechange = function () {
							"complete" == i.iframe.readyState && n();
						} : this.iframe.onload = n, this.socket.setBuffer(!0);
					}, r.prototype.get = function () {
						var e = this,
						    n = document.createElement("script"),
						    r = t.util.query(this.socket.options.query, "t=" + +new Date() + "&i=" + this.index);this.script && (this.script.parentNode.removeChild(this.script), this.script = null), n.async = !0, n.src = this.prepareUrl() + r, n.onerror = function () {
							e.onClose();
						};var s = document.getElementsByTagName("script")[0];s.parentNode.insertBefore(n, s), this.script = n, i && setTimeout(function () {
							var e = document.createElement("iframe");document.body.appendChild(e), document.body.removeChild(e);
						}, 100);
					}, r.prototype._ = function (e) {
						return this.onData(e), this.isOpen && this.get(), this;
					}, r.prototype.ready = function (e, n) {
						var r = this;return i ? void t.util.load(function () {
							n.call(r);
						}) : n.call(this);
					}, r.check = function () {
						return "document" in n;
					}, r.xdomainCheck = function () {
						return !0;
					}, t.transports.push("jsonp-polling");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), __WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
					return io;
				}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), !(void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			}();
		}).call(exports, __webpack_require__(40)(module));
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			return e && e.__esModule ? e : { "default": e };
		}function i() {}var s = n(9),
		    o = r(s),
		    a = o["default"].clientTypeMap;i.reverse = function (e) {
			var t = e;return t.type = a[t.type], t;
		}, i.reverseType = function (e) {
			return a[e] || e;
		}, e.exports = i;
	}, function (e, t, n) {
		"use strict";
		function r() {}var i = n(1);r.parse = function (e) {
			var t = e.split("|");return { scene: t[0], to: t[1] };
		}, r.genSessionByMsg = function (e) {
			var t = { id: e.sessionId, scene: e.scene, to: e.target, updateTime: e.time, lastMsg: e };return t;
		}, r.appendLastMsg = function (e) {
			var t = e.lastMsg,
			    n = i.capFirstLetter(t.type);e["last" + n + "Msg"] = t;var r = i.capFirstLetter(t.flow);e["last" + r + "Msg"] = t;
		}, r.genSessionByMsgs = function (e, t) {
			var n = e.getLastNotIgnoredMsg(t);return n ? r.genSessionByMsg(n) : null;
		}, r.trim = function (e) {
			delete e.msgReceiptSendTime, delete e.msgReceiptServerTime, delete e.ack, delete e.unreadMsgs;
		}, r.isComplete = function (e) {
			return e.id && e.scene && e.to;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;i.verifyOptions(e, "type to"), i.verifyParamValid("type", e.type, r.validTypes), e.type.indexOf("custom") !== -1 && (i.verifyOptions(e, "content"), t.attach = e.content, o(e.apnsText) && (t.apnsText = "" + e.apnsText), o(e.pushPayload) && (t.pushPayload = "" + e.pushPayload), o(e.sendToOnlineUsersOnly) && (t.sendToOnlineUsersOnly = e.sendToOnlineUsersOnly ? 0 : 1), o(e.cc) && (t.cc = e.cc ? 1 : 0), o(e.isPushable) && (t.isPushable = e.isPushable ? 1 : 0), o(e.isUnreadable) && (t.isUnreadable = e.isUnreadable ? 1 : 0), o(e.needPushNick) && (t.needPushNick = e.needPushNick ? 1 : 0)), t.time = e.time || +new Date(), t.type = l[e.type], t.to = e.to, o(e.from) && (t.from = e.from), o(e.ps) && (t.ps = e.ps), o(e.deletedIdClient) && (t.deletedIdClient = e.deletedIdClient), o(e.deletedIdServer) && (t.deletedIdServer = e.deletedIdServer), o(e.yidunEnable) && (t.yidunEnable = e.yidunEnable ? 1 : 0), o(e.antiSpamContent) && (t.antiSpamContent = "" + e.antiSpamContent), t.idClient = e.idClient || i.guid();
		}var i = n(1),
		    s = i.undef,
		    o = i.notundef,
		    a = n(14).getInstance("IM"),
		    c = n(21),
		    u = n(15),
		    l = { customP2p: 100, customTeam: 101, deleteMsgP2p: 7, deleteMsgTeam: 8 },
		    d = { 0: "applyTeam", 1: "rejectTeamApply", 2: "teamInvite", 3: "rejectTeamInvite", 5: "friendRequest", 6: "deleteFriend", 7: "deleteMsgP2p", 8: "deleteMsgTeam", 100: "customP2p", 101: "customTeam", 102: "customP2p" },
		    m = { 1: "addFriend", 2: "applyFriend", 3: "passFriendApply", 4: "rejectFriendApply" },
		    f = "team",
		    p = "friend",
		    y = "msg",
		    h = [f, p, y],
		    g = { applyTeam: f, rejectTeamApply: f, teamInvite: f, rejectTeamInvite: f, addFriend: p, applyFriend: p, passFriendApply: p, rejectFriendApply: p, deleteFriend: p, deleteMsg: y };r.validTypes = (0, _keys2.default)(l).concat((0, _keys2.default)(g)), r.validCategories = ["team", "friend"], r.isCustom = function (e) {
			return "custom" === e.type;
		}, r.reverse = function (e) {
			var t = { time: +e.time, to: e.to, type: d[e.type] };if (o(e.from) && (t.from = e.from), o(e.idServer) && (t.idServer = "" + e.idServer), o(e.deletedIdClient) && (t.deletedIdClient = e.deletedIdClient), o(e.deletedIdServer) && (t.deletedIdServer = "" + e.deletedIdServer), o(e.deletedMsgTime) && (t.deletedMsgTime = +e.deletedMsgTime), o(e.deletedMsgFromNick) && (t.deletedMsgFromNick = "" + e.deletedMsgFromNick), o(e.ps) && (t.ps = e.ps), e.attach = e.attach ? "" + e.attach : "", "customP2p" === t.type || "customTeam" === t.type) t.content = e.attach, o(e.apnsText) && (t.apnsText = e.apnsText), o(e.pushPayload) && (t.pushPayload = e.pushPayload), i.merge(t, { sendToOnlineUsersOnly: s(e.sendToOnlineUsersOnly) || 0 === +e.sendToOnlineUsersOnly, cc: s(e.cc) || 1 === +e.cc, isPushable: s(e.isPushable) || 1 === +e.isPushable, isUnreadable: s(e.isUnreadable) || 1 === +e.isUnreadable, needPushNick: o(e.needPushNick) && 1 === +e.needPushNick }), t.scene = t.type.slice(6).toLowerCase(), t.type = "custom";else if ("deleteMsgP2p" === t.type || "deleteMsgTeam" === t.type) t.scene = t.type.slice(9).toLowerCase(), t.type = "deleteMsg";else {
				if (e.attach) {
					t.attach = {};var n = JSON.parse(e.attach);o(n.vt) ? (t.type = m[n.vt], delete t.attach) : (o(n.tinfo) && (t.attach.team = c.reverse(a.unserialize(n.tinfo, "team"))), o(n.tlist) && (t.attach.member = u.reverse(a.unserialize(n.tlist, "teamMember"))), o(n.attach) && (t.attach.custom = n.attach));
				}t.category = g[t.type], t.read = !1, t.state = "init";
			}return o(e.cc) && (t.cc = 1 === +e.cc), t.status = e.status || "success", o(e.filter) && (t.filter = e.filter), t;
		}, r.reverseSysMsgs = function (e, t) {
			t = t || {};var n = t.mapper,
			    s = i.isFunction(n);return e.map(function (e) {
				return e = r.reverse(e), s && (e = n(e)), e;
			});
		}, r.completeUnread = function (e) {
			e = e || {}, h.forEach(function (t) {
				delete e[t];
			});var t;return (0, _keys2.default)(g).forEach(function (n) {
				e[n] = e[n] || 0, e[n] < 0 && (e[n] = 0), t = g[n], e[t] = e[t] || 0, e[t] = e[t] + e[n];
			}), e.total = 0, h.forEach(function (t) {
				e.total += e[t];
			}), e;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;switch (s.verifyOptions(e, "action"), e.action) {case "create":
					s.verifyOptions(e, "teamId", !1), s.verifyOptions(e, "type name"), s.verifyParamValid("type", e.type, y);break;case "update":
					s.verifyOptions(e, "teamId"), s.verifyOptions(e, "type", !1);}o(e.teamId) && (t.teamId = e.teamId), o(e.type) && (t.type = f[e.type]), o(e.avatar) && (t.avatar = "" + e.avatar), o(e.name) && (t.name = "" + e.name), o(e.intro) && (t.intro = "" + e.intro), o(e.announcement) && (t.announcement = "" + e.announcement), d.forEach(t.setMode.bind(t, e)), o(e.custom) && (t.custom = "" + e.custom);
		}function i(e, t) {
			t += "Mode", o(e[t]) && (e[t] = l[t][e[t]]);
		}var s = n(1),
		    o = s.notundef,
		    a = s.fillPropertyWithDefault,
		    c = _keys2.default,
		    u = {},
		    l = {},
		    d = [],
		    m = {},
		    f = { normal: 0, advanced: 1 },
		    p = { 0: "normal", 1: "advanced" },
		    y = c(f),
		    h = u.joinMode = { noVerify: 0, needVerify: 1, rejectAll: 2 };l.joinMode = { 0: "noVerify", 1: "needVerify", 2: "rejectAll" }, d.push("join"), m.joinMode = c(h);var g = u.beInviteMode = { needVerify: 0, noVerify: 1 };l.beInviteMode = { 0: "needVerify", 1: "noVerify" }, d.push("beInvite"), m.beInviteMode = c(g);var v = u.inviteMode = { manager: 0, all: 1 };l.inviteMode = { 0: "manager", 1: "all" }, d.push("invite"), m.inviteMode = c(v);var b = u.updateTeamMode = { manager: 0, all: 1 };l.updateTeamMode = { 0: "manager", 1: "all" }, d.push("updateTeam"), m.updateTeamMode = c(b);var M = u.updateCustomMode = { manager: 0, all: 1 };l.updateCustomMode = { 0: "manager", 1: "all" }, d.push("updateCustom"), m.updateCustomMode = c(M);var T = r.prototype;T.setMode = function (e, t) {
			var n = this;t += "Mode", o(e[t]) && (s.verifyParamValid(t, e[t], m[t]), n[t] = u[t][e[t]]);
		}, r.reverse = function (e, t) {
			var n = s.copy(e);return o(n.teamId) && (n.teamId = "" + n.teamId), o(n.type) && (n.type = p[n.type]), o(n.level) && (n.level = +n.level), o(n.valid) && (n.valid = 1 === +n.valid), o(n.memberNum) && (n.memberNum = +n.memberNum), o(n.memberUpdateTime) && (n.memberUpdateTime = +n.memberUpdateTime), o(n.createTime) && (n.createTime = +n.createTime), o(n.updateTime) && (n.updateTime = +n.updateTime), o(n.validToCurrentUser) && (n.validToCurrentUser = "1" === n.validToCurrentUser), o(n.mute) && (n.mute = "1" === n.mute), d.forEach(i.bind(null, n)), delete n.bits, t || r.fillProperties(n), n;
		}, r.fillProperties = function (e) {
			var t = a(e, "beInviteMode", "needVerify"),
			    n = a(e, "inviteMode", "manager"),
			    r = a(e, "updateTeamMode", "manager"),
			    i = a(e, "updateCustomMode", "manager"),
			    s = a(e, "avatar", "");return t || n || r || i || s;
		}, e.exports = r;
	},, function (e, t) {
		"use strict";
		var n = t.createUniqueKey = "undefined" != typeof _symbol2.default ? _symbol2.default : function (e) {
			return "[[" + e + "_" + Math.random().toFixed(8).slice(2) + "]]";
		};t.LISTENERS = n("listeners"), t.CAPTURE = 1, t.BUBBLE = 2, t.ATTRIBUTE = 3, t.newNode = function (e, t) {
			return { listener: e, kind: t, next: null };
		};
	}, function (e, t) {
		"use strict";
		function n(e) {
			if (null === e || void 0 === e) throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e);
		}function r() {
			try {
				if (!_assign2.default) return !1;var e = new String("abc");if (e[5] = "de", "5" === (0, _getOwnPropertyNames2.default)(e)[0]) return !1;for (var t = {}, n = 0; n < 10; n++) {
					t["_" + String.fromCharCode(n)] = n;
				}var r = (0, _getOwnPropertyNames2.default)(t).map(function (e) {
					return t[e];
				});if ("0123456789" !== r.join("")) return !1;var i = {};return "abcdefghijklmnopqrst".split("").forEach(function (e) {
					i[e] = e;
				}), "abcdefghijklmnopqrst" === (0, _keys2.default)((0, _assign2.default)({}, i)).join("");
			} catch (e) {
				return !1;
			}
		}var i = Object.prototype.hasOwnProperty,
		    s = Object.prototype.propertyIsEnumerable;e.exports = r() ? _assign2.default : function (e, t) {
			for (var r, o, a = n(e), c = 1; c < arguments.length; c++) {
				r = Object(arguments[c]);for (var u in r) {
					i.call(r, u) && (a[u] = r[u]);
				}if (_getOwnPropertySymbols2.default) {
					o = (0, _getOwnPropertySymbols2.default)(r);for (var l = 0; l < o.length; l++) {
						s.call(r, o[l]) && (a[o[l]] = r[o[l]]);
					}
				}
			}return a;
		};
	}, function (e, t) {
		function n(e, t) {
			for (var n = t.split("."); n.length;) {
				var r = n.shift(),
				    i = !1;if ("?" == r[r.length - 1] && (r = r.slice(0, -1), i = !0), e = e[r], !e && i) return e;
			}return e;
		}e.exports = n;
	},,, function (e, t, n) {
		"use strict";
		function r(e) {
			switch (s.notundef(e.type) ? s.verifyFileType(e.type) : e.type = "file", s.verifyOptions(e, "file"), s.verifyOptions(e.file, "url ext size md5", !0, "file."), e.type) {case "image":
					o.verifyFile(e.file);break;case "audio":
					a.verifyFile(e.file);break;case "video":
					c.verifyFile(e.file);}i.call(this, e), this.attach = (0, _stringify2.default)(e.file);
		}var i = n(13),
		    s = n(1);r.prototype = (0, _create2.default)(i.prototype), r.reverse = function (e) {
			var t = i.reverse(e);return e.attach = e.attach ? "" + e.attach : "", t.file = e.attach ? JSON.parse(e.attach) : {}, "audio" === t.type && (t.file.mp3Url = t.file.url + "?audioTrans&type=mp3"), t;
		}, e.exports = r;var o = n(128),
		    a = n(125),
		    c = n(133);
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			i.merge(this, e), i.notundef(this.gender) && (i.verifyParamValid("gender", this.gender, r.validGenders), this.gender = s[this.gender]), i.notundef(this.email) && "" !== this.email && i.verifyEmail("email", this.email), i.notundef(this.birth) && "" !== this.birth && i.verifyBirth("birth", this.birth), i.notundef(this.tel) && "" !== this.tel && i.verifyTel("tel", this.tel);
		}var i = n(1),
		    s = { unknown: 0, male: 1, female: 2 },
		    o = { 0: "unknown", 1: "male", 2: "female" };r.reverse = function (e) {
			var t = i.filterObj(e, "account nick avatar sign gender email birth tel custom createTime updateTime");return i.notundef(t.gender) && (t.gender = o[t.gender]), i.notundef(t.createTime) && (t.createTime = +t.createTime), i.notundef(t.updateTime) && (t.updateTime = +t.updateTime), t;
		}, r.reverseUsers = function (e) {
			return e.map(function (e) {
				return r.reverse(e);
			});
		}, r.validGenders = (0, _keys2.default)(s), e.exports = r;
	}, function (e, t) {
		"use strict";
		function n(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}var r = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
			return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		} : function (e) {
			return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		},
		    i = function () {
			function e() {
				n(this, e), this._entries = [];
			}return e.prototype.append = function (e, t) {
				if ("string" != typeof e) throw new TypeError("FormData name must be a string");if ("string" != typeof t && ("object" !== ("undefined" == typeof t ? "undefined" : r(t)) || "string" != typeof t.uri)) throw new TypeError("FormData value must be a string or { uri: tempFilePath }");this._entries.push([e, t]);
			}, e.prototype.set = function (e, t) {
				var n = this.get(e);n ? n[1] = t : this.append(e, t);
			}, e.prototype["delete"] = function (e) {
				this._entries = this._entries.filter(function (t) {
					return t[0] !== e;
				});
			}, e.prototype.entries = function () {
				return this._entries;
			}, e.prototype.get = function (e) {
				return this._entries.find(function (t) {
					return t[0] === e;
				});
			}, e.prototype.getAll = function (e) {
				return this._entries.filter(function (t) {
					return t[0] === e;
				});
			}, e.prototype.has = function (e) {
				return this._entries.some(function (t) {
					return t[0] === e;
				});
			}, e.prototype.keys = function () {
				return this._entries.map(function (e) {
					return e[0];
				});
			}, e.prototype.values = function () {
				return this._entries.map(function (e) {
					return e[1];
				});
			}, e;
		}();e.exports = i;
	}, function (e, t) {
		"use strict";
		function n(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}var r = function () {
			function e() {
				n(this, e);
			}return e.prototype.getItem = function (e) {
				return wx.getStorageSync(e);
			}, e.prototype.setItem = function (e, t) {
				return wx.setStorageSync(e, t);
			}, e.prototype.removeItem = function (e) {
				return this.setItem(e, "");
			}, e.prototype.clear = function () {
				return wx.clearStorageSync();
			}, e;
		}();e.exports = new r();
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}function i(e, t) {
			if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && "function" != typeof t ? e : t;
		}function s(e, t) {
			if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)));e.prototype = (0, _create2.default)(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(e, t) : e.__proto__ = t);
		}var o = function () {
			function e(e, t) {
				for (var n = 0; n < t.length; n++) {
					var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), (0, _defineProperty2.default)(e, r.key, r);
				}
			}return function (t, n, r) {
				return n && e(t.prototype, n), r && e(t, r), t;
			};
		}(),
		    a = n(37),
		    c = n(24),
		    u = 0,
		    l = 1,
		    d = 2,
		    m = 3,
		    f = ["open", "error", "message", "close"],
		    p = void 0;wx.onSocketOpen(function (e) {
			p && (p._readyState = l, p.dispatchEvent({ type: "open" }));
		}), wx.onSocketError(function (e) {
			p && (p._readyState = m, p.dispatchEvent(e));
		}), wx.onSocketMessage(function (e) {
			if (p) {
				var t = e.data,
				    n = e.origin,
				    r = e.ports,
				    i = e.source;p.dispatchEvent({ data: t, origin: n, ports: r, source: i, type: "message" });
			}
		}), wx.onSocketClose(function (e) {
			if (p) {
				p._readyState = m;var t = e.code,
				    n = e.reason,
				    r = e.wasClean;console && void 0, console && void 0, console && void 0, p.dispatchEvent({ code: t, reason: n, wasClean: r, type: "close" }), p = null;
			}
		});var y = function (e) {
			function t(n, s) {
				if (r(this, t), !n) throw new TypeError("Failed to construct 'WebSocket': url required");if (s) throw new Error("subprotocal not supported in weapp");var o = i(this, e.call(this));return n = n.replace(/:\d+/, ""), o._url = n, o._protocal = "", o._readyState = u, p && p.dispatchEvent({ type: "close" }), p = o, wx.connectSocket({ url: n }), o;
			}return s(t, e), t.prototype.close = function () {
				this.readyState === u, wx.closeSocket();
			}, t.prototype.send = function (e) {
				if (this.readyState !== l) throw new Error("INVALID_STATE_ERR");if ("string" != typeof e) throw new TypeError("only string typed data are supported");wx.sendSocketMessage({ data: e });
			}, o(t, [{ key: "url", get: function get() {
					return this._url;
				} }, { key: "protocal", get: function get() {
					return this._protocal;
				} }, { key: "readyState", get: function get() {
					return this._readyState;
				} }]), t;
		}(a(f));c(y, { CONNECTING: u, OPEN: l, CLOSING: d, CLOSED: m }), e.exports = y;
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}function i(e, t) {
			if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && "function" != typeof t ? e : t;
		}function s(e, t) {
			if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)));e.prototype = (0, _create2.default)(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(e, t) : e.__proto__ = t);
		}function o(e) {
			this.status = e.statusCode, this.statusText = e.statusCode;var t = e.data;"string" != typeof t && (t = (0, _stringify2.default)(t)), this.responseText = this.response = t, this.readyState = p, this.dispatchEvent({ type: "readystatechange" });
		}var a = n(37),
		    c = n(30),
		    u = n(24),
		    l = 0,
		    d = 1,
		    m = 2,
		    f = 3,
		    p = 4,
		    y = ["abort", "error", "load", "loadstart", "progress", "timeout", "loadend", "readystatechange"],
		    h = function (e) {
			function t() {
				r(this, t);var n = i(this, e.call(this));return n.withCredentials = !0, n.readyState = l, n._headers = {}, n;
			}return s(t, e), t.prototype.abort = function () {}, t.prototype.getAllResponseHeaders = function () {
				return "";
			}, t.prototype.getResponseHeader = function (e) {
				return "content-type" === e ? "application/json" : "";
			}, t.prototype.overrideMimeType = function () {
				throw new Error("not supported in weapp");
			}, t.prototype.open = function (e, t) {
				var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];if (this.readyState !== l) throw new Error("request is already opened");if (!n) throw new Error("sync request is not supported");this._method = e, t = t.replace(/:\d+/, ""), this._url = t, this.readyState = d, this.dispatchEvent({ type: "readystatechange" });
			}, t.prototype.setRequestHeader = function (e, t) {
				if (this.readyState !== d) throw new Error("request is not opened");this._headers[e.toLowerCase()] = t;
			}, t.prototype.send = function (e) {
				var t = this;if (this.readyState !== d) throw new Error("request is not opened");if (e instanceof c) {
					var n = e.entries(),
					    r = n.filter(function (e) {
						return "string" != typeof e[1];
					});if (0 === r.length) throw new Error("Must specify a Blob field in FormData");r.length > 1;var i = n.filter(function (e) {
						return "string" == typeof e[1];
					}).reduce(function (e, t) {
						var n;return u(e, (n = {}, n[t[0]] = t[1], n));
					}, {});wx.uploadFile({ url: this._url, name: r[0][0], filePath: r[0][1].uri, formData: i, header: this._headers, success: o.bind(this), fail: function fail(e) {
							t.dispatchEvent({ type: "error" });
						} });
				} else wx.request({ url: this._url, data: e || "", method: this._method, header: this._headers, success: o.bind(this), fail: function fail(e) {
						e.errMsg && e.errMsg.indexOf("url not in domain list") !== -1 && wx.showModal({ title: "domain error", content: e.errMsg + " " + t._url }), t.dispatchEvent({ type: "error" });
					} });
			}, t;
		}(a(y));u(h, { UNSENT: l, OPENED: d, HEADERS_RECEIVED: m, LOADING: f, DONE: p }), e.exports = h;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			i.verifyOptions(e, "type"), i.verifyParamValid("type", e.type, r.validTypes), i.merge(this, e), this.type = s[e.type];
		}var i = n(1),
		    s = { stripmeta: 0, blur: 2, quality: 3, crop: 4, rotate: 5, thumbnail: 7, interlace: 9 },
		    o = { 0: "stripmeta", 1: "type", 2: "blur", 3: "quality", 4: "crop", 5: "rotate", 6: "pixel", 7: "thumbnail", 8: "watermark", 9: "interlace", 10: "tmp" };r.validTypes = (0, _keys2.default)(s), r.reverse = function (e) {
			var t = i.copy(e);return t.type = o[t.type], t;
		}, r.reverseImageOps = function (e) {
			return e.map(function (e) {
				return r.reverse(e);
			});
		}, e.exports = r;
	}, function (e, t) {
		"use strict";
		var n = { link: { id: 1, heartbeat: 2 }, misc: { id: 6, getSimpleNosToken: 1, getNosToken: 2, notifyUploadLog: 3, uploadSdkLogUrl: 4, audioToText: 5, processImage: 6 } },
		    r = { heartbeat: { sid: n.link.id, cid: n.link.heartbeat }, getSimpleNosToken: { sid: n.misc.id, cid: n.misc.getSimpleNosToken, params: [{ type: "int", name: "num" }] }, getNosToken: { sid: n.misc.id, cid: n.misc.getNosToken, params: [{ type: "String", name: "responseBody" }] }, uploadSdkLogUrl: { sid: n.misc.id, cid: n.misc.uploadSdkLogUrl, params: [{ type: "string", name: "url" }] }, audioToText: { sid: n.misc.id, cid: n.misc.audioToText, params: [{ type: "Property", name: "audioToText" }] }, processImage: { sid: n.misc.id, cid: n.misc.processImage, params: [{ type: "String", name: "url" }, { type: "PropertyArray", name: "imageOps", entity: "imageOp" }] } },
		    i = { "1_2": { service: "link", cmd: "heartbeat" }, "6_1": { service: "misc", cmd: "getSimpleNosToken", response: [{ type: "PropertyArray", name: "nosTokens", entity: "nosToken" }] }, "6_2": { service: "misc", cmd: "getNosToken", response: [{ type: "Property", name: "nosToken" }] }, "6_3": { service: "misc", cmd: "notifyUploadLog"
			}, "6_5": { service: "misc", cmd: "audioToText", response: [{ type: "String", name: "text" }] }, "6_6": { service: "misc", cmd: "processImage", response: [{ type: "String", name: "url" }] } };e.exports = { idMap: n, cmdConfig: r, packetConfig: i };
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = {};i.fromDataURL = r.blobFromDataURL, e.exports = i;
	}, function (e, t, n) {
		"use strict";
		var r = n(23),
		    i = n(74),
		    s = n(75),
		    o = r.LISTENERS,
		    a = r.CAPTURE,
		    c = r.BUBBLE,
		    u = r.ATTRIBUTE,
		    l = r.newNode,
		    d = i.defineCustomEventTarget,
		    m = s.createEventWrapper,
		    f = s.STOP_IMMEDIATE_PROPAGATION_FLAG,
		    p = "undefined" != typeof window && "undefined" != typeof window.EventTarget,
		    y = e.exports = function h() {
			if (!(this instanceof h)) {
				if (1 === arguments.length && Array.isArray(arguments[0])) return d(h, arguments[0]);if (arguments.length > 0) {
					for (var e = Array(arguments.length), t = 0; t < arguments.length; ++t) {
						e[t] = arguments[t];
					}return d(h, e);
				}throw new TypeError("Cannot call a class as a function");
			}(0, _defineProperty2.default)(this, o, { value: (0, _create2.default)(null) });
		};y.prototype = (0, _create2.default)((p ? window.EventTarget : Object).prototype, { constructor: { value: y, writable: !0, configurable: !0 }, addEventListener: { value: function value(e, t, n) {
					if (null == t) return !1;if ("function" != typeof t && "object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t))) throw new TypeError('"listener" is not an object.');var r = n ? a : c,
					    i = this[o][e];if (null == i) return this[o][e] = l(t, r), !0;for (var s = null; null != i;) {
						if (i.listener === t && i.kind === r) return !1;s = i, i = i.next;
					}return s.next = l(t, r), !0;
				}, configurable: !0, writable: !0 }, removeEventListener: { value: function value(e, t, n) {
					if (null == t) return !1;for (var r = n ? a : c, i = null, s = this[o][e]; null != s;) {
						if (s.listener === t && s.kind === r) return null == i ? this[o][e] = s.next : i.next = s.next, !0;i = s, s = s.next;
					}return !1;
				}, configurable: !0, writable: !0 }, dispatchEvent: { value: function value(e) {
					var t = this[o][e.type];if (null == t) return !0;for (var n = m(e, this); null != t && ("function" == typeof t.listener ? t.listener.call(this, n) : t.kind !== u && "function" == typeof t.listener.handleEvent && t.listener.handleEvent(n), !n[f]);) {
						t = t.next;
					}return !n.defaultPrevented;
				}, configurable: !0, writable: !0 } });
	}, function (e, t) {
		function n(e) {
			var t = r.call(e);return "[object Function]" === t || "function" == typeof e && "[object RegExp]" !== t || "undefined" != typeof window && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt);
		}e.exports = n;var r = Object.prototype.toString;
	}, function (e, t) {
		e.exports = function n(e, t) {
			"use strict";
			var r,
			    i,
			    s = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
			    o = /(^[ ]*|[ ]*$)/g,
			    a = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
			    c = /^0x[0-9a-f]+$/i,
			    u = /^0/,
			    l = function l(e) {
				return n.insensitive && ("" + e).toLowerCase() || "" + e;
			},
			    d = l(e).replace(o, "") || "",
			    m = l(t).replace(o, "") || "",
			    f = d.replace(s, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"),
			    p = m.replace(s, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"),
			    y = parseInt(d.match(c), 16) || 1 !== f.length && d.match(a) && Date.parse(d),
			    h = parseInt(m.match(c), 16) || y && m.match(a) && Date.parse(m) || null;if (h) {
				if (y < h) return -1;if (y > h) return 1;
			}for (var g = 0, v = Math.max(f.length, p.length); g < v; g++) {
				if (r = !(f[g] || "").match(u) && parseFloat(f[g]) || f[g] || 0, i = !(p[g] || "").match(u) && parseFloat(p[g]) || p[g] || 0, isNaN(r) !== isNaN(i)) return isNaN(r) ? 1 : -1;if ((typeof r === "undefined" ? "undefined" : (0, _typeof3.default)(r)) != (typeof i === "undefined" ? "undefined" : (0, _typeof3.default)(i)) && (r += "", i += ""), r < i) return -1;if (r > i) return 1;
			}return 0;
		};
	}, function (e, t) {
		e.exports = function (e) {
			return e.webpackPolyfill || (e.deprecate = function () {}, e.paths = [], e.children = [], e.webpackPolyfill = 1), e;
		};
	}, function (e, t, n) {
		!function (t, n) {
			e.exports = n();
		}(this, function () {
			return function (e) {
				function t(r) {
					if (n[r]) return n[r].exports;var i = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
				}var n = {};return t.m = e, t.c = n, t.p = "", t(0);
			}([function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function i(e) {
					if (e && e.__esModule) return e;var t = {};if (null != e) for (var n in e) {
						Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
					}return t["default"] = e, t;
				}t.__esModule = !0;var s = n(1),
				    o = i(s),
				    a = n(3),
				    c = i(a),
				    u = n(4),
				    l = i(u),
				    d = n(5),
				    m = i(d),
				    f = n(6),
				    p = i(f),
				    y = n(8),
				    h = r(y),
				    g = n(2),
				    v = r(g),
				    b = n(9),
				    M = i(b),
				    T = n(10),
				    k = i(T),
				    S = n(11),
				    w = r(S),
				    C = n(12),
				    I = i(C),
				    P = n(7),
				    O = i(P),
				    E = n(13),
				    x = i(E),
				    _ = I.merge({}, o, c, l, m, p, { forOwn: h["default"], getGlobal: v["default"] }, M, k, { mixin: w["default"] }, I, O, x);delete _.__esModule, t["default"] = _, e.exports = t["default"];
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function i(e) {
					var t = (0, a["default"])(),
					    n = void 0;n = e.split(",")[0].indexOf("base64") >= 0 ? t.atob(e.split(",")[1]) : t.decodeURIComponent(e.split(",")[1]);for (var r = e.split(",")[0].split(":")[1].split(";")[0], i = new Uint8Array(n.length), s = 0; s < n.length; s++) {
						i[s] = n.charCodeAt(s);
					}return new t.Blob([i], { type: r });
				}function s(e, t) {
					var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "image/jpeg",
					    r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;if (e.toBlob) e.toBlob(t, n, r);else {
						var s = e.toDataURL(n, r);t(i(s));
					}
				}t.__esModule = !0, t.blobFromDataURL = i, t.blobFromCanvas = s;var o = n(2),
				    a = r(o);
			}, function (e, t) {
				(function (n) {
					"use strict";
					t.__esModule = !0, t["default"] = function () {
						return "undefined" != typeof window ? window : "undefined" != typeof self ? self : "undefined" != typeof n ? n : {};
					}, e.exports = t["default"];
				}).call(t, function () {
					return this;
				}());
			}, function (e, t) {
				"use strict";
				function n(e) {
					var t = !1,
					    n = "Webkit Moz ms O".split(" "),
					    r = document.createElement("div"),
					    i = null;if (e = e.toLowerCase(), void 0 !== r.style[e] && (t = !0), t === !1) {
						i = e.charAt(0).toUpperCase() + e.substr(1);for (var s = 0; s < n.length; s++) {
							if (void 0 !== r.style[n[s] + i]) {
								t = !0;break;
							}
						}
					}return t;
				}t.__esModule = !0, t.detectCSSFeature = n;
			}, function (e, t) {
				"use strict";
				t.__esModule = !0;t.o = {}, t.emptyObj = {}, t.f = function () {}, t.emptyFunc = function () {}, t.regBlank = /\s+/gi, t.regWhiteSpace = /\s+/gi;
			}, function (e, t) {
				"use strict";
				function n(e, t) {
					t = t || 2;for (var n = "" + e; n.length < t;) {
						n = "0" + n;
					}return n;
				}function r(e) {
					return "" + e.getFullYear();
				}function i(e) {
					return n(e.getMonth() + 1);
				}function s(e) {
					return n(e.getDate());
				}function o(e) {
					return n(e.getHours());
				}function a(e) {
					return n(e.getMinutes());
				}function c(e) {
					return n(e.getSeconds());
				}function u(e) {
					return n(e.getMilliseconds(), 3);
				}function l(e) {
					return e = "" + e, new Date(e.replace(/-/g, "/").replace("T", " "));
				}t.__esModule = !0, t.fix = n, t.getYearStr = r, t.getMonthStr = i, t.getDayStr = s, t.getHourStr = o, t.getMinuteStr = a, t.getSecondStr = c, t.getMillisecondStr = u, t.dateFromDateTimeLocal = l;t.format = function () {
					var e = /yyyy|MM|dd|hh|mm|ss|SSS/g,
					    t = { yyyy: r, MM: i, dd: s, hh: o, mm: a, ss: c, SSS: u };return function (n, r) {
						return n = new Date(n), isNaN(+n) ? "invalid date" : (r = r || "yyyy-MM-dd", r.replace(e, function (e) {
							return t[e](n);
						}));
					};
				}();
			}, function (e, t, n) {
				"use strict";
				function r(e, t) {
					if (e === t) return !0;for (; t.parentNode;) {
						if (t.parentNode === e) return !0;t = t.parentNode;
					}return !1;
				}function i(e) {
					var t = e.parentNode || document.body;e = e.cloneNode(!0), e.style.display = "block", e.style.opacity = 0, e.style.height = "auto", t.appendChild(e);var n = e.offsetHeight;return t.removeChild(e), n;
				}function s(e) {
					e.parentNode && e.parentNode.removeChild(e);
				}function o(e, t, n) {
					return (0, l.exist)(n) ? void e.setAttribute("data-" + t, n) : e.getAttribute("data-" + t);
				}function a(e) {
					return e.target || e.srcElement;
				}function c(e) {
					function t(r) {
						n.src && (e.multi || p(n, "load", t), e.onload(r));
					}e = e || {};var n;if (e.name) try {
						n = document.createElement('<iframe name="' + e.name + '"></iframe>'), n.frameBorder = 0;
					} catch (error) {
						n = document.createElement("iframe"), n.name = e.name;
					} else n = document.createElement("iframe");e.visible || (n.style.display = "none"), (0, l.isFunction)(e.onload) && m(n, "load", t);var r = e.parent;(r || document.body).appendChild(n);var i = e.src || "about:blank";return setTimeout(function () {
						n.src = i;
					}, 0), n;
				}function u(e) {
					var t = document.createElement("div");t.innerHTML = e;var n = [],
					    r = void 0,
					    i = void 0;if (t.children) for (r = 0, i = t.children.length; r < i; r++) {
						n.push(t.children[r]);
					} else for (r = 0, i = t.childNodes.length; r < i; r++) {
						var s = t.childNodes[r];1 === s.nodeType && n.push(s);
					}return n.length > 1 ? t : n[0];
				}t.__esModule = !0, t.off = t.removeEventListener = t.on = t.addEventListener = void 0, t.containsNode = r, t.calcHeight = i, t.remove = s, t.dataset = o, t.target = a, t.createIframe = c, t.html2node = u;var l = n(7),
				    d = t.addEventListener = function (e, t, n) {
					e.addEventListener ? e.addEventListener(t, n, !1) : e.attachEvent && e.attachEvent("on" + t, n);
				},
				    m = t.on = d,
				    f = t.removeEventListener = function (e, t, n) {
					e.removeEventListener ? e.removeEventListener(t, n, !1) : e.detachEvent && e.detachEvent("on" + t, n);
				},
				    p = t.off = f;
			}, function (e, t) {
				"use strict";
				function n(e) {
					return Object.prototype.toString.call(e).slice(8, -1);
				}function r(e) {
					return n(e).toLowerCase();
				}function i(e) {
					return "string" === r(e);
				}function s(e) {
					return "number" === r(e);
				}function o(e) {
					return "boolean" === r(e);
				}function a(e) {
					return "array" === r(e);
				}function c(e) {
					return "function" === r(e);
				}function u(e) {
					return "date" === r(e);
				}function l(e) {
					return "regexp" === r(e);
				}function d(e) {
					return "error" === r(e);
				}function m(e) {
					return null === e;
				}function f(e) {
					return null !== e;
				}function p(e) {
					return "undefined" == typeof e;
				}function y(e) {
					return "undefined" != typeof e;
				}function h(e) {
					return y(e) && f(e);
				}function g(e) {
					return p(e) || m(e);
				}function v(e) {
					return h(e) && "object" === r(e);
				}function b(e) {
					return g(e) || (i(e) || a(e)) && 0 === e.length;
				}t.__esModule = !0, t.getClass = n, t.typeOf = r, t.isString = i, t.isNumber = s, t.isBoolean = o, t.isArray = a, t.isFunction = c, t.isDate = u, t.isRegExp = l, t.isError = d, t.isnull = m, t.notnull = f, t.undef = p, t.notundef = y, t.exist = h, t.notexist = g, t.isObject = v, t.isEmpty = b;
			}, function (e, t) {
				"use strict";
				t.__esModule = !0, t["default"] = function () {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
					    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function () {},
					    n = arguments[2];for (var r in e) {
						e.hasOwnProperty(r) && t.call(n, r, e[r]);
					}
				}, e.exports = t["default"];
			}, function (e, t) {
				"use strict";
				t.__esModule = !0;t.uniqueID = function () {
					var e = 0;return function () {
						return "" + e++;
					};
				}();
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function i(e) {
					return (0, c.isString)(e) && 0 === e.indexOf("{") && e.lastIndexOf("}") === e.length - 1;
				}function s(e) {
					try {
						i(e) && (e = JSON.parse(e)), (0, c.isObject)(e) && (0, a["default"])(e, function (t, n) {
							switch ((0, c.typeOf)(n)) {case "string":case "object":
									e[t] = s(n);}
						});
					} catch (error) {}return e;
				}t.__esModule = !0, t.isJSON = i, t.parseJSON = s;var o = n(8),
				    a = r(o),
				    c = n(7);
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}t.__esModule = !0;var i = n(8),
				    s = r(i);t["default"] = function (e, t) {
					(0, s["default"])(t, function (t, n) {
						e[t] = n;
					});
				}, e.exports = t["default"];
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function i(e) {
					return JSON.parse((0, _stringify2.default)(e));
				}function s() {
					for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments.length, n = Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
						n[r - 1] = arguments[r];
					}return n.forEach(function (t) {
						(0, m["default"])(e, t);
					}), e;
				}function o(e, t) {
					return (0, p["default"])(t, function (t, n) {
						(0, y.undef)(e[t]) && (e[t] = n);
					}), e;
				}function a(e, t, n) {
					var r = e[t] || e[t.toLowerCase()];return (0, y.notexist)(r) && (r = n, e[t] = r), r;
				}function c(e, t) {
					return (0, p["default"])(e, function (n, r) {
						(0, y.exist)(t[n]) && (e[n] = t[n]);
					}), e;
				}function u() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ",",
					    n = {};return e.split(t).forEach(function (e) {
						var t = e.split("="),
						    r = t.shift();r && (n[decodeURIComponent(r)] = decodeURIComponent(t.join("=")));
					}), n;
				}function l(e, t, n) {
					if (!e) return "";var r = [];return (0, p["default"])(e, function (e, t) {
						(0, y.isFunction)(t) || ((0, y.isDate)(t) ? t = t.getTime() : (0, y.isArray)(t) ? t = t.join(",") : (0, y.isObject)(t) && (t = (0, _stringify2.default)(t)), n && (t = encodeURIComponent(t)), r.push(encodeURIComponent(e) + "=" + t));
					}), r.join(t || ",");
				}t.__esModule = !0, t.simpleClone = i, t.merge = s, t.fillUndef = o, t.checkWithDefault = a, t.fetch = c, t.string2object = u, t.object2string = l;var d = n(11),
				    m = r(d),
				    f = n(8),
				    p = r(f),
				    y = n(7);
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e.indexOf("?") < 0 ? "?" : "&";
				}function i(e) {
					return (0, s.object2string)(e, "&", !0);
				}t.__esModule = !0, t.url2origin = void 0, t.genUrlSep = r, t.object2query = i;var s = n(12);t.url2origin = function () {
					var e = /^([\w]+?:\/\/.*?(?=\/|$))/i;return function (t) {
						return e.test(t || "") ? RegExp.$1.toLowerCase() : "";
					};
				}();
			}]);
		});
	}, function (e, t, n) {
		var r;(function (i) {
			!function (s, o) {
				"use strict";
				function a() {
					return "undefined" != typeof s ? s : "undefined" != typeof self ? self : "undefined" != typeof i ? i : {};
				}s = a();var c,
				    u = s.IDBKeyRange || s.webkitIDBKeyRange,
				    l = { readonly: "readonly", readwrite: "readwrite" },
				    d = Object.prototype.hasOwnProperty,
				    m = function m() {
					if (!c && (c = s.indexedDB || s.webkitIndexedDB || s.mozIndexedDB || s.oIndexedDB || s.msIndexedDB || (null === s.indexedDB && s.shimIndexedDB ? s.shimIndexedDB : o), !c)) throw "IndexedDB required";return c;
				},
				    f = function f(e) {
					return e;
				},
				    p = function p(e) {
					return Object.prototype.toString.call(e).slice(8, -1).toLowerCase();
				},
				    y = function y(e) {
					return "function" == typeof e;
				},
				    h = function h(e) {
					return "number" === p(e);
				},
				    g = function g(e) {
					return "array" === p(e);
				},
				    v = function v(e) {
					return e === o;
				},
				    b = function b(e, t) {
					var n = this,
					    r = !1;this.name = t, this.getIndexedDB = function () {
						return e;
					}, this.add = function (t) {
						if (r) throw "Database has been closed";for (var i = [], s = 0, o = 0; o < arguments.length - 1; o++) {
							if (Array.isArray(arguments[o + 1])) for (var a = 0; a < arguments[o + 1].length; a++) {
								i[s] = arguments[o + 1][a], s++;
							} else i[s] = arguments[o + 1], s++;
						}var c = e.transaction(t, l.readwrite),
						    u = c.objectStore(t);return new _promise2.default(function (e, t) {
							i.forEach(function (e) {
								var t;if (e.item && e.key) {
									var n = e.key;e = e.item, t = u.add(e, n);
								} else t = u.add(e);t.onsuccess = function (t) {
									var n = t.target,
									    r = n.source.keyPath;null === r && (r = "__id__"), (0, _defineProperty2.default)(e, r, { value: n.result, enumerable: !0 });
								};
							}), c.oncomplete = function () {
								e(i, n);
							}, c.onerror = function (e) {
								e.preventDefault(), t(e);
							}, c.onabort = function (e) {
								t(e);
							};
						});
					}, this.updateAndDelete = function (t, n, i) {
						if (r) throw "Database has been closed";var s = e.transaction(t, l.readwrite),
						    o = s.objectStore(t),
						    a = o.keyPath;return new _promise2.default(function (e, t) {
							n.forEach(function (e) {
								if (e.item && e.key) {
									var t = e.key;e = e.item, o.put(e, t);
								} else o.put(e);
							}), i.forEach(function (e) {
								o["delete"](e[a]);
							}), s.oncomplete = function () {
								e([n, i]);
							}, s.onerror = function (e) {
								t(e);
							};
						});
					}, this.update = function (t) {
						if (r) throw "Database has been closed";for (var i, s = [], o = 1; o < arguments.length; o++) {
							i = arguments[o], Array.isArray(i) ? s = s.concat(i) : s.push(i);
						}var a = e.transaction(t, l.readwrite),
						    c = a.objectStore(t);c.keyPath;return new _promise2.default(function (e, t) {
							s.forEach(function (e) {
								var t;if (e.item && e.key) {
									var n = e.key;e = e.item, t = c.put(e, n);
								} else t = c.put(e);t.onsuccess = function (e) {}, t.onerror = function (e) {};
							}), a.oncomplete = function () {
								e(s, n);
							}, a.onerror = function (e) {
								t(e);
							}, a.onabort = function (e) {
								t(e);
							};
						});
					}, this.remove = function (t, n) {
						if (r) throw "Database has been closed";var i = e.transaction(t, l.readwrite),
						    s = i.objectStore(t);return new _promise2.default(function (e, t) {
							Array.isArray(n) || (n = [n]), n.forEach(function (e) {
								s["delete"](e);
							}), i.oncomplete = function () {
								e(n);
							}, i.onerror = function (e) {
								t(e);
							}, i.onabort = function (e) {
								t(e);
							};
						});
					}, this.clear = function (t) {
						if (r) throw "Database has been closed";var n = e.transaction(t, l.readwrite),
						    i = n.objectStore(t);i.clear();return new _promise2.default(function (e, t) {
							n.oncomplete = function () {
								e();
							}, n.onerror = function (e) {
								t(e);
							};
						});
					}, this.close = function () {
						r || (e.close(), r = !0, delete S[t]);
					}, this.get = function (t, n) {
						if (r) throw "Database has been closed";var i = e.transaction(t),
						    s = i.objectStore(t),
						    o = s.get(n);return new _promise2.default(function (e, t) {
							o.onsuccess = function (t) {
								e(t.target.result);
							}, i.onerror = function (e) {
								t(e);
							};
						});
					}, this.query = function (t, n) {
						if (r) throw "Database has been closed";return new M(t, e, n);
					}, this.count = function (t, n) {
						if (r) throw "Database has been closed";var i = e.transaction(t);i.objectStore(t);
					};for (var i = 0, s = e.objectStoreNames.length; i < s; i++) {
						!function (e) {
							n[e] = {};for (var t in n) {
								d.call(n, t) && "close" !== t && (n[e][t] = function (t) {
									return function () {
										var r = [e].concat([].slice.call(arguments, 0));return n[t].apply(n, r);
									};
								}(t));
							}
						}(e.objectStoreNames[i]);
					}
				},
				    M = function M(e, t, n) {
					var r = this,
					    i = !1,
					    s = !1,
					    a = function a(r, _a, c, d, m, f, p) {
						return new _promise2.default(function (h, g) {
							var v = i || s ? l.readwrite : l.readonly,
							    b = t.transaction(e, v),
							    M = b.objectStore(e),
							    T = n ? M.index(n) : M,
							    k = r ? u[r].apply(null, _a) : null,
							    S = [],
							    w = [k],
							    C = 0;m = m ? m : null, f = f ? f : [], "count" !== c && w.push(d || "next");var I = !!i && (0, _keys2.default)(i),
							    P = function P(e) {
								for (var t = 0; t < I.length; t++) {
									var n = I[t],
									    r = i[n];r instanceof Function && (r = r(e)), e[n] = r;
								}return e;
							};T[c].apply(T, w).onsuccess = function (e) {
								var t = e.target.result;if ("number" == typeof t) S = t;else if (t) if (null !== m && m[0] > C) C = m[0], t.advance(m[0]);else if (null !== m && C >= m[0] + m[1]) ;else {
									var n = !0,
									    r = "value" in t ? t.value : t.key;f.forEach(function (e) {
										e && e.length && (2 === e.length ? n = n && r[e[0]] === e[1] : y(e[0]) && (n = n && e[0].apply(o, [r])));
									}), n && (C++, S.push(p(r)), s ? t["delete"]() : i && (r = P(r), t.update(r))), t["continue"]();
								}
							}, b.oncomplete = function () {
								h(S);
							}, b.onerror = function (e) {
								g(e);
							}, b.onabort = function (e) {
								g(e);
							};
						});
					},
					    c = function c(e, t) {
						var n = "next",
						    r = "openCursor",
						    o = [],
						    c = null,
						    u = f,
						    l = !1,
						    d = function d() {
							return a(e, t, r, l ? n + "unique" : n, c, o, u);
						},
						    m = function m() {
							return n = null, r = "count", { execute: d };
						},
						    p = function p() {
							return c = g(arguments[0]) ? arguments[0] : Array.prototype.slice.call(arguments, 0, 2), 1 == c.length && c.unshift(0), h(c[1]) || (c = null), { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    b = function b(e) {
							return e = !!v(e) || !!e, e && (r = "openKeyCursor"), { execute: d, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    M = function M() {
							return o.push(Array.prototype.slice.call(arguments, 0, 2)), { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    T = function T(e) {
							return e = !!v(e) || !!e, n = e ? "next" : "prev", { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    k = function k(e) {
							return e = !!v(e) || !!e, n = e ? "prev" : "next", { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    S = function S(e) {
							return e = !!v(e) || !!e, l = e, { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    w = function w(e) {
							return i = e, { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    C = function C(e) {
							return y(e) && (u = e), { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						},
						    I = function I(e) {
							return e = !!v(e) || !!e, s = e, { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
						};return { execute: d, count: m, keys: b, filter: M, asc: T, desc: k, distinct: S, modify: w, limit: p, map: C, remove: I };
					};"only bound upperBound lowerBound".split(" ").forEach(function (e) {
						r[e] = function () {
							return new c(e, arguments);
						};
					}), this.filter = function () {
						var e = new c(null, null);return e.filter.apply(e, arguments);
					}, this.all = function () {
						return this.filter();
					};
				},
				    T = function T(e, t, n) {
					"function" == typeof t && (t = t());for (var r in t) {
						var i,
						    s = t[r];i = !d.call(t, r) || n.objectStoreNames.contains(r) ? e.currentTarget.transaction.objectStore(r) : n.createObjectStore(r, s.key);for (var o in s.indexes) {
							var a = s.indexes[o];try {
								i.index(o);
							} catch (e) {
								i.createIndex(o, a.key || o, (0, _keys2.default)(a).length ? a : { unique: !1 });
							}
						}
					}
				},
				    k = function k(e, t, n, r) {
					var i = e.target.result,
					    s = new b(i, t);return S[t] = i, _promise2.default.resolve(s);
				},
				    S = {},
				    w = { version: "0.10.2", open: function open(e) {
						var t;return new _promise2.default(function (n, r) {
							if (S[e.server]) k({ target: { result: S[e.server] } }, e.server, e.version, e.schema).then(n, r);else {
								try {
									t = m().open(e.server, e.version);
								} catch (e) {
									r(e);
								}t.onsuccess = function (t) {
									k(t, e.server, e.version, e.schema).then(n, r);
								}, t.onupgradeneeded = function (t) {
									T(t, e.schema, t.target.result);
								}, t.onerror = function (e) {
									r(e);
								};
							}
						});
					}, remove: function remove(e) {
						return new _promise2.default(function (t, n) {
							if (!e) return t();(typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) === b && (e = e.name);var r;"string" == typeof e && (r = S[e]), r && "function" == typeof r.close && r.close();var i;try {
								i = m().deleteDatabase(e);
							} catch (e) {
								n(e);
							}i.onsuccess = function (n) {
								delete S[e], t(e);
							}, i.onerror = function (e) {
								n(e);
							}, i.onblocked = function (e) {
								n(e);
							};
						});
					} };"undefined" != typeof e && "undefined" != typeof e.exports ? e.exports = w : (r = function () {
					return w;
				}.call(t, n, t, e), !(r !== o && (e.exports = r)));
			}(window);
		}).call(t, function () {
			return this;
		}());
	}, function (e, t, n) {
		"use strict";
		t.__esModule = !0, t["default"] = function (e) {
			u.merge(e, { platform: r, xhr: i, io: s, naturalSort: o, deepAccess: a, db: c, util: u, support: l, blob: d, ajax: m, Promise: f });
		};var r = n(11),
		    i = n(82),
		    s = n(17),
		    o = n(39),
		    a = n(25),
		    c = n(42),
		    u = n(1),
		    l = n(47),
		    d = n(36),
		    m = n(16),
		    f = n(2).Promise;e.exports = t["default"];
	},, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;s(e.shouldPushNotificationWhenPCOnline) && (t.open = e.shouldPushNotificationWhenPCOnline ? 2 : 1);
		}var i = n(1),
		    s = i.notundef;r.getDefaultConfig = function () {
			return { shouldPushNotificationWhenPCOnline: !0 };
		}, r.reverse = function (e) {
			var t = { shouldPushNotificationWhenPCOnline: 1 !== +e.open };return t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = n(35),
		    s = r.merge({}, i.idMap, { auth: { id: 2, login: 3, kicked: 5, logout: 6, multiPortLogin: 7, kick: 8 }, user: { id: 3, markInBlacklist: 3, getBlacklist: 4, markInMutelist: 5, getMutelist: 6, getRelations: 8, getUsers: 7, updateMyInfo: 10, updateDonnop: 15, syncMyInfo: 109, syncUpdateMyInfo: 110 }, notify: { id: 4, markRead: 3, syncOfflineMsgs: 4, batchMarkRead: 5, syncOfflineSysMsgs: 6, syncRoamingMsgs: 9, syncMsgReceipts: 12 }, sync: { id: 5, sync: 1, syncTeamMembers: 2 }, msg: { id: 7, sendMsg: 1, msg: 2, sysMsg: 3, getHistoryMsgs: 6, sendCustomSysMsg: 7, searchHistoryMsgs: 8, deleteSessions: 9, getSessions: 10, syncSendMsg: 101, sendMsgReceipt: 11, msgReceipt: 12, deleteMsg: 13, msgDeleted: 14, markSessionAck: 16 }, team: { id: 8, createTeam: 1, sendTeamMsg: 2, teamMsg: 3, teamMsgs: 4, addTeamMembers: 5, removeTeamMembers: 6, updateTeam: 7, leaveTeam: 8, getTeam: 9, getTeams: 10, getTeamMembers: 11, dismissTeam: 12, applyTeam: 13, passTeamApply: 14, rejectTeamApply: 15, addTeamManagers: 16, removeTeamManagers: 17, transferTeam: 18, updateInfoInTeam: 19, updateNickInTeam: 20, acceptTeamInvite: 21, rejectTeamInvite: 22, getTeamHistoryMsgs: 23, searchTeamHistoryMsgs: 24, updateMuteStateInTeam: 25, getMyTeamMembers: 26, getMutedTeamMembers: 27, syncMyTeamMembers: 126, syncTeams: 109, syncTeamMembers: 111, syncCreateTeam: 101, syncSendTeamMsg: 102, syncUpdateTeamMember: 119 }, friend: { id: 12, friendRequest: 1, syncFriendRequest: 101, deleteFriend: 2, syncDeleteFriend: 102, updateFriend: 3, syncUpdateFriend: 103, getFriends: 4 }, chatroom: { id: 13, getChatroomAddress: 1 }, filter: { id: 101, sendFilterMsg: 1, filterMsg: 2, filterSysMsg: 3, sendFilterCustomSysMsg: 7 }, eventService: { id: 14, publishEvent: 1, pushEvent: 2, subscribeEvent: 3, unSubscribeEventsByAccounts: 4, unSubscribeEventsByType: 5, querySubscribeEventsByAccounts: 6, querySubscribeEventsByType: 7, pushEvents: 9 } }),
		    o = r.merge({}, i.cmdConfig, { login: { sid: s.auth.id, cid: s.auth.login, params: [{ type: "Property", name: "login" }] }, logout: { sid: s.auth.id, cid: s.auth.logout }, kick: { sid: s.auth.id, cid: s.auth.kick, params: [{ type: "StrArray", name: "deviceIds" }] }, markInBlacklist: { sid: s.user.id, cid: s.user.markInBlacklist, params: [{ type: "String", name: "account" }, { type: "bool", name: "isAdd" }] }, getBlacklist: { sid: s.user.id, cid: s.user.getBlacklist, params: [{ type: "long", name: "time" }] }, markInMutelist: { sid: s.user.id, cid: s.user.markInMutelist, params: [{ type: "String", name: "account" }, { type: "bool", name: "isAdd" }] }, getMutelist: { sid: s.user.id, cid: s.user.getMutelist, params: [{ type: "long", name: "time" }] }, getRelations: { sid: s.user.id, cid: s.user.getRelations, params: [{ type: "long", name: "timetag" }] }, getUsers: { sid: s.user.id, cid: s.user.getUsers, params: [{ type: "StrArray", name: "accounts" }] }, updateMyInfo: { sid: s.user.id, cid: s.user.updateMyInfo, params: [{ type: "Property", name: "user" }] }, updateDonnop: { sid: s.user.id, cid: s.user.updateDonnop, params: [{ type: "Property", name: "donnop" }] }, markRead: { sid: s.notify.id, cid: s.notify.markRead, params: [{ type: "long", name: "id" }, { type: "ph", name: "ph" }] }, batchMarkRead: { sid: s.notify.id, cid: s.notify.batchMarkRead, params: [{ type: "byte", name: "sid" }, { type: "byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, sync: { sid: s.sync.id, cid: s.sync.sync, params: [{ type: "Property", name: "sync" }] }, syncTeamMembers: { sid: s.sync.id, cid: s.sync.syncTeamMembers, params: [{ type: "LongLongMap", name: "sync" }] }, sendMsg: { sid: s.msg.id, cid: s.msg.sendMsg, params: [{ type: "Property", name: "msg" }] }, getHistoryMsgs: { sid: s.msg.id, cid: s.msg.getHistoryMsgs, params: [{ type: "String", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "long", name: "lastMsgId" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, sendCustomSysMsg: { sid: s.msg.id, cid: s.msg.sendCustomSysMsg, params: [{ type: "Property", name: "sysMsg" }] }, searchHistoryMsgs: { sid: s.msg.id, cid: s.msg.searchHistoryMsgs, params: [{ type: "String", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "String", name: "keyword" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, getSessions: { sid: s.msg.id, cid: s.msg.getSessions, params: [{ type: "long", name: "time" }] }, deleteSessions: { sid: s.msg.id, cid: s.msg.deleteSessions, params: [{ type: "StrArray", name: "sessions" }] }, sendMsgReceipt: { sid: s.msg.id, cid: s.msg.sendMsgReceipt, params: [{ type: "Property", name: "msgReceipt" }] }, deleteMsg: { sid: s.msg.id, cid: s.msg.deleteMsg, params: [{ type: "Property", name: "sysMsg" }] }, markSessionAck: { sid: s.msg.id, cid: s.msg.markSessionAck, params: [{ type: "byte", name: "scene" }, { type: "String", name: "to" }, { type: "long", name: "timetag" }] }, createTeam: { sid: s.team.id, cid: s.team.createTeam, params: [{ type: "Property", name: "team" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }] }, sendTeamMsg: { sid: s.team.id, cid: s.team.sendTeamMsg, params: [{ type: "Property", name: "msg" }] }, addTeamMembers: { sid: s.team.id, cid: s.team.addTeamMembers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }] }, removeTeamMembers: { sid: s.team.id, cid: s.team.removeTeamMembers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, updateTeam: { sid: s.team.id, cid: s.team.updateTeam, params: [{ type: "Property", name: "team" }] }, leaveTeam: { sid: s.team.id, cid: s.team.leaveTeam, params: [{ type: "long", name: "teamId" }] }, getTeam: { sid: s.team.id, cid: s.team.getTeam, params: [{ type: "long", name: "teamId" }] }, getTeams: { sid: s.team.id, cid: s.team.getTeams, params: [{ type: "long", name: "timetag" }] }, getTeamMembers: { sid: s.team.id, cid: s.team.getTeamMembers, params: [{ type: "long", name: "teamId" }, { type: "long", name: "timetag" }] }, dismissTeam: { sid: s.team.id, cid: s.team.dismissTeam, params: [{ type: "long", name: "teamId" }] }, applyTeam: { sid: s.team.id, cid: s.team.applyTeam, params: [{ type: "long", name: "teamId" }, { type: "String", name: "ps" }] }, passTeamApply: { sid: s.team.id, cid: s.team.passTeamApply, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }] }, rejectTeamApply: { sid: s.team.id, cid: s.team.rejectTeamApply, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, addTeamManagers: { sid: s.team.id, cid: s.team.addTeamManagers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, removeTeamManagers: { sid: s.team.id, cid: s.team.removeTeamManagers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, transferTeam: { sid: s.team.id, cid: s.team.transferTeam, params: [{ type: "long", name: "teamId" }, { type: "String", name: "account" }, { type: "bool", name: "leave" }] }, updateInfoInTeam: { sid: s.team.id, cid: s.team.updateInfoInTeam, params: [{ type: "Property", name: "teamMember" }] }, updateNickInTeam: { sid: s.team.id, cid: s.team.updateNickInTeam, params: [{ type: "Property", name: "teamMember" }] }, acceptTeamInvite: { sid: s.team.id, cid: s.team.acceptTeamInvite, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }] }, rejectTeamInvite: { sid: s.team.id, cid: s.team.rejectTeamInvite, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, getTeamHistoryMsgs: { sid: s.team.id, cid: s.team.getTeamHistoryMsgs, params: [{ type: "long", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "long", name: "lastMsgId" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, searchTeamHistoryMsgs: { sid: s.team.id, cid: s.team.searchTeamHistoryMsgs, params: [{ type: "long", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "String", name: "keyword" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, updateMuteStateInTeam: { sid: s.team.id, cid: s.team.updateMuteStateInTeam, params: [{ type: "long", name: "teamId" }, { type: "String", name: "account" }, { type: "int", name: "mute" }] }, getMyTeamMembers: { sid: s.team.id, cid: s.team.getMyTeamMembers, params: [{ type: "LongArray", name: "teamIds" }] }, getMutedTeamMembers: { sid: s.team.id, cid: s.team.getMutedTeamMembers, params: [{ type: "long", name: "teamId" }] }, friendRequest: { sid: s.friend.id, cid: s.friend.friendRequest, params: [{ type: "String", name: "account" }, { type: "byte", name: "type" }, { type: "String", name: "ps" }] }, deleteFriend: { sid: s.friend.id, cid: s.friend.deleteFriend, params: [{ type: "String", name: "account" }] }, updateFriend: { sid: s.friend.id, cid: s.friend.updateFriend, params: [{ type: "Property", name: "friend" }] }, getFriends: { sid: s.friend.id, cid: s.friend.getFriends, params: [{ type: "long", name: "timetag" }] }, getChatroomAddress: { sid: s.chatroom.id, cid: s.chatroom.getChatroomAddress, params: [{ type: "long", name: "chatroomId" }] }, sendFilterMsg: { sid: s.filter.id, cid: s.filter.sendFilterMsg, params: [{ type: "Property", name: "msg" }] }, sendFilterCustomSysMsg: { sid: s.filter.id, cid: s.filter.sendFilterCustomSysMsg, params: [{ type: "Property", name: "sysMsg" }] }, publishEvent: { sid: s.eventService.id, cid: s.eventService.publishEvent, params: [{ type: "Property", name: "msgEvent" }] }, pushEvent: { sid: s.eventService.id, cid: s.eventService.pushEvent }, subscribeEvent: { sid: s.eventService.id, cid: s.eventService.subscribeEvent, params: [{ type: "Property", name: "msgEventSubscribe" }, { type: "StrArray", name: "accounts" }] }, unSubscribeEventsByAccounts: { sid: s.eventService.id, cid: s.eventService.unSubscribeEventsByAccounts, params: [{ type: "Property", name: "msgEventSubscribe" }, { type: "StrArray", name: "accounts" }] }, unSubscribeEventsByType: { sid: s.eventService.id, cid: s.eventService.unSubscribeEventsByType, params: [{ type: "Property", name: "msgEventSubscribe" }] }, querySubscribeEventsByAccounts: { sid: s.eventService.id, cid: s.eventService.querySubscribeEventsByAccounts, params: [{ type: "Property", name: "msgEventSubscribe" }, { type: "StrArray", name: "accounts" }] }, querySubscribeEventsByType: { sid: s.eventService.id, cid: s.eventService.querySubscribeEventsByType, params: [{ type: "Property", name: "msgEventSubscribe" }] }, pushEvents: { sid: s.eventService.id, cid: s.eventService.pushEvents } }),
		    a = r.merge({}, i.packetConfig, { "2_3": { service: "auth", cmd: "login", response: [{ type: "Property", name: "loginRes" }, { type: "PropertyArray", name: "loginPorts", entity: "loginPort" }] }, "2_5": { service: "auth", cmd: "kicked", response: [{ type: "Number", name: "from" }, { type: "Number", name: "reason" }] }, "2_6": { service: "auth", cmd: "logout" }, "2_7": { service: "auth", cmd: "multiPortLogin", response: [{ type: "Number", name: "state" }, { type: "PropertyArray", name: "loginPorts", entity: "loginPort" }] }, "2_8": { service: "auth", cmd: "kick", response: [{ type: "StrArray", name: "deviceIds" }] }, "3_3": { service: "user", cmd: "markInBlacklist" }, "3_103": { service: "user", cmd: "syncMarkInBlacklist", response: [{ type: "String", name: "account" }, { type: "Boolean", name: "isAdd" }] }, "3_4": { service: "user", cmd: "getBlacklist", response: [{ type: "StrArray", name: "blacklist" }] }, "3_5": { service: "user", cmd: "markInMutelist" }, "3_105": { service: "user", cmd: "syncMarkInMutelist", response: [{ type: "String", name: "account" }, { type: "Boolean", name: "isAdd" }] }, "3_6": { service: "user", cmd: "getMutelist", response: [{ type: "StrArray", name: "mutelist" }] }, "3_8": { service: "user", cmd: "getRelations", response: [{ type: "PropertyArray", name: "specialRelations", entity: "specialRelation" }, { type: "Number", name: "timetag" }] }, "3_7": { service: "user", cmd: "getUsers", response: [{ type: "PropertyArray", name: "users", entity: "user" }] }, "3_10": { service: "user", cmd: "updateMyInfo", response: [{ type: "Number", name: "timetag" }] }, "3_15": { service: "user", cmd: "updateDonnop", response: [{ type: "Number", name: "timetag" }] }, "3_115": { service: "user", cmd: "syncUpdateDonnop", response: [{ type: "Property", name: "donnop" }, { type: "Number", name: "timetag" }] }, "3_109": { service: "user", cmd: "syncMyInfo", response: [{ type: "Property", name: "user" }, { type: "Number", name: "timetag" }] }, "3_110": { service: "user", cmd: "syncUpdateMyInfo", response: [{ type: "Property", name: "user" }] }, "4_1": { service: "notify" }, "4_2": { service: "notify" }, "4_3": { service: "notify", cmd: "markRead" }, "4_4": { service: "notify", cmd: "syncOfflineMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "4_5": { service: "notify", cmd: "batchMarkRead" }, "4_6": { service: "notify", cmd: "syncOfflineSysMsgs", response: [{ type: "PropertyArray", name: "sysMsgs", entity: "sysMsg" }] }, "4_9": { service: "notify", cmd: "syncRoamingMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "4_12": { service: "notify", cmd: "syncMsgReceipts", response: [{ type: "PropertyArray", name: "msgReceipts", entity: "msgReceipt" }, { type: "Number", name: "timetag" }] }, "4_13": { service: "notify", cmd: "syncDonnop",
				response: [{ type: "Property", name: "donnop" }, { type: "Number", name: "timetag" }] }, "4_14": { service: "notify", cmd: "syncSessionAck", response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Number", name: "timetag" }] }, "4_100": { service: "notify", cmd: "syncOfflineFilterMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "4_101": { service: "notify", cmd: "syncOfflineFilterSysMsgs", response: [{ type: "PropertyArray", name: "sysMsgs", entity: "sysMsg" }] }, "5_1": { service: "sync", cmd: "syncDone", response: [{ type: "Number", name: "timetag" }] }, "5_2": { service: "sync", cmd: "syncTeamMembersDone", response: [{ type: "Number", name: "timetag" }] }, "7_1": { service: "msg", cmd: "sendMsg", response: [{ type: "Property", name: "msg" }], trivialErrorCodes: [7101] }, "7_2": { service: "msg", cmd: "msg", response: [{ type: "Property", name: "msg" }] }, "7_3": { service: "msg", cmd: "sysMsg", response: [{ type: "Property", name: "sysMsg" }] }, "7_6": { service: "msg", cmd: "getHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "7_7": { service: "msg", cmd: "sendCustomSysMsg", trivialErrorCodes: [7101] }, "7_8": { service: "msg", cmd: "searchHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "7_9": { service: "msg", cmd: "deleteSessions" }, "7_10": { service: "msg", cmd: "getSessions", response: [{ type: "StrArray", name: "sessions" }] }, "7_101": { service: "msg", cmd: "syncSendMsg", response: [{ type: "Property", name: "msg" }] }, "7_11": { service: "msg", cmd: "sendMsgReceipt", response: [{ type: "Property", name: "msgReceipt" }] }, "7_12": { service: "msg", cmd: "msgReceipt", response: [{ type: "Property", name: "msgReceipt" }] }, "7_13": { service: "msg", cmd: "onDeleteMsg" }, "7_14": { service: "msg", cmd: "onMsgDeleted", response: [{ type: "Property", name: "sysMsg" }] }, "7_15": { service: "msg", cmd: "onDeleteMsgOfflineRoaming", response: [{ type: "PropertyArray", name: "sysMsgs", entity: "sysMsg" }, { type: "Number", name: "timetag" }, { type: "Number", name: "type" }] }, "7_16": { service: "msg", cmd: "onMarkSessionAck" }, "7_116": { service: "msg", cmd: "syncMarkSessionAck", response: [{ type: "Number", name: "scene" }, { type: "String", name: "to" }, { type: "Number", name: "timetag" }] }, "8_1": { service: "team", cmd: "createTeam", response: [{ type: "Property", name: "team" }] }, "8_2": { service: "team", cmd: "sendTeamMsg", response: [{ type: "Property", name: "msg" }] }, "8_3": { service: "team", cmd: "teamMsg", response: [{ type: "Property", name: "msg" }] }, "8_4": { service: "team", cmd: "teamMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "8_5": { service: "team", cmd: "addTeamMembers" }, "8_6": { service: "team", cmd: "removeTeamMembers" }, "8_7": { service: "team", cmd: "updateTeam", response: [{ type: "Number", name: "id" }, { type: "Number", name: "time" }] }, "8_8": { service: "team", cmd: "leaveTeam" }, "8_9": { service: "team", cmd: "getTeam", response: [{ type: "Property", name: "team" }] }, "8_10": { service: "team", cmd: "getTeams", response: [{ type: "PropertyArray", name: "teams", entity: "team" }, { type: "Number", name: "timetag" }] }, "8_11": { service: "team", cmd: "getTeamMembers", response: [{ type: "Number", name: "teamId" }, { type: "PropertyArray", name: "members", entity: "teamMember" }, { type: "Number", name: "timetag" }] }, "8_12": { service: "team", cmd: "dismissTeam" }, "8_13": { service: "team", cmd: "applyTeam", response: [{ type: "Property", name: "team" }] }, "8_14": { service: "team", cmd: "passTeamApply" }, "8_15": { service: "team", cmd: "rejectTeamApply" }, "8_16": { service: "team", cmd: "addTeamManagers" }, "8_17": { service: "team", cmd: "removeTeamManagers" }, "8_18": { service: "team", cmd: "transferTeam" }, "8_19": { service: "team", cmd: "updateInfoInTeam" }, "8_20": { service: "team", cmd: "updateNickInTeam" }, "8_21": { service: "team", cmd: "acceptTeamInvite", response: [{ type: "Property", name: "team" }] }, "8_22": { service: "team", cmd: "rejectTeamInvite" }, "8_23": { service: "team", cmd: "getTeamHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "8_24": { service: "team", cmd: "searchTeamHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "8_25": { service: "team", cmd: "updateMuteStateInTeam" }, "8_26": { service: "team", cmd: "getMyTeamMembers", response: [{ type: "PropertyArray", name: "teamMembers", entity: "teamMember" }] }, "8_27": { service: "team", cmd: "getMutedTeamMembers", response: [{ type: "Number", name: "teamId" }, { type: "PropertyArray", name: "teamMembers", entity: "teamMember" }] }, "8_126": { service: "team", cmd: "syncMyTeamMembers", response: [{ type: "PropertyArray", name: "teamMembers", entity: "teamMember" }, { type: "Number", name: "timetag" }] }, "8_109": { service: "team", cmd: "syncTeams", response: [{ type: "Number", name: "timetag" }, { type: "PropertyArray", name: "teams", entity: "team" }] }, "8_111": { service: "team", cmd: "syncTeamMembers", response: [{ type: "Number", name: "teamId" }, { type: "PropertyArray", name: "members", entity: "teamMember" }, { type: "Number", name: "timetag" }] }, "8_101": { service: "team", cmd: "syncCreateTeam", response: [{ type: "Property", name: "team" }] }, "8_102": { service: "team", cmd: "syncSendTeamMsg", response: [{ type: "Property", name: "msg" }] }, "8_119": { service: "team", cmd: "syncUpdateTeamMember", response: [{ type: "Property", name: "teamMember" }] }, "12_1": { service: "friend", cmd: "friendRequest" }, "12_101": { service: "friend", cmd: "syncFriendRequest", response: [{ type: "String", name: "account" }, { type: "Number", name: "type" }, { type: "String", name: "ps" }] }, "12_2": { service: "friend", cmd: "deleteFriend" }, "12_102": { service: "friend", cmd: "syncDeleteFriend", response: [{ type: "String", name: "account" }] }, "12_3": { service: "friend", cmd: "updateFriend" }, "12_103": { service: "friend", cmd: "syncUpdateFriend", response: [{ type: "Property", name: "friend" }] }, "12_4": { service: "friend", cmd: "getFriends", response: [{ type: "PropertyArray", name: "friends", entity: "friend" }, { type: "Number", name: "timetag" }] }, "12_5": { service: "friend", cmd: "syncFriends", response: [{ type: "PropertyArray", name: "friends", entity: "friend" }, { type: "Number", name: "timetag" }] }, "12_6": { service: "friend", cmd: "syncFriendUsers", response: [{ type: "PropertyArray", name: "users", entity: "user" }, { type: "Number", name: "timetag" }] }, "13_1": { service: "chatroom", cmd: "getChatroomAddress", response: [{ type: "StrArray", name: "address" }] }, "14_1": { service: "eventService", cmd: "publishEvent", response: [{ type: "Property", name: "msgEvent" }] }, "14_2": { service: "eventService", cmd: "pushEvent", response: [{ type: "Property", name: "msgEvent" }] }, "14_3": { service: "eventService", cmd: "subscribeEvent", response: [{ type: "StrArray", name: "accounts" }] }, "14_4": { service: "eventService", cmd: "unSubscribeEventsByAccounts", response: [{ type: "StrArray", name: "accounts" }] }, "14_5": { service: "eventService", cmd: "unSubscribeEventsByType" }, "14_6": { service: "eventService", cmd: "querySubscribeEventsByAccounts", response: [{ type: "PropertyArray", name: "msgEventSubscribes", entity: "msgEventSubscribe" }] }, "14_7": { service: "eventService", cmd: "querySubscribeEventsByType", response: [{ type: "PropertyArray", name: "msgEventSubscribes", entity: "msgEventSubscribe" }] }, "14_9": { service: "eventService", cmd: "pushEvents", response: [{ type: "PropertyArray", name: "msgEvents", entity: "msgEvent" }] }, "101_1": { service: "filter", cmd: "sendFilterMsg", response: [{ type: "Property", name: "msg" }] }, "101_2": { service: "filter", cmd: "filterMsg", response: [{ type: "Property", name: "msg" }] }, "101_3": { service: "filter", cmd: "filterSysMsg", response: [{ type: "Property", name: "sysMsg" }] }, "101_7": { service: "filter", cmd: "sendFilterCustomSysMsg" } });e.exports = { idMap: s, cmdConfig: o, packetConfig: a };
	}, function (e, t) {
		"use strict";
		var n = {};n.set = function (e, t, r) {
			n[e] = t, r && (r.support = t);
		}, e.exports = n;
	}, function (e, t, n) {
		"use strict";
		function r() {}var i = n(9);r.typeMap = { text: 0, image: 1, audio: 2, video: 3, geo: 4, notification: 5, file: 6, tip: 10, custom: 100 };var s = r.typeReverseMap = { 0: "text", 1: "image", 2: "audio", 3: "video", 4: "geo", 5: "notification", 6: "file", 10: "tip", 100: "custom" };r.validTypes = (0, _keys2.default)(r.typeMap), r.setFlow = function (e, t) {
			var n = t === e.from;n && t === e.to && (n = i.deviceId === e.fromDeviceId), e.flow = n ? "out" : "in";
		}, r.getType = function (e) {
			var t = e.type;return s[t] || t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(50).polyfill;window = window || {}, r(), r(window), localStorage = localStorage || n(31), XMLHttpRequest = XMLHttpRequest || n(33), WebSocket = WebSocket || n(32);
	}, function (e, t, n) {
		(function (t) {
			"use strict";
			var r = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
				return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
			} : function (e) {
				return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
			},
			    i = n(31),
			    s = n(33),
			    o = n(30),
			    a = n(32),
			    c = n(24);e.exports = { polyfill: function polyfill() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t || window;if ("object" !== ("undefined" == typeof e ? "undefined" : r(e))) throw new Error("polyfill target is not an Object");c(e, { localStorage: i, XMLHttpRequest: s, FormData: o, WebSocket: a, Object: Object, postMessage: function postMessage() {} }), e.localStorage !== i && (e.wxStorage = i);
				}, localStorage: i, XMLHttpRequest: s, FormData: o, WebSocket: a };
		}).call(t, function () {
			return this;
		}());
	}, function (e, t, n) {
		"use strict";
		var r = n(7).fn;r.isConnected = function () {
			return this.protocol.isConnected();
		}, r.connect = function () {
			this.protocol.connect();
		}, r.disconnect = function () {
			this.protocol.disconnect();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = n(7).fn;i.uploadSdkLogUrl = function (e) {
			return r.verifyOptions(e, "url"), this.cbAndSendCmd("uploadSdkLogUrl", e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(7).fn,
		    i = n(1),
		    s = n(3),
		    o = n(6),
		    a = n(70),
		    c = (n(72), n(36));r.sendText = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.TextMessage(e), t.sendMsg(e);
		}, r.previewFile = function (e) {
			if (i.verifyOptions(e, "done"), e.type || (e.type = "file"), i.verifyParamPresentJustOne(e, "dataURL blob fileInput wxFilePath"), e.dataURL) e.blob = c.fromDataURL(e.dataURL);else if (e.blob) ;else if (e.fileInput) {
				if (e.fileInput = i.verifyFileInput(e.fileInput), e.fileInput.files && !e.fileInput.files.length) return void e.done(s.newNoFileError("请选择" + e.type + "文件"), e);e.fileInputName = i.getFileName(e.fileInput);
			}this.processCallback(e);var t = a.genResponseBody(e.type) || {};this.getNosToken({ responseBody: (0, _stringify2.default)(t).replace(/"/gi, '\\"'), callback: function (t, n) {
					return t ? void e.done(t, e.callback.options) : (e.nosToken = n, void this._doPreviewFile(e));
				}.bind(this) });
		}, r._doPreviewFile = function (e) {
			function t(t, s) {
				if (e.uploaddone = r, t) return t.appendMessage("上传文件失败"), void e.done(t, e.callback.options);if (s = a.parseResponse(s, n.options.exifOrientation), s.url = o.genDownloadUrl(e.nosToken.bucket, c.Object), i.exist(e.fileInputName)) s.name = e.fileInputName;else if (e.blob) {
					var u = e.blob.name;if (s.name = u || "blob-" + s.md5, !u) {
						var l = e.blob.type;s.ext = l.slice(l.lastIndexOf("/") + 1);
					}
				}if (s.name = e.wxFilePath, !s.ext) {
					var d = s.name.lastIndexOf(".");d === -1 ? s.ext = "unknown" : s.ext = s.name.slice(d + 1);
				}return void e.done(null, i.copy(s));
			}var n = this,
			    r = e.uploaddone,
			    s = o.genUploadUrl(e.nosToken.bucket),
			    c = this.assembleUploadParams(e.nosToken),
			    u = "file";i.verifyOptions(e, "wxFilePath"), wx.uploadFile({ url: s, filePath: e.wxFilePath, name: u, formData: c, fail: function fail(e) {}, success: function success(e) {
					if (200 === e.statusCode) try {
						t(null, JSON.parse(e.data));
					} catch (e) {
						t({ code: "PARSE_WX_UPLOAD_FILE_RES_ERROR", str: e.data, msg: e.errMsg });
					} else t({ code: e.statusCode, msg: e.errMsg });
				} });
		}, r.sendFile = function (e) {
			var t = this;if (e.type || (e.type = "file"), i.verifyParamPresentJustOne(e, "dataURL blob fileInput file wxFilePath"), t.processCallback(e), e.dataURL) t._previewAndSendFile(e);else if (e.blob) t._previewAndSendFile(e);else if (e.fileInput) {
				if (e.fileInput = i.verifyFileInput(e.fileInput), e.fileInput.files && !e.fileInput.files.length) return void e.done(s.newNoFileError("请选择" + e.type + "文件"), e.callback.options);t._previewAndSendFile(e);
			} else if (e.wxFilePath) t._previewAndSendFile(e);else if (e.file) return e.msg = new t.message.FileMessage(e), t.sendMsg(e);
		}, r._previewAndSendFile = function (e) {
			var t = this;i.verifyCallback(e, "uploaddone beforesend");var n = e.done;e.done = function (r, s) {
				e.done = n, r ? e.uploaddone(r, e.callback.options) : (e.uploaddone(null, i.copy(s)), e.file = s, e.msg = new t.message.FileMessage(e), e.beforesend(t.sendMsg(e)));
			}, t.previewFile(e);
		}, r.assembleUploadParams = function (e) {
			return e ? { Object: decodeURIComponent(e.objectName), "x-nos-token": e.token, "x-nos-entity-type": "json" } : null;
		}, r.sendGeo = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.GeoMessage(e), t.sendMsg(e);
		}, r.sendTipMsg = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.TipMessage(e), t.sendMsg(e);
		}, r.sendCustomMsg = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.CustomMessage(e), t.sendMsg(e);
		}, r.sendMsg = function (e) {
			var t = this,
			    n = t.protocol,
			    r = e.msg,
			    s = {},
			    o = !!e.isLocal;if (o && e.time && (r.time = e.time), e.resend && ("out" !== e.flow || "fail" !== e.status)) return i.onError("只能重发发送失败的消息");e.callback.options.idClient = r.idClient, t.beforeSendMsg(e, s);var a = e.rtnMsg = t.formatReturnMsg(r);return o && (a.status = "success", a.isLocal = !0), n.storeSendMsg && (s.promise = n.storeSendMsg(a)), e.cbaop = function (e) {
				if (e && "server" !== e.from) return a.status = "fail", n.updateSendMsgError && n.updateSendMsgError(a), a;
			}, o || (s.msg = r, t.sendCmd(e.cmd, s, e.callback)), t.afterSendMsg(e), o && setTimeout(function () {
				a = i.simpleClone(a), e.done(null, a);
			}, 0), i.copy(a);
		}, r.beforeSendMsg = function () {}, r.afterSendMsg = function () {}, r.formatReturnMsg = function (e) {
			var t = this;return e = i.copy(e), t.protocol.completeMsg(e), e.status = "sending", e = t.message.reverse(e);
		}, r.resendMsg = function (e) {
			var t = this;return i.verifyOptions(e, "msg"), t.trimMsgFlag(e), e.resend = !0, t._sendMsgByType(e);
		}, r.forwardMsg = function (e) {
			var t = this;return i.verifyOptions(e, "msg"), t.beforeForwardMsg(e), t.trimMsgFlag(e), e.forward = !0, t._sendMsgByType(e);
		}, r.trimMsgFlag = function (e) {
			e && e.msg && (e.mgs = i.copy(e.msg), delete e.msg.resend, delete e.msg.forward);
		}, r.beforeForwardMsg = function () {}, r._sendMsgByType = function (e) {
			var t = this;switch (i.verifyOptions(e, "msg"), i.verifyParamValid("msg.type", e.msg.type, t.message.validTypes), i.merge(e, e.msg), e.type) {case "text":
					return t.sendText(e);case "image":case "audio":case "video":case "file":
					return t.sendFile(e);case "geo":
					return t.sendGeo(e);case "custom":
					return t.sendCustomMsg(e);case "tip":
					return t.sendTipMsg(e);default:
					throw new s("不能发送类型为 " + e.type + " 的消息");}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = n(7).fn,
		    s = n(34);i.getSimpleNosToken = function () {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return e.num = 1, r.verifyOptions(e), this.cbAndSendCmd("getSimpleNosToken", e);
		}, i.getNosToken = function (e) {
			this.sendCmd("getNosToken", { responseBody: e.responseBody }, e.callback);
		}, i.packFileDownloadName = function (e) {
			r.verifyOptions(e, "url name");var t = e.url;return t + r.genUrlSep(t) + "download=" + encodeURIComponent(e.name);
		}, i.audioToMp3 = function (e) {
			r.verifyOptions(e, "url");var t = e.url;return t + r.genUrlSep(t) + "audioTrans&type=mp3";
		}, i.stripImageMeta = function (e) {
			return this.beforeProcessImage(e, "stripmeta");
		}, i.qualityImage = function (e) {
			return this.beforeProcessImage(e, "quality");
		}, i.interlaceImage = function (e) {
			return this.beforeProcessImage(e, "interlace");
		}, i.rotateImage = function (e) {
			return this.beforeProcessImage(e, "rotate");
		}, i.blurImage = function (e) {
			return this.beforeProcessImage(e, "blur");
		}, i.cropImage = function (e) {
			return this.beforeProcessImage(e, "crop");
		}, i.thumbnailImage = function (e) {
			return this.beforeProcessImage(e, "thumbnail");
		}, i.beforeProcessImage = function (e, t) {
			var n = r.copy(e);return n.type = t, e.ops = [n], this.processImage(e);
		}, i.processImage = function (e) {
			var t = this;r.verifyOptions(e, "url ops"), r.verifyParamType("ops", e.ops, "array");var n = e.ops.map(function (e) {
				return r.verifyOptions(e, "type"), r.verifyParamValid("type", e.type, s.validTypes), t["gen" + e.type.slice(0, 1).toUpperCase() + e.type.slice(1) + "Op"](e);
			});t.processCallback(e), t.sendCmd("processImage", { url: e.url, imageOps: n }, e.callback);
		}, i.genStripmetaOp = function (e) {
			return new s({ type: e.type, stripmeta: e.strip ? 1 : 0 });
		}, i.genQualityOp = function (e) {
			r.verifyOptions(e, "quality"), r.verifyParamType("quality", e.quality, "number"), r.verifyParamMin("quality", e.quality, 0), r.verifyParamMax("quality", e.quality, 100);var t = Math.round(e.quality);return new s({ type: e.type, qualityQuality: t });
		}, i.genInterlaceOp = function (e) {
			return new s({ type: e.type });
		}, i.genRotateOp = function (e) {
			for (r.verifyOptions(e, "angle"), r.verifyParamType("angle", e.angle, "number"); e.angle < 0;) {
				e.angle = e.angle + 360;
			}e.angle = e.angle % 360;var t = Math.round(e.angle);return new s({ type: e.type, rotateAngle: t });
		}, i.genBlurOp = function (e) {
			r.verifyOptions(e, "radius sigma"), r.verifyParamType("radius", e.radius, "number"), r.verifyParamMin("radius", e.radius, 1), r.verifyParamMax("radius", e.radius, 50), r.verifyParamType("sigma", e.sigma, "number"), r.verifyParamMin("sigma", e.sigma, 0);var t = Math.round(e.radius),
			    n = Math.round(e.sigma);return new s({ type: e.type, blurRadius: t, blurSigma: n });
		}, i.genCropOp = function (e) {
			r.verifyOptions(e, "x y width height"), r.verifyParamType("x", e.x, "number"), r.verifyParamMin("x", e.x, 0), r.verifyParamType("y", e.y, "number"), r.verifyParamMin("y", e.y, 0), r.verifyParamType("width", e.width, "number"), r.verifyParamMin("width", e.width, 0), r.verifyParamType("height", e.height, "number"), r.verifyParamMin("height", e.height, 0);var t = Math.round(e.x),
			    n = Math.round(e.y),
			    i = Math.round(e.width),
			    o = Math.round(e.height);return new s({ type: e.type, cropX: t, cropY: n, cropWidth: i, cropHeight: o });
		}, i.genThumbnailOp = function () {
			var e = { cover: "z", contain: "x", crop: "y" };return function (t) {
				r.verifyOptions(t, "mode"), r.verifyParamValid("mode", t.mode, (0, _keys2.default)(e)), "contain" === t.mode ? r.verifyParamAtLeastPresentOne(t, "width height") : r.verifyOptions(t, "width height"), r.undef(t.width) && (t.width = 0), r.undef(t.height) && (t.height = 0), r.verifyParamType("width", t.width, "number"), r.verifyParamMin("width", t.width, 0), r.verifyParamType("height", t.height, "number"), r.verifyParamMin("height", t.height, 0);var n = Math.round(t.width),
				    i = Math.round(t.height),
				    o = new s({ type: t.type, thumbnailMode: e[t.mode], thumbnailWidth: n, thumbnailHeight: i });if ("crop" === t.mode && r.notundef(t.axis)) {
					r.undef(t.axis.x) && (t.axis.x = 5), r.undef(t.axis.y) && (t.axis.y = 5), r.verifyParamMin("axis.x", t.axis.x, 0), r.verifyParamMax("axis.x", t.axis.x, 10), r.verifyParamMin("axis.y", t.axis.y, 0), r.verifyParamMax("axis.y", t.axis.y, 10);var a = Math.round(t.axis.x),
					    c = Math.round(t.axis.y);o.thumbnailAxisX = a, o.thumbnailAxisY = c;
				}return r.notundef(t.enlarge) && (r.verifyParamType("enlarge", t.enlarge, "boolean"), t.enlarge && (o.thumbnailEnlarge = 1)), o;
			};
		}();
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			e = "" + e;var t = e.indexOf("?") === -1 ? "?imageView&" : "&";return t;
		}function i(e) {
			e = e || "";var t = e.indexOf("https") >= 0 ? "https://" : "http://",
			    n = e.replace(t, "");n.indexOf("?") >= 0 && (n = n.substring(0, n.indexOf("?")));var r = n.split("/");n = r[0];var i = "";if (r.length > 0 && (i = r.slice(1).join("/")), e.indexOf("?") === -1) return { protocol: t, hostname: n, path: i, query: {} };var s = function () {
				var r = e.substr(e.indexOf("?") + 1),
				    s = r.split("&"),
				    o = {};return s.forEach(function (e) {
					if (e.indexOf("=") > 0) {
						var t = e.split("=");o[t[0]] = decodeURIComponent(t[1]);
					} else o[e] = "";
				}), { v: { protocol: t, hostname: n, path: i, query: o } };
			}();return "object" === ("undefined" == typeof s ? "undefined" : o(s)) ? s.v : void 0;
		}function s(e) {
			var t = e.protocol,
			    n = e.hostname,
			    r = e.path,
			    i = e.query;t = t || "http://", n = n || "", r && (n = n + "/" + r), i = i || {};var s = [];for (var o in i) {
				"imageView" !== o && s.push(o + "=" + encodeURIComponent(i[o]));
			}return s.length > 0 ? "" + t + n + "?imageView&" + s.join("&") : "" + t + n;
		}var o = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
			return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		} : function (e) {
			return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		},
		    a = n(1),
		    c = n(7).fn;c.viewImageSync = function (e) {
			var t = this.options;a.verifyOptions(e, "url");var n = e.url,
			    r = i(n),
			    c = r.protocol,
			    u = r.hostname,
			    l = r.path,
			    d = r.query;if ("boolean" == typeof e.strip && (d.stripmeta = e.strip ? 1 : 0), "number" == typeof e.quality && (a.verifyParamMin("quality", e.quality, 0), a.verifyParamMax("quality", e.quality, 100), d.quality = Math.round(e.quality)), "boolean" == typeof e.interlace && (d.interlace = e.interlace ? 1 : 0), "number" == typeof e.rotate && (d.rotate = Math.round(e.rotate)), "object" === o(e.thumbnail)) {
				var m = e.thumbnail.mode || "crop",
				    f = e.thumbnail.width,
				    p = e.thumbnail.height;if (f >= 0 && p >= 0 && f < 4096 && p < 4096 && (f > 0 || p > 0)) {
					switch (m) {case "crop":
							m = "y";break;case "contain":
							m = "x";break;case "cover":
							m = "z";break;default:
							m = "x";}d.thumbnail = "" + f + m + p;
				}
			}if (t.downloadUrl) {
				var y = i(t.downloadUrl);return s({ protocol: y.protocol, hostname: y.hostname, path: l, query: (0, _assign2.default)(y.query, d) });
			}return s({ protocol: c, hostname: u, path: l, query: d });
		}, c.viewImageStripMeta = function (e) {
			a.verifyOptions(e, "url strip"), a.verifyParamType("strip", e.strip, "boolean");var t = "stripmeta=" + (e.strip ? 1 : 0),
			    n = r(e.url);return e.url + n + t;
		}, c.viewImageQuality = function (e) {
			a.verifyOptions(e, "url quality"), a.verifyParamType("quality", e.quality, "number"), a.verifyParamMin("quality", e.quality, 0), a.verifyParamMax("quality", e.quality, 100);var t = Math.round(e.quality),
			    n = "quality=" + t,
			    i = r(e.url);return e.url + i + n;
		}, c.viewImageInterlace = function (e) {
			a.verifyOptions(e, "url");var t = "interlace=1",
			    n = r(e.url);return e.url + n + t;
		}, c.viewImageRotate = function (e) {
			for (a.verifyOptions(e, "url angle"), a.verifyParamType("angle", e.angle, "number"); e.angle < 0;) {
				e.angle = e.angle + 360;
			}e.angle = e.angle % 360;var t = Math.round(e.angle),
			    n = "rotate=" + t,
			    i = r(e.url);return e.url + i + n;
		}, c.viewImageBlur = function (e) {
			a.verifyOptions(e, "url radius sigma"), a.verifyParamType("radius", e.radius, "number"), a.verifyParamMin("radius", e.radius, 1), a.verifyParamMax("radius", e.radius, 50), a.verifyParamType("sigma", e.sigma, "number"), a.verifyParamMin("sigma", e.sigma, 0);var t = Math.round(e.radius),
			    n = Math.round(e.sigma),
			    i = "blur=" + t + "x" + n,
			    s = r(e.url);return e.url + s + i;
		}, c.viewImageCrop = function (e) {
			a.verifyOptions(e, "url x y width height"), a.verifyParamType("x", e.x, "number"), a.verifyParamMin("x", e.x, 0), a.verifyParamType("y", e.y, "number"), a.verifyParamMin("y", e.y, 0), a.verifyParamType("width", e.width, "number"), a.verifyParamMin("width", e.width, 0), a.verifyParamType("height", e.height, "number"), a.verifyParamMin("height", e.height, 0);var t = Math.round(e.x),
			    n = Math.round(e.y),
			    i = Math.round(e.width),
			    s = Math.round(e.height),
			    o = "crop=" + t + "_" + n + "_" + i + "_" + s,
			    c = r(e.url);return e.url + c + o;
		}, c.viewImageThumbnail = function () {
			var e = { cover: "z", contain: "x", crop: "y" };return function (t) {
				a.verifyOptions(t, "url mode"), a.verifyParamValid("mode", t.mode, (0, _keys2.default)(e)), "contain" === t.mode ? a.verifyParamAtLeastPresentOne(t, "width height") : a.verifyOptions(t, "width height"), a.undef(t.width) && (t.width = 0), a.undef(t.height) && (t.height = 0), a.verifyParamType("width", t.width, "number"), a.verifyParamMin("width", t.width, 0), a.verifyParamType("height", t.height, "number"), a.verifyParamMin("height", t.height, 0);var n = Math.round(t.width),
				    i = Math.round(t.height),
				    s = "thumbnail=" + n + e[t.mode] + i;if ("crop" === t.mode && a.notundef(t.axis)) {
					a.undef(t.axis.x) && (t.axis.x = 5), a.undef(t.axis.y) && (t.axis.y = 5), a.verifyParamMin("axis.x", t.axis.x, 0), a.verifyParamMax("axis.x", t.axis.x, 10), a.verifyParamMin("axis.y", t.axis.y, 0), a.verifyParamMax("axis.y", t.axis.y, 10);var o = Math.round(t.axis.x),
					    c = Math.round(t.axis.y);s = s + "&axis=" + o + "_" + c;
				}a.notundef(t.enlarge) && (a.verifyParamType("enlarge", t.enlarge, "boolean"), t.enlarge && (s += "&enlarge=1"));var u = r(t.url);return t.url + u + s;
			};
		}();
	}, function (e, t, n) {
		"use strict";
		n(49);
	},, function (e, t, n) {
		"use strict";
		function r(e) {
			i.verifyOptions(e, "account"), i.verifyParamAtLeastPresentOne(e, "alias custom"), this.account = e.account, s(e.alias) && (this.alias = e.alias), s(e.custom) && (this.custom = e.custom);
		}var i = n(1),
		    s = i.notundef,
		    o = { addFriend: 1, applyFriend: 2, passFriendApply: 3, rejectFriendApply: 4 },
		    a = { 1: "addFriend", 2: "applyFriend", 3: "passFriendApply", 4: "rejectFriendApply" };r.reverse = function (e) {
			var t = i.filterObj(e, "account alias custom createTime updateTime");return s(e.flag) && (t.valid = "1" === e.flag), s(t.createTime) && (t.createTime = +t.createTime), s(t.updateTime) && (t.updateTime = +t.updateTime), t;
		}, r.validTypes = function () {
			return (0, _keys2.default)(o);
		}, r.getByteFromType = function (e) {
			return o[e];
		}, r.getTypeFromByte = function (e) {
			return a[e];
		}, r.assembleFriend = function (e) {
			var t = +new Date();return { account: e, alias: "", createTime: t, custom: "", updateTime: t, valid: !0 };
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    i = n(3),
		    s = n(11),
		    o = n(18),
		    a = n(9),
		    c = n(6),
		    u = n(1),
		    l = u.notundef;r.login = function () {
			var e = this;e.sendCmd("login", e.assembleLogin(), e.onLogin.bind(e)), e.autoconnect = !1;
		}, r.genSessionKey = function () {
			var e = {};return function () {
				var t = this,
				    n = t.name,
				    r = e[n] = e[n] || u.guid();return r;
			};
		}(), r.assembleIMLogin = function () {
			var e = this,
			    t = e.options,
			    n = t.account,
			    r = e.autoconnect ? 0 : 1;return { appLogin: r, appKey: t.appKey, account: n, token: t.token, sdkVersion: c.info.sdkVersion, protocolVersion: c.info.protocolVersion, os: s.os.toString(), browser: s.name + " " + s.version, session: e.genSessionKey(), deviceId: a.deviceId };
		}, r.onLogin = function (e, t) {
			var n = this;n.loginResult = t, e ? n.onAuthError(e) : (n.startHeartbeat(), n.afterLogin(t));
		}, r.afterLogin = u.emptyFunc, r.notifyLogin = function () {
			var e = this,
			    t = e.loginResult;e.logger.info("onConnect", t), e.options.onconnect(t);
		}, r.logout = function () {
			var e = this;if (e.isConnected()) {
				var t = new i("主动退出", "logout");e.onAuthError(t);
			}
		}, r.onKicked = function (e) {
			var t = this,
			    n = e.content,
			    r = n.from,
			    s = n.reason,
			    a = n.custom,
			    c = { reason: t.kickedReasons[s] || "unknown", message: t.kickedMessages[s] || "未知原因" };if (l(r) && (c.from = o.reverseType(r)), l(a) && (c.custom = a), t.shouldNotifyKicked(c)) {
				var d = new i("被踢了", "kicked");u.merge(d, c), t.onAuthError(d);
			} else t.logger.warn("silentlyKick"), t.shouldReconnect = !1, t.hasNotifyDisconnected = !0, t.disconnectSocket();
		}, r.shouldNotifyKicked = function (e) {
			return "silentlyKick" !== e.reason;
		}, r.onAuthError = function (e) {
			var t = this;t.shouldReconnect = !1, t.markAllCallbackInvalid(e || i.newConnectionError()), t.notifyDisconnect(e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    i = n(3),
		    s = n(73),
		    o = n(17),
		    a = n(6),
		    c = n(1);r.initConnect = function () {
			var e = this;e.socket = null, e.retryCount = 0, e.connecting = !1, e.shouldReconnect = !0, e.hasNotifyDisconnected = !1;
		}, r.resetConnect = function () {
			var e = this,
			    t = e.options;c.notundef(t.needReconnect) ? (c.verifyParamType("needReconnect", t.needReconnect, "boolean"), e.needReconnect = t.needReconnect) : e.needReconnect = !0, c.notundef(t.reconnectionAttempts) && c.verifyParamType("reconnectionAttempts", t.reconnectionAttempts, "number"), e.reconnectionAttempts = t.reconnectionAttempts || 1 / 0, e.backoff = new s({ min: a.reconnectionDelay, max: a.reconnectionDelayMax, jitter: a.reconnectionJitter });
		}, r.connect = function () {
			var e = this;if (!e.isConnected() && !e.connecting) if (e.connecting = !0, e.hasNotifyDisconnected = !1, e.socket) e.logger.info("connecting"), e.socket.socket.connect();else {
				var t = e.getNextSocketUrl();t ? e.connectToUrl(t) : e.refreshSocketUrl();
			}
		}, r.getNextSocketUrl = function () {
			return this.socketUrls.shift();
		}, r.isConnected = function () {
			var e = this;return !!e.socket && !!e.socket.socket && e.socket.socket.connected;
		}, r.connectToUrl = function (e) {
			var t = this;if (t.logger.log("try connect to ", e), !window.location) {
				var n = e.split(":");window.location = { protocol: n[0], hostname: n[1].slice(2), port: n[2] };
			}this.options.transports = ["websocket"];var r = this.options.transports || ["websocket", "xhr-polling"];t.socket = o.connect(e, { transports: r, reconnect: !1, "force new connection": !0, "connect timeout": a.connectTimeout }), t.socket.on("connect", t.onConnect.bind(t)), t.socket.on("handshake_failed", t.onHandshakeFailed.bind(t)), t.socket.on("connect_failed", t.onConnectFailed.bind(t)), t.socket.on("error", t.onError.bind(t)), t.socket.on("message", t.onMessage.bind(t)), t.socket.on("disconnect", function () {
				t.logger.info("socket disconnect"), t.onDisconnect(!0);
			});
		}, r.disconnect = function () {
			var e = this;e.isConnected() && (e.logger.info("disconnecting"), e.logout());
		}, r.onConnect = function () {
			var e = this;e.backoff && e.backoff.reset(), e.retryCount = 0, e.connecting = !1, e.shouldReconnect = !0, e.hasNotifyDisconnected = !1, e.login();
		}, r.onHandshakeFailed = function () {
			this.onDisconnect();
		}, r.onConnectFailed = function () {
			this.onDisconnect();
		}, r.onError = function () {
			var e = arguments[0];e && this.notifyError(new i(e));
		}, r.onDisconnect = function () {
			var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
			    t = this;t.connected = e, t.connecting = !1, t.markAllCallbackInvalid(i.newNetworkError()), t.stopHeartbeat(), t.reconnect();
		}, r.willReconnect = function () {
			var e = this;return e.shouldReconnect && e.needReconnect && e.retryCount < e.reconnectionAttempts;
		}, r.reconnect = function () {
			var e = this;if (e.willReconnect()) {
				e.socket = null, e.connected && (e.autoconnect = !0), e.retryCount++;var t = e.backoff.duration();e.logger.log("will retry after", t + "ms", ", retryCount", e.retryCount), e.options.onwillreconnect({ retryCount: e.retryCount, duration: t }), setTimeout(function () {
					e.connect();
				}, t);
			} else e.notifyDisconnect();
		}, r.notifyConnectError = function (e) {
			var t = this,
			    n = i.newConnectError(e);t.logger.error(n), t.options.onerror(n);
		}, r.notifyDisconnect = function (e) {
			var t = this;t.hasNotifyDisconnected || (t.hasNotifyDisconnected = !0, t.disconnectSocket(), e = e || new i(), e.retryCount = t.retryCount, e.willReconnect = t.willReconnect(), t.backoff && t.backoff.reset(), t.retryCount = 0, t.connecting = !1, t.logger.info("onDisconnect", e), t.options.ondisconnect(e));
		}, r.disconnectSocket = function () {
			var e = this;if (e.isConnected()) try {
				e.socket.disconnect(), e.socket = null;
			} catch (e) {}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    i = n(6);r.processLink = function (e) {
			switch (e.cmd) {case "heartbeat":}
		}, r.startHeartbeat = function () {
			var e = this;e.stopHeartbeat(), e.heartbeatTimer = setTimeout(function () {
				e.sendCmd("heartbeat", null, e.onHeartbeat.bind(e));
			}, i.heartbeatInterval);
		}, r.stopHeartbeat = function () {
			var e = this;e.heartbeatTimer && (clearTimeout(e.heartbeatTimer), e.heartbeatTimer = null);
		}, r.onHeartbeat = function (e, t) {
			var n = this;e || n.startHeartbeat(), n.onMiscError(e, t, "heartbeat");
		}, r.heartbeat = function () {};
	}, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    i = n(34);r.processMisc = function (e) {
			switch (e.cmd) {case "getSimpleNosToken":
					e.error || (e.obj = e.content.nosTokens[0]);break;case "getNosToken":
					e.error || (e.obj = e.content.nosToken);break;case "notifyUploadLog":
					e.error || this.emitAPI({ type: "notifyUploadLog" });break;case "audioToText":
					e.error || (e.obj.text = e.content.text);break;case "processImage":
					e.obj.imageOps = i.reverseImageOps(e.obj.imageOps), e.error || (e.obj = { url: e.content.url });}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = n(35),
		    s = r.merge({}, i.idMap, { chatroom: { id: 13, login: 2, kicked: 3, logout: 4, sendMsg: 6, msg: 7, getChatroomMembers: 8, getHistoryMsgs: 9, markChatroomMember: 11, closeChatroom: 12, getChatroom: 13, updateChatroom: 14, updateMyChatroomMemberInfo: 15, getChatroomMembersInfo: 16, kickChatroomMember: 17, updateChatroomMemberTempMute: 19, queueOffer: 20, queuePoll: 21, queueList: 22, queueDrop: 24, queueInit: 25 } }),
		    o = r.merge({}, i.cmdConfig, { login: { sid: s.chatroom.id, cid: s.chatroom.login, params: [{ type: "byte", name: "type" }, { type: "Property", name: "login" }, { type: "Property", name: "imLogin" }] }, logout: { sid: s.chatroom.id, cid: s.chatroom.logout }, sendMsg: { sid: s.chatroom.id, cid: s.chatroom.sendMsg, params: [{ type: "Property", name: "msg" }] }, getChatroomMembers: { sid: s.chatroom.id, cid: s.chatroom.getChatroomMembers, params: [{ type: "byte", name: "type" }, { type: "long", name: "time" }, { type: "int", name: "limit" }] }, getHistoryMsgs: { sid: s.chatroom.id, cid: s.chatroom.getHistoryMsgs, params: [{ type: "long", name: "timetag" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, markChatroomMember: { sid: s.chatroom.id, cid: s.chatroom.markChatroomMember, params: [{ type: "string", name: "account" }, { type: "int", name: "type" }, { type: "bool", name: "isAdd" }, { type: "int", name: "level" }, { type: "string", name: "custom" }] }, closeChatroom: { sid: s.chatroom.id, cid: s.chatroom.closeChatroom, params: [{ type: "string", name: "custom" }] }, getChatroom: { sid: s.chatroom.id, cid: s.chatroom.getChatroom }, updateChatroom: { sid: s.chatroom.id, cid: s.chatroom.updateChatroom, params: [{ type: "Property", name: "chatroom" }, { type: "boolean", name: "needNotify" }, { type: "String", name: "custom" }] }, updateMyChatroomMemberInfo: { sid: s.chatroom.id, cid: s.chatroom.updateMyChatroomMemberInfo, params: [{ type: "Property", name: "chatroomMember" }, { type: "boolean", name: "needNotify" }, { type: "String", name: "custom" }, { type: "boolean", name: "needSave" }] }, getChatroomMembersInfo: { sid: s.chatroom.id, cid: s.chatroom.getChatroomMembersInfo, params: [{ type: "StrArray", name: "accounts" }] }, kickChatroomMember: { sid: s.chatroom.id, cid: s.chatroom.kickChatroomMember, params: [{ type: "string", name: "account" }, { type: "string", name: "custom" }] }, updateChatroomMemberTempMute: { sid: s.chatroom.id, cid: s.chatroom.updateChatroomMemberTempMute, params: [{ type: "String", name: "account" }, { type: "long", name: "duration" }, { type: "boolean", name: "needNotify" }, { type: "String", name: "custom" }] }, queueOffer: { sid: s.chatroom.id, cid: s.chatroom.queueOffer, params: [{ type: "string", name: "elementKey" }, { type: "string", name: "elementValue" }] }, queuePoll: { sid: s.chatroom.id, cid: s.chatroom.queuePoll, params: [{ type: "string", name: "elementKey" }] }, queueList: { sid: s.chatroom.id, cid: s.chatroom.queueList
			}, queueDrop: { sid: s.chatroom.id, cid: s.chatroom.queueDrop }, queueInit: { sid: s.chatroom.id, cid: s.chatroom.queueInit, params: [{ type: "int", name: "limit" }] } }),
		    a = "chatroom",
		    c = r.merge({}, i.packetConfig, { "4_10": { service: "notify" }, "4_11": { service: "notify" }, "13_2": { service: a, cmd: "login", response: [{ type: "Property", name: "chatroom" }, { type: "Property", name: "chatroomMember" }] }, "13_3": { service: a, cmd: "kicked", response: [{ type: "Number", name: "reason" }, { type: "String", name: "custom" }] }, "13_4": { service: a, cmd: "logout" }, "13_6": { service: a, cmd: "sendMsg", response: [{ type: "Property", name: "msg" }] }, "13_7": { service: a, cmd: "msg", response: [{ type: "Property", name: "msg" }] }, "13_8": { service: a, cmd: "getChatroomMembers", response: [{ type: "PropertyArray", name: "members", entity: "chatroomMember" }] }, "13_9": { service: a, cmd: "getHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "13_11": { service: a, cmd: "markChatroomMember", response: [{ type: "Property", name: "chatroomMember" }] }, "13_12": { service: a, cmd: "closeChatroom" }, "13_13": { service: a, cmd: "getChatroom", response: [{ type: "Property", name: "chatroom" }] }, "13_14": { service: a, cmd: "updateChatroom" }, "13_15": { service: a, cmd: "updateMyChatroomMemberInfo" }, "13_16": { service: a, cmd: "getChatroomMembersInfo", response: [{ type: "PropertyArray", name: "members", entity: "chatroomMember" }] }, "13_17": { service: a, cmd: "kickChatroomMember" }, "13_19": { service: a, cmd: "updateChatroomMemberTempMute" }, "13_20": { service: a, cmd: "queueOffer" }, "13_21": { service: a, cmd: "queuePoll", response: [{ type: "String", name: "elementKey" }, { type: "String", name: "elementValue" }] }, "13_22": { service: a, cmd: "queueList", response: [{ type: "KVArray", name: "queueList" }] }, "13_24": { service: a, cmd: "queueDrop" }, "13_25": { service: a, cmd: "queueInit" } });e.exports = { idMap: s, cmdConfig: o, packetConfig: c };
	}, function (e, t) {
		"use strict";
		e.exports = { imLogin: { os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, deviceId: 13, appKey: 18, account: 19, browser: 24, session: 26, token: 1e3 }, nosToken: { objectName: 1, token: 2, bucket: 3, expireTime: 4 }, audioToText: { url: 2 }, imageOp: { type: 0, stripmeta: 1, typeType: 2, blurRadius: 3, blurSigma: 4, qualityQuality: 5, cropX: 6, cropY: 7, cropWidth: 8, cropHeight: 9, rotateAngle: 10, pixelPixel: 11, thumbnailMode: 12, thumbnailWidth: 13, thumbnailHeight: 14, thumbnailAxisX: 15, thumbnailAxisY: 16, thumbnailCenterX: 17, thumbnailCenterY: 18, thumbnailEnlarge: 19, thumbnailToStatic: 20, watermarkType: 21, watermarkGravity: 22, watermarkDissolve: 23, watermarkDx: 24, watermarkDy: 25, watermarkImage: 26, watermarkText: 27, watermarkFont: 28, watermarkFontSize: 29, watermarkFontColor: 30, interlace: 31 }, login: { appKey: 1, account: 2, deviceId: 3, chatroomId: 5, chatroomNick: 20, chatroomAvatar: 21, chatroomCustom: 22, chatroomEnterCustom: 23, session: 26 }, chatroom: { id: 1, name: 3, announcement: 4, broadcastUrl: 5, custom: 12, createTime: 14, updateTime: 15, creator: 100, onlineMemberNum: 101, mute: 102 }, msg: { idClient: 1, type: 2, attach: 3, custom: 4, resend: 5, userUpdateTime: 6, fromNick: 7, fromAvatar: 8, fromCustom: 9, yidunEnable: 10, antiSpamContent: 11, time: 20, from: 21, chatroomId: 22, fromClientType: 23 }, chatroomMember: { chatroomId: 1, account: 2, type: 3, level: 4, nick: 5, avatar: 6, custom: 7, online: 8, guest: 9, enterTime: 10, blacked: 12, gaged: 13, valid: 14, updateTime: 15, tempMuted: 16, tempMuteDuration: 17 } };
	}, function (e, t) {
		"use strict";
		e.exports = { nosToken: { objectName: 1, token: 2, bucket: 3, expireTime: 4 }, audioToText: { url: 2 }, imageOp: { type: 0, stripmeta: 1, typeType: 2, blurRadius: 3, blurSigma: 4, qualityQuality: 5, cropX: 6, cropY: 7, cropWidth: 8, cropHeight: 9, rotateAngle: 10, pixelPixel: 11, thumbnailMode: 12, thumbnailWidth: 13, thumbnailHeight: 14, thumbnailAxisX: 15, thumbnailAxisY: 16, thumbnailCenterX: 17, thumbnailCenterY: 18, thumbnailEnlarge: 19, thumbnailToStatic: 20, watermarkType: 21, watermarkGravity: 22, watermarkDissolve: 23, watermarkDx: 24, watermarkDy: 25, watermarkImage: 26, watermarkText: 27, watermarkFont: 28, watermarkFontSize: 29, watermarkFontColor: 30, interlace: 31 }, login: { os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, deviceId: 13, appKey: 18, account: 19, browser: 24, session: 26, token: 1e3 }, loginRes: { lastLoginDeviceId: 17, connectionId: 102, ip: 103, port: 104, country: 106 }, loginPort: { type: 3, os: 4, mac: 5, deviceId: 13, account: 19, connectionId: 102, ip: 103, time: 109 }, sync: { myInfo: 1, offlineMsgs: 2, teams: 3, roamingMsgs: 7, relations: 9, friends: 11, sessions: 12, friendUsers: 13, msgReceipts: 14, myTeamMembers: 15, donnop: 16, deleteMsg: 17, sessionAck: 18, filterMsgs: 100 }, donnop: { open: 1 }, team: { teamId: 1, name: 3, type: 4, owner: 5, level: 6, selfCustom: 7, valid: 8, memberNum: 9, memberUpdateTime: 10, createTime: 11, updateTime: 12, validToCurrentUser: 13, intro: 14, announcement: 15, joinMode: 16, bits: 17, custom: 18, serverCustom: 19, avatar: 20, beInviteMode: 21, inviteMode: 22, updateTeamMode: 23, updateCustomMode: 24, mute: 100 }, teamMember: { teamId: 1, account: 3, type: 4, nickInTeam: 5, bits: 7, active: 8, valid: 9, joinTime: 10, updateTime: 11, custom: 12, mute: 13 }, msg: { scene: 0, to: 1, from: 2, fromClientType: 4, fromDeviceId: 5, fromNick: 6, time: 7, type: 8, body: 9, attach: 10, idClient: 11, idServer: 12, resend: 13, userUpdateTime: 14, custom: 15, pushPayload: 16, pushContent: 17, apnsAccounts: 18, apnsContent: 19, apnsForcePush: 20, yidunEnable: 21, antiSpamContent: 22, isHistoryable: 100, isRoamingable: 101, isSyncable: 102, isMuted: 104, cc: 105, isPushable: 107, isOfflinable: 108, isUnreadable: 109, needPushNick: 110 }, msgReceipt: { to: 1, from: 2, time: 7, idClient: 11 }, sysMsg: { time: 0, type: 1, to: 2, from: 3, ps: 4, attach: 5, idServer: 6, sendToOnlineUsersOnly: 7, apnsText: 8, pushPayload: 9, deletedIdClient: 10, deletedIdServer: 11, yidunEnable: 12, antiSpamContent: 13, deletedMsgTime: 14, deletedMsgFromNick: 15, cc: 105, isPushable: 107, isUnreadable: 109, needPushNick: 110 }, friend: { account: 4, flag: 5, beflag: 6, source: 7, alias: 8, bits: 9, custom: 10, createTime: 11, updateTime: 12 }, user: { account: 1, nick: 3, avatar: 4, sign: 5, gender: 6, email: 7, birth: 8, tel: 9, custom: 10, createTime: 12, updateTime: 13 }, specialRelation: { account: 0, isMuted: 1, isBlacked: 2, createTime: 3, updateTime: 4 }, msgEvent: { type: 1, value: 2, idClient: 3, custom: 4, validTime: 5, broadcastType: 6, sync: 7, validTimeType: 8, durable: 9, time: 10, idServer: 11, clientType: 12, serverConfig: 13, serverCustom: 14, appid: 101, account: 103, enableMultiClient: 104, consid: 106 }, msgEventSubscribe: { type: 1, subscribeTime: 2, sync: 3, to: 102, from: 104, time: 105 } };
	}, function (e, t) {
		"use strict";
		e.exports = { imLogin: { 4: "os", 6: "sdkVersion", 8: "appLogin", 9: "protocolVersion", 13: "deviceId", 18: "appKey", 19: "account", 24: "browser", 26: "session", 1000: "token" }, nosToken: { 1: "objectName", 2: "token", 3: "bucket", 4: "expireTime" }, audioToText: { 2: "url" }, imageOp: { 0: "type", 1: "stripmeta", 2: "typeType", 3: "blurRadius", 4: "blurSigma", 5: "qualityQuality", 6: "cropX", 7: "cropY", 8: "cropWidth", 9: "cropHeight", 10: "rotateAngle", 11: "pixelPixel", 12: "thumbnailMode", 13: "thumbnailWidth", 14: "thumbnailHeight", 15: "thumbnailAxisX", 16: "thumbnailAxisY", 17: "thumbnailCenterX", 18: "thumbnailCenterY", 19: "thumbnailEnlarge", 20: "thumbnailToStatic", 21: "watermarkType", 22: "watermarkGravity", 23: "watermarkDissolve", 24: "watermarkDx", 25: "watermarkDy", 26: "watermarkImage", 27: "watermarkText", 28: "watermarkFont", 29: "watermarkFontSize", 30: "watermarkFontColor", 31: "interlace" }, login: { 1: "appKey", 2: "account", 3: "deviceId", 5: "chatroomId", 20: "chatroomNick", 21: "chatroomAvatar", 22: "chatroomCustom", 23: "chatroomEnterCustom", 26: "session" }, chatroom: { 1: "id", 3: "name", 4: "announcement", 5: "broadcastUrl", 12: "custom", 14: "createTime", 15: "updateTime", 100: "creator", 101: "onlineMemberNum", 102: "mute" }, msg: { 1: "idClient", 2: "type", 3: "attach", 4: "custom", 5: "resend", 6: "userUpdateTime", 7: "fromNick", 8: "fromAvatar", 9: "fromCustom", 10: "yidunEnable", 11: "antiSpamContent", 20: "time", 21: "from", 22: "chatroomId", 23: "fromClientType" }, chatroomMember: { 1: "chatroomId", 2: "account", 3: "type", 4: "level", 5: "nick", 6: "avatar", 7: "custom", 8: "online", 9: "guest", 10: "enterTime", 12: "blacked", 13: "gaged", 14: "valid", 15: "updateTime", 16: "tempMuted", 17: "tempMuteDuration" } };
	}, function (e, t) {
		"use strict";
		e.exports = { nosToken: { 1: "objectName", 2: "token", 3: "bucket", 4: "expireTime" }, audioToText: { 2: "url" }, imageOp: { 0: "type", 1: "stripmeta", 2: "typeType", 3: "blurRadius", 4: "blurSigma", 5: "qualityQuality", 6: "cropX", 7: "cropY", 8: "cropWidth", 9: "cropHeight", 10: "rotateAngle", 11: "pixelPixel", 12: "thumbnailMode", 13: "thumbnailWidth", 14: "thumbnailHeight", 15: "thumbnailAxisX", 16: "thumbnailAxisY", 17: "thumbnailCenterX", 18: "thumbnailCenterY", 19: "thumbnailEnlarge", 20: "thumbnailToStatic", 21: "watermarkType", 22: "watermarkGravity", 23: "watermarkDissolve", 24: "watermarkDx", 25: "watermarkDy", 26: "watermarkImage", 27: "watermarkText", 28: "watermarkFont", 29: "watermarkFontSize", 30: "watermarkFontColor", 31: "interlace" }, login: { 4: "os", 6: "sdkVersion", 8: "appLogin", 9: "protocolVersion", 13: "deviceId", 18: "appKey", 19: "account", 24: "browser", 26: "session", 1000: "token" }, loginRes: { 17: "lastLoginDeviceId", 102: "connectionId", 103: "ip", 104: "port", 106: "country" }, loginPort: { 3: "type", 4: "os", 5: "mac", 13: "deviceId", 19: "account", 102: "connectionId", 103: "ip", 109: "time" }, sync: { 1: "myInfo", 2: "offlineMsgs", 3: "teams", 7: "roamingMsgs", 9: "relations", 11: "friends", 12: "sessions", 13: "friendUsers", 14: "msgReceipts", 15: "myTeamMembers", 16: "donnop", 17: "deleteMsg", 18: "sessionAck", 100: "filterMsgs" }, donnop: { 1: "open" }, team: { 1: "teamId", 3: "name", 4: "type", 5: "owner", 6: "level", 7: "selfCustom", 8: "valid", 9: "memberNum", 10: "memberUpdateTime", 11: "createTime", 12: "updateTime", 13: "validToCurrentUser", 14: "intro", 15: "announcement", 16: "joinMode", 17: "bits", 18: "custom", 19: "serverCustom", 20: "avatar", 21: "beInviteMode", 22: "inviteMode", 23: "updateTeamMode", 24: "updateCustomMode", 100: "mute" }, teamMember: { 1: "teamId", 3: "account", 4: "type", 5: "nickInTeam", 7: "bits", 8: "active", 9: "valid", 10: "joinTime", 11: "updateTime", 12: "custom", 13: "mute" }, msg: { 0: "scene", 1: "to", 2: "from", 4: "fromClientType", 5: "fromDeviceId", 6: "fromNick", 7: "time", 8: "type", 9: "body", 10: "attach", 11: "idClient", 12: "idServer", 13: "resend", 14: "userUpdateTime", 15: "custom", 16: "pushPayload", 17: "pushContent", 18: "apnsAccounts", 19: "apnsContent", 20: "apnsForcePush", 21: "yidunEnable", 22: "antiSpamContent", 100: "isHistoryable", 101: "isRoamingable", 102: "isSyncable", 104: "isMuted", 105: "cc", 107: "isPushable", 108: "isOfflinable", 109: "isUnreadable", 110: "needPushNick" }, msgReceipt: { 1: "to", 2: "from", 7: "time", 11: "idClient" }, sysMsg: { 0: "time", 1: "type", 2: "to", 3: "from", 4: "ps", 5: "attach", 6: "idServer", 7: "sendToOnlineUsersOnly", 8: "apnsText", 9: "pushPayload", 10: "deletedIdClient", 11: "deletedIdServer", 12: "yidunEnable", 13: "antiSpamContent", 14: "deletedMsgTime", 15: "deletedMsgFromNick", 105: "cc", 107: "isPushable", 109: "isUnreadable", 110: "needPushNick" }, friend: { 4: "account", 5: "flag", 6: "beflag", 7: "source", 8: "alias", 9: "bits", 10: "custom", 11: "createTime", 12: "updateTime" }, user: { 1: "account", 3: "nick", 4: "avatar", 5: "sign", 6: "gender", 7: "email", 8: "birth", 9: "tel", 10: "custom", 12: "createTime", 13: "updateTime" }, specialRelation: { 0: "account", 1: "isMuted", 2: "isBlacked", 3: "createTime", 4: "updateTime" }, msgEvent: { 1: "type", 2: "value", 3: "idClient", 4: "custom", 5: "validTime", 6: "broadcastType", 7: "sync", 8: "validTimeType", 9: "durable", 10: "time", 11: "idServer", 12: "clientType", 13: "serverConfig", 14: "serverCustom", 101: "appid", 103: "account", 104: "enableMultiClient", 106: "consid" }, msgEventSubscribe: { 1: "type", 2: "subscribeTime", 3: "sync", 102: "to", 104: "from", 105: "time" } };
	}, function (e, t, n) {
		"use strict";
		"undefined" != typeof window && (!window.console, 1);
	}, function (e, t, n) {
		"use strict";
		function r() {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};s.merge(this, { options: e, debug: !1, api: "log", style: "color:blue;", log: s.emptyFunc, info: s.emptyFunc, warn: s.emptyFunc, error: s.emptyFunc }), this.prefix = e.prefix || "", this.setDebug(e.debug);
		}var i = n(11),
		    s = n(1),
		    o = r.prototype,
		    a = ["Chrome", "Safari", "Firefox"];o.setDebug = function () {
			var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
			    t = this;if (t.debug = e, e.style && (t.style = e.style), t.debug && s.exist(console)) {
				var n = console;t.log = function () {
					var e = t.formatArgs(arguments);a.indexOf(i.name) !== -1 && s.isString(e[0]) && (e[0] = "%c" + e[0], e.splice(1, 0, t.style)), t._log("log", e);
				}, t.info = function () {
					var e = t.formatArgs(arguments);t._log("info", e);
				}, t.warn = function () {
					var e = t.formatArgs(arguments);t._log("warn", e);
				}, t.error = function () {
					var e = t.formatArgs(arguments);t._log("error", e);
				}, t._log = function (e, r) {
					var i = t.options.logFunc;if (i && (i[e] && (i = i[e]), s.isFunction(i))) return void i.apply(null, r);if (n[e]) try {
						n[e].apply ? t.chrome(e, r) : t.ie(e, r);
					} catch (e) {}
				}, t.chrome = function (e, r) {
					a.indexOf(i.name) !== -1 ? n[e].apply(n, r) : t.ie(e, r);
				}, t.ie = function (e, t) {
					t.forEach(function (t) {
						n[e]((0, _stringify2.default)(t, null, 4));
					});
				};
			}
		}, o.formatArgs = function (e) {
			var t = this;e = [].slice.call(e, 0);var n = new Date(),
			    r = n.getFullYear() + "-" + c(n.getMonth() + 1) + "-" + c(n.getDate()) + " " + c(n.getHours()) + ":" + c(n.getMinutes()) + ":" + c(n.getSeconds()) + ":" + c(n.getMilliseconds(), 3),
			    i = "[NIM SDK LOG " + r + " " + +n + " " + t.prefix + "]\t";return s.isString(e[0]) ? e[0] = i + e[0] : e.splice(0, 0, i), e.forEach(function (t, n) {
				(s.isArray(t) || s.isObject(t)) && (e[n] = s.simpleClone(t));
			}), e;
		};var c = function c(e, t) {
			t = t || 2;for (var n = "" + e; n.length < t;) {
				n = "0" + n;
			}return n;
		};e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = { file: { md5: "$(Etag)", size: "$(ObjectSize)" }, image: { md5: "$(Etag)", size: "$(ObjectSize)", w: "$(ImageInfo.Width)", h: "$(ImageInfo.Height)", orientation: "$(ImageInfo.Orientation)" }, audio: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Audio.Duration)" }, video: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Video.Duration)", w: "$(AVinfo.Video.Width)", h: "$(AVinfo.Video.Height)" } },
		    s = {};s.genResponseBody = function (e) {
			return e = e || "file", i[e];
		}, s.parseResponse = function (e, t) {
			r.notundef(e.size) && (e.size = +e.size), r.notundef(e.w) && (e.w = +e.w), r.notundef(e.h) && (e.h = +e.h), r.notundef(e.dur) && (e.dur = +e.dur);var n = e.orientation;if (r.notundef(n) && (delete e.orientation, t && ("right, top" === n || "left, bottom" === n))) {
				var i = e.w;e.w = e.h, e.h = i;
			}return e;
		}, e.exports = s;
	}, function (e, t, n) {
		"use strict";
		var r = n(1);r.fillPropertyWithDefault = function (e, t, n) {
			return !!r.undef(e[t]) && (e[t] = n, !0);
		};
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;t.options = i.copy(e), i.verifyOptions(e, "url fileName"), i.verifyParamPresentJustOne(e, "blob fileInput"), i.verifyCallback(e, "beginupload uploadprogress uploaddone"), e.fileInput && (e.fileInput = i.verifyFileInput(e.fileInput)), e.type && i.verifyFileType(e.type), e.timeout ? i.verifyParamType("timeout", e.timeout, "number") : e.timeout = 6e5, i.verifyFileUploadCallback(e), e.data = {};var n = e.fileName,
			    r = e.fileInput;if (c) {
				if (r) {
					var a = e.type ? i.filterFiles(r.files, e.type) : [].slice.call(r.files, 0);if (!a || !a.length) return void e.uploaddone(s.newWrongFileTypeError("未读取到" + e.type + "类型的文件, 请确保文件选择节点的文件不为空, 并且请确保选择了" + e.type + "类型的文件"));var l = r.files[0].size;if (l > u) return void e.uploaddone(s.newFileTooLargeError("文件大小超过100M"));e.data[n] = a[0];
				} else e.blob && (e.data[n] = e.blob);
			} else i.dataset(r, "name", n), e.data.input = r;e.params && i.merge(e.data, e.params);var d = { data: e.data, onaftersend: function onaftersend() {
					e.beginupload(t);
				}, onuploading: function onuploading(t) {
					var n = Math.floor(1e4 * t.loaded / t.total) / 100,
					    r = { total: t.total, loaded: t.loaded, percentage: n, percentageText: n + "%" };e.fileInput && (r.fileInput = e.fileInput), e.blob && (r.blob = e.blob), e.uploadprogress(r);
				}, onload: function onload(n) {
					n.Error ? t.onError(n) : e.uploaddone(null, n);
				}, onerror: function onerror(n) {
					try {
						if (n.result) var r = JSON.parse(n.result);else r = n;t.onError(r);
					} catch (error) {
						e.uploaddone(new s(n.message, n.code), t.options);
					}
				} };c || (d.mode = "iframe"), d.putFileAtEnd = !0, t.sn = o(e.url, d);
		}var i = n(1),
		    s = n(3),
		    o = n(16).upload,
		    a = n(16).abort,
		    c = i.supportFormData,
		    u = 104857600;r.prototype.onError = function (e) {
			var t,
			    n,
			    r,
			    i = this,
			    o = i.options;e = e || {}, t = e.Error || e || {}, n = t.Code || t.code || "unknown", r = t.Message || t.message || "未知错误", o.uploaddone(new s(n + "(" + r + ")", n));
		}, r.prototype.abort = function () {
			a(this.sn);
		}, e.exports = r;
	}, function (e, t) {
		function n(e) {
			e = e || {}, this.ms = e.min || 100, this.max = e.max || 1e4, this.factor = e.factor || 2, this.jitter = e.jitter > 0 && e.jitter <= 1 ? e.jitter : 0, this.attempts = 0;
		}e.exports = n, n.prototype.duration = function () {
			var e = this.ms * Math.pow(this.factor, this.attempts++);if (this.jitter) {
				var t = Math.random(),
				    n = Math.floor(t * this.jitter * e);e = 0 == (1 & Math.floor(10 * t)) ? e - n : e + n;
			}return 0 | Math.min(e, this.max);
		}, n.prototype.reset = function () {
			this.attempts = 0;
		}, n.prototype.setMin = function (e) {
			this.ms = e;
		}, n.prototype.setMax = function (e) {
			this.max = e;
		}, n.prototype.setJitter = function (e) {
			this.jitter = e;
		};
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			for (var n = e[o][t]; null != n;) {
				if (n.kind === a) return n.listener;n = n.next;
			}return null;
		}function i(e, t, n) {
			"function" != typeof n && "object" != (typeof n === "undefined" ? "undefined" : (0, _typeof3.default)(n)) && (n = null);for (var r = null, i = e[o][t]; null != i;) {
				i.kind === a ? null == r ? e[o][t] = i.next : r.next = i.next : r = i, i = i.next;
			}null != n && (null == r ? e[o][t] = c(n, a) : r.next = c(n, a));
		}var s = n(23),
		    o = s.LISTENERS,
		    a = s.ATTRIBUTE,
		    c = s.newNode;t.defineCustomEventTarget = function (e, t) {
			function n() {
				e.call(this);
			}var s = { constructor: { value: n, configurable: !0, writable: !0 } };return t.forEach(function (e) {
				s["on" + e] = { get: function get() {
						return r(this, e);
					}, set: function set(t) {
						i(this, e, t);
					}, configurable: !0, enumerable: !0 };
			}), n.prototype = (0, _create2.default)(e.prototype, s), n;
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(23).createUniqueKey,
		    i = r("stop_immediate_propagation_flag"),
		    s = r("canceled_flag"),
		    o = r("original_event"),
		    a = (0, _freeze2.default)({ stopPropagation: (0, _freeze2.default)({ value: function value() {
					var e = this[o];"function" == typeof e.stopPropagation && e.stopPropagation();
				}, writable: !0, configurable: !0 }), stopImmediatePropagation: (0, _freeze2.default)({ value: function value() {
					this[i] = !0;var e = this[o];"function" == typeof e.stopImmediatePropagation && e.stopImmediatePropagation();
				}, writable: !0, configurable: !0 }), preventDefault: (0, _freeze2.default)({ value: function value() {
					this.cancelable === !0 && (this[s] = !0);var e = this[o];"function" == typeof e.preventDefault && e.preventDefault();
				}, writable: !0, configurable: !0 }), defaultPrevented: (0, _freeze2.default)({ get: function get() {
					return this[s];
				}, enumerable: !0, configurable: !0 }) });t.STOP_IMMEDIATE_PROPAGATION_FLAG = i, t.createEventWrapper = function (e, t) {
			var n = "number" == typeof e.timeStamp ? e.timeStamp : Date.now(),
			    r = { type: { value: e.type, enumerable: !0 }, target: { value: t, enumerable: !0 }, currentTarget: { value: t, enumerable: !0 }, eventPhase: { value: 2, enumerable: !0 }, bubbles: { value: Boolean(e.bubbles), enumerable: !0 }, cancelable: { value: Boolean(e.cancelable), enumerable: !0 }, timeStamp: { value: n, enumerable: !0 }, isTrusted: { value: !1, enumerable: !0 } };return r[i] = { value: !1, writable: !0 }, r[s] = { value: !1, writable: !0 }, r[o] = { value: e }, "undefined" != typeof e.detail && (r.detail = { value: e.detail, enumerable: !0 }), (0, _create2.default)((0, _create2.default)(e, a), r);
		};
	}, function (e, t, n) {
		"use strict";
		function r() {}function i(e, t, n) {
			this.fn = e, this.context = t, this.once = n || !1;
		}function s() {
			this._events = new r(), this._eventsCount = 0;
		}var o = Object.prototype.hasOwnProperty,
		    a = "~";_create2.default && (r.prototype = (0, _create2.default)(null), new r().__proto__ || (a = !1)), s.prototype.eventNames = function () {
			var e,
			    t,
			    n = [];if (0 === this._eventsCount) return n;for (t in e = this._events) {
				o.call(e, t) && n.push(a ? t.slice(1) : t);
			}return _getOwnPropertySymbols2.default ? n.concat((0, _getOwnPropertySymbols2.default)(e)) : n;
		}, s.prototype.listeners = function (e, t) {
			var n = a ? a + e : e,
			    r = this._events[n];if (t) return !!r;if (!r) return [];if (r.fn) return [r.fn];for (var i = 0, s = r.length, o = new Array(s); i < s; i++) {
				o[i] = r[i].fn;
			}return o;
		}, s.prototype.emit = function (e, t, n, r, i, s) {
			var o = a ? a + e : e;if (!this._events[o]) return !1;var c,
			    u,
			    l = this._events[o],
			    d = arguments.length;if (l.fn) {
				switch (l.once && this.removeListener(e, l.fn, void 0, !0), d) {case 1:
						return l.fn.call(l.context), !0;case 2:
						return l.fn.call(l.context, t), !0;case 3:
						return l.fn.call(l.context, t, n), !0;case 4:
						return l.fn.call(l.context, t, n, r), !0;case 5:
						return l.fn.call(l.context, t, n, r, i), !0;case 6:
						return l.fn.call(l.context, t, n, r, i, s), !0;}for (u = 1, c = new Array(d - 1); u < d; u++) {
					c[u - 1] = arguments[u];
				}l.fn.apply(l.context, c);
			} else {
				var m,
				    f = l.length;for (u = 0; u < f; u++) {
					switch (l[u].once && this.removeListener(e, l[u].fn, void 0, !0), d) {case 1:
							l[u].fn.call(l[u].context);break;case 2:
							l[u].fn.call(l[u].context, t);break;case 3:
							l[u].fn.call(l[u].context, t, n);break;case 4:
							l[u].fn.call(l[u].context, t, n, r);break;default:
							if (!c) for (m = 1, c = new Array(d - 1); m < d; m++) {
								c[m - 1] = arguments[m];
							}l[u].fn.apply(l[u].context, c);}
				}
			}return !0;
		}, s.prototype.on = function (e, t, n) {
			var r = new i(t, n || this),
			    s = a ? a + e : e;return this._events[s] ? this._events[s].fn ? this._events[s] = [this._events[s], r] : this._events[s].push(r) : (this._events[s] = r, this._eventsCount++), this;
		}, s.prototype.once = function (e, t, n) {
			var r = new i(t, n || this, !0),
			    s = a ? a + e : e;return this._events[s] ? this._events[s].fn ? this._events[s] = [this._events[s], r] : this._events[s].push(r) : (this._events[s] = r, this._eventsCount++), this;
		}, s.prototype.removeListener = function (e, t, n, i) {
			var s = a ? a + e : e;if (!this._events[s]) return this;if (!t) return 0 === --this._eventsCount ? this._events = new r() : delete this._events[s], this;var o = this._events[s];if (o.fn) o.fn !== t || i && !o.once || n && o.context !== n || (0 === --this._eventsCount ? this._events = new r() : delete this._events[s]);else {
				for (var c = 0, u = [], l = o.length; c < l; c++) {
					(o[c].fn !== t || i && !o[c].once || n && o[c].context !== n) && u.push(o[c]);
				}u.length ? this._events[s] = 1 === u.length ? u[0] : u : 0 === --this._eventsCount ? this._events = new r() : delete this._events[s];
			}return this;
		}, s.prototype.removeAllListeners = function (e) {
			var t;return e ? (t = a ? a + e : e, this._events[t] && (0 === --this._eventsCount ? this._events = new r() : delete this._events[t])) : (this._events = new r(), this._eventsCount = 0), this;
		}, s.prototype.off = s.prototype.removeListener, s.prototype.addListener = s.prototype.on, s.prototype.setMaxListeners = function () {
			return this;
		}, s.prefixed = a, s.EventEmitter = s, e.exports = s;
	}, function (e, t, n) {
		function r(e, t, n) {
			if (!a(t)) throw new TypeError("iterator must be a function");arguments.length < 3 && (n = this), "[object Array]" === c.call(e) ? i(e, t, n) : "string" == typeof e ? s(e, t, n) : o(e, t, n);
		}function i(e, t, n) {
			for (var r = 0, i = e.length; r < i; r++) {
				u.call(e, r) && t.call(n, e[r], r, e);
			}
		}function s(e, t, n) {
			for (var r = 0, i = e.length; r < i; r++) {
				t.call(n, e.charAt(r), r, e);
			}
		}function o(e, t, n) {
			for (var r in e) {
				u.call(e, r) && t.call(n, e[r], r, e);
			}
		}var a = n(38);e.exports = r;var c = Object.prototype.toString,
		    u = Object.prototype.hasOwnProperty;
	}, function (e, t) {
		(function (t) {
			"undefined" != typeof window ? e.exports = window : "undefined" != typeof t ? e.exports = t : "undefined" != typeof self ? e.exports = self : e.exports = {};
		}).call(t, function () {
			return this;
		}());
	}, function (e, t, n) {
		var r = n(81),
		    i = n(77),
		    s = function s(e) {
			return "[object Array]" === Object.prototype.toString.call(e);
		};e.exports = function (e) {
			if (!e) return {};var t = {};return i(r(e).split("\n"), function (e) {
				var n = e.indexOf(":"),
				    i = r(e.slice(0, n)).toLowerCase(),
				    o = r(e.slice(n + 1));"undefined" == typeof t[i] ? t[i] = o : s(t[i]) ? t[i].push(o) : t[i] = [t[i], o];
			}), t;
		};
	}, function (e, t) {
		function n() {
			throw new Error("setTimeout has not been defined");
		}function r() {
			throw new Error("clearTimeout has not been defined");
		}function i(e) {
			if (l === setTimeout) return setTimeout(e, 0);if ((l === n || !l) && setTimeout) return l = setTimeout, setTimeout(e, 0);try {
				return l(e, 0);
			} catch (e) {
				try {
					return l.call(null, e, 0);
				} catch (e) {
					return l.call(this, e, 0);
				}
			}
		}function s(e) {
			if (d === clearTimeout) return clearTimeout(e);if ((d === r || !d) && clearTimeout) return d = clearTimeout, clearTimeout(e);try {
				return d(e);
			} catch (e) {
				try {
					return d.call(null, e);
				} catch (e) {
					return d.call(this, e);
				}
			}
		}function o() {
			y && f && (y = !1, f.length ? p = f.concat(p) : h = -1, p.length && a());
		}function a() {
			if (!y) {
				var e = i(o);y = !0;for (var t = p.length; t;) {
					for (f = p, p = []; ++h < t;) {
						f && f[h].run();
					}h = -1, t = p.length;
				}f = null, y = !1, s(e);
			}
		}function c(e, t) {
			this.fun = e, this.array = t;
		}function u() {}var l,
		    d,
		    m = e.exports = {};!function () {
			try {
				l = "function" == typeof setTimeout ? setTimeout : n;
			} catch (e) {
				l = n;
			}try {
				d = "function" == typeof clearTimeout ? clearTimeout : r;
			} catch (e) {
				d = r;
			}
		}();var f,
		    p = [],
		    y = !1,
		    h = -1;m.nextTick = function (e) {
			var t = new Array(arguments.length - 1);if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) {
				t[n - 1] = arguments[n];
			}p.push(new c(e, t)), 1 !== p.length || y || i(a);
		}, c.prototype.run = function () {
			this.fun.apply(null, this.array);
		}, m.title = "browser", m.browser = !0, m.env = {}, m.argv = [], m.version = "", m.versions = {}, m.on = u, m.addListener = u, m.once = u, m.off = u, m.removeListener = u, m.removeAllListeners = u, m.emit = u, m.binding = function (e) {
			throw new Error("process.binding is not supported");
		}, m.cwd = function () {
			return "/";
		}, m.chdir = function (e) {
			throw new Error("process.chdir is not supported");
		}, m.umask = function () {
			return 0;
		};
	}, function (e, t) {
		function n(e) {
			return e.replace(/^\s*|\s*$/g, "");
		}t = e.exports = n, t.left = function (e) {
			return e.replace(/^\s*/, "");
		}, t.right = function (e) {
			return e.replace(/\s*$/, "");
		};
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			for (var n = 0; n < e.length; n++) {
				t(e[n]);
			}
		}function i(e) {
			for (var t in e) {
				if (e.hasOwnProperty(t)) return !1;
			}return !0;
		}function s(e, t, n) {
			var r = e;return d(t) ? (n = t, "string" == typeof e && (r = { uri: e })) : r = f(t, { uri: e }), r.callback = n, r;
		}function o(e, t, n) {
			return t = s(e, t, n), a(t);
		}function a(e) {
			function t() {
				4 === d.readyState && s();
			}function n() {
				var e = void 0;if (e = d.response ? d.response : d.responseText || c(d), T) try {
					e = JSON.parse(e);
				} catch (e) {}return e;
			}function r(e) {
				return clearTimeout(y), e instanceof Error || (e = new Error("" + (e || "Unknown XMLHttpRequest Error"))), e.statusCode = 0, u(e, l);
			}function s() {
				if (!p) {
					var t;clearTimeout(y), t = e.useXDR && void 0 === d.status ? 200 : 1223 === d.status ? 204 : d.status;var r = l,
					    i = null;return 0 !== t ? (r = { body: n(), statusCode: t, method: g, headers: {}, url: h, rawRequest: d }, d.getAllResponseHeaders && (r.headers = m(d.getAllResponseHeaders()))) : i = new Error("Internal XMLHttpRequest Error"), u(i, r, r.body);
				}
			}if ("undefined" == typeof e.callback) throw new Error("callback argument missing");var a = !1,
			    u = function u(t, n, r) {
				a || (a = !0, e.callback(t, n, r));
			},
			    l = { body: void 0, headers: {}, statusCode: 0, method: g, url: h, rawRequest: d },
			    d = e.xhr || null;d || (d = e.cors || e.useXDR ? new o.XDomainRequest() : new o.XMLHttpRequest());var f,
			    p,
			    y,
			    h = d.url = e.uri || e.url,
			    g = d.method = e.method || "GET",
			    v = e.body || e.data || null,
			    b = d.headers = e.headers || {},
			    M = !!e.sync,
			    T = !1;if ("json" in e && e.json !== !1 && (T = !0, b.accept || b.Accept || (b.Accept = "application/json"), "GET" !== g && "HEAD" !== g && (b["content-type"] || b["Content-Type"] || (b["Content-Type"] = "application/json"), v = (0, _stringify2.default)(e.json === !0 ? v : e.json))), d.onreadystatechange = t, d.onload = s, d.onerror = r, d.onprogress = function () {}, d.onabort = function () {
				p = !0;
			}, d.ontimeout = r, d.open(g, h, !M, e.username, e.password), M || (d.withCredentials = !!e.withCredentials), !M && e.timeout > 0 && (y = setTimeout(function () {
				if (!p) {
					p = !0, d.abort("timeout");var e = new Error("XMLHttpRequest timeout");e.code = "ETIMEDOUT", r(e);
				}
			}, e.timeout)), d.setRequestHeader) for (f in b) {
				b.hasOwnProperty(f) && d.setRequestHeader(f, b[f]);
			} else if (e.headers && !i(e.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");return "responseType" in e && (d.responseType = e.responseType), "beforeSend" in e && "function" == typeof e.beforeSend && e.beforeSend(d), d.send(v), d;
		}function c(e) {
			if ("document" === e.responseType) return e.responseXML;var t = 204 === e.status && e.responseXML && "parsererror" === e.responseXML.documentElement.nodeName;return "" !== e.responseType || t ? null : e.responseXML;
		}function u() {}var l = n(78),
		    d = n(38),
		    m = n(79),
		    f = n(83);e.exports = o, o.XMLHttpRequest = l.XMLHttpRequest || u, o.XDomainRequest = "withCredentials" in new o.XMLHttpRequest() ? o.XMLHttpRequest : l.XDomainRequest, r(["get", "put", "post", "patch", "head", "delete"], function (e) {
			o["delete" === e ? "del" : e] = function (t, n, r) {
				return n = s(t, n, r), n.method = e.toUpperCase(), a(n);
			};
		});
	}, function (e, t) {
		function n() {
			for (var e = {}, t = 0; t < arguments.length; t++) {
				var n = arguments[t];for (var i in n) {
					r.call(n, i) && (e[i] = n[i]);
				}
			}return e;
		}e.exports = n;var r = Object.prototype.hasOwnProperty;
	}, function (e, t) {},,,, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1);r.audioToText = function (e) {
			i.verifyOptions(e, "url"), e.audioToText = i.filterObj(e, "url");var t = this;t.processCallback(e), t.sendCmd("audioToText", e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1);r.getChatroomAddress = function (e) {
			i.verifyOptions(e, "chatroomId");var t = this;t.processCallback(e), t.sendCmd("getChatroomAddress", e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1);r.kick = function (e) {
			i.verifyOptions(e, "deviceIds"), this.processCallback(e), this.sendCmd("kick", { deviceIds: e.deviceIds.slice(0) }, e.callback);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn;r.clearDB = function (e) {
			var t = this,
			    n = t.db;t.processCallback(e);var r = e.done;n.enable ? n.clear().then(r, r) : r();
		}, r.removeDB = function (e) {
			var t = this,
			    n = t.db;t.processCallback(e);var r = e.done;n.enable ? n.destroy().then(r, r) : r();
		};
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			return "object" === ("undefined" == typeof e ? "undefined" : i(e)) && (e.msgEventSubscribes ? e = e.msgEventSubscribes : e.msgEventSubscribe ? e = e.msgEventSubscribe : e.accounts ? e = e.accounts : e.msgEvent && (e = e.msgEvent, e.time && (e.time = +e.time)), 1 === e.sync ? e.sync = !0 : 0 === e.sync && (e.sync = !1)), e;
		}var i = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
			return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		} : function (e) {
			return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		},
		    s = n(2).Promise,
		    o = n(5).fn,
		    a = n(1),
		    c = n(134),
		    u = n(135);o.batchSendEventsCmds = function (e, t, n) {
			var i = this,
			    o = 100,
			    c = a.dropArrayDuplicates(t.accounts);c = a.reshape2d(c, o);var u = [];c.forEach(function (n) {
				u.push(new s(function (s, o) {
					var c = a.simpleClone(t);c.accounts = n, i.sendCmdWithResp(e, c, function (e, t) {
						e ? o(e) : s(r(t));
					});
				}));
			}), s.all(u).then(function (e) {
				var t = null;e.length > 0 && (e[0].msgEventSubscribe ? !function () {
					var n = e[0].msgEventSubscribe;n = r(n);var i = [];e.forEach(function (e) {
						i = i.concat(e.accounts);
					}), t = { accounts: i, msgEventSubscribe: n };
				}() : (t = [], e.forEach(function (e) {
					t = t.concat(e);
				}))), n(null, t);
			}, function (e) {
				n(e, null);
			});
		}, o.publishEvent = function (e) {
			var t = this,
			    n = new c(e);n = n.assembleEvent(), t.processCallback(e), this.sendCmdWithResp("publishEvent", { msgEvent: n }, function (t, n) {
				t || (n = r(n)), e.callback(t, n);
			});
		}, o.subscribeEvent = function (e) {
			var t = this;a.verifyOptions(e, "accounts");var n = new u(e);a.verifyParamType("accounts", e.accounts, "array"), t.processCallback(e), n = n.assembleEvent(), this.batchSendEventsCmds("subscribeEvent", { msgEventSubscribe: n, accounts: e.accounts }, function (t, n) {
				!t && n && (n = { failedAccounts: n }), e.callback(t, n);
			});
		}, o.unSubscribeEventsByAccounts = function (e) {
			var t = this;a.verifyOptions(e, "accounts"), a.verifyParamType("accounts", e.accounts, "array");var n = new u(e);n = n.assembleEvent(), t.processCallback(e), this.batchSendEventsCmds("unSubscribeEventsByAccounts", { msgEventSubscribe: n, accounts: e.accounts }, function (t, n) {
				!t && n && (n = { failedAccounts: n }), e.callback(t, n);
			});
		}, o.unSubscribeEventsByType = function (e) {
			var t = this,
			    n = new u(e);n = n.assembleEvent(), t.processCallback(e), this.sendCmdWithResp("unSubscribeEventsByType", { msgEventSubscribe: n }, function (t, n) {
				e.callback(t);
			});
		}, o.querySubscribeEventsByAccounts = function (e) {
			var t = this;a.verifyOptions(e, "accounts"), a.verifyParamType("accounts", e.accounts, "array");var n = new u(e);n = n.assembleEvent(), t.processCallback(e), this.batchSendEventsCmds("querySubscribeEventsByAccounts", { msgEventSubscribe: n, accounts: e.accounts }, function (t, n) {
				!t && n && (n = { msgEventSubscribes: n }), e.callback(t, n);
			});
		}, o.querySubscribeEventsByType = function (e) {
			var t = this,
			    n = new u(e);n = n.assembleEvent(), t.processCallback(e), this.sendCmdWithResp("querySubscribeEventsByType", { msgEventSubscribe: n }, function (t, n) {
				t || (n = { msgEventSubscribes: r(n) }), e.callback(t, n);
			});
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1),
		    s = i.notundef,
		    o = n(58);r.friendRequest = function (e) {
			i.verifyOptions(e, "type account"), i.verifyParamValid("type", e.type, o.validTypes()), this.processPs(e), this.processCallback(e);var t = { account: e.account, type: o.getByteFromType(e.type), ps: e.ps };s(e.idServer) && (t.idServer = e.idServer), this.sendCmd("friendRequest", t, e.callback);
		}, r.addFriend = function (e) {
			e.type = "addFriend", this.friendRequest(e);
		}, r.applyFriend = function (e) {
			e.type = "applyFriend", this.friendRequest(e);
		}, r.passFriendApply = function (e) {
			i.verifyOptions(e, "idServer"), e.type = "passFriendApply", this.friendRequest(e);
		}, r.rejectFriendApply = function (e) {
			i.verifyOptions(e, "idServer"), e.type = "rejectFriendApply", this.friendRequest(e);
		}, r.deleteFriend = function (e) {
			i.verifyOptions(e, "account"), this.processCallback(e), this.sendCmd("deleteFriend", { account: e.account }, e.callback);
		}, r.updateFriend = function (e) {
			this.processCallback(e);var t = new o(e);this.sendCmd("updateFriend", { friend: t, single: !0 }, e.callback);
		}, r.getFriends = function (e) {
			function t() {
				n.sendCmd("getFriends", { timetag: s, NOTSTORE: "timetag" }, e.callback);
			}var n = this,
			    r = n.db,
			    s = 0;i.verifyOptions(e), n.processCallback(e), r.enable ? r.getFriendsTimetag().then(function (e) {
				s = e, t();
			}, t) : t();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1),
		    s = i.isArray,
		    o = n(15);r.mergeObjArray = function (e, t, n) {
			return e || (e = []), t ? (s(t) || (t = [t]), t.length ? (n = n || {}, i.mergeObjArray(e, t, n)) : e) : e;
		}, r.cutObjArray = function (e, t, n) {
			return e && t ? (s(t) || (t = [t]), t.length ? (n = n || {}, i.cutObjArray(e, t, n)) : e) : e;
		}, r.mergeLoginPorts = function (e, t) {
			return this.mergeObjArray(e, t, { keyPath: "deviceId" });
		}, r.cutLoginPorts = function (e, t) {
			return this.cutObjArray(e, t, { keyPath: "deviceId", sortPath: "type"
			});
		}, r.mergeRelations = function (e, t) {
			return this.mergeObjArray(e, t, { keyPath: "account" });
		}, r.cutRelations = function (e, t) {
			return this.cutObjArray(e, t, { keyPath: "account" });
		}, r.findRelation = function (e, t) {
			return i.findObjInArray(e, { keyPath: "account", value: t });
		}, r.mergeFriends = function (e, t) {
			return this.mergeObjArray(e, t, { keyPath: "account" });
		}, r.cutFriends = function (e, t) {
			return this.cutObjArray(e, t, { keyPath: "account" });
		}, r.cutFriendsByAccounts = function (e, t) {
			s(t) || (t = [t]);var n = t.map(function (e) {
				return { account: e };
			});return this.cutFriends(e, n);
		}, r.findFriend = function (e, t) {
			return i.findObjInArray(e, { keyPath: "account", value: t });
		}, r.mergeUsers = function (e, t) {
			return this.mergeObjArray(e, t, { keyPath: "account" });
		}, r.findUser = function (e, t) {
			return i.findObjInArray(e, { keyPath: "account", value: t });
		}, r.mergeTeams = function (e, t) {
			return this.mergeObjArray(e, t, { keyPath: "teamId" });
		}, r.cutTeams = function (e, t) {
			return this.cutObjArray(e, t, { keyPath: "teamId" });
		}, r.findTeam = function (e, t) {
			return i.findObjInArray(e, { keyPath: "teamId", value: t });
		}, r.assembleTeamOwner = o.assembleOwner, r.assembleTeamMembers = o.assembleMembers, r.genTeamMemberId = o.genId, r.mergeTeamMembers = function (e, t) {
			return this.mergeObjArray(e, t);
		}, r.cutTeamMembers = function (e, t) {
			return this.cutObjArray(e, t);
		}, r.cutTeamMembersByAccounts = function (e, t, n) {
			s(n) || (n = [n]);var r = o.assembleMembers({ teamId: t }, n);return this.cutTeamMembers(e, r);
		}, r.findTeamMember = function (e, t) {
			return i.findObjInArray(e, { keyPath: "id", value: t });
		}, r.mergeSessions = function (e, t) {
			return this.mergeObjArray(e, t, { sortPath: "updateTime", desc: !0 });
		}, r.cutSessions = function (e, t) {
			return this.cutObjArray(e, t);
		}, r.cutSessionsByIds = function (e, t) {
			s(t) || (t = [t]);var n = t.map(function (e) {
				return { id: e };
			});return this.cutSessions(e, n);
		}, r.findSession = function (e, t) {
			return i.findObjInArray(e, { keyPath: "id", value: t });
		}, r.mergeMsgs = function (e, t) {
			return this.mergeObjArray(e, t, { keyPath: "idClient", sortPath: "time" });
		}, r.cutMsgs = function (e, t) {
			return this.cutObjArray(e, t, { keyPath: "idClient" });
		}, r.cutMsgsByIdClients = function (e, t) {
			s(t) || (t = [t]);var n = t.map(function (e) {
				return { idClient: e };
			});return this.cutMsgs(e, n);
		}, r.findMsg = function (e, t) {
			return i.findObjInArray(e, { keyPath: "idClient", value: t });
		}, r.mergeSysMsgs = function (e, t) {
			return this.mergeObjArray(e, t, { keyPath: "idServer", desc: !0 });
		}, r.cutSysMsgs = function (e, t) {
			return this.cutObjArray(e, t, { keyPath: "idServer" });
		}, r.cutSysMsgsByIdServers = function (e, t) {
			s(t) || (t = [t]);var n = t.map(function (e) {
				return { idServer: e };
			});return this.cutSysMsgs(e, n);
		}, r.findSysMsg = function (e, t) {
			return i.findObjInArray(e, { keyPath: "idServer", value: t });
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1),
		    s = i.undef,
		    o = i.notundef,
		    a = n(9),
		    c = n(19),
		    u = n(20),
		    l = n(3);r.beforeSendMsg = function (e) {
			var t = this,
			    n = t.protocol,
			    r = e.msg;r.to === t.account && (r.fromDeviceId = a.deviceId), r.userUpdateTime = n.myInfo && n.myInfo.updateTime;var i;switch (r.getScene()) {case "p2p":
					i = "sendMsg";break;case "team":
					i = "sendTeamMsg";}e.filter && (i = "sendFilterMsg", r.filter = !0), e.cmd = i;
		}, r.afterSendMsg = function (e) {
			var t = e.rtnMsg,
			    n = c.genSessionByMsg(t);this.protocol.onUpdateSession(n);
		}, r.beforeForwardMsg = function (e) {
			i.verifyOptions(e, "msg scene to"), e.msg.scene = e.scene, e.msg.to = e.to;
		}, r.markMsgRead = function (e) {
			var t = this,
			    n = t.protocol;return !e || t.db.enable || n.options.autoMarkRead ? void t.logger.warn("不需要标记消息为已收到 (没有消息, 或者启用了数据库, 或者启用了自动标记已收到)") : void n.markMsgRead(e, !0);
		}, r.sendMsgReceipt = function (e) {
			var t = this;if (i.verifyOptions(e), t.processCallback(e), !e.msg) return void e.done();var n = "target idClient time";i.verifyOptions(e, "msg");var r = e.msg;i.verifyOptions(r, n, !0, "msg."), t.protocol.shouldSendMsgReceipt(r) ? t.sendCmd("sendMsgReceipt", { msgReceipt: { to: r.target, idClient: r.idClient, time: r.time } }, e.callback) : e.done();
		}, r.isMsgRemoteRead = function (e) {
			return this.protocol.isMsgRemoteRead(e);
		}, r.deleteMsg = function (e) {
			var t = this;i.verifyOptions(e, "msg");var n = e.msg;if ("out" !== n.flow || "success" !== n.status || n.from === n.to || n.isLocal) return e.done(l.newParamError("只能删除自己发送给别人的, 并且发送成功的消息"), e);i.verifyOptions(n, ["scene", "to", "from", "time", "idClient", "idServer"], !0, "msg."), i.verifyParamValid("msg.scene", n.scene, t.message.validScenes);var r = i.simpleClone(n);this.processPs(r), this.processCallback(e), "p2p" === r.scene ? r.type = "deleteMsgP2p" : r.type = "deleteMsgTeam", r.deletedIdClient = r.idClient, r.deletedIdServer = r.idServer, r = new u(r), t.sendCmd("deleteMsg", { sysMsg: r, msg: n }, e.callback);
		}, r.getHistoryMsgs = function (e) {
			var t = this;i.verifyOptions(e, "scene to"), i.verifyParamValid("scene", e.scene, t.message.validScenes), "undefined" == typeof e.beginTime && (e.beginTime = 0), i.verifyParamType("beginTime", e.beginTime, "number"), "undefined" == typeof e.endTime && (e.endTime = 0), i.verifyParamType("endTime", e.endTime, "number"), "undefined" != typeof e.lastMsgId && null !== e.lastMsgId || (e.lastMsgId = "0"), "undefined" == typeof e.limit && (e.limit = 100), i.verifyParamType("limit", e.limit, "number"), i.verifyParamMax("limit", e.limit, 100), o(e.reverse) ? i.verifyParamType("reverse", e.reverse, "boolean") : e.reverse = !1, o(e.asc) ? i.verifyParamType("asc", e.asc, "boolean") : e.asc = !1, t.processCallback(e), e.asc && (e.cbaop = function (e, t) {
				e || (t.msgs = t.msgs.reverse());
			});var n;switch (e.scene) {case "p2p":
					n = "getHistoryMsgs";break;case "team":
					n = "getTeamHistoryMsgs";}var r = { scene: e.scene, to: e.to, beginTime: e.beginTime, endTime: e.endTime, lastMsgId: e.lastMsgId, limit: e.limit, reverse: e.reverse };t.sendCmd(n, r, e.callback);
		}, r.searchHistoryMsgs = function (e) {
			var t = this;i.verifyOptions(e, "scene to keyword"), i.verifyParamValid("scene", e.scene, t.message.validScenes), "undefined" == typeof e.beginTime && (e.beginTime = 0), i.verifyParamType("beginTime", e.beginTime, "number"), "undefined" == typeof e.endTime && (e.endTime = 0), i.verifyParamType("endTime", e.endTime, "number"), "undefined" == typeof e.limit && (e.limit = 100), i.verifyParamType("limit", e.limit, "number"), i.verifyParamMax("limit", e.limit, 100), o(e.reverse) ? i.verifyParamType("reverse", e.reverse, "boolean") : e.reverse = !1, o(e.asc) ? i.verifyParamType("asc", e.asc, "boolean") : e.asc = !1, t.processCallback(e), e.asc && (e.cbaop = function (e, t) {
				e || (t.msgs = t.msgs.reverse());
			});var n;switch (e.scene) {case "p2p":
					n = "searchHistoryMsgs";break;case "team":
					n = "searchTeamHistoryMsgs";}var r = i.filterObj(e, "scene to beginTime endTime keyword limit reverse");t.sendCmd(n, r, e.callback);
		}, r.getLocalMsgs = function (e) {
			function t() {
				e.msgs = c, e.done(n, e);
			}var n,
			    r = this,
			    a = r.db,
			    c = [];i.verifyOptions(e);var u = !1;o(e.start) && (u = !0, i.verifyParamType("start", e.start, "number"));var l = !1;o(e.end) && (l = !0, i.verifyParamType("end", e.end, "number")), u && l && e.end <= e.start && i.onParamError("参数 end 必须晚于 start"), s(e.limit) && (e.limit = 100), i.verifyParamType("limit", e.limit, "number"), i.verifyParamMin("limit", e.limit, 1), r.processCallback(e), a.enable ? a.getMsgs(e).then(function (e) {
				c = e, t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.getLocalMsgByIdClient = function (e) {
			function t() {
				e.msg = o, e.done(n, e);
			}var n,
			    r = this,
			    s = r.db,
			    o = null;i.verifyOptions(e, "idClient"), r.processCallback(e), s.enable ? s.getMsgByIdClient(e.idClient).then(function (e) {
				e && (o = e), t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.getLocalMsgsByIdClients = function (e) {
			function t() {
				e.msgs = o, e.done(n, e);
			}var n,
			    r = this,
			    s = r.db,
			    o = [];i.verifyOptions(e, "idClients"), i.verifyParamType("idClients", e.idClients, "array"), r.processCallback(e), s.enable ? s.getMsgsByIdClients(e.idClients).then(function (e) {
				o = e.filter(function (e) {
					return !!e;
				}), t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.updateLocalMsg = function (e) {
			function t() {
				e.msg = o, e.done(n, e);
			}var n,
			    r = this,
			    s = r.db,
			    o = null;if (i.verifyOptions(e, "idClient"), r.processCallback(e), s.enable) {
				var a = i.filterObj(e, "idClient localCustom");s.updateMsg(a).then(function (e) {
					o = e, t();
				}, function (e) {
					n = e, t();
				});
			} else t();
		}, r.deleteLocalMsg = function (e) {
			function t() {
				e.done(n, e);
			}var n,
			    r = this;i.verifyOptions(e, "msg");var s = e.msg;i.verifyOptions(s, "idClient sessionId", !0, "msg."), r.processCallback(e), r.protocol.deleteLocalMsg(s).then(t, function (e) {
				n = e, t();
			});
		}, r.deleteLocalMsgsBySession = function (e) {
			function t() {
				e.done(n, e);
			}var n,
			    r = this,
			    s = r.db;i.verifyOptions(e, "scene to"), i.verifyParamValid("scene", e.scene, r.message.validScenes), e.sessionId = e.scene + "-" + e.to, r.processCallback(e), s.enable ? s.deleteMsgsBySessionId(e.sessionId).then(function () {
				t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.deleteAllLocalMsgs = function (e) {
			function t() {
				e.done(n, e);
			}var n,
			    r = this,
			    i = r.db;r.processCallback(e), i.enable && i.deleteAllMsgs().then(function () {
				t();
			}, function (e) {
				n = e, t();
			});
		};
	}, function (e, t) {
		"use strict";
	}, function (e, t) {
		"use strict";
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(45),
		    s = n(1),
		    o = s.undef;r.getPushNotificationMultiportConfig = function () {
			return this.protocol.getPushNotificationMultiportConfig();
		}, r.updatePushNotificationMultiportConfig = function (e) {
			s.verifyOptions(e), o(e.shouldPushNotificationWhenPCOnline) && (e.shouldPushNotificationWhenPCOnline = !0), e.donnop = new i(e), this.processCallback(e), this.sendCmd("updateDonnop", e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1);r.markInBlacklist = function (e) {
			i.verifyOptions(e, "account isAdd"), i.verifyParamType("isAdd", e.isAdd, "boolean"), this.processCallback(e), this.sendCmd("markInBlacklist", { account: e.account, isAdd: e.isAdd }, e.callback);
		}, r.addToBlacklist = function (e) {
			return e.isAdd = !0, this.markInBlacklist(e);
		}, r.removeFromBlacklist = function (e) {
			return e.isAdd = !1, this.markInBlacklist(e);
		}, r.markInMutelist = function (e) {
			i.verifyOptions(e, "account"), i.verifyParamType("isAdd", e.isAdd, "boolean"), this.processCallback(e), this.sendCmd("markInMutelist", { account: e.account, isAdd: e.isAdd }, e.callback);
		}, r.addToMutelist = function (e) {
			return e.isAdd = !0, this.markInMutelist(e);
		}, r.removeFromMutelist = function (e) {
			return e.isAdd = !1, this.markInMutelist(e);
		}, r.getRelations = function (e) {
			function t() {
				n.sendCmd("getRelations", { timetag: s, NOTSTORE: "timetag" }, e.callback);
			}var n = this,
			    r = n.db,
			    s = 0;e = i.verifyOptions(e), n.processCallback(e), r.enable ? r.getRelationsTimetag().then(function (e) {
				s = e, t();
			}, t) : t();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1),
		    s = i.undef,
		    o = i.notundef;r.setCurrSession = function (e) {
			var t = this;t.resetSessionUnread(e), t.protocol.setCurrSession(e);
		}, r.resetSessionUnread = function (e) {
			var t = this;if (t.protocol.resetSessionUnread(e), t.options.syncSessionUnread) {
				var n = t.protocol.findSession(e);if (!n) return void t.logger.warn("no session, " + e);if (!n.lastMsg) return void t.logger.warn("no session.lastMsg, session " + e);if (!n.scene || !n.to) return void t.logger.warn("no scene or to, session " + e);var r = n.lastMsg.time;if (n && n.ack && n.ack >= r) return void t.logger.warn("no need to ack, session " + e);var i = { scene: "p2p" === n.scene ? 0 : 1, to: n.to, timetag: r };t.sendCmd("markSessionAck", i);
			}
		}, r.resetCurrSession = function () {
			this.protocol.setCurrSession("");
		}, r.insertLocalSession = function (e) {
			function t() {
				e.session = r, e.done(n, e);
			}var n,
			    r,
			    s = this;i.verifyOptions(e, "scene to"), i.verifyParamValid("scene", e.scene, s.message.validScenes), s.processCallback(e), s.protocol.insertLocalSession(e).then(function (e) {
				r = e, t();
			}, function (e) {
				n = e, t();
			});
		}, r.getLocalSessions = function (e) {
			function t() {
				e.sessions = c, e.done(n, e);
			}var n,
			    r = this,
			    a = r.db,
			    c = [];i.verifyOptions(e), s(e.limit) && (e.limit = 100), i.verifyParamType("limit", e.limit, "number"), i.verifyParamMax("limit", e.limit, 100), o(e.reverse) ? i.verifyParamType("reverse", e.reverse, "boolean") : e.reverse = !1, r.processCallback(e), a.enable ? a.getSessions(e).then(function (e) {
				c = e, r.protocol.mergeSessions(c), t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.updateLocalSession = function (e) {
			function t() {
				r.protocol.onUpdateSession(o), e.session = o, e.done(n, e);
			}var n,
			    r = this,
			    s = r.db;i.verifyOptions(e, "id"), r.processCallback(e);var o = i.filterObj(e, "id localCustom");s.enable ? s.updateSession(o).then(function (e) {
				o = e, t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.deleteLocalSession = function (e) {
			function t() {
				e.done(n, e);
			}var n,
			    r = this,
			    s = r.db;i.verifyOptions(e, "id"), r.processCallback(e), s.enable ? s.deleteSession(e.id).then(function () {
				r.protocol.deleteLocalSession(e.id), t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.deleteSession = function (e) {
			i.verifyOptions(e, "scene to"), this.processCallback(e), e.sessions = [{ scene: e.scene, to: e.to }], this.deleteSessions(e);
		}, r.deleteSessions = function (e) {
			i.verifyOptions(e, "sessions"), i.verifyParamType("sessions", e.sessions, "array"), e.sessions.forEach(function (e, t) {
				i.verifyOptions(e, "scene to", !0, "sessions[" + t + "].");
			}), this.processCallback(e), this.sendCmd("deleteSessions", { sessions: e.sessions.map(function (e) {
					return e.scene + "|" + e.to;
				}) }, e.callback);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(5).fn,
		    s = n(1),
		    o = s.undef,
		    a = s.notundef,
		    c = n(20);i.markSysMsgRead = function (e) {
			function t() {
				e.done(n, e);
			}var n,
			    i = this,
			    o = i.db,
			    a = r.resolve(),
			    c = i.protocol;s.verifyOptions(e, "sysMsgs");var u = e.sysMsgs;s.isArray(u) || (u = [u]), o.enable ? a = o.markSysMsgRead(u).then(function (e) {
				u = e, c.onUpdateSysMsg(e);
			}) : (u = u.filter(function (e) {
				return !e.read;
			}), u.length && (c.options.autoMarkRead || c.markSysMsgRead(u, !0), u.forEach(function (e) {
				e.read = !0;
			}), c.onUpdateSysMsg(u))), a.then(function () {
				return c.reduceSysMsgUnread(u);
			}).then(t, function (e) {
				n = e, t();
			});
		}, i.sendCustomSysMsg = function (e) {
			var t = this;s.verifyOptions(e, "scene to content"), s.verifyParamValid("scene", e.scene, t.message.validScenes), t.processCallback(e), "p2p" === e.scene ? e.type = "customP2p" : e.type = "customTeam", e.sysMsg = new c(e);var n = "sendCustomSysMsg";return e.filter && (n = "sendFilterCustomSysMsg"), t.sendCmd(n, { sysMsg: e.sysMsg, single: !0 }, e.callback), t.formatReturnSysMsg(e.sysMsg);
		}, i.formatReturnSysMsg = function (e) {
			var t = this;return e = s.copy(e), t.protocol.completeSysMsg(e), e.status = "sending", e = c.reverse(e);
		}, i.getLocalSysMsgs = function (e) {
			function t() {
				e.sysMsgs = u, e.done(n, e);
			}var n,
			    r = this,
			    i = r.db,
			    u = [];s.verifyOptions(e), e.category && s.verifyParamValid("category", e.category, c.validCategories), e.type && s.verifyParamValid("type", e.type, c.validTypes), o(e.limit) && (e.limit = 100), s.verifyParamType("limit", e.limit, "number"), s.verifyParamMax("limit", e.limit, 100), a(e.reverse) ? s.verifyParamType("reverse", e.reverse, "boolean") : e.reverse = !1, r.processCallback(e), i.enable ? i.getSysMsgs(e).then(function (e) {
				u = e, t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, i.updateLocalSysMsg = function (e) {
			function t() {
				e.sysMsg = o, e.done(n, e);
			}var n,
			    r = this,
			    i = r.db,
			    o = null;if (s.verifyOptions(e, "idServer"), r.processCallback(e), i.enable) {
				var a = s.filterObj(e, "idServer state localCustom");i.updateSysMsg(a).then(function (e) {
					o = e, t();
				}, function (e) {
					n = e, t();
				});
			} else t();
		}, i.deleteLocalSysMsg = function (e) {
			function t() {
				e.done(n, e);
			}var n,
			    r = this,
			    i = r.db;s.verifyOptions(e, "idServer"), r.processCallback(e), i.enable ? i.deleteSysMsg(e.idServer).then(function () {
				t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, i.deleteAllLocalSysMsgs = function (e) {
			function t() {
				r.protocol.onUpdateSysMsgUnread({}), e.done(n, e);
			}var n,
			    r = this,
			    i = r.db;r.processCallback(e), i.enable && i.deleteAllSysMsgs().then(function () {
				t();
			}, function (e) {
				n = e, t();
			});
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1),
		    s = i.undef,
		    o = n(21),
		    a = n(15);r.createTeam = function (e) {
			i.verifyOptions(e, "type name"), s(e.accounts) ? e.accounts = [] : i.verifyParamType("accounts", e.accounts, "array"), e.action = "create", this.processPs(e), this.processCallback(e), e.team = new o(e);var t = { team: e.team, accounts: e.accounts.slice(0), ps: e.ps };this.sendCmd("createTeam", t, e.callback);
		}, r.updateTeam = function (e) {
			i.verifyOptions(e, "teamId"), e.action = "update", this.processCallback(e), e.team = new o(e), this.sendCmd("updateTeam", { team: e.team, single: !0 }, e.callback);
		}, r.addTeamMembers = function (e) {
			i.verifyOptions(e, "teamId accounts"), i.verifyParamType("accounts", e.accounts, "array"), this.processPs(e), this.processCallback(e);var t = { teamId: e.teamId, accounts: e.accounts.slice(0), ps: e.ps };this.sendCmd("addTeamMembers", t, e.callback);
		}, r.removeTeamMembers = function (e) {
			i.verifyOptions(e, "teamId accounts"), i.verifyParamType("accounts", e.accounts, "array"), this.processCallback(e);var t = { teamId: e.teamId, accounts: e.accounts.slice(0) };this.sendCmd("removeTeamMembers", t, e.callback);
		}, r.acceptTeamInvite = function (e) {
			i.verifyOptions(e, "idServer teamId from"), this.processCallback(e);var t = { idServer: e.idServer, teamId: e.teamId, from: e.from };this.sendCmd("acceptTeamInvite", t, e.callback);
		}, r.rejectTeamInvite = function (e) {
			i.verifyOptions(e, "idServer teamId from"), this.processPs(e), this.processCallback(e);var t = { idServer: e.idServer, teamId: e.teamId, from: e.from, ps: e.ps };this.sendCmd("rejectTeamInvite", t, e.callback);
		}, r.applyTeam = function (e) {
			i.verifyOptions(e, "teamId"), this.processPs(e), this.processCallback(e);var t = { teamId: e.teamId, ps: e.ps };this.sendCmd("applyTeam", t, e.callback);
		}, r.passTeamApply = function (e) {
			i.verifyOptions(e, "idServer teamId from"), this.processCallback(e);var t = { idServer: e.idServer, teamId: e.teamId, from: e.from };this.sendCmd("passTeamApply", t, e.callback);
		}, r.rejectTeamApply = function (e) {
			i.verifyOptions(e, "idServer teamId from"), this.processPs(e), this.processCallback(e);var t = { idServer: e.idServer, teamId: e.teamId, from: e.from, ps: e.ps };this.sendCmd("rejectTeamApply", t, e.callback);
		}, r.addTeamManagers = function (e) {
			i.verifyOptions(e, "teamId accounts"), i.verifyParamType("accounts", e.accounts, "array"), this.processCallback(e);var t = { teamId: e.teamId, accounts: e.accounts.slice(0) };this.sendCmd("addTeamManagers", t, e.callback);
		}, r.removeTeamManagers = function (e) {
			i.verifyOptions(e, "teamId accounts"), i.verifyParamType("accounts", e.accounts, "array"), this.processCallback(e);var t = { teamId: e.teamId, accounts: e.accounts.slice(0) };this.sendCmd("removeTeamManagers", t, e.callback);
		}, r.updateInfoInTeam = function (e) {
			i.verifyOptions(e, "teamId"), this.processCallback(e), this.sendCmd("updateInfoInTeam", { teamMember: new a(e), single: !0 }, e.callback);
		}, r.updateNickInTeam = function (e) {
			i.verifyOptions(e, "teamId account"), this.processCallback(e), this.sendCmd("updateNickInTeam", { teamMember: new a(e), single: !0 }, e.callback);
		}, r.updateMuteStateInTeam = function (e) {
			var t = this;i.verifyOptions(e, "teamId account mute"), t.processCallback(e), e.mute = e.mute ? 1 : 0, t.sendCmd("updateMuteStateInTeam", e);
		}, r.getMutedTeamMembers = function (e) {
			var t = this;i.verifyOptions(e, "teamId"), t.processCallback(e), t.sendCmd("getMutedTeamMembers", e);
		}, r.leaveTeam = function (e) {
			i.verifyOptions(e, "teamId"), this.processCallback(e);var t = { teamId: e.teamId };this.sendCmd("leaveTeam", t, e.callback);
		}, r.transferTeam = function (e) {
			i.verifyOptions(e, "teamId account leave"), i.verifyParamType("leave", e.leave, "boolean"), this.processCallback(e);var t = { teamId: e.teamId, account: e.account, leave: e.leave };this.sendCmd("transferTeam", t, e.callback);
		}, r.dismissTeam = function (e) {
			i.verifyOptions(e, "teamId"), this.processCallback(e);var t = { teamId: e.teamId };this.sendCmd("dismissTeam", t, e.callback);
		}, r.getTeam = function (e) {
			function t() {
				s.sendCmd("getTeam", { teamId: e.teamId }, e.callback);
			}function n(e) {
				s.logger.warn("get team", r, e);
			}var r,
			    s = this,
			    o = s.db;i.verifyOptions(e, "teamId"), s.processCallback(e), e.cbaop = function (e, t) {
				e || n(t);
			}, r = e.teamId, o.enable && !e.sync ? o.getTeam(r).then(function (r) {
				r ? (n(r), e.done(null, r)) : t();
			}, t) : t();
		}, r.getTeams = function (e) {
			function t() {
				n.sendCmd("getTeams", { timetag: s, NOTSTORE: "timetag" }, e.callback);
			}var n = this,
			    r = n.db,
			    s = 0;i.verifyOptions(e), n.processCallback(e), r.enable ? r.getTeamsTimetag().then(function (e) {
				s = e, t();
			}, t) : t();
		}, r.getTeamMembers = function (e) {
			function t() {
				n.sendCmd("getTeamMembers", { teamId: e.teamId, timetag: s, NOTSTORE: "timetag" }, e.callback);
			}var n = this,
			    r = n.db,
			    s = 0;i.verifyOptions(e, "teamId"), n.processCallback(e), r.enable && !e.sync ? r.getTeam(e.teamId).then(function (n) {
				if (n) {
					var i = n.memberUpdateTime;r.getTeamMembersTimetag(e.teamId).then(function (n) {
						!isNaN(i) && !isNaN(n) && i <= n ? r.getTeamMembers(e.teamId).then(function (t) {
							e.done(null, { teamId: e.teamId, members: t });
						}, t) : (s = n, t());
					}, t);
				} else t();
			}, t) : t();
		}, r.notifyForNewTeamMsg = function (e) {
			var t = this;i.verifyOptions(e, "teamIds");var n = t.protocol.notifyForNewTeamMsg(e.teamIds);n.then(function (t) {
				e.done(null, t);
			}, function (t) {
				e.done(t);
			});
		}, r.getMyTeamMembers = function (e) {
			var t = this;i.verifyOptions(e, "teamIds");var n = t.processCallbackPromise(e);return t.sendCmd("getMyTeamMembers", e), n;
		}, r.getLocalTeams = function (e) {
			function t() {
				e.teams = o, e.done(n, e);
			}var n,
			    r = this,
			    s = r.db,
			    o = [];i.verifyOptions(e, "teamIds"), i.verifyParamType("teamIds", e.teamIds, "array"), r.processCallback(e), s.enable ? s.getTeamsByTeamIds(e.teamIds).then(function (e) {
				o = e.filter(function (e) {
					return !!e;
				}), t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.getLocalTeamMembers = function (e) {
			function t() {
				e.members = o, e.done(n, e);
			}var n,
			    r = this,
			    s = r.db,
			    o = [];i.verifyOptions(e, "teamId accounts"), i.verifyParamType("accounts", e.accounts, "array"), r.processCallback(e), s.enable ? s.getInvalidTeamMembers(e.teamId, e.accounts).then(function (e) {
				o = e.filter(function (e) {
					return !!e;
				}), t();
			}, function (e) {
				n = e, t();
			}) : t();
		}, r.deleteLocalTeam = function (e) {
			function t() {
				e.done(n, e);
			}var n,
			    r = this,
			    s = r.db;i.verifyOptions(e, "teamId"), r.processCallback(e), s.enable ? s.deleteTeam(e.teamId).then(function () {
				t();
			}, function (e) {
				n = e, t();
			}) : t();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(5).fn,
		    i = n(1),
		    s = i.objs2accounts,
		    o = n(29);r.updateMyInfo = function (e) {
			i.verifyOptions(e), this.processCallback(e), e.user = new o(e), delete e.user.account, this.sendCmd("updateMyInfo", { user: e.user, single: !0 }, e.callback);
		}, r.getMyInfo = function (e) {
			var t = this;return e = e || {}, e.account = t.account, t.getUser(e);
		}, r.getUser = function (e) {
			function t() {
				s.sendCmd("getUsers", { accounts: [r], single: !0 }, e.callback);
			}function n(e) {
				s.logger.warn("get user", r, e);
			}var r,
			    s = this,
			    o = s.db;i.verifyOptions(e, "account"), s.processCallback(e), e.cbaop = function (e, t) {
				if (!e) return t = t[0] || null, n(t), t;
			}, r = e.account, e.sync ? t() : o.enable ? o.getUser(r).then(function (r) {
				r ? (n(r), e.done(null, r)) : t();
			}, t) : t();
		}, r.getUsers = function (e) {
			function t() {
				o.sendCmd("getUsers", { accounts: r, single: !0 }, e.callback);
			}function n(e) {
				o.logger.warn("get users", s(e), e);
			}var r,
			    o = this,
			    a = o.db,
			    c = [];i.verifyOptions(e, "accounts"), i.verifyParamType("accounts", e.accounts, "array"), o.processCallback(e), e.cbaop = function (e, t) {
				if (!e) return t = t.concat(c), n(t), t;
			}, r = i.deduplicate(e.accounts), i.verifyArrayMax("accounts", e.accounts, 150), e.sync ? t() : a.enable ? a.getUsers(r).then(function (i) {
				if (i && i.length === r.length) n(i), e.done(null, i);else {
					c = i;var o = s(i),
					    a = [];r.forEach(function (e) {
						o.indexOf(e) === -1 && a.push(e);
					}), r = a, t();
				}
			}, t) : t();
		};
	}, function (e, t) {
		"use strict";
		var n = { version: 7 },
		    r = { kv: { key: { keyPath: "key" } }, timetag: { key: { keyPath: "name" } }, blacklist: { key: { keyPath: "account" } }, mutelist: { key: { keyPath: "account" } }, friend: { key: { keyPath: "account" } }, user: { key: { keyPath: "account" } }, team: { key: { keyPath: "teamId" } }, teamMember: { key: { keyPath: "id" }, indexes: { teamId: { unique: !1 }, account: { unique: !1 } } }, msg: { key: { autoIncrement: !0 }, indexes: { idClient: { unique: !0 }, sessionId: { unique: !1 }, time: { unique: !1 }, type: { unique: !1 }, sessionType: { unique: !1 }, status: { unique: !1 }, sessionTime: { key: ["sessionId", "time"], unique: !1 } } }, msg1: { key: { keyPath: "idClient" }, indexes: { sessionId: { unique: !1 }, time: { unique: !1 }, status: { unique: !1 }, sessionTime: { key: ["sessionId", "time"], unique: !1 } } }, sysMsg: { key: { autoIncrement: !0 }, indexes: { idServer: { unique: !0 }, category: { unique: !1 }, type: { unique: !1 } } }, sysMsgUnread: { key: { keyPath: "type" } }, session: { key: { keyPath: "id" }, indexes: { updateTime: { unique: !1 } } } };n.keyPath = function (e) {
			return r[e].key.keyPath;
		}, n.schema = function () {
			return window._nimForceSyncIM = !0, r;
		}, e.exports = n;
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(8).fn,
		    s = n(1),
		    o = "friend";i.mergeFriends = function (e, t, n) {
			var r = this;return r.updateAndDelete(o, e, t).then(function () {
				return r.logger.warn("merge friends"), n && r.updateFriendTimetag(n), [e, t, n];
			});
		}, i.putFriend = function (e) {
			return this.put(o, e);
		}, i.updateFriend = function (e) {
			var t = this;e = s.copy(e);var n = e.account;return this.getOne(o, null, n, { modifyObj: e }).then(function (r) {
				return r ? t.logger.warn("update friend", n, e) : t.logger.warn("update friend no", n), r;
			});
		}, i.deleteFriend = function (e) {
			var t = this,
			    n = t.remove(o, e),
			    i = t.deleteUser(e);return r.all([n, i]);
		}, i.getFriends = function () {
			var e = function e(_e2) {
				return _e2.valid;
			};return this.getAll(o, { filter: e });
		}, i.getFriend = function (e) {
			return this.getOne(o, null, e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(8).fn,
		    i = "kv";r.setKey = function (e, t) {
			return this.put(i, { key: e, value: t });
		}, r.getKey = function (e) {
			return this.get(i, e).then(function (e) {
				return e && e.value;
			});
		}, r.setDonnop = function (e) {
			return this.setKey("donnop", e);
		}, r.getDonnop = function () {
			return this.getKey("donnop");
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(8).fn,
		    s = n(1),
		    o = "session",
		    a = "msg1",
		    c = "sessionId",
		    u = "time",
		    l = "status",
		    d = "sessionTime";i.putMsg = function (e) {
			var t = this;return s.isArray(e) || (e = [e]), !e.length || e[0].filter ? r.resolve() : (e = e.filter(function (e) {
				return !e.ignore;
			}), t.put(a, e));
		}, i.updateMsg = function (e) {
			var t = this;if (!e.filter) {
				var n = e.idClient,
				    r = s.filterObj(e, "resend status idServer time localCustom");return t.getOne(a, null, n, { modifyObj: r }).then(function (e) {
					return e ? t.logger.warn("update msg", n, r) : t.logger.warn("udpate msg no", n), e;
				});
			}
		}, i.getMsgs = function (e) {
			var t = this;t.checkDB(), e = e || {};var n = u,
			    r = !1,
			    i = !1,
			    o = e.sessionId,
			    c = e.sessionIds;s.exist(o) ? (r = !0, n = d) : s.exist(c) && (r = !0, s.isString(c) ? (n = d, o = c) : Array.isArray(c) && (1 === c.length ? (n = d, o = c[0]) : i = !0));var l = e.start || 0,
			    m = e.end || 1 / 0,
			    f = l,
			    p = m;r && !i && (f = [o, l], p = [o, m]);var y = e.desc !== !1,
			    h = e.limit || 100,
			    g = !1,
			    v = !1,
			    b = e.type,
			    M = e.types;s.exist(b) ? g = !0 : s.exist(M) && (g = !0, s.isString(M) ? b = M : Array.isArray(M) && (1 === M.length ? b = M[0] : v = !0));var T = e.keyword || "",
			    k = e.filterFunc,
			    S = void 0;return (i || g || T || s.isFunction(k)) && (S = function S(e) {
				if (i && c.indexOf(e.sessionId) === -1) return !1;if (g) if (v) {
					if (M.indexOf(e.type) === -1) return !1;
				} else if (b !== e.type) return !1;if (T) {
					var t = e.text || e.tip || "";if (t.indexOf(T) === -1) return !1;
				}return !k || k(e);
			}), t.server.query(a, n).bound(f, p, !0, !0).desc(y).limit(h).filter(S).execute();
		}, i.getMsgCountAfterAck = function (e) {
			var t = this;e = e || {};var n = e,
			    i = n.sessionId;return t.checkDB(), t.server.query(a, d).bound([i, e.ack], [i, 1 / 0], !0, !0).execute().then(function (e) {
				var t = e.filter(function (e) {
					return "out" !== e.flow;
				});return r.resolve(t.length);
			});
		}, i.amendMsg = function (e) {
			return e ? (s.notexist(e.text) && (e.text = ""), e) : null;
		}, i.getMsgByIdClient = function (e) {
			var t = this;return t.getOne(a, null, e).then(function (e) {
				return t.amendMsg(e);
			});
		}, i.getMsgsByIdClients = function (e) {
			var t,
			    n = this,
			    i = [];return e.forEach(function (e) {
				t = n.getMsgByIdClient(e), i.push(t);
			}), r.all(i);
		}, i.clearSendingMsgs = function () {
			var e = this;return e.getOnly(a, l, "sending", { modifyObj: { status: "fail" } }).then(function (t) {
				e.logger.warn("fail msgs", t);
			});
		}, i.deleteMsg = function (e) {
			var t,
			    n = this,
			    i = [];return s.isArray(e) || (e = [e]), e.forEach(function (e) {
				t = n.getOne(a, null, e, { remove: !0 }).then(function (e) {
					return n.logger.warn("delete msg", e), e;
				}), i.push(t);
			}), 1 === i.length ? i[0] : r.all(i);
		}, i.deleteMsgsBySessionId = function (e) {
			var t = this;return t.getOnly(a, c, e, { remove: !0 });
		}, i.deleteAllMsgs = function () {
			var e = this,
			    t = e.clearTable(a),
			    n = e.clearTable(o);return r.all([t, n]);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(8).fn,
		    s = n(1),
		    o = "blacklist",
		    a = "mutelist";i.mergeRelations = function (e, t, n, i, s) {
			var c = this,
			    u = c.updateAndDelete(o, e, t),
			    l = c.updateAndDelete(a, n, i);return r.all([u, l]).then(function () {
				return c.logger.warn("merge relations"), c.updateRelationTimetag(s), [e, t, n, i, s];
			});
		}, i.getRelations = function () {
			var e = this,
			    t = e.getAll(o),
			    n = e.getAll(a);return r.all([t, n]);
		}, i.markInBlacklist = function (e) {
			var t = this;if (e = s.copy(e), e.isAdd) {
				var n = e.record;return t.put(o, n);
			}var r = e.account;return t.remove(o, r);
		}, i.markInMutelist = function (e) {
			var t = this;if (e = s.copy(e), e.isAdd) {
				var n = e.record;return t.put(a, n);
			}var r = e.account;return t.remove(a, r);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(8).fn,
		    i = n(1),
		    s = i.notundef,
		    o = "session",
		    a = "updateTime";r.putSession = function (e) {
			return e = i.merge({}, e), delete e.unread, this.modifyOrPut({ table: o, obj: e, key: "id", modifyObjWhenPut: { unread: 0 } });
		}, r.getSessions = function (e) {
			e = e || {};var t,
			    n = !e.reverse,
			    r = e.limit || 100,
			    i = e.lastSessionId,
			    c = e.sessionId,
			    u = !1;if (s(i)) t = function t(e) {
				return !!u || (e.id === i && (u = !0), !1);
			};else if (s(c)) return this.get(o, c);return this.getAll(o, { index: a, desc: n, limit: r, filter: t });
		}, r.getSession = function (e) {
			return this.get(o, e);
		}, r.updateSession = function (e) {
			var t = this,
			    n = e.id,
			    r = i.filterObj(e, "ack unread lastMsg localCustom msgReceiptTime msgReceiptServerTime");return (0, _keys2.default)(e).forEach(function (t) {
				0 === t.indexOf("last") && (r[t] = e[t]);
			}), this.getOne(o, null, n, { modifyObj: r }).then(function (e) {
				return e ? t.logger.warn("update session", n, r) : t.logger.warn("update session no", n), e;
			});
		}, r.resetSessionUnread = function (e) {
			return this.updateSession({ id: e, unread: 0 });
		}, r.deleteSession = function (e) {
			return this.remove(o, e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(8).fn,
		    s = n(1),
		    o = s.notundef,
		    a = "sysMsg",
		    c = "idServer",
		    u = "type",
		    l = "category",
		    d = "sysMsgUnread";i.putSysMsg = function (e) {
			var t = this;return new r(function (n) {
				function r() {
					o--, 0 === o && n(i);
				}if (s.isArray(e) || (e = [e]), !e[0].filter) {
					var i = [],
					    o = e.length;e.forEach(function (e) {
						e = s.copy(e), t.put(a, e).then(function (e) {
							i.push(e[0]), r();
						}, r);
					});
				}
			});
		}, i.getSysMsgs = function (e) {
			var t = this;e = e || {};var n = !e.reverse,
			    r = e.limit || 100,
			    i = null,
			    s = null;e.category && (i = l, s = e.category), e.type && (i = u, s = e.type);var c,
			    d = e.lastIdServer,
			    m = !1,
			    f = e.read;return (o(d) || o(f)) && (c = function c(e) {
				function t() {
					return !o(f) || e.read === f;
				}return o(d) ? (d = "" + d, m ? t() : (e.idServer === d && (m = !0), !1)) : t();
			}), e = { filter: c, desc: n, limit: r }, i ? t.getOnly(a, i, s, e) : t.getAll(a, e);
		}, i.getSysMsgByIdServer = function (e) {
			return this.getOne(a, c, e);
		}, i.updateSysMsg = function (e) {
			var t = this;if (!e.filter) {
				var n = "" + e.idServer,
				    r = s.filterObj(e, "read state error localCustom");return this.getOne(a, c, n, { modifyObj: r }).then(function (e) {
					return e ? t.logger.warn("update sysMsg", n, r) : t.logger.warn("update sysMsg no", n), e;
				});
			}
		}, i.markSysMsgRead = function (e) {
			var t = this;return new r(function (n, i) {
				s.isArray(e) || (e = [e]);var o,
				    a,
				    c = [],
				    u = [];e.forEach(function (e) {
					o = t.getSysMsgByIdServer(e.idServer).then(function (e) {
						e && !e.read && (a = t.updateSysMsg({ idServer: e.idServer, read: !0 }), u.push(a));
					}, i), c.push(o);
				}), r.all(c).then(function () {
					r.all(u).then(function (e) {
						n(e);
					}, i);
				}, i);
			});
		}, i.deleteSysMsg = function (e) {
			var t,
			    n = this,
			    i = [];return s.isArray(e) || (e = [e]), e.forEach(function (e) {
				e = "" + e, t = n.getOne(a, c, e, { remove: !0 }), i.push(t);
			}), 1 === i.length ? i[0] : r.all(i);
		}, i.deleteAllSysMsgs = function () {
			var e = this,
			    t = e.clearTable(a),
			    n = e.clearTable(d);return r.all([t, n]);
		}, i.getSysMsgUnread = function () {
			return this.getAll(d).then(function (e) {
				var t = {};return e.forEach(function (e) {
					t[e.type] = e.num;
				}), t;
			});
		}, i.updateSysMsgUnread = function (e) {
			var t = this;e = s.copy(e);var n = [];return (0, _keys2.default)(e).forEach(function (t) {
				n.push({ type: t, num: e[t] });
			}), this.put(d, n).then(function () {
				return t.logger.warn("update sysMsg unread", e), e;
			});
		};
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			return e.valid && e.validToCurrentUser;
		}function i(e) {
			return e && e.valid;
		}function s(e) {
			return e && c.fillUndef(e, { mute: !1, custom: "" }), e;
		}var o = n(2).Promise,
		    a = n(8).fn,
		    c = n(1),
		    u = n(3),
		    l = n(21),
		    d = n(15),
		    m = "team",
		    f = "teamId",
		    p = "account",
		    y = "teamMember";a.mergeTeams = function (e, t, n) {
			var r = this,
			    i = r.put(m, e),
			    s = r.leaveTeams(t, n);return o.all([i, s]).then(function () {
				return r.logger.warn("merge teams"), r.updateTeamTimetag(n), [e, t, n];
			});
		}, a.putTeam = function (e) {
			if (e) return c.isArray(e) || (e = [e]), e.forEach(function (e) {
				e.validToCurrentUser = !0;
			}), this.put(m, e);
		}, a.updateTeam = function (e) {
			var t = this;e = c.copy(e);var n = e.teamId;return t.getOne(m, null, n, { modifyObj: e }).then(function (r) {
				return r ? (t.logger.warn("update team", n, e), r) : (t.logger.warn("update team no", n), t.putTeam(e));
			});
		}, a.transferTeam = function (e, t, n) {
			var r = this,
			    i = e.teamId,
			    s = e.memberUpdateTime,
			    o = { teamId: i, account: t, type: "normal", updateTime: s },
			    a = { teamId: i, account: n, type: "owner", updateTime: s };return r.updateTeamMembers([o, a]).then(function () {
				return r.putTeam(e).then(function () {
					return r.logger.warn("transfer team", e.teamId, t, n), [e, t, n];
				});
			});
		}, a.leaveTeam = function (e) {
			var t = this;return t.updateTeam({ teamId: e, validToCurrentUser: !1 }).then(function () {
				return t.removeAllTeamMembers(e);
			});
		}, a.dismissTeam = function (e, t) {
			var n = this,
			    r = { teamId: e, valid: !1, validToCurrentUser: !1, updateTime: t };return n.updateTeam(r).then(function () {
				return n.removeAllTeamMembers(e);
			});
		}, a.leaveTeams = function (e, t) {
			var n,
			    r = this,
			    i = [];return e.forEach(function (e) {
				n = r.leaveTeam(e.teamId, t), i.push(n);
			}), o.all(i);
		}, a.getTeamsByTeamIds = function (e) {
			var t,
			    n = this,
			    r = [];return e.forEach(function (e) {
				t = n.getTeam(e), r.push(t);
			}), o.all(r);
		}, a.getTeam = function (e) {
			e = "" + e;var t = this;return t.getOne(m, null, e).then(function (e) {
				return t.updateTeamProperties([e]), e;
			});
		}, a.getTeams = function () {
			var e = this;return e.getAll(m, { filter: r }).then(function (t) {
				return e.updateTeamProperties(t), t;
			});
		}, a.updateTeamProperties = function (e) {
			e.forEach(function (e) {
				l.fillProperties(e);
			});
		}, a.mergeTeamMembers = function (e, t, n, r) {
			var i = this,
			    s = i.putTeamMembers(t),
			    a = i.updateTeamMembers(n);return o.all([s, a]).then(function () {
				return i.logger.warn("merge members", e), i.updateTeamMemberTimetag(e, r);
			});
		}, a.putTeamMembers = function (e) {
			return this.put(y, e);
		}, a.getTeamMembersByAccount = function (e) {
			var t = this;return t.getOnly(y, p, e, { filter: i, mapper: s }).then();
		}, a.getTeamMembers = function (e) {
			var t = this;e = "" + e;var n = function n(e) {
				return e.valid;
			};return t.getOnly(y, f, e, { filter: n, mapper: s }).then(function (e) {
				return t.updateTeamMemberProperties(e).then(function () {
					return e;
				});
			});
		}, a.updateTeamMemberProperties = function (e) {
			var t,
			    n = this,
			    r = [];return e.forEach(function (e) {
				d.fillProperties(e) && (t = n.updateTeamMember(e), r.push(t));
			}), o.all(r);
		}, a.getInvalidTeamMembers = function (e, t) {
			var n = this;e = "" + e;var r,
			    i = [];return t.forEach(function (t) {
				r = n.getOne(y, null, d.genId(e, t)).then(function (e) {
					return s(e);
				}), i.push(r);
			}), o.all(i);
		}, a.updateTeamMember = function (e) {
			var t = this,
			    n = e.teamId,
			    r = e.account,
			    i = d.genId(n, r),
			    o = c.filterObj(e, "nickInTeam muteTeam mute custom updateTime type valid");return this.getOne(y, null, i, { modifyObj: o, mapper: s }).then(function (e) {
				return e ? t.logger.warn("update member", n, r, o) : t.logger.warn("update member no", n, r), e;
			});
		}, a.updateTeamMembers = function (e) {
			var t = this;if (!e.length) return o.resolve();var n,
			    r = [];return e.forEach(function (e) {
				n = t.updateTeamMember(e), r.push(n);
			}), o.all(r);
		}, a.updateTeamManagers = function (e, t, n, r) {
			var i = t.map(function (t) {
				return { teamId: e, account: t, type: n ? "manager" : "normal", updateTime: r };
			});return this.updateTeamMembers(i);
		}, a.removeTeamMembersByAccounts = function (e, t) {
			var n = t.map(function (t) {
				return { teamId: e, account: t, valid: !1 };
			});return this.updateTeamMembers(n);
		}, a.removeAllTeamMembers = function (e) {
			var t = this,
			    n = { valid: !1 };return t.getOnly(y, f, e, { modifyObj: n }).then(function () {
				return t.logger.warn("invalid all teamMembers", e), t.deleteTeamMemberTimetag(e);
			});
		}, a.deleteTeamMembers = function (e) {
			var t = this;return t.getOnly(y, f, e, { remove: !0 }).then(function () {
				t.logger.warn("delete all teamMembers", e), t.deleteTeamMemberTimetag(e);
			});
		}, a.deleteTeam = function (e) {
			var t,
			    n = this,
			    i = [];return c.isArray(e) || (e = [e]), e.forEach(function (e) {
				e = "" + e, t = n.get(m, e).then(function (t) {
					if (t && r(t)) throw u.stillInTeamError();var i = n.remove(m, e),
					    s = n.deleteTeamMembers(e);return o.all([i, s]);
				}), i.push(t);
			}), 1 === i.length ? i[0] : o.all(i);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(8).fn;r.getTimetags = function (e) {
			var t = {},
			    n = function n(e) {
				return t[e.name] = e.value, e;
			};return this.getAll("timetag", { filter: e, mapper: n }).then(function () {
				return t;
			});
		}, r.getTeamMemberTimetags = function () {
			return this.getTimetags(function (e) {
				return e.name.indexOf("team-") !== -1;
			});
		}, r.getTimetag = function (e) {
			return this.getOne("timetag", null, e).then(function (e) {
				return e = e || { value: 0 }, e.value;
			});
		}, r.getTeamMemberTimetag = function (e) {
			return this.getTimetag("team-" + e);
		}, r.updateTimetag = function (e, t) {
			var n = { name: e, value: t };return this.put("timetag", n);
		}, r.updateMyInfoTimetag = function (e) {
			return this.updateTimetag("myInfo", e);
		}, r.updateRelationTimetag = function (e) {
			return this.updateTimetag("relations", e);
		}, r.getRelationsTimetag = function () {
			return this.getTimetag("relations");
		}, r.updateFriendTimetag = function (e) {
			return this.updateTimetag("friends", e);
		}, r.getFriendsTimetag = function () {
			return this.getTimetag("friends");
		}, r.updateFriendUserTimetag = function (e) {
			return this.updateTimetag("friendUsers", e);
		}, r.updateTeamTimetag = function (e) {
			return this.updateTimetag("teams", e);
		}, r.getTeamsTimetag = function () {
			return this.getTimetag("teams");
		}, r.updateTeamMemberTimetag = function (e, t) {
			return this.updateTimetag("team-" + e, t);
		}, r.getTeamMembersTimetag = function (e) {
			return this.getTimetag("team-" + e);
		}, r.updateMyTeamMembersTimetag = function (e) {
			return this.updateTimetag("myTeamMembers", e);
		}, r.updateRoamingMsgTimetag = function (e) {
			return this.updateTimetag("roamingMsgs", e);
		}, r.updateMsgReceiptsTimetag = function (e) {
			return this.updateTimetag("msgReceipts", e);
		}, r.updateDonnopTimetag = function (e) {
			return this.updateTimetag("donnop", e);
		}, r.updateDeleteMsgTimetag = function (e) {
			return this.updateTimetag("deleteMsg", e);
		}, r.updateSessionAck = function (e) {
			return this.updateTimetag("sessionAck", e);
		}, r.deleteTimetag = function (e) {
			return this.remove("timetag", e);
		}, r.deleteTeamMemberTimetag = function (e) {
			return this.deleteTimetag("team-" + e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(8).fn,
		    s = n(1),
		    o = "user";i.mergeMyInfo = function (e, t) {
			var n = this;return n.put(o, e).then(function () {
				return t ? n.updateMyInfoTimetag(e.updateTime) : e;
			});
		}, i.mergeFriendUsers = function (e, t) {
			var n = this;return n.putUsers(e).then(function () {
				n.updateFriendUserTimetag(t);
			});
		}, i.putUsers = function (e) {
			return this.put(o, e);
		}, i.putUser = function (e) {
			return this.put(o, e);
		}, i.updateUser = function (e) {
			var t = this;e = s.copy(e);var n = e.account;return this.getOne(o, null, n, { modifyObj: e }).then(function (r) {
				return r ? t.logger.warn("update user", n, e) : t.logger.warn("update user no", n), r;
			});
		}, i.putUsersIfIsFriend = function (e) {
			var t,
			    n = this,
			    i = [],
			    s = [];return e.forEach(function (e) {
				t = n.getFriend(e.account).then(function (r) {
					return r && (t = n.putUser(e), s.push(t)), r;
				}), i.push(t);
			}), r.all(i).then(function () {
				return r.all(s).then(function (e) {
					return e;
				});
			});
		}, i.deleteUser = function (e) {
			return this.remove(o, e);
		}, i.getUser = function (e) {
			return this.getOne(o, null, e);
		}, i.getUsers = function (e) {
			function t(t) {
				return e.indexOf(t.account) !== -1;
			}return this.getAll(o, { filter: t });
		}, i.getAllUsers = function () {
			return this.getAll(o);
		};
	},, function (e, t, n) {
		"use strict";
		var r = n(5),
		    i = n(43);i(r), e.exports = r;
	},,,,,,,,,, function (e, t, n) {
		"use strict";
		function r() {}var i = n(28),
		    s = n(1);r.prototype = (0, _create2.default)(i.prototype), r.verifyFile = function (e) {
			s.verifyOptions(e, "dur", !0, "file.");
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			s.verifyOptions(e, "content"), e.type = "custom", i.call(this, e), this.attach = e.content;
		}var i = n(13),
		    s = n(1);r.prototype = (0, _create2.default)(i.prototype), r.reverse = function (e) {
			var t = i.reverse(e);return t.content = e.attach, t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			e.type = "geo", s.verifyOptions(e, "geo"), s.verifyOptions(e.geo, "lng lat title", !0, "geo."), s.verifyParamType("geo.lng", e.geo.lng, "number"), s.verifyParamType("geo.lat", e.geo.lat, "number"), s.verifyParamType("geo.title", e.geo.title, "string"), i.call(this, e), this.attach = (0, _stringify2.default)(e.geo);
		}var i = n(13),
		    s = n(1);r.prototype = (0, _create2.default)(i.prototype), r.reverse = function (e) {
			var t = i.reverse(e);return e.attach = e.attach ? "" + e.attach : "", t.geo = e.attach ? JSON.parse(e.attach) : {}, t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r() {}var i = n(1),
		    s = n(28);r.prototype = (0, _create2.default)(s.prototype), r.verifyFile = function (e) {
			i.verifyOptions(e, "w h", !0, "file.");
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    i = function i(e) {
			this.account = e.account;
		},
		    s = i.prototype,
		    o = s.Message = n(13),
		    a = s.TextMessage = n(131),
		    c = s.FileMessage = n(28),
		    u = s.GeoMessage = n(127),
		    l = s.NotificationMessage = n(130),
		    d = s.CustomMessage = n(126),
		    m = s.TipMessage = n(132);s.validScenes = o.validScenes, s.validTypes = o.validTypes, s.reverse = function (e) {
			var t,
			    n = o.getType(e);switch (n) {case "text":
					t = a.reverse(e);break;case "image":case "audio":case "video":case "file":
					t = c.reverse(e);break;case "geo":
					t = u.reverse(e);break;case "notification":
					t = l.reverse(e);break;case "custom":
					t = d.reverse(e);break;case "tip":
					t = m.reverse(e);break;default:
					t = o.reverse(e);}return o.setExtra(t, this.account), t;
		}, s.reverseMsgs = function (e, t) {
			var n,
			    i,
			    s = this;return e.map(function (e) {
				return e = s.reverse(e), t && (n = t.modifyObj, n && (e = r.merge(e, n)), i = t.mapper, r.isFunction(i) && (e = i(e))), e;
			});
		}, e.exports = i;
	}, function (e, t, n) {
		"use strict";
		function r() {}var i = n(1),
		    s = i.notundef,
		    o = n(13),
		    a = n(14).getInstance("IM"),
		    c = n(21),
		    u = n(29),
		    l = { 0: "addTeamMembers", 1: "removeTeamMembers", 2: "leaveTeam", 3: "updateTeam", 4: "dismissTeam", 5: "passTeamApply", 6: "transferTeam", 7: "addTeamManagers", 8: "removeTeamManagers", 9: "acceptTeamInvite", 10: "updateTeamMute", 101: "netcallMiss", 102: "netcallBill" };r.prototype = (0, _create2.default)(o.prototype), r.reverse = function (e) {
			var t = o.reverse(e);if (e.attach = e.attach ? "" + e.attach : "", e.attach) {
				var n = JSON.parse(e.attach);if (t.attach = { type: l[n.id] || n.id }, s(n.data)) {
					var r = n.data;s(r.tinfo) && (t.attach.team = c.reverse(a.unserialize(r.tinfo, "team"), !0)), s(r.ids) && (t.attach.accounts = r.ids), s(r.id) && (t.attach.account = r.id), s(r.uinfos) && (t.attach.users = r.uinfos.map(function (e) {
						return u.reverse(a.unserialize(e, "user"));
					})), s(r.mute) && (t.attach.mute = 1 === +r.mute), s(r.attach) && (t.attach.custom = r.attach), s(r.channel) && (t.attach.channelId = r.channel), s(r.calltype) && (t.attach.netcallType = r.calltype), s(r.duration) && (t.attach.duration = r.duration), s(r.time) && (t.attach.time = r.time), t.attach.accounts && t.attach.accounts.length <= 2 && t.from === t.to && t.attach.accounts.some(function (e) {
						if (e !== t.to) return t.to = e, !0;
					});
				}
			} else t.attach = {};return t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			s.verifyOptions(e, "text"), e.type = "text", i.call(this, e);
		}var i = n(13),
		    s = n(1);r.prototype = (0, _create2.default)(i.prototype), r.reverse = function (e) {
			var t = i.reverse(e);return t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			s.verifyOptions(e, "tip"), e.type = "tip", i.call(this, e), this.body = e.tip;
		}var i = n(13),
		    s = n(1);r.prototype = (0, _create2.default)(i.prototype), r.reverse = function (e) {
			var t = i.reverse(e);return t.text = "", t.tip = e.body, e.attach && (t.attach = e.attach), t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r() {}var i = n(28),
		    s = n(1);r.prototype = (0, _create2.default)(i.prototype), r.verifyFile = function (e) {
			s.verifyOptions(e, "dur w h", !0, "file.");
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			if (i.verifyOptions(e, "type value validTime"), i.verifyParamType("type", e.type, "number"), i.verifyParamMin("type", e.type, 1e5), i.verifyParamType("value", e.value, "number"), this.type = e.type, this.value = e.value, this.idClient = i.guid(), s(e.custom) && (this.custom = "" + e.custom), this.validTime = e.validTime || 604800, i.verifyParamType("validTime", this.validTime, "number"), i.verifyParamMin("validTime", this.validTime, 60), i.verifyParamMax("validTime", this.validTime, 604800), s(e.broadcastType)) {
				if (i.verifyParamType("broadcastType", e.broadcastType, "number"), [1, 2].indexOf(e.broadcastType) < 0) throw new o('参数错误"broadcastType":只能为1或2');this.broadcastType = e.broadcastType;
			} else this.broadcastType = 2;s(e.sync) ? (i.verifyParamType("sync", e.sync, "boolean"), this.sync = e.sync) : this.sync = !1;
		}var i = n(1),
		    s = i.notundef,
		    o = n(3);r.prototype.assembleEvent = function () {
			return { type: this.type, value: this.value, idClient: this.idClient, custom: this.custom || "", validTime: this.validTime, broadcastType: this.broadcastType, sync: this.sync === !0 ? 1 : 0 };
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			i.verifyOptions(e, "type"), i.verifyParamType("type", e.type, "number"), i.findObjIndexInArray([1, 2, 3], e.type) < 0 && i.verifyParamMin("type", e.type, 1e5), this.type = e.type, s(e.subscribeTime) ? (i.verifyParamType("subscribeTime", e.subscribeTime, "number"), i.verifyParamMin("subscribeTime", e.subscribeTime, 60), i.verifyParamMax("subscribeTime", e.subscribeTime, 2592e3), this.subscribeTime = e.subscribeTime) : this.subscribeTime = 2592e3, s(e.sync) ? (i.verifyParamType("sync", e.sync, "boolean"), this.sync = e.sync) : this.sync = !0;
		}var i = n(1),
		    s = i.notundef;r.prototype.assembleEvent = function (e) {
			return { type: this.type, subscribeTime: this.subscribeTime, sync: this.sync === !0 ? 1 : 0 };
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r() {}var i = n(1);r.parse = function (e) {
			var t = i.copy(e);return t.isBlacked = "1" === t.isBlacked, t.isMuted = "1" === t.isMuted, t.createTime = +t.createTime, t.updateTime = +t.updateTime, t;
		}, e.exports = r;
	},,,,, function (e, t, n) {
		"use strict";
		var r = n(4).fn,
		    i = n(18);r.assembleLogin = function () {
			return { login: this.assembleIMLogin() };
		}, r.afterLogin = function () {
			var e = this,
			    t = e.db;if (t.enable) {
				var n = e.account;e.options.appendAppKeyForDBName && (n += "-" + e.options.appKey), e.db.init(n).then(function () {
					e.syncData();
				}, function (n) {
					e.logger.warn("no db", n), t.reset(!1), e.syncData();
				});
			} else e.logger.warn("no db"), e.syncData();
		}, r.processAuth = function (e) {
			var t = this;switch (e.cmd) {case "login":
					e.error || (e.obj = e.content.loginRes, t.connectionId = e.content.loginRes.connectionId, t.onLoginPortsChange(e, 2));break;case "kicked":
					return void t.onKicked(e);case "multiPortLogin":
					t.onLoginPortsChange(e, e.content.state);break;case "kick":
					e.error || (e.obj.deviceIds = e.content.deviceIds);}
		}, r.onLoginPortsChange = function (e, t) {
			var n = this,
			    r = e.content.loginPorts;if (r && r.length) {
				var s = !0;switch (t) {case 2:
						s = !0;break;case 3:
						s = !1;}r.forEach(function (e) {
					e.type = i.reverseType(e.type), e.time = +e.time, e.online = s;
				}), r = r.filter(function (e) {
					return e.connectionId !== n.connectionId;
				}), r.length && (n.logger.info("on login ports", r), n.options.onloginportschange(r));
			}
		}, r.kickedReasons = ["", "samePlatformKick", "serverKick", "otherPlatformKick", "silentlyKick"], r.kickedMessages = ["", "不允许同一个帐号在多个地方同时登录", "被服务器踢了", "被其它端踢了", "悄悄被踢"];
	}, function (e, t, n) {
		"use strict";
		var r = n(4).fn;r.processChatroom = function (e) {
			var t = this;switch (e.cmd) {case "getChatroomAddress":
					t.onChatroomAddress(e);}
		}, r.onChatroomAddress = function (e) {
			e.error || (e.obj.address = e.content.address);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(4).fn,
		    i = n(6),
		    s = n(1),
		    o = n(16);r.refreshSocketUrl = function () {
			function e(e) {
				n.socketUrls = [], e = JSON.parse(e), e.common.link.forEach(function (e) {
					n.socketUrls.push(i.formatSocketUrl({ url: e, secure: n.options.secure }));
				}), e.common["link.default"].forEach(function (e) {
					e = i.formatSocketUrl({ url: e, secure: n.options.secure }), n.socketUrls.indexOf(e) === -1 && n.socketUrls.push(e);
				}), n.logger.log("got socket urls", n.socketUrls), n.connectToUrl(n.getNextSocketUrl());
			}function t(e) {
				console && void 0, n.onDisconnect();
			}var n = this,
			    r = n.options,
			    a = i.info,
			    c = r.lbsUrl;c = c + s.genUrlSep(c) + "k=" + r.appKey + "&id=" + r.account + "&sv=" + a.sdkVersion + "&pv=" + a.protocolVersion, n.logger.log("refresh lbs", c), o(c, { proxyUrl: s.url2origin(c) + "/lbs/res/cors/nej_proxy_frame.html", timeout: i.xhrTimeout, onload: e, onerror: t });
		};
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			return e && e.__esModule ? e : { "default": e };
		}function i(e) {
			e = e || {};var t = c.copy(e);return t.clientType && (t.clientType = u[t.clientType] || ""), t.serverCustom && (t.custom = JSON.parse(t.serverCustom), "string" == typeof t.custom[0] && (t.custom = t.custom[0]), delete t.serverCustom), t;
		}var s = n(9),
		    o = r(s),
		    a = n(4).fn,
		    c = n(1),
		    u = o["default"].clientTypeMap;a.processEventService = function (e) {
			var t = this,
			    n = e.content,
			    r = e.error,
			    s = t.options || {};switch (r && this.logger.error(r), e.cmd) {case "pushEvent":
					if (c.isFunction(s.onpushevents)) {
						var o = { msgEvents: [i(n.msgEvent)] };s.onpushevents(o);
					}break;case "pushEvents":
					if (c.isFunction(s.onpushevents)) {
						var a = n.msgEvents,
						    u = a.map(function (e) {
							return i(e);
						});a = { msgEvents: u }, s.onpushevents(a);
					}}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(4).fn;r.processFilter = function (e) {
			var t = this;switch (e.cmd) {case "sendFilterMsg":
					t.onSendMsg(e, !0);break;case "filterMsg":
					t.onMsg(e, !0);break;case "filterSysMsg":
					t.onSysMsg(e, !0);break;case "sendFilterCustomSysMsg":
					t.onSendSysMsg(e, !0);}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = s.objs2accounts,
		    a = n(58),
		    c = n(29);i.processFriend = function (e) {
			var t = this,
			    n = e.obj,
			    r = e.content,
			    i = e.error;switch (e.cmd) {case "friendRequest":
					t.updateFriendSysMsg(e), i || t.onFriendRequest(n);break;case "syncFriendRequest":
					t.onFriendRequest(r, !0);break;case "deleteFriend":
					i || t.onDeleteFriend(n);break;case "syncDeleteFriend":
					t.onDeleteFriend(r, !0);break;case "updateFriend":
					i || t.onUpdateFriend(n);break;case "syncUpdateFriend":
					t.onUpdateFriend(r.friend, !0);break;case "getFriends":
					t.onFriends(e);break;case "syncFriends":
					t.onFriends(e);break;case "syncFriendUsers":
					t.onFriendUsers(e);}
		}, i.onFriends = function (e) {
			function t() {
				f && m.forEach(function (e) {
					e = a.reverse(e), e.valid ? p.push(e) : y.push(e);
				}), c.logger.warn("parse friends", o(p), p, "delete", o(y), y), m.length ? (f = !0, s = e.content.timetag) : f = !1;
			}function n(t, n) {
				e.promise = new r(function (e, r) {
					function o() {
						d ? (i(), e(), t()) : u.getFriends().then(function (n) {
							p = n, i(), e(), t();
						}).then(void 0, function (e) {
							e._msg = "get friends error", r(e), n(e);
						});
					}f ? u.mergeFriends(p, y, s).then(function () {
						o();
					}).then(void 0, function (e) {
						e._msg = "merge friends error", r(e), n(e);
					}) : (c.logger.warn("no merge friends"), o());
				}).then(void 0, function (e) {
					throw e._msg = "merge friends data error", n(e), e;
				});
			}function i() {
				c.timetags.friends = s, p.invalid = y, d ? (c.syncResult.friends = p, c.syncResult.invalidFriends = y) : (c.logger.warn("get friends", o(p), p), e.obj = p);
			}var s,
			    c = this,
			    u = c.db,
			    l = e.error,
			    d = c.packetFromSync(e),
			    m = e.content.friends,
			    f = !0,
			    p = [],
			    y = [],
			    h = new r(function (e, r) {
				l ? d && r(l) : (t(), u.enable ? n(e, r) : (i(), e()));
			});d && (h.cmd = "friends", c.syncPromiseArray.push(h));
		}, i.onFriendRequest = function (e, t) {
			var n = r.resolve(),
			    i = this,
			    s = i.db,
			    o = e.type;o = e.type = a.getTypeFromByte(o) || o;var c = "addFriend" === o || "passFriendApply" === o;if (c) {
				var u = e.friend = a.assembleFriend(e.account);s.enable && (n = s.putFriend(u));
			}return t && i.onSyncFriendAction(e), n;
		}, i.onSyncFriendAction = function (e) {
			var t = this;t.logger.info("on sync friendAction", e), t.options.onsyncfriendaction(e);
		}, i.onDeleteFriend = function (e, t) {
			var n = r.resolve(),
			    i = this,
			    s = i.db;return s.enable && (n = s.deleteFriend(e.account)), t && (e.type = "deleteFriend", i.onSyncFriendAction(e)), n;
		}, i.onUpdateFriend = function (e, t) {
			var n = this,
			    r = n.db,
			    i = a.reverse(e);r.enable && r.updateFriend(i), t && n.onSyncFriendAction({ type: "updateFriend", friend: i });
		}, i.onFriendUsers = function (e) {
			var t = this,
			    n = t.db,
			    i = e.content,
			    s = i.users.map(function (e) {
				return c.reverse(e);
			});t.logger.warn("parse users", o(s), s);var a = i.timetag,
			    u = r.resolve();n.enable && (u = n.mergeFriendUsers(s, a)), t.timetags.friendUsers = a, u.cmd = "friendUsers", t.syncPromiseArray.push(u), t.syncResult.users = s;
		}, i.updateFriendSysMsg = function (e) {
			var t,
			    n,
			    r = e.obj,
			    i = e.error;if (e.obj.idServer) {
				if (i) t = "error", i = s.filterObj(i, "code message");else {
					var o = r.type;switch (o = a.getTypeFromByte(o) || o) {case "passFriendApply":
							t = "passed";break;case "rejectFriendApply":
							t = "rejected";}
				}n = { idServer: r.idServer, state: t }, i && (n.error = i), this.updateSysMsg(n);
			}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = s.undef,
		    a = n(9),
		    c = n(15),
		    u = n(19),
		    l = n(46);i.processMsg = function (e) {
			var t = this;switch (e.cmd) {case "sendMsg":
					t.onSendMsg(e);break;case "msg":
					t.onMsg(e);break;case "sysMsg":
					t.onSysMsg(e);break;case "sendCustomSysMsg":
					t.onSendSysMsg(e);break;case "getHistoryMsgs":case "searchHistoryMsgs":
					t.onHistoryMsgs(e);break;case "syncSendMsg":
					t.onMsg(e);break;case "deleteSessions":
					t.onDeleteSessions(e);break;case "sendMsgReceipt":
					t.onSendMsgReceipt(e);break;case "msgReceipt":
					t.onMsgReceipt(e);break;case "onDeleteMsg":
					t.onDeleteMsg(e);break;case "onMsgDeleted":
					t.onMsgDeleted(e);break;case "onDeleteMsgOfflineRoaming":
					t.onDeleteMsgOfflineRoaming(e);break;case "onMarkSessionAck":
					t.onMarkSessionAck(e);break;case "syncMarkSessionAck":
					t.syncMarkSessionAck(e);}
		}, i.checkIgnore = function (e) {
			var t = this;e.forEach(function (e) {
				"notification" === e.type && !e.ignore && t.options.shouldIgnoreNotification(e) && (e.ignore = !0);
			});
		}, i.filterIgnore = function (e) {
			return e.filter(function (e) {
				return !e.ignore;
			});
		}, i.genSessionByMsgs = function (e) {
			var t = this;return t.checkIgnore(e), u.genSessionByMsgs(t.message.Message, e);
		}, i.onRoamingMsgs = function (e) {
			var t = this,
			    n = t.message,
			    r = n.Message,
			    i = r.getMaxTimetag,
			    s = n.reverseMsgs(e.content.msgs),
			    o = i(s);s = r.sortMsgs(s), s = r.deduplication(s);var a = s[0],
			    c = a.sessionId,
			    u = t.genSessionByMsgs(s);t.cacheSyncedSession(u);var l = t.putMsg(s, "roamingMsgs").then(function (e) {
				s = e, s = t.filterIgnore(s), s.length && (t.logger.warn("sync roamingMsgs", c, s.length, s), t.syncResult.roamingMsgs = t.syncResult.roamingMsgs || [], t.syncResult.roamingMsgs.push({ sessionId: c, scene: a.scene, to: a.target, msgs: s, timetag: o }));
			});l.cmd = "roamingMsgs-" + c, t.syncPromiseArray.push(l);
		}, i.onOfflineMsgs = function (e, t) {
			function n(e) {
				if (l.length) {
					var t = s.getMaxTimetag(l),
					    n = l[0].scene,
					    i = l[0].target;r.markMsgRead(l), l = s.sortMsgs(l), l = s.deduplication(l);var o = r.genSessionByMsgs(l);r.cacheSyncedSession(o), c = r.putMsg(l, "offlineMsgs").then(function (s) {
						l = s, l = r.filterIgnore(l), l.length && (r.logger.warn("sync", m, e, l.length, l), r.syncResult[m] = r.syncResult[m] || [], r.syncResult[m].push({ sessionId: e, scene: n, to: i, msgs: l, timetag: t }));
					}), c.cmd = "offlineMsgs-" + e, r.syncPromiseArray.push(c);
				}
			}var r = this,
			    i = r.message,
			    s = i.Message,
			    o = null;t && (o = { filter: !0 });var a,
			    c,
			    u = i.reverseMsgs(e.content.msgs, { modifyObj: o }),
			    l = [],
			    d = "",
			    m = t ? "offlineFilterMsgs" : "offlineMsgs";u.forEach(function (e) {
				a = e.sessionId, a !== d ? (n(d), l = [], l.push(e), d = a) : l.push(e);
			}), n(d);
		}, i.markUnreadByMsgsPromise = function (e) {
			var t = this,
			    n = t.db;n.enable && n.getSession(e).then(function (n) {
				n.ack && t.markUnreadBySessionAck({ sessionId: e, ack: n.ack });
			});
		}, i.completeMsg = function (e) {
			var t = this;return e.from = t.account, e.fromNick = t.myInfo && t.myInfo.nick, e.fromClientType = "Web", e.fromDeviceId = a.deviceId, e.time || (e.time = +new Date()), e;
		}, i.onMsgs = function (e) {
			var t = this;t.message.reverseMsgs(e.content.msgs, { mapper: function mapper(e) {
					t.handleMsg(e);
				} });
		}, i.onMsg = function (e, t) {
			var n = this,
			    r = n.message.reverse(e.content.msg);t && (r.filter = !0), n.syncing ? n.unhandledMsgs.push({ type: "onMsg", msg: r }) : n.handleMsg(r);
		}, i.pushMsgTask = function (e) {
			var t = this;t.msgPromise = t.msgPromise.then(function () {
				return e();
			});
		}, i.handleMsg = function (e) {
			var t = this,
			    n = e.time;t.markMsgRead(e), t.msgPromise = t.msgPromise.then(function () {
				return t.putMsg(e, "onMsg");
			}).then(function (r) {
				return e = r[0], t.updateRoamingMsgTimetag(n);
			}).then(function () {
				if (e) return t.checkUserUpdate(e);
			}).then(function () {
				if (e) {
					var n = e.type;switch (t.logger.log("handle " + e.scene + " " + n + " msg" + ("notification" === n ? " " + e.attach.type : ""), e), n) {case "notification":
							return t.onTeamNotificationMsg(e);}
				}
			}).then(function () {
				e && !e.ignore && (t.logger.info("on msg", e), setTimeout(function () {
					t.options.onmsg(s.copy(e));
				}, 0));
			}).then(void 0, function (e) {
				e._msg = "handle msg error", t.onDBError(e);
			});
		}, i.putMsg = function (e, t) {
			function n(e) {
				"roamingMsgs" !== t && "offlineMsgs" !== t || i.cacheSyncedSession(e);
			}if (s.isArray(e) || (e = [e]), e[0].filter) return r.resolve(e);var i = this,
			    a = i.db,
			    c = a.enable,
			    u = r.resolve(),
			    l = i.message.Message,
			    d = l.getLastMsg(e),
			    m = d.flow,
			    f = d.sessionId !== i.currSessionId,
			    p = i.genSessionByMsgs(e);n(p);var y = !1,
			    h = [];return i.checkIgnore(e), u = u.then(function () {
				return c || i.options.autoMarkRead || "roamingMsgs" === t || !p || (i.sessionUnreadMsgs = i.sessionUnreadMsgs || {}, i.sessionUnreadMsgs[p.id] = i.sessionUnreadMsgs[p.id] || [], i.sessionUnreadMsgs[p.id] = i.sessionUnreadMsgs[p.id].concat(e)), c && "roamingMsgs" !== t && "offlineMsgs" !== t ? a.putMsg(e) : e;
			}).then(function (t) {
				var n = [];return e.forEach(function (e) {
					i.checkMsgUnique(e) && n.push(e);
				}), e = n, h = c ? t : e, r.resolve(e);
			}), u = u.then(function (e) {
				return e.length && (p = i.genSessionByMsgs(e), n(p), c && p) ? new r(function (t, n) {
					a.getSessions({ sessionId: p.id }).then(function (n) {
						if (n && n.lastMsg) {
							var r = n.lastMsg;p.lastMsg && p.lastMsg.time < r.time && (p.lastMsg = r);
						}h.length ? p ? a.putSession(p).then(function (e) {
							t(e);
						}) : t(n) : (y = !0, h = e, t(n));
					});
				}) : r.resolve(p);
			}), u = u.then(function (e) {
				if (p && h.length) {
					var r = "roamingMsgs" === t,
					    s = i.options.syncSessionUnread,
					    u = p.id,
					    l = i.findSession(u) || {},
					    d = l.ack || 0,
					    g = "offlineMsgs" === t || r && s || "onMsg" === t && "in" === m && f;if (g) {
						c && e ? (p = e, d = d || p.ack || 0) : (e = l, e && (p.unread = e.unread || 0)), n(p), p.unread = p.unread || 0;var v = 0;if (h.forEach(function (e) {
							var t = "notification" !== e.type && (o(e.isUnreadable) || e.isUnreadable);if (t && s && (t = e.time > d && "out" !== e.flow), t && (v++, s && !c)) {
								var n = l.unreadMsgs || [];n.push(e), p.unreadMsgs = n;
							}
						}), p.unread += v, n(p), c && !y) return a.updateSession({ id: p.id, unread: p.unread });
					}
				}
			}), "onMsg" === t ? u = u.then(function () {
				e.length && p && (i.onUpdateSession(p), i.options.syncSessionUnread && !f && i.api.resetSessionUnread(i.currSessionId));
			}) : "sendMsg" === t && !f && p && p.lastMsg && p.lastMsg.isLocal && (i.onUpdateSession(p), i.api.resetSessionUnread(i.currSessionId)), u.then(function () {
				return r.resolve(e);
			});
		}, i.cacheSyncedSession = function (e) {
			var t = this;if (e && t.syncResult) {
				e = s.merge({}, e), t.syncResult.sessions = t.syncResult.sessions || {};var n = e.id;t.syncResult.sessions[n] = s.merge(t.syncResult.sessions[n], e), o(t.syncResult.sessions[n].unread) && (t.syncResult.sessions[n].unread = 0), t.mergeSession(t.syncResult.sessions[n]);
			}
		}, i.checkMsgUnique = s.genCheckUniqueFunc("idClient"), i.storeSendMsg = function (e) {
			var t = this;if (!t.syncing) {
				var n = t.putMsg(e, "sendMsg");return t.msgPromise = t.msgPromise.then(function () {
					return n;
				}), n;
			}t.unhandledMsgs.push({ type: "sendMsg", msg: e });
		}, i.updateSendMsgError = function (e) {
			var t = this;if (!t.syncing) {
				var n = t.updateMsg(e);return t.msgPromise = t.msgPromise.then(function () {
					return n;
				}), n;
			}t.unupdatedMsgs.push(e);
		}, i.onSendMsg = function (e, t) {
			var n = this,
			    i = e.obj.msg;n.completeMsg(i);var s = e.error && 7101 === e.error.code;e.error && !s || (i.idServer = e.content.msg.idServer, i.time = +e.content.msg.time), e.error ? i.status = "fail" : i.status = "success", i = n.message.reverse(i), t && (i.filter = !0), e.obj = i, n.syncing ? n.unupdatedMsgs.push(i) : n.msgPromise = r.all([n.msgPromise, e.obj.promise]).then(function (e) {
				return e.length || (i.resend = !0), n.updateMsg(i).then(function () {
					return n.options.syncSessionUnread && n.currSessionId === i.sessionId && n.api.resetSessionUnread(n.currSessionId), n.resolveMsgReceiptTask(i), i;
				});
			});
		}, i.updateLocalMsg = function (e) {
			var t = this,
			    n = t.updateMsg(e);return t.msgPromise = t.msgPromise.then(function () {
				return n;
			}), n;
		}, i.updateMsg = function (e) {
			if (e.filter) return r.resolve(e);var t = this,
			    n = t.db,
			    i = "success" === e.status,
			    s = u.genSessionByMsg(e),
			    o = !!e.isLocal;return t.onUpdateSession(s), n.enable ? n.updateMsg(e).then(function (e) {
				var t = n.updateSession(s),
				    a = r.resolve();return i && e && !o && (a = n.updateRoamingMsgTimetag(e.time)), r.all([t, a]);
			}) : (i && !o && (t.timetags.roamingMsgs = e.time), r.resolve(e));
		}, i.updateRoamingMsgTimetag = function (e) {
			var t = this,
			    n = t.db;return n.enable ? n.updateRoamingMsgTimetag(e) : (t.timetags.roamingMsgs = e, r.resolve(e));
		}, i.checkUserUpdate = function (e) {
			var t = this,
			    n = e.from;return n === t.account ? r.resolve() : new r(function (r) {
				function i() {
					t.api.getUser({ account: n, sync: !0, done: function done(e, n) {
							e || setTimeout(function () {
								t.logger.info("on update user", n.account, n), t.options.onupdateuser(n);
							}, 0), r();
						} });
				}var o = t.userSet[n];if (o) {
					var a = +o.updateTime,
					    c = +e.userUpdateTime;!isNaN(a) && !isNaN(c) && s.isNumber(a) && s.isNumber(c) && a < c ? i() : r();
				} else i();
			});
		}, i.processUnsettledMsgs = function () {
			var e = this;e.unhandledMsgs.forEach(function (t) {
				var n = t.msg;switch (t.type) {case "onMsg":
						e.handleMsg(n);break;case "sendMsg":
						e.msgPromise = e.msgPromise.then(function () {
							return e.putMsg(n);
						});}
			}), e.unupdatedMsgs.forEach(function (t) {
				e.msgPromise = e.msgPromise.then(function () {
					return e.updateMsg(t);
				});
			}), e.resetUnsettledMsgs();
		}, i.onTeamNotificationMsg = function (e) {
			var t = this,
			    n = t.db,
			    r = e.attach,
			    i = r.type,
			    s = e.from,
			    o = e.to,
			    a = e.time,
			    c = r.team,
			    u = r.account,
			    l = r.accounts;switch (i) {case "updateTeam":
					if (!n.enable) return;return c.updateTime = a, t.onUpdateTeam(c), n.updateTeam(c);case "addTeamMembers":
					return t.onAddTeamMembers(e, c, l);case "removeTeamMembers":
					return t.onRemoveTeamMembers(c, o, l);case "acceptTeamInvite":
					return t.onAddTeamMembers(e, c, [s]);case "passTeamApply":
					return t.onAddTeamMembers(e, c, [u]);case "addTeamManagers":
					return t.updateTeamManagers(e, o, l, !0, a);case "removeTeamManagers":
					return t.updateTeamManagers(e, o, l, !1, a);case "leaveTeam":
					return t.onRemoveTeamMembers(c, o, [s]);case "dismissTeam":
					return t.onDismissTeam(o, a);case "transferTeam":
					return t.transferTeam(e, c, s, u);case "updateTeamMute":
					return t.onUpdateTeamMembersMute(e, c, [u], r.mute);}
		}, i.onAddTeamMembers = function (e, t, n) {
			var i = this,
			    o = i.db,
			    a = t.teamId,
			    u = c.assembleMembers(t, n);e.attach.members = u;var l = { team: t, accounts: n, members: u };if (i.logger.info("on add team members", l), i.options.onAddTeamMembers(s.simpleClone(l)), o.enable) {
				var d,
				    m = o.putTeam(t),
				    f = n.indexOf(i.account) === -1;return f ? d = o.putTeamMembers(u) : (i.logger.warn("join team", a), m = new r(function (e) {
					i.api.getTeamMembers({ teamId: a, sync: !0, done: function done() {
							e();
						} });
				})), r.all([d, m]);
			}
		}, i.onRemoveTeamMembers = function (e, t, n) {
			var i = this,
			    o = i.db,
			    a = { team: e, accounts: n };if (i.logger.info("on remove team members", a), i.options.onRemoveTeamMembers(s.simpleClone(a)), o.enable) {
				if (n.indexOf(i.account) === -1) {
					var c = o.removeTeamMembersByAccounts(t, n),
					    u = r.resolve();return e && (u = o.putTeam(e)), r.all([c, u]);
				}return o.leaveTeam(t);
			}
		}, i.updateTeamManagers = function (e, t, n, i, o) {
			var a = this,
			    u = a.db,
			    l = e.attach.members = n.map(function (e) {
				return { id: c.genId(t, e), type: i ? "manager" : "normal", updateTime: o };
			}),
			    d = { teamId: "" + t, memberUpdateTime: o };e.attach.team = d;var m = { team: d, accounts: n, isManager: i, members: l };if (a.logger.info("on update team managers", m), a.options.onUpdateTeamManagers(s.simpleClone(m)), u.enable) {
				var f = u.updateTeam(d),
				    p = u.updateTeamManagers(t, n, i, o);return r.all([f, p]);
			}
		}, i.onDismissTeam = function (e, t) {
			var n = this,
			    r = n.db,
			    i = { teamId: e };if (n.logger.info("on dismiss team", i), n.options.onDismissTeam(i), r.enable) return r.dismissTeam(e, t);
		}, i.transferTeam = function (e, t, n, r) {
			var i = this,
			    o = i.db,
			    a = t.teamId,
			    u = t.memberUpdateTime,
			    l = { id: c.genId(a, n), type: "normal", updateTime: u },
			    d = { id: c.genId(a, r), type: "owner", updateTime: u };e.attach.members = [l, d];var m = { team: t, from: l, to: d };if (i.logger.info("on transfer team", m), i.options.onTransferTeam(s.simpleClone(m)), o.enable) return o.transferTeam(t, n, r);
		}, i.onUpdateTeamMembersMute = function (e, t, n, i) {
			var o = this,
			    a = o.db,
			    u = n.map(function (e) {
				return { id: c.genId(t.teamId, e), account: e, teamId: t.teamId, mute: i, updateTime: t.memberUpdateTime };
			});e.attach.members = u;var l = { team: t, accounts: n, members: u, mute: i };if (o.logger.info("on update team members mute", l), o.options.onUpdateTeamMembersMute(s.simpleClone(l)), a.enable) {
				var d = a.updateTeamMembers(u),
				    m = a.putTeam(t);return r.all([d, m]);
			}
		}, i.onHistoryMsgs = function (e) {
			e.error || (e.obj.msgs = this.message.reverseMsgs(e.content.msgs));
		}, i.isFilterMsgs = function (e) {
			return !!e[0].filter;
		}, i.splitMsgs = function (e, t, n, r) {
			e.forEach(function (e) {
				if (e.filter) r.push(e);else switch (e.scene) {case "p2p":
						t.push(e);break;case "team":
						n.push(e);}
			});
		}, i.markMsgRead = function (e, t) {
			s.isArray(e) || (e = [e]);var n = this,
			    r = n.db;if (r.enable || n.options.autoMarkRead || t) {
				var i = [],
				    o = [],
				    a = [];n.splitMsgs(e, i, o, a), n.markP2pMsgsRead(i), n.markTeamMsgsRead(o), n.markFilterMsgsRead(a);
			}
		}, i.markP2pMsgsRead = function (e) {
			if (e.length) {
				var t = l.idMap.msg.id,
				    n = l.idMap.msg.msg;this.doMarkMsgsRead(t, n, e);
			}
		}, i.markTeamMsgsRead = function (e) {
			if (e.length) {
				var t = l.idMap.team.id,
				    n = l.idMap.team.teamMsg;this.doMarkMsgsRead(t, n, e);
			}
		}, i.markFilterMsgsRead = function (e) {
			if (e.length) {
				var t = l.idMap.filter.id,
				    n = l.idMap.filter.filterMsg;this.doMarkMsgsRead(t, n, e);
			}
		}, i.markSysMsgRead = function (e, t) {
			s.isArray(e) || (e = [e]);var n = this,
			    r = n.db;if (r.enable || n.options.autoMarkRead || t) {
				var i, o;n.isFilterMsgs(e) ? (i = l.idMap.filter.id, o = l.idMap.filter.filterSysMsg) : (i = l.idMap.msg.id, o = l.idMap.msg.sysMsg), n.doMarkMsgsRead(i, o, e);
			}
		}, i.doMarkMsgsRead = function (e, t, n) {
			n.length && this.sendCmd("batchMarkRead", { sid: e, cid: t, ids: n.map(function (e) {
					return e.idServer;
				}) });
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(20),
		    o = n(19),
		    a = n(1);i.onDeleteMsg = function (e) {
			delete e.obj.sysMsg, e.error || (e.promise = this.deleteLocalMsg(e.obj.msg));
		}, i.onMsgDeleted = function (e) {
			if (!e.error) {
				var t = this,
				    n = t.db,
				    r = s.reverse(e.content.sysMsg);r = t.processDeleteMsgSysMsg(r), t.markSysMsgRead(r), t.deleteLocalMsg(r.msg).then(function () {
					n.enable && n.updateDeleteMsgTimetag(r.time + 1), t.handleSysMsg(r);
				});
			}
		}, i.processDeleteMsgSysMsg = function (e) {
			var t = this;return e.msg = {}, ["scene", "from", "to"].forEach(function (t) {
				e.msg[t] = e[t];
			}), e.msg.idClient = e.deletedIdClient, e.msg.idServer = e.deletedIdServer, e.msg.time = e.deletedMsgTime, e.msg.fromNick = e.deletedMsgFromNick, t.message.Message.setExtra(e.msg, t.account), e;
		}, i.onDeleteMsgOfflineRoaming = function (e) {
			if (!e.error) {
				var t = this,
				    n = 1 === +e.content.type ? "offline" : "roaming",
				    r = s.reverseSysMsgs(e.content.sysMsgs, { mapper: function mapper(e) {
						return t.processDeleteMsgSysMsg(e);
					} });t.logger.warn("sync deleteMsgSysMsgs " + n, r), "offline" === n && t.markSysMsgRead(r);var i = e.content.timetag;t.timetags.deleteMsg = i, t.syncResult.deleteMsgTimetag = i;var o = t.putSysMsg(r, "offlineSysMsgs");o.cmd = "deleteMsgSysMsgs " + n, t.syncPromiseArray.push(o), t.syncResult.deleteMsgSysMsgs = t.syncResult.deleteMsgSysMsgs || [], t.syncResult.deleteMsgSysMsgs.push({ type: n, sysMsgs: r });
			}
		}, i.deleteMsgOfflineRoaming = function (e, t) {
			if (!e) return r.resolve();var n = this;n.logger.warn("deleting msgs", e);var i = n.db,
			    s = [];return e.forEach(function (e) {
				e.sysMsgs.forEach(function (e) {
					var r = n.deleteLocalMsg(e.msg, { cbUpdateSession: function cbUpdateSession(e) {
							e = n.mergeSession(e), e = a.simpleClone(e), o.trim(e);var r = a.findObjIndexInArray(t, { value: e.id });if (r !== -1 && (t[r] = a.merge({}, t[r], e)), i.enable) return i.updateSession(e);
						} });s.push(r);
				});
			}), r.all(s).then(function () {
				if (i.enable) return i.updateDeleteMsgTimetag(n.syncResult.deleteMsgTimetag);
			});
		}, i.deleteLocalMsg = function (e, t) {
			var n = this,
			    i = n.db;t = t || {};var s = t.cbUpdateSession || n.updateLocalSession.bind(n);if (i.enable && e) {
				var o = !1,
				    a = null,
				    c = e.sessionId;return i.getMsgs({ sessionId: c, limit: 1 }).then(function (t) {
					t && t[0] && t[0].idClient === e.idClient && (o = !0);
				}).then(function () {
					return i.deleteMsg(e.idClient);
				}).then(function () {
					if (o) return i.getMsgs({ sessionId: c, limit: 1 });
				}).then(function (e) {
					if (o) return e && e[0] && (a = e[0]), s({ id: c, lastMsg: a });
				});
			}return r.resolve();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1);i.onOfflineMsgReceipts = function (e) {
			var t,
			    n = this,
			    i = n.db,
			    s = e.content.msgReceipts,
			    o = n.syncResult.msgReceipts = [],
			    a = [],
			    c = "msgReceipts",
			    u = n.syncResult.sessions || {};s.forEach(function (e) {
				e.time = +e.time;var s = e.sessionId = "p2p-" + e.from;c += "-" + s, t = r.resolve();var l = u[s];i.enable ? t = i.getSession(s).then(function (t) {
					if (t = t || l, t && n.shouldUpdateSessionFromMsgReceipt(t, e)) {
						var r = n.genSessionFromMsgReceipt(t, e),
						    o = n.syncResult.sessions;return o && o[s] && (o = o[s], o.lastMsg && r.lastMsg && o.lastMsg.time > r.lastMsg.time && (r.lastMsg = o.lastMsg)), i.putSession(r).then(function (e) {
							e && n.cacheSyncedSession(e);
						});
					}
				}) : l && o.push(e), a.push(t);
			}), t = r.all(a).then(function () {
				if (i.enable) return i.updateMsgReceiptsTimetag(e.content.timetag);
			}), t.cmd = c, n.syncPromiseArray.push(t);
		}, i.mergeSessionAndMsgReceipts = function (e, t) {
			var n = this,
			    r = {};return e = e || [], t = t || [], e.forEach(function (e) {
				r[e.id] = e;
			}), t.forEach(function (t) {
				var i = r[t.sessionId];if (n.shouldUpdateSessionFromMsgReceipt(i, t)) {
					var s = n.genSessionFromMsgReceipt(i, t);e = n.api.mergeSessions(e, s);
				}
			}), e;
		}, i.shouldUpdateSessionFromMsgReceipt = function (e, t) {
			return !e || !e.msgReceiptServerTime || t.time > e.msgReceiptServerTime;
		}, i.genSessionFromMsgReceipt = function (e, t) {
			var n = t.time,
			    r = { id: t.sessionId, msgReceiptTime: n, msgReceiptServerTime: n };return e && e.id === t.sessionId && (r = s.merge({}, e, r)), e && e.updateTime || (r.updateTime = n), r;
		}, i.onMsgReceipt = function (e) {
			var t = this,
			    n = t.db,
			    i = e.content.msgReceipt;i.time = +i.time;var s = i.idClient,
			    o = r.resolve();n.enable && s && (o = n.getMsgByIdClient(s)), o.then(function (e) {
				var n;if (e) {
					if (!e.idServer) return void (t.msgReceiptTasks[s] = i);n = e.time;
				} else n = i.time;i.msgReceiptTime = n, t.updateSessionMsgReceiptTime(i);
			});
		}, i.resolveMsgReceiptTask = function (e) {
			var t = this,
			    n = t.msgReceiptTasks[e.idClient];n && (n.msgReceiptTime = e.time, this.updateSessionMsgReceiptTime(n));
		}, i.updateSessionMsgReceiptTime = function (e) {
			var t = this,
			    n = t.db,
			    r = { id: "p2p-" + e.from, msgReceiptTime: e.msgReceiptTime, msgReceiptServerTime: e.time };n.enable && n.putSession(r), t.onUpdateSession(r);
		}, i.onSendMsgReceipt = function (e) {
			var t = this;if (!e.error) {
				var n = e.obj.msgReceipt,
				    r = +n.time,
				    i = +e.content.msgReceipt.time,
				    s = t.sessionSet["p2p-" + n.to];s.msgReceiptSendTime = Math.min(r, i);
			}
		}, i.shouldSendMsgReceipt = function (e) {
			if (e && "p2p" === e.scene && "success" === e.status) {
				var t = this.sessionSet[e.sessionId];if (t) {
					var n = t.msgReceiptSendTime;return !n || n < e.time;
				}
			}return !1;
		}, i.isMsgRemoteRead = function (e) {
			var t = this;if (e && "p2p" === e.scene && "out" === e.flow && "success" === e.status) {
				var n = t.sessionSet[e.sessionId];if (n && n.msgReceiptTime) return e.time <= n.msgReceiptTime;
			}return !1;
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = n(45);i.processNotify = function (e) {
			var t = this;switch (e.cmd) {case "syncOfflineMsgs":
					t.onOfflineMsgs(e);break;case "batchMarkRead":
					break;case "syncOfflineSysMsgs":
					t.onOfflineSysMsgs(e);break;case "syncRoamingMsgs":
					t.onRoamingMsgs(e);break;case "syncOfflineFilterMsgs":
					t.onOfflineMsgs(e, !0);break;case "syncOfflineFilterSysMsgs":
					t.onOfflineSysMsgs(e, !0);break;case "syncMsgReceipts":
					t.onOfflineMsgReceipts(e);break;case "syncDonnop":
					t.onDonnop(e, !0);break;case "syncSessionAck":
					t.syncSessionAck(e);}
		}, i.onDonnop = function (e, t) {
			if (!e.error) {
				var n = this,
				    r = n.db,
				    i = o.reverse(e.content.donnop);n.mergeDonnop(i);var s = n.dbDonnop();if (t) {
					var a = e.content.timetag;n.timetags.donnop = a, r.enable && (s = s.then(function () {
						return n.db.updateDonnopTimetag(a);
					})), s.cmd = "donnop", n.syncPromiseArray.push(s);
				} else n.onPushNotificationMultiportConfigUpdate();
			}
		}, i.onUpdateDonnop = function (e) {
			var t = this;if (!e.error) {
				var n = e.obj;n && (t.mergeDonnop(s.filterObj(n, ["shouldPushNotificationWhenPCOnline"])), t.dbDonnop(), t.onPushNotificationMultiportConfigUpdate());
			}
		}, i.getPushNotificationMultiportConfig = function () {
			var e = this;return s.merge({}, e.pushNotificationMultiportConfig);
		}, i.mergeDonnop = function (e) {
			var t = this;t.pushNotificationMultiportConfig = s.merge({}, t.pushNotificationMultiportConfig, e);
		}, i.dbDonnop = function () {
			var e = this,
			    t = e.db;return t.enable ? e.db.setDonnop(e.pushNotificationMultiportConfig) : r.resolve();
		}, i.onPushNotificationMultiportConfigUpdate = function () {
			var e = this;setTimeout(function () {
				var t = e.getPushNotificationMultiportConfig();e.logger.info("on update pushNotificationMultiportConfig", t), e.options.onPushNotificationMultiportConfigUpdate(t);
			});
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = n(19),
		    a = n(3);i.mergeSession = function (e) {
			e = s.copyWithNull(e);var t = this.sessionSet,
			    n = e.id,
			    r = t[n];if (r && r.lastMsg && e && e.lastMsg && e.lastMsg.isLocal) {
				var i = r.lastMsg.time || 0,
				    o = e.lastMsg.time || 0;if (o < i) return r;
			}return t[n] = s.merge(r, e), e = t[n], s.undef(e.unread) && (e.unread = 0), e;
		}, i.mergeSessions = function (e) {
			var t = this;e.forEach(function (e) {
				t.mergeSession(e);
			});
		}, i.deleteLocalSession = function (e) {
			var t = this;s.isArray(e) || (e = [e]), e.forEach(function (e) {
				delete t.sessionSet[e];
			});
		}, i.onDeleteSessions = function (e) {
			e.obj = e.obj.sessions.map(function (e) {
				return o.parse(e);
			});
		}, i.onUpdateSession = function (e) {
			var t = this;return new r(function (n) {
				e ? (e = t.mergeSession(e), e = s.simpleClone(e), o.trim(e), o.isComplete(e) && setTimeout(function () {
					t.logger.info("on update session", e.id, s.simpleClone(e)), t.options.onupdatesession(e), n(e);
				}, 0)) : n(e);
			});
		}, i.setCurrSession = function (e) {
			var t = this;e = "" + e, t.currSessionId = e, t.logger.warn("set curr session", e);
		}, i.findSession = function (e) {
			return this.sessionSet[e];
		}, i.resetSessionUnread = function (e) {
			function t() {
				n = { id: e, unread: 0 }, r.onUpdateSession(n);
			}e = "" + e;var n,
			    r = this,
			    i = r.db;if (!r.findSession(e)) return void r.logger.warn("reset session unread, no session " + e);if (i.enable && i.resetSessionUnread(e), !r.options.autoMarkRead && r.sessionUnreadMsgs && r.sessionUnreadMsgs[e]) {
				var s = r.sessionUnreadMsgs[e];r.markMsgRead(s, !0), r.sessionUnreadMsgs[e] = [];
			}t();
		}, i.insertLocalSession = function (e) {
			var t = this,
			    n = t.db,
			    i = t.sessionSet;return new r(function (c, u) {
				var l = e.scene,
				    d = e.to,
				    m = l + "-" + d,
				    f = t.findSession(m);if (f) t.logger.warn("session exist"), u(a.sessionExist());else {
					var p;if (s.isNumber(e.updateTime)) p = e.updateTime;else {
						var y,
						    h = [];for (var g in i) {
							i.hasOwnProperty(g) && (y = i[g], s.isNumber(y.updateTime) && h.push(y.updateTime));
						}p = Math.max.apply(Math, h) + 1, p = Math.max(p, +new Date());
					}var v = r.resolve();n.enable && (v = n.getMsgs({ sessionId: m, limit: 1 })), v.then(function (e) {
						if (s.isArray(e) && 1 === e.length) {
							var r = e[0];f = o.genSessionByMsg(r), f.updateTime = p;
						} else f = { id: m, scene: l, to: d, updateTime: p, lastMsg: null };n.enable ? n.putSession(f).then(c, u) : c(f), t.onUpdateSession(f);
					});
				}
			});
		}, i.updateLocalSession = function (e, t) {
			var n = this;return new r(function (i, o) {
				var c = n.db,
				    u = n.findSession(e.id);if (u) {
					var l = r.resolve(),
					    d = s.filterObj(e, "id lastMsg localCustom");c.enable && (l = c.updateSession(d)), l.then(function (e) {
						return n.onUpdateSession(e, t);
					}).then(i, function (e) {
						o(e);
					});
				} else n.logger.warn("no session ", e.id), o(a.sessionNotExist());
			});
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn;i.syncSessionAck = function (e) {
			var t = this,
			    n = t.db,
			    i = r.resolve();[[e.content.p2p, "p2p"], [e.content.team.m_map, "team"]].forEach(function (e) {
				var r = e[0],
				    s = e[1];(0, _keys2.default)(r).forEach(function (e) {
					var o = s + "-" + e,
					    a = { id: o, ack: r[e] };n.enable && (i = i.then(function () {
						return n.putSession(a);
					}).then(function () {
						t.markUnreadBySessionAck({ sessionId: o, ack: r[e] });
					})), t.mergeSession(a);
				});
			}), t.logger.warn("parse offline session ack", t.sessionSet);var s = e.content.timetag;n.enable && (i = i.then(function () {
				return t.db.updateSessionAck(s);
			})), i.cmd = "sessionAck", t.syncPromiseArray.push(i);
		}, i.onMarkSessionAck = function (e) {
			e.error || this.storeSessionAck(e.obj);
		}, i.syncMarkSessionAck = function (e) {
			this.storeSessionAck(e.content);
		}, i.storeSessionAck = function (e) {
			var t = this,
			    n = t.options.syncSessionUnread;if (n) {
				var r = t.db,
				    i = 0 === e.scene ? "p2p" : "team",
				    s = i + "-" + e.to,
				    o = e.timetag,
				    a = t.findSession(s) || {},
				    c = a.ack || 0;if (o <= c) return void t.logger.warn("useless ack, no store session ack", o);var u = { id: s, ack: o };t.mergeSession(u), r.enable && r.updateSession(u), t.logger.warn("store session ack", u), t.markUnreadBySessionAck({ sessionId: s, ack: u.ack });
			}
		}, i.markUnreadBySessionAck = function (e) {
			var t = e.sessionId,
			    n = e.ack,
			    r = this,
			    i = r.db;if (i.enable) r.pushMsgTask(function () {
				return i.getMsgCountAfterAck({ sessionId: t, ack: n }).then(function (e) {
					var n = { id: t, unread: e };return r.logger.warn("update unread via session ack"), r.syncing && r.cacheSyncedSession(n), r.onUpdateSession(n), i.updateSession(n);
				});
			});else {
				var s = r.findSession(t);if (s) {
					var o = s.unreadMsgs;if (o && o.length) {
						for (var a = 0, c = [], u = o.length - 1; u >= 0; u--) {
							var l = o[u];if (!(l.time > n)) break;a++, c.push(l);
						}s.unreadMsgs = c, s.unread = a, r.logger.warn("update unread via session ack"), r.onUpdateSession(s);
					}
				}
			}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = s.undef,
		    a = s.objs2ids,
		    c = s.objs2accounts,
		    u = s.teams2ids,
		    l = n(19);i.beforeSync = function () {
			var e = this,
			    t = e.db;return t.enable ? t.clearSendingMsgs() : r.resolve();
		}, i.syncData = function () {
			function e(e) {
				t.syncPromiseArray = [], t.syncResult = {}, t.syncTeamMembersPromiseArray = [], t.syncTeamMembersResult = {}, s.verifyBooleanWithDefault(r, "syncRelations syncFriends syncFriendUsers syncTeams syncRoamingMsgs syncMsgReceipts syncExtraTeamInfo syncTeamMembers", !0), s.verifyBooleanWithDefault(r, "syncFilter", !1);var n = {};e = e || {}, window._nimForceSyncIM && (t.logger.warn("upgrade force sync"), delete e.teams, window._nimForceSyncIM = !1), n.myInfo = e.myInfo || 0, n.offlineMsgs = 0, r.syncRelations && (n.relations = e.relations || 0), r.syncFriends && (n.friends = e.friends || 0), r.syncFriendUsers && (n.friendUsers = e.friendUsers || 0), r.syncTeams && (n.teams = e.teams || 0), r.syncRoamingMsgs && (n.roamingMsgs = e.roamingMsgs || 0), r.syncMsgReceipts && (n.msgReceipts = e.msgReceipts || 0), r.syncExtraTeamInfo && (n.myTeamMembers = e.myTeamMembers || 0), r.syncSessionUnread && (n.sessionAck = e.sessionAck || 0), n.donnop = e.donnop || 0, n.deleteMsg = e.deleteMsg || 0, r.syncFilter && (n.filterMsgs = 0), t.sendCmd("sync", { sync: n }, t.onSyncData.bind(t));
			}var t = this,
			    n = t.db,
			    r = t.options,
			    i = n.enable;t.notifyLogin(), t.syncing = !0, i ? t.beforeSync().then(function () {
				return t.db.getTimetags();
			}).then(function (t) {
				e(t);
			}, function () {
				e();
			}) : e(t.timetags);
		}, i.onSyncData = function (e, t) {
			this.onMiscError(e, t, "sync error");
		}, i.processSync = function (e) {
			var t = this;switch (e.cmd) {case "syncDone":
					t.timetags.sync = e.content.timetag, t.onSyncDone();break;case "syncTeamMembersDone":
					t.onSyncTeamMembersDone();}
		}, i.onSyncDone = function () {
			function e() {
				if (U.logger.warn("after sync", s.promises2cmds(q)), q = [], h = W.blacklist || [], g = W.invalidBlacklist || [], v = W.mutelist || [], b = W.invalidMutelist || [], M = W.friends, T = W.invalidFriends || [], k = W.myInfo, S = W.users, w = W.teams, C = W.invalidTeams || [], I = W.sessions, P = W.msgReceipts, O = W.roamingMsgs, E = W.offlineMsgs, x = W.offlineFilterMsgs, A = W.offlineSysMsgs, j = W.offlineCustomSysMsgs, R = W.offlineFilterSysMsgs, F = W.offlineFilterCustomSysMsgs, N = W.sysMsgUnread, I) {
					var e = [];(0, _keys2.default)(I).forEach(function (t) {
						e.push(I[t]);
					}), I = e.sort(function (e, t) {
						return t.updateTime - e.updateTime;
					});
				}var o = r.resolve();L && (o = t().then(function (e) {
					var t = {};e.forEach(function (e) {
						var n = e.sessionId;t[n] || (t[n] = !0, U.markUnreadByMsgsPromise(n));
					});
				})), o.then(function () {
					L && !U.hasSynced && (U.hasSynced = !0, n());var e = q.filter(function (e) {
						return "sessionAck" === e.cmd;
					});0 === e.length && e.push(r.resolve());var t = q.filter(function (e) {
						return "sessionAck" !== e.cmd;
					});0 === t.length && t.push(r.resolve()), r.all(t).then(function () {
						return r.all(e);
					}).then(i).then(m, U.onDBError.bind(U));
				});
			}function t() {
				var e,
				    t = [],
				    n = [];return O && O.forEach(function (e) {
					n = [].concat(n, e.msgs);
				}), E && E.forEach(function (e) {
					n = [].concat(n, e.msgs);
				}), e = D.putMsg(n), t.push(e), r.all(t).then(function () {
					return n;
				});
			}function n() {
				B.syncRelations && (y = D.getRelations().then(function (e) {
					h = e[0], v = e[1], h.invalid = g, v.invalid = b;
				}, function (e) {
					return e._msg = "on relations error", e;
				}), q.push(y)), B.syncFriends && (y = D.getFriends().then(function (e) {
					M = e, M.invalid = T;
				}, function (e) {
					return e._msg = "on friends error", e;
				}), q.push(y)), o(k) && (y = D.getUser(U.account).then(function (e) {
					k = e;
				}, function (e) {
					return e._msg = "on myInfo error", e;
				}), q.push(y)), B.syncFriendUsers && (y = D.getFriends().then(function (e) {
					return e.map(function (e) {
						return e.account;
					});
				}).then(function (e) {
					return D.getUsers(e);
				}).then(function (e) {
					S = e;
				}, function (e) {
					return e._msg = "on users error", e;
				}), q.push(y)), B.syncTeams && (y = D.getTeams().then(function (e) {
					w = e, w.invalid = C;
				}, function (e) {
					return e._msg = "on teams error", e;
				}), q.push(y)), y = D.getTeamMembersByAccount(U.account).then(function (e) {
					U.mergeMyTeamMembers(e);
				}), q.push(y), y = D.getDonnop().then(function (e) {
					U.mergeDonnop(e);
				}), q.push(y), y = D.getSessions().then(function (e) {
					I = e;
				}, function (e) {
					return e._msg = "on sessions error", e;
				}), q.push(y), y = D.getSysMsgUnread().then(function (e) {
					N = e;
				}, function (e) {
					return e._msg = "on sysMsgUnread error", e;
				}), q.push(y);
			}function i() {
				U.logger.warn("taskAfterSync"), d();var e = [];return e.push(U.deleteMsgOfflineRoaming(W.deleteMsgSysMsgs, I)), r.all(e);
			}function d() {
				if (W.deleteMsgSysMsgs) {
					var e = {};O && O.forEach(function (t) {
						e[t.sessionId] = t;
					});var t = {};E && E.forEach(function (e) {
						t[e.sessionId] = e;
					});var n = U.api;W.deleteMsgSysMsgs.forEach(function (r) {
						r.sysMsgs.forEach(function (r) {
							var i = r.msg,
							    s = i.sessionId;[e, t].forEach(function (e) {
								e[s] && (e[s].msgs = n.cutMsgs(e[s].msgs, i));
							});
						});
					}), D.enable || [O, E].forEach(function (e) {
						e && e.forEach(function (e) {
							if (e.msgs.length) {
								var t = U.genSessionByMsgs(e.msgs);U.cacheSyncedSession(t), I = n.mergeSessions(I, t);
							} else I = n.cutSessions(I, { id: e.sessionId });
						});
					});
				}
			}function m() {
				setTimeout(f, 0);
			}function f() {
				var e,
				    t,
				    n = [];h && (U.logger.info("on blacklist", c(h), h), B.onblacklist(h)), v && (U.logger.info("on mutelist", c(v), v), B.onmutelist(v)), M && (U.logger.info("on friends", c(M), M), B.onfriends(M)), k && (U.logger.info("on myInfo", k), U.myInfo = k, B.onmyinfo(s.copy(k))), S && (S.forEach(function (e) {
					U.mergeUser(e);
				}), U.logger.info("on users", c(S), S), B.onusers(S)), w && (U.logger.info("on teams", u(w), w), B.onteams(w)), P && (!U.hasSynced && I && I.length || U.hasSynced) && (I = U.mergeSessionAndMsgReceipts(I, P)), I && I.length && (I.forEach(function (e) {
					U.syncResult.sessions && U.syncResult.sessions[e.id] && "number" == typeof U.syncResult.sessions[e.id].unread && (e.unread = U.syncResult.sessions[e.id].unread), U.mergeSession(e), l.trim(e);
				}), U.logger.info("on sessions", a(I), I), B.onsessions(I)), O && O.forEach(function (e) {
					n.push(e.timetag), t = e.msgs, t.length && (U.logger.info("on roaming msgs", e.sessionId, t.length, t), B.onroamingmsgs(e));
				}), E && E.forEach(function (e) {
					n.push(e.timetag), t = e.msgs, t.length && (U.logger.info("on offline msgs", e.sessionId, t.length, t), B.onofflinemsgs(e));
				}), x && x.forEach(function (e) {
					n.push(e.timetag), t = e.msgs, t.length && (U.logger.info("on offline filter msgs", e.sessionId, t.length, t), B.onofflinefiltermsgs(t));
				});var r = [],
				    i = [];W.deleteMsgSysMsgs && W.deleteMsgSysMsgs.forEach(function (e) {
					"roaming" === e.type ? r = r.concat(e.sysMsgs) : i = i.concat(e.sysMsgs);
				}), r.length && (_ = _ || [], _ = _.concat(r)), i.length && (A = A || [], A = A.concat(i)), _ && (U.logger.info("on roaming sys msgs", _.length, _), B.onroamingsysmsgs(_)), A && (U.logger.info("on offline sys msgs", A.length, A), B.onofflinesysmsgs(A)), R && (U.logger.info("on offline filter sys msgs", R.length, R), B.onofflinefiltersysmsgs(R)), j && (U.logger.info("on offline custom sys msgs", j.length, j), B.onofflinecustomsysmsgs(j)), F && (U.logger.info("on offline filter custom sys msgs", F.length, F), B.onofflinefiltercustomsysmsgs(F)), N && (N = s.merge({}, U.sysMsgUnread, N), U.sysMsgUnread = s.merge({}, N), U.logger.info("on sysMsgUnread", N), B.onsysmsgunread(N));var o = U.getPushNotificationMultiportConfig();U.logger.info("on pushNotificationMultiportConfig", o), B.onPushNotificationMultiportConfig(o), n.length ? (e = Math.max.apply(Math, n), U.updateRoamingMsgTimetag(e).then(p, p)) : p(), U.syncPromiseArray = null, U.syncResult = null;
			}function p() {
				U.processUnsettledMsgs(), U.processUnsettledSysMsgs(), U.syncing = !1, U.logger.info("sync done"), B.onsyncdone(), B.syncTeamMembers && w && w.length ? U.syncTeamMembers(w) : setTimeout(function () {
					U.onSyncTeamMembersDone();
				}, 0);
			}var y,
			    h,
			    g,
			    v,
			    b,
			    M,
			    T,
			    k,
			    S,
			    w,
			    C,
			    I,
			    P,
			    O,
			    E,
			    x,
			    _,
			    A,
			    j,
			    R,
			    F,
			    N,
			    U = this,
			    D = U.db,
			    L = D.enable,
			    B = U.options,
			    q = U.syncPromiseArray,
			    W = U.syncResult;q.length ? !function () {
				var t = q.filter(function (e) {
					return "sessionAck" === e.cmd;
				});0 === t.length && t.push(r.resolve());var n = q.filter(function (e) {
					return "sessionAck" !== e.cmd;
				});0 === n.length && n.push(r.resolve()), r.all(n).then(function () {
					return r.all(t);
				}).then(e, function (e) {
					U.onDBError(e);
				});
			}() : e();
		}, i.syncTeamMembers = function (e) {
			function t(t) {
				var r = {};t = t || {}, e.forEach(function (e) {
					r[e.teamId] = t["team-" + e.teamId] || 0;
				}, n), n.sendCmd("syncTeamMembers", { sync: r }, n.onSyncTeamMembers.bind(n));
			}var n = this,
			    r = n.db;r.enable ? r.getTeamMemberTimetags().then(function (e) {
				t(e);
			}, function () {
				t();
			}) : t(n.timetags);
		}, i.onSyncTeamMembers = function (e, t) {
			this.onMiscError(e, t, "sync teamMembers error");
		}, i.onSyncTeamMembersDone = function () {
			function e() {
				l.logger.warn("after sync members", s.promises2cmds(p)), p = [], d.enable && !l.hasSyncedTeamMembers ? (l.hasSyncedTeamMembers = !0, t()) : n();
			}function t() {
				return m.syncTeams && m.syncTeamMembers ? void d.getTeams().then(function (e) {
					e.forEach(function (e) {
						var t = e.teamId;u = d.getTeamMembers(t).then(function (e) {
							f[t] = e;
						}, function (e) {
							return e._msg = "on members error", e;
						}), p.push(u);
					}), p.length ? r.all(p).then(n, function (e) {
						l.onDBError(e);
					}) : n();
				}, function (e) {
					e._msg = "on members error", l.onDBError(e);
				}) : a();
			}function n() {
				setTimeout(i, 0);
			}function i() {
				var e, t;(0, _keys2.default)(f).forEach(function (n) {
					n.indexOf("invalid") === -1 && (e = f[n], t = f[n + "-invalid"] || [], e.invalid = t, o(n, e));
				}), a();
			}function o(e, t) {
				l.logger.info("on members", e, c(t), t), m.onteammembers({ teamId: e, members: t });
			}function a() {
				l.logger.info("sync members done"), m.onsyncteammembersdone(), l.syncTeamMembersResult = null, l.syncTeamMembersPromiseArray = null;
			}var u,
			    l = this,
			    d = l.db,
			    m = l.options,
			    f = l.syncTeamMembersResult,
			    p = l.syncTeamMembersPromiseArray;p.length ? r.all(p).then(e, function (e) {
				l.onDBError(e);
			}) : e();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = n(20);i.splitSysMsgs = function (e, t) {
			for (var n, r = e.length - 1; r >= 0; r--) {
				n = e[r], o.isCustom(n) && (e.splice(r, 1), t.push(n));
			}
		}, i.onOfflineSysMsgs = function (e, t) {
			var n = this,
			    r = e.content.sysMsgs.map(function (e) {
				return e = o.reverse(e), t && (e.filter = !0), e;
			});r = r.reverse(), n.markSysMsgRead(r);var i = [];n.splitSysMsgs(r, i);var s = t ? "offlineFilterSysMsgs" : "offlineSysMsgs",
			    a = t ? "offlineFilterCustomSysMsgs" : "offlineCustomSysMsgs";if (r.length) {
				var c = n.putSysMsg(r, "offlineSysMsgs").then(function (e) {
					r = e, r.length && (n.logger.warn("sync", s, r.length, r), n.syncResult[s] = r);
				});c.cmd = "sysMsgs", n.syncPromiseArray.push(c);
			}i.length && (n.logger.warn("sync " + a, i), n.syncResult[a] = i);
		}, i.onSendSysMsg = function (e, t) {
			var n = this,
			    r = e.obj;n.completeSysMsg(r), e.error ? r.status = "fail" : r.status = "success", r = o.reverse(r), t && (e.obj.filter = !0), e.obj = r;
		}, i.completeSysMsg = function (e) {
			return e.from = this.account, e;
		}, i.onSysMsg = function (e, t) {
			var n = this,
			    r = o.reverse(e.content.sysMsg);n.markSysMsgRead(r), t && (r.filter = !0), o.isCustom(r) ? (n.logger.info("on customSysMsg", r), n.options.oncustomsysmsg(r)) : n.syncing ? n.unhandledSysMsgs.push(r) : n.handleSysMsg(r);
		}, i.handleSysMsg = function (e) {
			var t = this,
			    n = e.type,
			    i = e.from;t.sysMsgPromise = t.sysMsgPromise.then(function () {
				return t.putSysMsg(e, "onSysMsg");
			}).then(function (t) {
				e = t[0];
			}).then(function () {
				if (e) {
					var s,
					    o = r.resolve();switch (n) {case "addFriend":
							s = { type: "addFriend", account: i }, o = t.onFriendRequest(s);break;case "passFriendApply":
							s = { type: "passFriendApply", account: i }, o = t.onFriendRequest(s);break;case "deleteFriend":
							o = t.onDeleteFriend({ account: i });}return s && s.friend && (e.friend = s.friend), o;
				}
			}).then(function () {
				e && (t.logger.info("on sysMsg", n, e), setTimeout(function () {
					t.options.onsysmsg(e);
				}, 0));
			});
		}, i.putSysMsg = function (e, t) {
			if (s.isArray(e) || (e = [e]), e[0].filter) return r.resolve(e);var n = this,
			    i = n.db,
			    o = i.enable,
			    a = r.resolve(),
			    c = [];return a = a.then(function () {
				return o ? i.putSysMsg(e) : e;
			}).then(function (t) {
				var r = [];e.forEach(function (e) {
					n.checkSysMsgUnique(e) && r.push(e);
				}), e = r, c = o ? t : e;
			}), a = a.then(function () {
				return n.getSysMsgUnread().then(function (r) {
					return c.length || (c = e, c.backward = !0), n.updateSysMsgUnread(c, r, 1).then(function (e) {
						"offlineSysMsgs" === t && (n.syncResult.sysMsgUnread = e), "onSysMsg" === t && n.onUpdateSysMsgUnread(e);
					});
				});
			}), a.then(function () {
				return e;
			});
		}, i.checkSysMsgUnique = s.genCheckUniqueFunc("idServer"), i.getSysMsgUnread = function () {
			var e = this,
			    t = e.db;return new r(function (n) {
				t.enable ? t.getSysMsgUnread().then(function (e) {
					n(e);
				}, function () {
					n(e.sysMsgUnread);
				}) : n(e.sysMsgUnread);
			});
		}, i.updateSysMsgUnread = function (e, t, n) {
			if (s.isArray(e) || (e = [e]), !e.length) return r.resolve(t);t = t || {};var i,
			    a = this,
			    c = a.db;return e.forEach(function (e) {
				(n > 0 && !e.read || n < 0 && e.read) && (i = e.type, t[i] = (t[i] || 0) + n);
			}), t = o.completeUnread(t), a.sysMsgUnread = t, c.enable && !e.backward ? c.updateSysMsgUnread(t) : r.resolve(t);
		}, i.reduceSysMsgUnread = function (e) {
			var t = this;return t.getSysMsgUnread().then(function (n) {
				return t.updateSysMsgUnread(e, n, -1);
			}).then(function (e) {
				t.onUpdateSysMsgUnread(e);
			});
		}, i.onUpdateSysMsgUnread = function (e) {
			var t = this;setTimeout(function () {
				t.logger.info("on update sysMsg unread", e), t.options.onupdatesysmsgunread(e);
			}, 0);
		}, i.updateSysMsg = function (e) {
			var t,
			    n = this,
			    i = n.db;t = i.enable ? i.updateSysMsg(e) : r.resolve(e), t.then(function (e) {
				n.onUpdateSysMsg(e);
			});
		}, i.onUpdateSysMsg = function (e) {
			var t = this;setTimeout(function () {
				s.isArray(e) || (e = [e]), e.forEach(function (e) {
					t.logger.info("on update sysMsg", e), t.options.onupdatesysmsg(e);
				});
			}, 0);
		}, i.processUnsettledSysMsgs = function () {
			var e = this;e.unhandledSysMsgs.forEach(function (t) {
				e.handleSysMsg(t);
			}), e.resetUnsettledSysMsgs();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = s.objs2accounts,
		    a = s.teams2ids,
		    c = n(21),
		    u = n(15);i.processTeam = function (e) {
			var t,
			    n,
			    r,
			    i = this,
			    s = e.error;switch (e.cmd) {case "createTeam":
					if (t = e.obj.team, s || (t = e.content.team), t = c.reverse(t), e.obj.team = t, r = u.assembleOwner(t), e.obj.owner = r, !s) {
						var o = { team: t, owner: r };i.logger.info("on create team", o), i.options.onCreateTeam(o), i.onCreateTeam(t, r);
					}break;case "syncCreateTeam":
					t = c.reverse(e.content.team), r = u.assembleOwner(t), i.logger.info("on sync createTeam", t, r), i.options.onsynccreateteam(t, r), i.onCreateTeam(t, r);break;case "sendTeamMsg":
					i.onSendMsg(e);break;case "teamMsg":
					i.onMsg(e);break;case "teamMsgs":
					i.onMsgs(e);break;case "addTeamMembers":case "removeTeamMembers":case "leaveTeam":case "dismissTeam":case "addTeamManagers":case "removeTeamManagers":case "transferTeam":
					break;case "updateInfoInTeam":
					s || (n = e.obj, n.account = i.account, n.id = u.genId(n.teamId, n.account), n = u.reverse(n), e.obj = n, i.mergeMyTeamMembers(n), i.onUpdateTeamMember(n));break;case "updateNickInTeam":
					e.obj = u.reverse(e.obj);break;case "updateTeam":
					e.obj = c.reverse(e.obj, !0);break;case "applyTeam":
					e.error || (e.obj = c.reverse(e.content.team));break;case "passTeamApply":
					i.updateTeamSysMsgState(e, "passed");break;case "rejectTeamApply":
					i.updateTeamSysMsgState(e, "rejected");break;case "acceptTeamInvite":
					i.updateTeamSysMsgState(e, "passed"), e.error || (e.obj = c.reverse(e.content.team));break;case "rejectTeamInvite":
					i.updateTeamSysMsgState(e, "rejected");break;case "getTeam":
					e.error || (e.obj = c.reverse(e.content.team));break;case "getTeams":
					i.onTeams(e);break;case "getTeamMembers":
					i.onTeamMembers(e);break;case "syncTeams":
					i.onTeams(e);break;case "syncTeamMembers":
					i.onTeamMembers(e);break;case "getTeamHistoryMsgs":case "searchTeamHistoryMsgs":
					i.onHistoryMsgs(e);break;case "syncSendTeamMsg":
					i.onMsg(e);break;case "syncUpdateTeamMember":
					n = u.reverse(e.content.teamMember), i.onUpdateTeamMember(n), n.account === i.account && i.mergeMyTeamMembers(n);break;case "updateMuteStateInTeam":
					break;case "getMyTeamMembers":
					e.error || (e.obj = u.reverseMembers(e.content.teamMembers));break;case "getMutedTeamMembers":
					e.error || (e.obj = { teamId: e.obj.teamId, members: u.reverseMembers(e.content.teamMembers) });break;case "syncMyTeamMembers":
					i.onSyncMyTeamMembers(e);}
		}, i.onCreateTeam = function (e, t) {
			var n = this.db;n.enable && (n.putTeam(e), n.putTeamMembers(t));
		}, i.onTeams = function (e) {
			function t() {
				m && d.forEach(function (e) {
					e = c.reverse(e), e.validToCurrentUser ? f.push(e) : p.push(e);
				}), o.logger.warn("parse teams", a(f), f, "invalid", a(p), p), d.length ? (m = !0, s = e.content.timetag) : m = !1;
			}function n(t, n) {
				e.promise = new r(function (e, r) {
					function a() {
						l ? (i(), e(), t()) : u.getTeams().then(function (n) {
							f = n, i(), e(), t();
						}).then(void 0, function (e) {
							e._msg = "get teams error", r(e), n(e);
						});
					}m ? u.mergeTeams(f, p, s).then(function () {
						a();
					}).then(void 0, function (e) {
						e._msg = "merge teams error", r(e), n(e);
					}) : (o.logger.warn("no merge teams"), a());
				}).then(void 0, function (e) {
					throw e._msg = "merge teams data error", n(e), e;
				});
			}function i() {
				o.timetags.teams = s, f.invalid = p, l ? (o.syncResult.teams = f, o.syncResult.invalidTeams = p) : (o.logger.warn("get teams", a(f), f), e.obj = f);
			}e.content = e.content || {};var s,
			    o = this,
			    u = o.db,
			    l = o.packetFromSync(e),
			    d = e.content.teams || [],
			    m = !0,
			    f = [],
			    p = [];if (e.error) switch (e.error.code) {case 803:
					e.error = null, m = !1;}var y = new r(function (r, s) {
				e.error ? l && s(e.error) : (t(), u.enable ? n(r, s) : (i(), r()));
			});l && (y.cmd = "teams", o.syncPromiseArray.push(y));
		}, i.onTeamMembers = function (e) {
			function t() {
				f && m.forEach(function (e) {
					e = u.reverse(e), e.valid ? p.push(e) : y.push(e);
				}), c.logger.warn("parse members", a, o(p), p, "invalid", o(y), y), m.length ? (f = !0, s = e.content.timetag) : f = !1;
			}function n(t, n) {
				e.promise = new r(function (e, r) {
					function o() {
						d ? (i(), e(), t()) : l.getTeamMembers(a).then(function (n) {
							p = n, i(), e(), t();
						}).then(void 0, function (e) {
							e._msg = "get members error", r(e), n(e);
						});
					}f ? l.mergeTeamMembers(a, p, y, s).then(function () {
						o();
					}).then(void 0, function (e) {
						e._msg = "merge members error " + a, r(e), n(e);
					}) : (c.logger.warn("no merge members", a), o());
				}).then(void 0, function (e) {
					throw e._msg = "merge members data error", n(e), e;
				});
			}function i() {
				p.invalid = y, d ? (c.syncTeamMembersResult[a] = p, c.syncTeamMembersResult[a + "-invalid"] = y, c.timetags["team-" + a] = s) : (c.logger.warn("get members", a, o(p), p), e.obj = { teamId: a, members: p });
			}e.content = e.content || {};var s,
			    a,
			    c = this,
			    l = c.db,
			    d = c.packetFromSync(e),
			    m = e.content.members || [],
			    f = !0,
			    p = [],
			    y = [];if (e.obj && (a = e.obj.teamId), a || (a = e.content.teamId), a = "" + a, e.error) switch (e.error.code) {case 406:
					e.error = null, f = !1;}var h = new r(function (r, s) {
				e.error ? d && s(e.error) : (t(), l.enable ? n(r, s) : (i(), r()));
			});d && (h.cmd = a, c.syncTeamMembersPromiseArray.push(h));
		}, i.onUpdateTeamMember = function (e) {
			var t = this;e.updateTime || (e.updateTime = +new Date()), t.logger.warn("parse update member", e), t.logger.info("on update teamMember", e), t.options.onupdateteammember(s.simpleClone(e));var n = { teamId: e.teamId, memberUpdateTime: e.updateTime };t.onUpdateTeam(n);var r = this.db;r.enable && r.updateTeamMember(e);
		}, i.onUpdateTeam = function (e) {
			var t = this;t.logger.info("on update team", e), t.options.onUpdateTeam(s.simpleClone(e));var n = t.db;n.enable && n.updateTeam(e);
		}, i.onSyncMyTeamMembers = function (e) {
			var t = this,
			    n = t.db,
			    r = u.reverseMembers(e.content.teamMembers);if (t.logger.warn("parse my team members", r), n.enable) {
				var i = n.putTeamMembers(r).then(function () {
					return n.updateMyTeamMembersTimetag(e.content.timetag);
				});i.cmd = "myTeamMembers", t.syncTeamMembersPromiseArray.push(i);
			}t.mergeMyTeamMembers(r);
		}, i.mergeMyTeamMembers = function (e) {
			s.isArray(e) || (e = [e]);var t = this,
			    n = t.myTeamMembersMap = t.myTeamMembersMap || {};e.forEach(function (e) {
				var t = e.teamId;n[t] = s.merge(n[t], e);
			}), t.logger.warn("cache my team members", n);
		}, i.notifyForNewTeamMsg = function (e) {
			s.isArray(e) || (e = [e]);var t = this,
			    n = this.myTeamMembersMap || {},
			    i = {},
			    o = [];e.forEach(function (e) {
				s.exist(n[e]) ? i[e] = !n[e].muteTeam : o.push(e);
			});var a = r.resolve(i);return o.length && (a = t.api.getMyTeamMembers({ teamIds: o, promise: !0 }).then(function (e) {
				return t.mergeMyTeamMembers(e), e.forEach(function (e) {
					i[e.teamId] = !e.muteTeam;
				}), i;
			})), a;
		}, i.updateTeamSysMsgState = function (e, t) {
			var n,
			    r = e.error;r && (t = "error", r = s.filterObj(r, "code message")), n = { idServer: e.obj.idServer, state: t }, r && (n.error = r), this.updateSysMsg(n);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(2).Promise,
		    i = n(4).fn,
		    s = n(1),
		    o = s.objs2accounts,
		    a = n(136),
		    c = n(29);i.processUser = function (e) {
			var t,
			    n = this,
			    r = n.db,
			    i = e.obj,
			    s = e.error,
			    o = e.content;switch (e.cmd) {case "markInBlacklist":
					s || n.markInBlacklist(i);break;case "syncMarkInBlacklist":
					n.markInBlacklist(o, !0);break;case "markInMutelist":
					s || n.markInMutelist(i);break;case "syncMarkInMutelist":
					n.markInMutelist(o, !0);break;case "getRelations":
					s || n.onRelations(e);break;case "syncMyInfo":
					n.onMyInfo(e, !0);break;case "updateMyInfo":
					s || (i.updateTime = o.timetag, n.onUpdateMyInfo(e, i));break;case "syncUpdateMyInfo":
					n.onUpdateMyInfo(e, o.user, !0);break;case "getUsers":
					s || (t = o.users.map(function (e) {
						return e = c.reverse(e), n.mergeUser(e), e;
					}), e.obj = t, r.enable && r.putUsers(t));break;case "updateDonnop":
					n.onUpdateDonnop(e);break;case "syncUpdateDonnop":
					n.onDonnop(e, !1);}
		}, i.onMyInfo = function (e) {
			function t() {
				s = c.reverse(l.user), o.logger.warn("parse myInfo", s);
			}function n(e, t) {
				a.mergeMyInfo(s, d).then(function () {
					i(), e();
				}).then(void 0, function (e) {
					e._msg = "merge myInfo error", t(e);
				});
			}function i() {
				o.timetags.myInfo = s.updateTime, d && (o.syncResult.myInfo = s);
			}var s,
			    o = this,
			    a = o.db,
			    u = e.error,
			    l = e.content,
			    d = !0,
			    m = new r(function (e, r) {
				u ? d && r(u) : (t(), a.enable ? n(e, r) : (i(), e()));
			});d && (m.cmd = "myInfo", o.syncPromiseArray.push(m));
		}, i.onUpdateMyInfo = function (e, t, n) {
			var r = this,
			    i = r.db,
			    o = c.reverse(t),
			    a = s.merge(r.myInfo, o);r.myInfo = a, n ? (r.logger.info("on update myInfo", a), r.options.onupdatemyinfo(a)) : e.obj = a, i.enable && (o.account = r.account, i.updateUser(o));
		}, i.onRelations = function (e) {
			function t() {
				m.forEach(function (e) {
					e = a.parse(e);var t = { account: e.account, createTime: e.createTime, updateTime: e.updateTime };e.isBlacked ? p.push(t) : y.push(t), e.isMuted ? h.push(t) : g.push(t);
				}), c.logger.warn("parse blacklist", o(p), p, "delete", o(y), y), c.logger.warn("parse mutelist", o(h), h, "delete", o(g), g), m.length ? (f = !0, s = e.content.timetag) : f = !1;
			}function n(t, n) {
				e.promise = new r(function (e, r) {
					function o() {
						d ? (i(), e(), t()) : u.getRelations().then(function (n) {
							p = n[0], h = n[1], i(), e(), t();
						}).then(void 0, function (e) {
							e._msg = "get relations error", r(e), n(e);
						});
					}f ? u.mergeRelations(p, y, h, g, s).then(function () {
						o();
					}).then(void 0, function (e) {
						e._msg = "merge relations error", r(e), n(e);
					}) : (c.logger.warn("no merge relations"), o());
				}).then(void 0, function (e) {
					throw e._msg = "merge relations data error", n(e), e;
				});
			}function i() {
				c.timetags.relations = s, p.invalid = y, h.invalid = g, d ? (c.syncResult.blacklist = p, c.syncResult.mutelist = h, c.syncResult.invalidBlacklist = y, c.syncResult.invalidMutelist = g) : (c.logger.warn("get relations", p, h), e.obj.blacklist = p, e.obj.mutelist = h);
			}var s,
			    c = this,
			    u = c.db,
			    l = e.error,
			    d = c.packetFromSync(e),
			    m = e.content.specialRelations,
			    f = !0,
			    p = [],
			    y = [],
			    h = [],
			    g = [],
			    v = new r(function (e, r) {
				l ? d && r(l) : (t(), u.enable ? n(e, r) : (i(), e()));
			});d && (v.cmd = "relations", c.syncPromiseArray.push(v));
		}, i.markInBlacklist = function (e, t) {
			var n = this,
			    r = n.db;e.record = { account: e.account, updateTime: +new Date() }, r.enable && r.markInBlacklist(e), t && (n.logger.info("on sync markInBlacklist", e), n.options.onsyncmarkinblacklist(e));
		}, i.markInMutelist = function (e, t) {
			var n = this,
			    r = n.db;e.record = { account: e.account, updateTime: +new Date() }, r.enable && r.markInMutelist(e), t && (n.logger.info("on sync markInMutelist", e), n.options.onsyncmarkinmutelist(e));
		}, i.mergeUser = function (e) {
			this.userSet[e.account] = e;
		};
	}]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,