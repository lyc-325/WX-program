"use strict";

var _freeze = require('./../npm/babel-runtime/core-js/object/freeze.js');

var _freeze2 = _interopRequireDefault(_freeze);

var _promise = require('./../npm/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty = require('./../npm/babel-runtime/core-js/object/define-property.js');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _setPrototypeOf = require('./../npm/babel-runtime/core-js/object/set-prototype-of.js');

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _getOwnPropertySymbols = require('./../npm/babel-runtime/core-js/object/get-own-property-symbols.js');

var _getOwnPropertySymbols2 = _interopRequireDefault(_getOwnPropertySymbols);

var _getOwnPropertyNames = require('./../npm/babel-runtime/core-js/object/get-own-property-names.js');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _assign = require('./../npm/babel-runtime/core-js/object/assign.js');

var _assign2 = _interopRequireDefault(_assign);

var _create = require('./../npm/babel-runtime/core-js/object/create.js');

var _create2 = _interopRequireDefault(_create);

var _keys = require('./../npm/babel-runtime/core-js/object/keys.js');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('./../npm/babel-runtime/core-js/json/stringify.js');

var _stringify2 = _interopRequireDefault(_stringify);

var _iterator = require('./../npm/babel-runtime/core-js/symbol/iterator.js');

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require('./../npm/babel-runtime/core-js/symbol.js');

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof2 = require('./../npm/babel-runtime/helpers/typeof.js');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!function (e, t) {
	"object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) && "object" == (typeof module === "undefined" ? "undefined" : (0, _typeof3.default)(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) ? exports.Chatroom = t() : e.Chatroom = t();
}(undefined, function () {
	return function (e) {
		function t(r) {
			if (n[r]) return n[r].exports;var o = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
		}var n = {};return t.m = e, t.c = n, t.p = "", t(0);
	}([function (e, t, n) {
		"use strict";
		n(56), e.exports = n(114);
	}, function (e, t, n) {
		"use strict";
		var r = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
			return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		} : function (e) {
			return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		},
		    o = n(11),
		    i = n(17),
		    a = n(39),
		    s = n(25);n(68);var c = n(3),
		    u = n(41),
		    l = u.getGlobal(),
		    p = /\s+/;u.shouldDisplayInstallFlashHint = function () {
			var e = o.name.toLowerCase();if ("ie" === e) {
				var t = +o.version || 0;return t = Math.floor(t), 7 === t && !i.Transport.flashsocket.check();
			}return !1;
		}, u.deduplicate = function (e) {
			var t = [];return e.forEach(function (e) {
				t.indexOf(e) === -1 && t.push(e);
			}), t;
		}, u.capFirstLetter = function (e) {
			return e ? (e = "" + e, e.slice(0, 1).toUpperCase() + e.slice(1)) : "";
		}, u.guid = function () {
			var e = function e() {
				return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
			};return function () {
				return e() + e() + e() + e() + e() + e() + e() + e();
			};
		}(), u.extend = function (e, t, n) {
			for (var r in t) {
				"undefined" != typeof e[r] && n !== !0 || (e[r] = t[r]);
			}
		}, u.filterObj = function (e, t) {
			var n = {};return u.isString(t) && (t = t.split(p)), t.forEach(function (t) {
				e.hasOwnProperty(t) && (n[t] = e[t]);
			}), n;
		}, u.simpleClone = function (e) {
			return JSON.parse((0, _stringify2.default)(e));
		}, u.copy = function (e, t) {
			return t = t || {}, e ? ((0, _keys2.default)(e).forEach(function (n) {
				u.exist(e[n]) && (t[n] = e[n]);
			}), t) : t;
		}, u.copyWithNull = function (e, t) {
			return t = t || {}, e ? ((0, _keys2.default)(e).forEach(function (n) {
				(u.exist(e[n]) || u.isnull(e[n])) && (t[n] = e[n]);
			}), t) : t;
		}, u.findObjIndexInArray = function (e, t) {
			e = e || [];var n = t.keyPath || "id",
			    r = -1;return e.some(function (e, o) {
				if (s(e, n) === t.value) return r = o, !0;
			}), r;
		}, u.findObjInArray = function (e, t) {
			var n = u.findObjIndexInArray(e, t);return n === -1 ? null : e[n];
		}, u.mergeObjArray = function () {
			var e = [],
			    t = [].slice.call(arguments, 0, -1),
			    n = arguments[arguments.length - 1];u.isArray(n) && (t.push(n), n = {});var r = n.keyPath = n.keyPath || "id";for (n.sortPath = n.sortPath || r; !e.length && t.length;) {
				e = t.shift() || [], e = e.slice(0);
			}var o;return t.forEach(function (t) {
				t && t.forEach(function (t) {
					o = u.findObjIndexInArray(e, { keyPath: r, value: s(t, r) }), o !== -1 ? e[o] = u.merge({}, e[o], t) : e.push(t);
				});
			}), n.notSort || (e = u.sortObjArray(e, n)), e;
		}, u.cutObjArray = function (e) {
			var t = e.slice(0),
			    n = arguments.length,
			    r = [].slice.call(arguments, 1, n - 1),
			    o = arguments[n - 1];u.isObject(o) || (r.push(o), o = {});var i,
			    a = o.keyPath = o.keyPath || "id";return r.forEach(function (e) {
				u.isArray(e) || (e = [e]), e.forEach(function (e) {
					e && (o.value = s(e, a), i = u.findObjIndexInArray(t, o), i !== -1 && t.splice(i, 1));
				});
			}), t;
		}, u.sortObjArray = function (e, t) {
			t = t || {};var n = t.sortPath || "id";a.insensitive = !!t.insensitive;var r,
			    o,
			    i,
			    c = !!t.desc;return i = u.isFunction(t.compare) ? t.compare : function (e, t) {
				return r = s(e, n), o = s(t, n), c ? a(o, r) : a(r, o);
			}, e.sort(i);
		}, u.emptyFunc = function () {}, u.isEmptyFunc = function (e) {
			return e === u.emptyFunc;
		}, u.notEmptyFunc = function (e) {
			return e !== u.emptyFunc;
		}, u.splice = function (e, t, n) {
			return [].splice.call(e, t, n);
		}, u.reshape2d = function (e, t) {
			if (Array.isArray(e)) {
				u.verifyParamType("type", t, "number");var n = e.length;if (n <= t) return [e];for (var r = Math.ceil(n / t), o = [], i = 0; i < r; i++) {
					o.push(e.slice(i * t, (i + 1) * t));
				}return o;
			}return e;
		}, u.flatten2d = function (e) {
			if (Array.isArray(e)) {
				var t = function () {
					var t = [];return e.forEach(function (e) {
						t = t.concat(e);
					}), { v: t };
				}();if ("object" === ("undefined" == typeof t ? "undefined" : r(t))) return t.v;
			}return e;
		}, u.dropArrayDuplicates = function (e) {
			if (Array.isArray(e)) {
				for (var t = {}, n = []; e.length > 0;) {
					var r = e.shift();t[r] = !0;
				}for (var o in t) {
					t[o] === !0 && n.push(o);
				}return n;
			}return e;
		}, u.onError = function (e) {
			throw new c(e);
		}, u.verifyParamPresent = function (e, t, n) {
			n = n || "";var r = !1;switch (u.typeOf(t)) {case "undefined":case "null":
					r = !0;break;case "string":
					"" === t && (r = !0);break;case "object":
					(0, _keys2.default)(t).length || (r = !0);break;case "array":
					t.length ? t.some(function (e) {
						if (u.notexist(e)) return r = !0, !0;
					}) : r = !0;}r && u.onParamAbsent(n + e);
		}, u.onParamAbsent = function (e) {
			u.onParamError('缺少参数"' + e + '", 请确保参数不是 空字符串、空对象、空数组、null或undefined, 或者数组的内容不是 null/undefined');
		}, u.verifyParamAbsent = function (e, t, n) {
			n = n || "", void 0 !== t && u.onParamPresent(n + e);
		}, u.onParamPresent = function (e) {
			u.onParamError('多余的参数"' + e + '"');
		}, u.verifyParamType = function (e, t, n) {
			var r = u.typeOf(t).toLowerCase();u.isArray(n) || (n = [n]), n = n.map(function (e) {
				return e.toLowerCase();
			});var o = !0;switch (n.indexOf(r) === -1 && (o = !1), r) {case "number":
					isNaN(t) && (o = !1);}o || u.onParamInvalidType(e, n);
		}, u.onParamInvalidType = function (e, t, n) {
			n = n || "", u.isArray(t) ? (t = t.map(function (e) {
				return '"' + e + '"';
			}), t = t.join(", ")) : t = '"' + t + '"', u.onParamError('参数"' + n + e + '"类型错误, 合法的类型包括: [' + t + "]");
		}, u.verifyParamValid = function (e, t, n) {
			u.isArray(n) || (n = [n]), n.indexOf(t) === -1 && u.onParamInvalidValue(e, n);
		}, u.onParamInvalidValue = function (e, t) {
			u.isArray(t) || (t = [t]), t = t.map(function (e) {
				return '"' + e + '"';
			}), u.isArray(t) && (t = t.join(", ")), u.onParamError('参数"' + e + '"值错误, 合法的值包括: [' + t + "]");
		}, u.verifyParamMin = function (e, t, n) {
			t < n && u.onParamError("参数" + e + "的值不能小于" + n);
		}, u.verifyParamMax = function (e, t, n) {
			t > n && u.onParamError("参数" + e + "的值不能大于" + n);
		}, u.verifyArrayMax = function (e, t, n) {
			t.length > n && u.onParamError("参数" + e + "的长度不能大于" + n);
		}, u.verifyEmail = function () {
			var e = /^\S+@\S+$/;return function (t, n) {
				e.test(n) || u.onParamError("参数" + t + "邮箱格式错误, 合法格式必须包含@符号, @符号前后至少要各有一个字符");
			};
		}(), u.verifyTel = function () {
			var e = /^[+\-()\d]+$/;return function (t, n) {
				e.test(n) || u.onParamError("参数" + t + "电话号码格式错误, 合法字符包括+、-、英文括号和数字");
			};
		}(), u.verifyBirth = function () {
			var e = /^(\d{4})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;return function (t, n) {
				e.test(n) || u.onParamError("参数" + t + '生日格式错误, 合法为"yyyy-MM-dd"');
			};
		}(), u.onParamError = function (e) {
			u.onError(e);
		}, u.verifyOptions = function (e, t, n, r) {
			if (e = e || {}, t && (u.isString(t) && (t = t.split(p)), u.isArray(t))) {
				n = void 0 === n || !!n;var o = n ? u.verifyParamPresent : u.verifyParamAbsent;t.forEach(function (t) {
					o.call(u, t, e[t], r);
				});
			}return e;
		}, u.verifyParamAtLeastPresentOne = function (e, t) {
			if (t && (u.isString(t) && (t = t.split(p)), u.isArray(t))) {
				var n = t.some(function (t) {
					return u.exist(e[t]);
				});n || u.onParamError("以下参数[" + t.join(", ") + "]至少需要传入一个");
			}
		}, u.verifyParamPresentJustOne = function (e, t) {
			if (t && (u.isString(t) && (t = t.split(p)), u.isArray(t))) {
				var n = t.reduce(function (t, n) {
					return u.exist(e[n]) && t++, t;
				}, 0);1 !== n && u.onParamError("以下参数[" + t.join(", ") + "]必须且只能传入一个");
			}
		}, u.verifyBooleanWithDefault = function (e, t, n, r) {
			u.undef(n) && (n = !0), p.test(t) && (t = t.split(p)), u.isArray(t) ? t.forEach(function (t) {
				u.verifyBooleanWithDefault(e, t, n, r);
			}) : "undefined" == typeof e[t] ? e[t] = n : u.isBoolean(e[t]) || u.onParamInvalidType(t, "boolean", r);
		}, u.verifyFileInput = function (e) {
			return u.verifyParamPresent("fileInput", e), u.isString(e) && (e = document.getElementById(e), e || u.onParamError("找不到要上传的文件对应的input, 请检查fileInput id")), e.tagName && "input" === e.tagName.toLowerCase() && "file" === e.type.toLowerCase() || u.onParamError("请提供正确的 fileInput, 必须为 file 类型的 input 节点"), e;
		}, u.verifyFileType = function (e) {
			u.verifyParamValid("type", e, u.validFileTypes);
		}, u.verifyCallback = function (e, t) {
			p.test(t) && (t = t.split(p)), u.isArray(t) ? t.forEach(function (t) {
				u.verifyCallback(e, t);
			}) : e[t] ? u.isFunction(e[t]) || u.onParamInvalidType(t, "function") : e[t] = u.emptyFunc;
		}, u.verifyFileUploadCallback = function (e) {
			u.verifyCallback(e, "uploadprogress uploaddone uploaderror uploadcancel");
		}, u.validFileTypes = ["image", "audio", "video", "file"], u.validFileExts = { image: ["bmp", "gif", "jpg", "jpeg", "jng", "png", "webp"], audio: ["mp3", "wav", "aac", "wma", "wmv", "amr", "mp2", "flac", "vorbis", "ac3"], video: ["mp4", "rm", "rmvb", "wmv", "avi", "mpg", "mpeg"] }, u.filterFiles = function (e, t) {
			t = t.toLowerCase();var n,
			    r,
			    o,
			    i = "file" === t,
			    a = [];return [].forEach.call(e, function (e) {
				if (i) a.push(e);else if (n = e.name.slice(e.name.lastIndexOf(".") + 1), r = e.type.split("/"), r[0] && r[1]) {
					o = r[0].toLowerCase();var s = !1;s = o === t || u.validFileExts[t].indexOf(n) !== -1, s && a.push(e);
				}
			}), a;
		};var f = u.supportFormData = u.notundef(l.FormData);u.getFileName = function () {
			return function (e) {
				return e = u.verifyFileInput(e), f ? e.files[0].name : e.value.slice(e.value.lastIndexOf("\\") + 1);
			};
		}(), u.sizeText = function () {
			var e = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "BB"];return function (t) {
				var n,
				    r = 0;do {
					t = Math.floor(100 * t) / 100;var o = e[r];n = t + o, t /= 1024, r++;
				} while (t > 1);return n;
			};
		}(), u.promises2cmds = function (e) {
			return e.map(function (e) {
				return e.cmd;
			});
		}, u.objs2accounts = function (e) {
			return e.map(function (e) {
				return e.account;
			});
		}, u.teams2ids = function (e) {
			return e.map(function (e) {
				return e.teamId;
			});
		}, u.objs2ids = function (e) {
			return e.map(function (e) {
				return e.id;
			});
		}, u.getMaxUpdateTime = function (e) {
			var t = e.map(function (e) {
				return +e.updateTime;
			});return Math.max.apply(Math, t);
		}, u.genCheckUniqueFunc = function (e, t) {
			var n = [],
			    r = {};return e = e || "id", t = t || 1e3, function (o) {
				var i;return n.length >= t && (i = n.shift(), delete r[i]), i = s(o, e), !r[i] && (r[i] = !0, n.push(i), !0);
			};
		}, e.exports = u, n(71);
	}, function (e, t, n) {
		(function (t, r) {
			/*!
   * @overview es6-promise - a tiny implementation of Promises/A+.
   * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
   * @license   Licensed under MIT license
   *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
   * @version   4.0.5
   */
			!function (t, n) {
				e.exports = n();
			}(this, function () {
				"use strict";
				function e(e) {
					return "function" == typeof e || "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && null !== e;
				}function o(e) {
					return "function" == typeof e;
				}function i(e) {
					G = e;
				}function a(e) {
					J = e;
				}function s() {
					return function () {
						return t.nextTick(f);
					};
				}function c() {
					return "undefined" != typeof z ? function () {
						z(f);
					} : p();
				}function u() {
					var e = 0,
					    t = new Z(f),
					    n = document.createTextNode("");return t.observe(n, { characterData: !0 }), function () {
						n.data = e = ++e % 2;
					};
				}function l() {
					var e = new MessageChannel();return e.port1.onmessage = f, function () {
						return e.port2.postMessage(0);
					};
				}function p() {
					var e = setTimeout;return function () {
						return e(f, 1);
					};
				}function f() {
					for (var e = 0; e < V; e += 2) {
						var t = ne[e],
						    n = ne[e + 1];t(n), ne[e] = void 0, ne[e + 1] = void 0;
					}V = 0;
				}function d() {
					try {
						var e = n(84);return z = e.runOnLoop || e.runOnContext, c();
					} catch (e) {
						return p();
					}
				}function m(e, t) {
					var n = arguments,
					    r = this,
					    o = new this.constructor(h);void 0 === o[oe] && F(o);var i = r._state;return i ? !function () {
						var e = n[i - 1];J(function () {
							return A(i, o, e, r._result);
						});
					}() : E(r, o, e, t), o;
				}function y(e) {
					var t = this;if (e && "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && e.constructor === t) return e;var n = new t(h);return M(n, e), n;
				}function h() {}function v() {
					return new TypeError("You cannot resolve a promise with itself");
				}function g() {
					return new TypeError("A promises callback cannot return that same promise.");
				}function b(e) {
					try {
						return e.then;
					} catch (error) {
						return ce.error = error, ce;
					}
				}function k(e, t, n, r) {
					try {
						e.call(t, n, r);
					} catch (e) {
						return e;
					}
				}function w(e, t, n) {
					J(function (e) {
						var r = !1,
						    o = k(n, t, function (n) {
							r || (r = !0, t !== n ? M(e, n) : x(e, n));
						}, function (t) {
							r || (r = !0, C(e, t));
						}, "Settle: " + (e._label || " unknown promise"));!r && o && (r = !0, C(e, o));
					}, e);
				}function S(e, t) {
					t._state === ae ? x(e, t._result) : t._state === se ? C(e, t._result) : E(t, void 0, function (t) {
						return M(e, t);
					}, function (t) {
						return C(e, t);
					});
				}function T(e, t, n) {
					t.constructor === e.constructor && n === m && t.constructor.resolve === y ? S(e, t) : n === ce ? C(e, ce.error) : void 0 === n ? x(e, t) : o(n) ? w(e, t, n) : x(e, t);
				}function M(t, n) {
					t === n ? C(t, v()) : e(n) ? T(t, n, b(n)) : x(t, n);
				}function _(e) {
					e._onerror && e._onerror(e._result), O(e);
				}function x(e, t) {
					e._state === ie && (e._result = t, e._state = ae, 0 !== e._subscribers.length && J(O, e));
				}function C(e, t) {
					e._state === ie && (e._state = se, e._result = t, J(_, e));
				}function E(e, t, n, r) {
					var o = e._subscribers,
					    i = o.length;e._onerror = null, o[i] = t, o[i + ae] = n, o[i + se] = r, 0 === i && e._state && J(O, e);
				}function O(e) {
					var t = e._subscribers,
					    n = e._state;if (0 !== t.length) {
						for (var r = void 0, o = void 0, i = e._result, a = 0; a < t.length; a += 3) {
							r = t[a], o = t[a + n], r ? A(n, r, o, i) : o(i);
						}e._subscribers.length = 0;
					}
				}function P() {
					this.error = null;
				}function I(e, t) {
					try {
						return e(t);
					} catch (e) {
						return ue.error = e, ue;
					}
				}function A(e, t, n, r) {
					var i = o(n),
					    a = void 0,
					    s = void 0,
					    c = void 0,
					    u = void 0;if (i) {
						if (a = I(n, r), a === ue ? (u = !0, s = a.error, a = null) : c = !0, t === a) return void C(t, g());
					} else a = r, c = !0;t._state !== ie || (i && c ? M(t, a) : u ? C(t, s) : e === ae ? x(t, a) : e === se && C(t, a));
				}function N(e, t) {
					try {
						t(function (t) {
							M(e, t);
						}, function (t) {
							C(e, t);
						});
					} catch (e) {
						C(e, e);
					}
				}function j() {
					return le++;
				}function F(e) {
					e[oe] = le++, e._state = void 0, e._result = void 0, e._subscribers = [];
				}function R(e, t) {
					this._instanceConstructor = e, this.promise = new e(h), this.promise[oe] || F(this.promise), K(t) ? (this._input = t, this.length = t.length, this._remaining = t.length, this._result = new Array(this.length), 0 === this.length ? x(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(), 0 === this._remaining && x(this.promise, this._result))) : C(this.promise, D());
				}function D() {
					return new Error("Array Methods must be provided an Array");
				}function L(e) {
					return new R(this, e).promise;
				}function B(e) {
					var t = this;return new t(K(e) ? function (n, r) {
						for (var o = e.length, i = 0; i < o; i++) {
							t.resolve(e[i]).then(n, r);
						}
					} : function (e, t) {
						return t(new TypeError("You must pass an array to race."));
					});
				}function q(e) {
					var t = this,
					    n = new t(h);return C(n, e), n;
				}function U() {
					throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
				}function W() {
					throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
				}function H(e) {
					this[oe] = j(), this._result = this._state = void 0, this._subscribers = [], h !== e && ("function" != typeof e && U(), this instanceof H ? N(this, e) : W());
				}function $() {
					var e = void 0;if ("undefined" != typeof r) e = r;else if ("undefined" != typeof self) e = self;else try {
						e = Function("return this")();
					} catch (e) {
						throw new Error("polyfill failed because global object is unavailable in this environment");
					}var t = e.Promise;if (t) {
						var n = null;try {
							n = Object.prototype.toString.call(t.resolve());
						} catch (e) {}if ("[object Promise]" === n && !t.cast) return;
					}e.Promise = H;
				}var X = void 0;X = Array.isArray ? Array.isArray : function (e) {
					return "[object Array]" === Object.prototype.toString.call(e);
				};var K = X,
				    V = 0,
				    z = void 0,
				    G = void 0,
				    J = function J(e, t) {
					ne[V] = e, ne[V + 1] = t, V += 2, 2 === V && (G ? G(f) : re());
				},
				    Y = "undefined" != typeof window ? window : void 0,
				    Q = Y || {},
				    Z = Q.MutationObserver || Q.WebKitMutationObserver,
				    ee = "undefined" == typeof self && "undefined" != typeof t && "[object process]" === {}.toString.call(t),
				    te = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel,
				    ne = new Array(1e3),
				    re = void 0;re = ee ? s() : Z ? u() : te ? l() : void 0 === Y ? d() : p();var oe = Math.random().toString(36).substring(16),
				    ie = void 0,
				    ae = 1,
				    se = 2,
				    ce = new P(),
				    ue = new P(),
				    le = 0;return R.prototype._enumerate = function () {
					for (var e = this.length, t = this._input, n = 0; this._state === ie && n < e; n++) {
						this._eachEntry(t[n], n);
					}
				}, R.prototype._eachEntry = function (e, t) {
					var n = this._instanceConstructor,
					    r = n.resolve;if (r === y) {
						var o = b(e);if (o === m && e._state !== ie) this._settledAt(e._state, t, e._result);else if ("function" != typeof o) this._remaining--, this._result[t] = e;else if (n === H) {
							var i = new n(h);T(i, e, o), this._willSettleAt(i, t);
						} else this._willSettleAt(new n(function (t) {
							return t(e);
						}), t);
					} else this._willSettleAt(r(e), t);
				}, R.prototype._settledAt = function (e, t, n) {
					var r = this.promise;r._state === ie && (this._remaining--, e === se ? C(r, n) : this._result[t] = n), 0 === this._remaining && x(r, this._result);
				}, R.prototype._willSettleAt = function (e, t) {
					var n = this;E(e, void 0, function (e) {
						return n._settledAt(ae, t, e);
					}, function (e) {
						return n._settledAt(se, t, e);
					});
				}, H.all = L, H.race = B, H.resolve = y, H.reject = q, H._setScheduler = i, H._setAsap = a, H._asap = J, H.prototype = { constructor: H, then: m, "catch": function _catch(e) {
						return this.then(null, e);
					} }, H.polyfill = $, H.Promise = H, H;
			});
		}).call(t, n(80), function () {
			return this;
		}());
	}, function (e, t) {
		"use strict";
		function n(e, t) {
			var n = this;n.message = e, n.code = t, n.time = new Date(), n.timetag = +n.time;
		}n.prototype = (0, _create2.default)(Error.prototype), n.prototype.name = "NIMError", n.prototype.appendMessage = function (e) {
			var t = this;t.message ? e && (t.message += "(" + e + ")") : t.message = e;
		};var r = { 201: "客户端版本不对, 需升级sdk", 302: "用户名或密码错误, 请检查appKey和token是否有效, account和token是否匹配", 403: "非法操作或没有权限", 404: "对象(用户/群/聊天室)不存在", 405: "参数长度过长", 408: "客户端请求超时", 414: "参数错误", 415: "服务不可用/没有聊天室服务器可分配", 416: "频率控制", 417: "重复操作", 422: "帐号被禁用", 500: "服务器内部错误", 501: "数据库操作失败", 503: "服务器繁忙", 508: "删除有效期过了", 509: "已失效", 7101: "被拉黑", 801: "群人数达到上限", 802: "没有权限", 803: "群不存在或未发生变化", 804: "用户不在群里面", 805: "群类型不匹配", 806: "创建群数量达到限制", 807: "群成员状态不对", 809: "已经在群里", 997: "协议已失效", 998: "解包错误", 999: "打包错误", 9102: "通道失效", 9103: "已经在其他端接听/拒绝过这通电话", 11001: "对方离线, 通话不可送达", 13002: "聊天室状态异常", 13003: "在黑名单中", 13004: "在禁言名单中", 13006: "聊天室处于整体禁言状态,只有管理员能发言", Connect_Failed: "无法建立连接, 请确保能 ping/telnet 到云信服务器; 如果是IE8/9, 请确保项目部署在 HTTPS 环境下", Error_Internet_Disconnected: "网断了", Error_Connection_is_not_Established: "连接未建立", Error_Connection_Socket_State_not_Match: "socket状态不对", Error_Timeout: "超时", Param_Error: "参数错误", No_File_Selected: "请选择文件", Wrong_File_Type: "文件类型错误", File_Too_Large: "文件过大", Cross_Origin_Iframe: "不能获取跨域Iframe的内容", Not_Support: "不支持", NO_DB: "无数据库", DB: "数据库错误", Still_In_Team: "还在群里", Session_Exist: "会话已存在", Session_Not_Exist: "会话不存在", Error_Unknown: "未知错误", Operation_Canceled: "操作取消" };[200, 406, 808, 810].forEach(function (e) {
			r[e] = null;
		}), n.genError = function (e) {
			var t = r[e];return void 0 === t && (t = "操作失败"), null === t ? null : new n(t, e);
		}, n.multiInstance = function () {
			return new n("不允许初始化多个实例", "Not_Allow_Multi_Instance");
		}, n.newNetworkError = function () {
			var e = "Error_Internet_Disconnected";return new n(r[e], e);
		}, n.newConnectError = function (e) {
			var t = "Connect_Failed";return new n(r[t] || e, t);
		}, n.newConnectionError = function () {
			var e = "Error_Connection_is_not_Established";return new n(r[e], e);
		}, n.newSocketStateError = function () {
			var e = "Error_Connection_Socket_State_not_Match";return new n(r[e], e);
		}, n.newTimeoutError = function () {
			var e = "Error_Timeout";return new n(r[e], e);
		}, n.newFrequencyControlError = function () {
			var e = 416,
			    t = new n(r[e], e);return t.from = "local", t;
		}, n.newParamError = function (e) {
			var t = "Param_Error";return new n(e || r[t], t);
		}, n.newNoFileError = function (e) {
			var t = "No_File_Selected";return new n(e || r[t], t);
		}, n.newWrongFileTypeError = function (e) {
			var t = "Wrong_File_Type";return new n(e || r[t], t);
		}, n.newFileTooLargeError = function (e) {
			var t = "File_Too_Large";return new n(e || r[t], t);
		}, n.newCORSIframeError = function () {
			var e = "Cross_Origin_Iframe";return new n(r[e], e);
		}, n.newSupportError = function (e, t) {
			return new n("不支持" + e, "Not_Support_" + t);
		}, n.newSupportDBError = function () {
			return n.newSupportError("数据库", "DB");
		}, n.noDBError = function () {
			var e = "NO_DB";return new n(r[e], e);
		}, n.newDBError = function () {
			var e = "DB";return new n(r[e], e);
		}, n.newUnknownError = function () {
			var e = "Error_Unknown";return new n(r[e], e);
		}, n.stillInTeamError = function () {
			var e = "Still_In_Team";return new n(r[e], e);
		}, n.sessionExist = function () {
			var e = "Session_Exist";return new n(r[e], e);
		}, n.sessionNotExist = function () {
			var e = "Session_Not_Exist";return new n(r[e], e);
		}, n.cancel = function () {
			var e = "Operation_Canceled";return new n(r[e], e);
		}, e.exports = n;
	},,, function (e, t, n) {
		"use strict";
		var r = "'b424a0449d7e69c3151be16b9d098142cbf1c7c0",
		    o = "b424a04'",
		    i = "3.8.0",
		    a = "2.0.0.524",
		    s = 35,
		    c = 1,
		    u = "https://lbs.netease.im/lbs/webconf.jsp",
		    l = "development" === { WEIXIN_APP: !0 }.NODE_ENV ? 6e3 : 42e3,
		    p = { info: { hash: r, shortHash: o, version: i, sdkVersion: s, protocolVersion: c }, agentVersion: a, lbsUrl: u, connectTimeout: l, xhrTimeout: l, socketTimeout: l, reconnectionDelay: 656.25, reconnectionDelayMax: l, reconnectionJitter: .1, heartbeatInterval: 18e4, cmdTimeout: l };p.formatSocketUrl = function (e) {
			var t = e.url,
			    n = e.secure,
			    r = n ? "https" : "http";return t.indexOf("http") === -1 ? r + "://" + t : t;
		}, p.fileServerUrl = "https://nos.netease.com", p.replaceUrl = "http://nos.netease.im", p.genUploadUrl = function (e) {
			return p.uploadUrl ? p.uploadUrl + "/" + e : p.fileServerUrl + "/" + e;
		}, p.genDownloadUrl = function (e, t) {
			return p.downloadUrl ? p.replaceUrl + "/" + e + "/" + t : p.fileServerUrl + "/" + e + "/" + t;
		}, e.exports = p;
	}, function (e, t, n) {
		"use strict";
		function r() {}var o = n(76),
		    i = n(2).Promise,
		    a = n(1),
		    s = a.notundef,
		    c = n(69),
		    u = n(6),
		    l = {};r.getInstance = function (e) {
			var t = this;a.verifyOptions(e, "account");var n = t.genInstanceName(e),
			    o = l[n];return o ? r.updateInstance(o, e) : o = l[n] = new t(e), o;
		}, r.updateInstance = function (e, t) {
			e.setOptions(t), e.connect();
		};var p = r.fn = r.prototype = (0, _create2.default)(new o());p.init = function (e) {
			var t = this;a.verifyOptions(e, "account");var n = t.account = e.account = e.account + "",
			    o = e.constructor,
			    i = o.genInstanceName(e),
			    s = l[i];if (e._disableSingleton && (s = null), s) return r.updateInstance(s, e), s;t.name = i, l[i] = t, t.logger = e.logger = new c({ debug: e.debug, logFunc: e.logFunc, prefix: t.subType }), e.api = t;var p = t.protocol = new e.Protocol(e);return p.name = "Protocol-" + i, p.account = n, p.api = t, p.message = t.message = new e.Message({ account: n }), t.options = a.copy(e), e.uploadUrl && e.downloadUrl && (u.uploadUrl = e.uploadUrl, u.downloadUrl = e.downloadUrl), t.reset(), t;
		}, p.reset = function () {
			var e = this,
			    t = e.options;a.verifyBooleanWithDefault(t, "exifOrientation", !0);
		}, p.setOptions = function (e) {
			this.reset(), this.protocol.setOptions(e);
		}, p.processCallback = function (e, t) {
			f(e, t);
		}, p.processCallbackPromise = function (e, t) {
			var n = new i(function (n, r) {
				f(e, t, !0, n, r);
			});return n;
		};var f = function f(e, t, n, r, o) {
			a.verifyCallback(e, "done"), e.callback = function (i, c) {
				var u = e.callback.options;if (c = c || u, t && (c = u), a.isFunction(e.cbaop)) {
					var l = e.cbaop(i, c);s(l) && (c = l);
				}var p = e.done;a.isObject(c) && (delete c.done, delete c.cb, delete c.callback), n ? i ? o(i) : r(c) : p(i, c);
			}, e.callback.options = a.copy(e);
		};p.processPs = function (e) {
			a.notexist(e.ps) && (e.ps = "");
		}, p.processCustom = function (e) {
			a.notexist(e.custom) && (e.custom = "");
		}, p.sendCmd = function () {
			this.protocol.sendCmd.apply(this.protocol, arguments);
		}, p.sendCmdWithResp = function (e, t, n) {
			this.sendCmd(e, t, function (e, t, r) {
				a.isFunction(n) && (e ? n(e, t) : n(null, r));
			});
		}, p.cbAndSendCmd = function (e, t) {
			var n = this.processCallbackPromise(t);return this.sendCmd(e, t), n;
		}, r.use = function (e, t) {
			e && e.install && a.isFunction(e.install) && e.install(this, t);
		}, e.exports = r, n(51), n(53), n(54), n(55), n(52);
	},, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = {};o.init = function () {
			o.deviceId = r.guid();
		}, o.init(), o.clientTypeMap = { 1: "Android", 2: "iOS", 4: "PC", 8: "WindowsPhone", 16: "Web", 32: "Server" }, e.exports = o;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;o.undef(e.secure) && (e.secure = !0), t.options = o.copy(e), t.init(), t.connect();
		}var o = n(1),
		    i = n(6),
		    a = n(3),
		    s = r.fn = r.prototype;s.init = function () {
			var e = this;e.logger = e.options.logger, e.cmdTaskArray = [], e.timerMap = {}, e.cmdCallbackMap = {}, e.cmdContentMap = {}, e.initConnect(), e.reset();
		}, s.reset = function () {
			var e = this;e.resetConnect();
		}, s.setOptions = function (e) {
			var t = this,
			    n = t.options,
			    r = (0, _keys2.default)(n),
			    i = r.indexOf("account");i !== -1 && r.splice(i, 1), e = o.filterObj(e, r), t.options = o.merge(n, e), t.reset();
		}, s.sendCmd = function (e) {
			var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
			    n = arguments[2],
			    r = this;r.heartbeat(), "heartbeat" !== e && r.logger.log("Protocol Command    " + e + "\t", t);var o = e;e = r.parser.createCmd(e, t);var i,
			    a = e.SER;t = t || {}, r.cmdContentMap[a] = t, t.single && (delete t.single, i = (0, _keys2.default)(t), 1 === i.length && (r.cmdContentMap[a] = t[i[0]])), t.NOTSTORE && (i = t.NOTSTORE.split(" "), i.forEach(function (e) {
				delete t[e];
			}), delete t.NOTSTORE), n = n || t.callback, n && (r.cmdCallbackMap[a] = n), r.cmdTaskArray.push({ cmdName: o, cmd: e }), r.startCmdTaskTimer();
		}, s.startCmdTaskTimer = function () {
			var e = this;e.cmdTaskTimer || (e.cmdTaskTimer = setTimeout(function () {
				var t = e.cmdTaskArray.shift();e.cmdTaskTimer = null, t && e.executeCmdTask(t), e.cmdTaskArray.length && e.startCmdTaskTimer();
			}, 0));
		}, s.executeCmdTask = function (e) {
			var t = this,
			    n = e.cmdName,
			    r = e.cmd,
			    o = r.SER;t.isFrequencyControlled(n) ? (t.logger.warn("hit frequency control " + n), t.markCallbackInvalid(o, a.newFrequencyControlError())) : t.isConnected() ? t.doSendCmd(r) : t.markCallbackInvalid(o, a.newSocketStateError());
		}, s.isFrequencyControlled = function (e) {
			var t = this.frequencyControlMap && this.frequencyControlMap[e];if (t) {
				if (Date.now() < t.from + t.duration) return !0;delete this.frequencyControlMap[e];
			}
		}, s.doSendCmd = function (e) {
			var t = this,
			    n = e.SER;t.timerMap[n] = setTimeout(function () {
				t.markCallbackInvalid(n, a.newTimeoutError());
			}, i.cmdTimeout);try {
				t.socket.send((0, _stringify2.default)(e));
			} catch (e) {
				t.markCallbackInvalid(n, a.newSocketStateError()), t.onDisconnect(!0);
			}
		}, s.getObjWithSer = function (e) {
			var t = this,
			    n = t.cmdContentMap[e];return delete t.cmdContentMap[e], n && o.copy(n);
		}, s.getCallbackWithSer = function (e) {
			var t = this,
			    n = t.cmdCallbackMap[e];return delete t.cmdCallbackMap[e], n;
		}, s.getTimerWithSer = function (e) {
			var t = this,
			    n = t.timerMap[e];return delete t.timerMap[e], n;
		}, s.clearTimerWithSer = function (e) {
			var t = this,
			    n = t.getTimerWithSer(e);n && clearTimeout(n);
		}, s.markCallbackInvalid = function (e, t) {
			var n = this;n.getObjWithSer(e), n.clearTimerWithSer(e);var r = n.getCallbackWithSer(e);if (r) {
				var o = r.options;setTimeout(function () {
					r(t || a.newUnknownError(), o);
				}, 0);
			}
		}, s.markAllCallbackInvalid = function (e) {
			var t = this;(0, _keys2.default)(this.cmdCallbackMap).forEach(function (n) {
				t.markCallbackInvalid(n, e);
			});
		}, s.getPacketObj = function (e) {
			var t = null;if (e && e.raw) {
				var n = e.raw.ser;o.notundef(n) && (t = this.getObjWithSer(n));
			}return t;
		}, s.callPacketAckCallback = function (e) {
			var t = this;if (e && e.raw) {
				var n = e.raw.ser;if (o.notundef(n)) {
					t.clearTimerWithSer(n);var r = t.getCallbackWithSer(n);r && (e.promise ? e.promise.then(function () {
						r(e.error, e.obj);
					}, function (n) {
						var o = a.newDBError();o.event = n, t.logger.error("promise error", o, n), r(o, e.obj, e.content);
					}) : r(e.error, e.obj, e.content));
				}
			}
		}, s.onMessage = function (e) {
			var t = this;t.heartbeat();var n = t.parser.parseResponse(e);n.notFound && t.logger.log("no config for", n.notFound), n.frequencyControlDuration && (t.logger.warn("server frequency control " + n.cmd), t.frequencyControlMap = t.frequencyControlMap || {}, t.frequencyControlMap[n.cmd] = { from: +new Date(), duration: n.frequencyControlDuration }), n.obj = t.getPacketObj(n), "heartbeat" !== n.cmd && t.logger.log("Protocol Response   " + n.cmd + "\t", n, n.error || (n.content ? n.content : ""));var r = "process" + o.capFirstLetter(n.service);t[r] && t[r](n), t.callPacketAckCallback(n);
		}, s.onMiscError = function (e, t, n) {
			e && (e.appendMessage(n), this.notifyError(e, t));
		}, s.notifyError = function (e, t) {
			var n = this;if (n.isConnected()) {
				var r = ["onError " + n.name, e];e.event && r.push(e.event), t && r.push(t), n.logger.error.apply(n.logger.error, r), n.options.onerror(e, t);
			}
		}, s.emitAPI = function (e) {
			var t = e.type,
			    n = e.obj;this.api.emit(t, n);
		}, e.exports = r, n(60), n(59), n(61), n(62);
	}, function (e, t, n) {
		var r;(function (e, o) {
			(function () {
				"use strict";
				function i(e) {
					return e = String(e), e.charAt(0).toUpperCase() + e.slice(1);
				}function a(e, t, n) {
					var r = { "10.0": "10", 6.4: "10 Technical Preview", 6.3: "8.1", 6.2: "8", 6.1: "Server 2008 R2 / 7", "6.0": "Server 2008 / Vista", 5.2: "Server 2003 / XP 64-bit", 5.1: "XP", 5.01: "2000 SP1", "5.0": "2000", "4.0": "NT", "4.90": "ME" };return t && n && /^Win/i.test(e) && !/^Windows Phone /i.test(e) && (r = r[/[\d.]+$/.exec(e)]) && (e = "Windows " + r), e = String(e), t && n && (e = e.replace(RegExp(t, "i"), n)), e = c(e.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]);
				}function s(e, t) {
					var n = -1,
					    r = e ? e.length : 0;if ("number" == typeof r && r > -1 && r <= S) for (; ++n < r;) {
						t(e[n], n, e);
					} else u(e, t);
				}function c(e) {
					return e = m(e), /^(?:webOS|i(?:OS|P))/.test(e) ? e : i(e);
				}function u(e, t) {
					for (var n in e) {
						x.call(e, n) && t(e[n], n, e);
					}
				}function l(e) {
					return null == e ? i(e) : C.call(e).slice(8, -1);
				}function p(e, t) {
					var n = null != e ? (0, _typeof3.default)(e[t]) : "number";return !(/^(?:boolean|number|string|undefined)$/.test(n) || "object" == n && !e[t]);
				}function f(e) {
					return String(e).replace(/([ -])(?!$)/g, "$1?");
				}function d(e, t) {
					var n = null;return s(e, function (r, o) {
						n = t(n, r, o, e);
					}), n;
				}function m(e) {
					return String(e).replace(/^ +| +$/g, "");
				}function y(e) {
					function t(t) {
						return d(t, function (t, n) {
							return t || RegExp("\\b" + (n.pattern || f(n)) + "\\b", "i").exec(e) && (n.label || n);
						});
					}function n(t) {
						return d(t, function (t, n, r) {
							return t || (n[G] || n[/^[a-z]+(?: +[a-z]+\b)*/i.exec(G)] || RegExp("\\b" + f(r) + "(?:\\b|\\w*\\d)", "i").exec(e)) && r;
						});
					}function r(t) {
						return d(t, function (t, n) {
							return t || RegExp("\\b" + (n.pattern || f(n)) + "\\b", "i").exec(e) && (n.label || n);
						});
					}function o(t) {
						return d(t, function (t, n) {
							var r = n.pattern || f(n);return !t && (t = RegExp("\\b" + r + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(e)) && (t = a(t, r, n.label || n)), t;
						});
					}function i(t) {
						return d(t, function (t, n) {
							var r = n.pattern || f(n);return !t && (t = RegExp("\\b" + r + " *\\d+[.\\w_]*", "i").exec(e) || RegExp("\\b" + r + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(e)) && ((t = String(n.label && !RegExp(r, "i").test(n.label) ? n.label : t).split("/"))[1] && !/[\d.]+/.test(t[0]) && (t[0] += " " + t[1]), n = n.label || n, t = c(t[0].replace(RegExp(r, "i"), n).replace(RegExp("; *(?:" + n + "[_-])?", "i"), " ").replace(RegExp("(" + n + ")[-_.]?(\\w)", "i"), "$1 $2"))), t;
						});
					}function s(t) {
						return d(t, function (t, n) {
							return t || (RegExp(n + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(e) || 0)[1] || null;
						});
					}function h() {
						return this.description || "";
					}var b = v,
					    k = e && "object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "String" != l(e);k && (b = e, e = null);var w = b.navigator || {},
					    S = w.userAgent || "";e || (e = S);var _,
					    x,
					    E = k || M == g,
					    O = k ? !!w.likeChrome : /\bChrome\b/.test(e) && !/internal|\n/i.test(C.toString()),
					    P = "Object",
					    I = k ? P : "ScriptBridgingProxyObject",
					    A = k ? P : "Environment",
					    N = k && b.java ? "JavaPackage" : l(b.java),
					    j = k ? P : "RuntimeObject",
					    F = /\bJava/.test(N) && b.java,
					    R = F && l(b.environment) == A,
					    D = F ? "a" : "α",
					    L = F ? "b" : "β",
					    B = b.document || {},
					    q = b.operamini || b.opera,
					    U = T.test(U = k && q ? q["[[Class]]"] : l(q)) ? U : q = null,
					    W = e,
					    H = [],
					    $ = null,
					    X = e == S,
					    K = X && q && "function" == typeof q.version && q.version(),
					    V = t([{ label: "EdgeHTML", pattern: "Edge" }, "Trident", { label: "WebKit", pattern: "AppleWebKit" }, "iCab", "Presto", "NetFront", "Tasman", "KHTML", "Gecko"]),
					    z = r(["Adobe AIR", "Arora", "Avant Browser", "Breach", "Camino", "Epiphany", "Fennec", "Flock", "Galeon", "GreenBrowser", "iCab", "Iceweasel", "K-Meleon", "Konqueror", "Lunascape", "Maxthon", { label: "Microsoft Edge", pattern: "Edge" }, "Midori", "Nook Browser", "PaleMoon", "PhantomJS", "Raven", "Rekonq", "RockMelt", "SeaMonkey", { label: "Silk", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Sleipnir", "SlimBrowser", { label: "SRWare Iron", pattern: "Iron" }, "Sunrise", "Swiftfox", "WebPositive", "Opera Mini", { label: "Opera Mini", pattern: "OPiOS" }, "Opera", { label: "Opera", pattern: "OPR" }, "Chrome", { label: "Chrome Mobile", pattern: "(?:CriOS|CrMo)" }, { label: "Firefox", pattern: "(?:Firefox|Minefield)" }, { label: "Firefox for iOS", pattern: "FxiOS" }, { label: "IE", pattern: "IEMobile" }, { label: "IE", pattern: "MSIE" }, "Safari"]),
					    G = i([{ label: "BlackBerry", pattern: "BB10" }, "BlackBerry", { label: "Galaxy S", pattern: "GT-I9000" }, { label: "Galaxy S2", pattern: "GT-I9100" }, { label: "Galaxy S3", pattern: "GT-I9300" }, { label: "Galaxy S4", pattern: "GT-I9500" }, "Google TV", "Lumia", "iPad", "iPod", "iPhone", "Kindle", { label: "Kindle Fire", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Nexus", "Nook", "PlayBook", "PlayStation 3", "PlayStation 4", "PlayStation Vita", "TouchPad", "Transformer", { label: "Wii U", pattern: "WiiU" }, "Wii", "Xbox One", { label: "Xbox 360", pattern: "Xbox" }, "Xoom"]),
					    J = n({ Apple: { iPad: 1, iPhone: 1, iPod: 1 }, Archos: {}, Amazon: { Kindle: 1, "Kindle Fire": 1 }, Asus: { Transformer: 1 }, "Barnes & Noble": { Nook: 1 }, BlackBerry: { PlayBook: 1 }, Google: { "Google TV": 1, Nexus: 1 }, HP: { TouchPad: 1 }, HTC: {}, LG: {}, Microsoft: { Xbox: 1, "Xbox One": 1 }, Motorola: { Xoom: 1 }, Nintendo: { "Wii U": 1, Wii: 1 }, Nokia: { Lumia: 1 }, Samsung: { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 }, Sony: { "PlayStation 4": 1, "PlayStation 3": 1, "PlayStation Vita": 1 } }),
					    Y = o(["Windows Phone", "Android", "CentOS", { label: "Chrome OS", pattern: "CrOS" }, "Debian", "Fedora", "FreeBSD", "Gentoo", "Haiku", "Kubuntu", "Linux Mint", "OpenBSD", "Red Hat", "SuSE", "Ubuntu", "Xubuntu", "Cygwin", "Symbian OS", "hpwOS", "webOS ", "webOS", "Tablet OS", "Linux", "Mac OS X", "Macintosh", "Mac", "Windows 98;", "Windows "]);if (V && (V = [V]), J && !G && (G = i([J])), (_ = /\bGoogle TV\b/.exec(G)) && (G = _[0]), /\bSimulator\b/i.test(e) && (G = (G ? G + " " : "") + "Simulator"), "Opera Mini" == z && /\bOPiOS\b/.test(e) && H.push("running in Turbo/Uncompressed mode"), "IE" == z && /\blike iPhone OS\b/.test(e) ? (_ = y(e.replace(/like iPhone OS/, "")), J = _.manufacturer, G = _.product) : /^iP/.test(G) ? (z || (z = "Safari"), Y = "iOS" + ((_ = / OS ([\d_]+)/i.exec(e)) ? " " + _[1].replace(/_/g, ".") : "")) : "Konqueror" != z || /buntu/i.test(Y) ? J && "Google" != J && (/Chrome/.test(z) && !/\bMobile Safari\b/i.test(e) || /\bVita\b/.test(G)) || /\bAndroid\b/.test(Y) && /^Chrome/.test(z) && /\bVersion\//i.test(e) ? (z = "Android Browser", Y = /\bAndroid\b/.test(Y) ? Y : "Android") : "Silk" == z ? (/\bMobi/i.test(e) || (Y = "Android", H.unshift("desktop mode")), /Accelerated *= *true/i.test(e) && H.unshift("accelerated")) : "PaleMoon" == z && (_ = /\bFirefox\/([\d.]+)\b/.exec(e)) ? H.push("identifying as Firefox " + _[1]) : "Firefox" == z && (_ = /\b(Mobile|Tablet|TV)\b/i.exec(e)) ? (Y || (Y = "Firefox OS"), G || (G = _[1])) : z && !(_ = !/\bMinefield\b/i.test(e) && /\b(?:Firefox|Safari)\b/.exec(z)) || (z && !G && /[\/,]|^[^(]+?\)/.test(e.slice(e.indexOf(_ + "/") + 8)) && (z = null), (_ = G || J || Y) && (G || J || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(Y)) && (z = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(Y) ? Y : _) + " Browser")) : Y = "Kubuntu", K || (K = s(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\d.]+$))", "Version", f(z), "(?:Firefox|Minefield|NetFront)"])), (_ = "iCab" == V && parseFloat(K) > 3 && "WebKit" || /\bOpera\b/.test(z) && (/\bOPR\b/.test(e) ? "Blink" : "Presto") || /\b(?:Midori|Nook|Safari)\b/i.test(e) && !/^(?:Trident|EdgeHTML)$/.test(V) && "WebKit" || !V && /\bMSIE\b/i.test(e) && ("Mac OS" == Y ? "Tasman" : "Trident") || "WebKit" == V && /\bPlayStation\b(?! Vita\b)/i.test(z) && "NetFront") && (V = [_]), "IE" == z && (_ = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(e) || 0)[1]) ? (z += " Mobile", Y = "Windows Phone " + (/\+$/.test(_) ? _ : _ + ".x"), H.unshift("desktop mode")) : /\bWPDesktop\b/i.test(e) ? (z = "IE Mobile", Y = "Windows Phone 8.x", H.unshift("desktop mode"), K || (K = (/\brv:([\d.]+)/.exec(e) || 0)[1])) : "IE" != z && "Trident" == V && (_ = /\brv:([\d.]+)/.exec(e)) && (z && H.push("identifying as " + z + (K ? " " + K : "")), z = "IE", K = _[1]), X) {
						if (p(b, "global")) {
							if (F && (_ = F.lang.System, W = _.getProperty("os.arch"), Y = Y || _.getProperty("os.name") + " " + _.getProperty("os.version")), E && p(b, "system") && (_ = [b.system])[0]) {
								Y || (Y = _[0].os || null);
							} else "object" == (0, _typeof3.default)(b.process) && !b.process.browser && (_ = b.process) ? (z = "Node.js", W = _.arch, Y = _.platform, K = /[\d.]+/.exec(_.version)[0]) : R && (z = "Rhino");
						} else l(_ = b.runtime) == I ? (z = "Adobe AIR", Y = _.flash.system.Capabilities.os) : l(_ = b.phantom) == j ? (z = "PhantomJS", K = (_ = _.version || null) && _.major + "." + _.minor + "." + _.patch) : "number" == typeof B.documentMode && (_ = /\bTrident\/(\d+)/i.exec(e)) && (K = [K, B.documentMode], (_ = +_[1] + 4) != K[1] && (H.push("IE " + K[1] + " mode"), V && (V[1] = ""), K[1] = _), K = "IE" == z ? String(K[1].toFixed(1)) : K[0]);Y = Y && c(Y);
					}K && (_ = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(K) || /(?:alpha|beta)(?: ?\d)?/i.exec(e + ";" + (X && w.appMinorVersion)) || /\bMinefield\b/i.test(e) && "a") && ($ = /b/i.test(_) ? "beta" : "alpha", K = K.replace(RegExp(_ + "\\+?$"), "") + ("beta" == $ ? L : D) + (/\d+\+?/.exec(_) || "")), "Fennec" == z || "Firefox" == z && /\b(?:Android|Firefox OS)\b/.test(Y) ? z = "Firefox Mobile" : "Maxthon" == z && K ? K = K.replace(/\.[\d.]+/, ".x") : /\bXbox\b/i.test(G) ? (Y = null, "Xbox 360" == G && /\bIEMobile\b/.test(e) && H.unshift("mobile mode")) : !/^(?:Chrome|IE|Opera)$/.test(z) && (!z || G || /Browser|Mobi/.test(z)) || "Windows CE" != Y && !/Mobi/i.test(e) ? "IE" == z && X && null === b.external ? H.unshift("platform preview") : (/\bBlackBerry\b/.test(G) || /\bBB10\b/.test(e)) && (_ = (RegExp(G.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(e) || 0)[1] || K) ? (_ = [_, /BB10/.test(e)], Y = (_[1] ? (G = null, J = "BlackBerry") : "Device Software") + " " + _[0], K = null) : this != u && "Wii" != G && (X && q || /Opera/.test(z) && /\b(?:MSIE|Firefox)\b/i.test(e) || "Firefox" == z && /\bOS X (?:\d+\.){2,}/.test(Y) || "IE" == z && (Y && !/^Win/.test(Y) && K > 5.5 || /\bWindows XP\b/.test(Y) && K > 8 || 8 == K && !/\bTrident\b/.test(e))) && !T.test(_ = y.call(u, e.replace(T, "") + ";")) && _.name && (_ = "ing as " + _.name + ((_ = _.version) ? " " + _ : ""), T.test(z) ? (/\bIE\b/.test(_) && "Mac OS" == Y && (Y = null), _ = "identify" + _) : (_ = "mask" + _, z = U ? c(U.replace(/([a-z])([A-Z])/g, "$1 $2")) : "Opera", /\bIE\b/.test(_) && (Y = null), X || (K = null)), V = ["Presto"], H.push(_)) : z += " Mobile", (_ = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(e) || 0)[1]) && (_ = [parseFloat(_.replace(/\.(\d)$/, ".0$1")), _], "Safari" == z && "+" == _[1].slice(-1) ? (z = "WebKit Nightly", $ = "alpha", K = _[1].slice(0, -1)) : K != _[1] && K != (_[2] = (/\bSafari\/([\d.]+\+?)/i.exec(e) || 0)[1]) || (K = null), _[1] = (/\bChrome\/([\d.]+)/i.exec(e) || 0)[1], 537.36 == _[0] && 537.36 == _[2] && parseFloat(_[1]) >= 28 && "WebKit" == V && (V = ["Blink"]), X && (O || _[1]) ? (V && (V[1] = "like Chrome"), _ = _[1] || (_ = _[0], _ < 530 ? 1 : _ < 532 ? 2 : _ < 532.05 ? 3 : _ < 533 ? 4 : _ < 534.03 ? 5 : _ < 534.07 ? 6 : _ < 534.1 ? 7 : _ < 534.13 ? 8 : _ < 534.16 ? 9 : _ < 534.24 ? 10 : _ < 534.3 ? 11 : _ < 535.01 ? 12 : _ < 535.02 ? "13+" : _ < 535.07 ? 15 : _ < 535.11 ? 16 : _ < 535.19 ? 17 : _ < 536.05 ? 18 : _ < 536.1 ? 19 : _ < 537.01 ? 20 : _ < 537.11 ? "21+" : _ < 537.13 ? 23 : _ < 537.18 ? 24 : _ < 537.24 ? 25 : _ < 537.36 ? 26 : "Blink" != V ? "27" : "28")) : (V && (V[1] = "like Safari"), _ = _[0], _ = _ < 400 ? 1 : _ < 500 ? 2 : _ < 526 ? 3 : _ < 533 ? 4 : _ < 534 ? "4+" : _ < 535 ? 5 : _ < 537 ? 6 : _ < 538 ? 7 : _ < 601 ? 8 : "8"), V && (V[1] += " " + (_ += "number" == typeof _ ? ".x" : /[.+]/.test(_) ? "" : "+")), "Safari" == z && (!K || parseInt(K) > 45) && (K = _)), "Opera" == z && (_ = /\bzbov|zvav$/.exec(Y)) ? (z += " ", H.unshift("desktop mode"), "zvav" == _ ? (z += "Mini", K = null) : z += "Mobile", Y = Y.replace(RegExp(" *" + _ + "$"), "")) : "Safari" == z && /\bChrome\b/.exec(V && V[1]) && (H.unshift("desktop mode"), z = "Chrome Mobile", K = null, /\bOS X\b/.test(Y) ? (J = "Apple", Y = "iOS 4.3+") : Y = null), K && 0 == K.indexOf(_ = /[\d.]+$/.exec(Y)) && e.indexOf("/" + _ + "-") > -1 && (Y = m(Y.replace(_, ""))), V && !/\b(?:Avant|Nook)\b/.test(z) && (/Browser|Lunascape|Maxthon/.test(z) || "Safari" != z && /^iOS/.test(Y) && /\bSafari\b/.test(V[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(z) && V[1]) && (_ = V[V.length - 1]) && H.push(_), H.length && (H = ["(" + H.join("; ") + ")"]), J && G && G.indexOf(J) < 0 && H.push("on " + J), G && H.push((/^on /.test(H[H.length - 1]) ? "" : "on ") + G), Y && (_ = / ([\d.+]+)$/.exec(Y), x = _ && "/" == Y.charAt(Y.length - _[0].length - 1), Y = { architecture: 32, family: _ && !x ? Y.replace(_[0], "") : Y, version: _ ? _[1] : null, toString: function toString() {
							var e = this.version;return this.family + (e && !x ? " " + e : "") + (64 == this.architecture ? " 64-bit" : "");
						} }), (_ = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(W)) && !/\bi686\b/i.test(W) ? (Y && (Y.architecture = 64, Y.family = Y.family.replace(RegExp(" *" + _), "")), z && (/\bWOW64\b/i.test(e) || X && /\w(?:86|32)$/.test(w.cpuClass || w.platform) && !/\bWin64; x64\b/i.test(e)) && H.unshift("32-bit")) : Y && /^OS X/.test(Y.family) && "Chrome" == z && parseFloat(K) >= 39 && (Y.architecture = 64), e || (e = null);var Q = {};return Q.description = e, Q.layout = V && V[0], Q.manufacturer = J, Q.name = z, Q.prerelease = $, Q.product = G, Q.ua = e, Q.version = z && K, Q.os = Y || { architecture: null, family: null, version: null, toString: function toString() {
							return "null";
						} }, Q.parse = y, Q.toString = h, Q.version && H.unshift(K), Q.name && H.unshift(z), Y && z && (Y != String(Y).split(" ")[0] || Y != z.split(" ")[0] && !G) && H.push(G ? "(" + Y + ")" : "on " + Y), H.length && (Q.description = H.join(" ")), Q;
				}var h = { "function": !0, object: !0 },
				    v = h[typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)] && window || this,
				    g = v,
				    b = h[typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)] && t,
				    k = h[typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)] && e && !e.nodeType && e,
				    w = b && k && "object" == (typeof o === "undefined" ? "undefined" : (0, _typeof3.default)(o)) && o;!w || w.global !== w && w.window !== w && w.self !== w || (v = w);var S = Math.pow(2, 53) - 1,
				    T = /\bOpera/,
				    M = this,
				    _ = Object.prototype,
				    x = _.hasOwnProperty,
				    C = _.toString,
				    E = y();v.platform = E, r = function () {
					return E;
				}.call(t, n, t, e), !(void 0 !== r && (e.exports = r));
			}).call(this);
		}).call(t, n(40)(e), function () {
			return this;
		}());
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;e.resend ? (o.verifyOptions(e, "idClient"), t.idClient = e.idClient) : t.idClient = o.guid(), t.type = c[e.type], t.resend = e.resend ? 1 : 0, i(e.custom) && (t.custom = "" + e.custom), i(e.yidunEnable) && (t.yidunEnable = e.yidunEnable ? 1 : 0), i(e.antiSpamContent) && (t.antiSpamContent = "" + e.antiSpamContent);
		}var o = n(1),
		    i = o.notundef,
		    a = n(18),
		    s = n(48),
		    c = s.typeMap;r.validTypes = s.validTypes, r.getType = s.getType, r.reverse = function (e) {
			var t = o.filterObj(e, "chatroomId idClient from fromNick fromAvatar fromCustom userUpdateTime custom status");return t = o.merge(t, { fromClientType: a.reverseType(e.fromClientType), type: r.getType(e), time: +e.time, resend: 1 === +e.resend }), i(t.userUpdateTime) && (t.userUpdateTime = +t.userUpdateTime), t.status = t.status || "success", t;
		}, r.setExtra = function (e, t) {
			s.setFlow(e, t);
		}, e.exports = r;
	},, function (e, t, n) {
		"use strict";
		function r(e) {
			this.mixin(e);
		}var o = n(1),
		    i = o.undef,
		    a = n(3),
		    s = n(46),
		    c = n(65),
		    u = n(67),
		    l = n(63),
		    p = n(64),
		    f = n(66);r.prototype.mixin = function (e) {
			var t = this;this.configMap = this.configMap || {}, ["idMap", "cmdConfig", "packetConfig"].forEach(function (n) {
				t.configMap[n] = o.merge({}, t.configMap[n], e.configMap && e.configMap[n]);
			}), ["serializeMap", "unserializeMap"].forEach(function (n) {
				t[n] = o.merge({}, t[n], e[n]);
			});
		};var d = new r({ configMap: s, serializeMap: c, unserializeMap: u }),
		    m = new r({ configMap: l, serializeMap: p, unserializeMap: f });r.getInstance = function (e) {
			switch (e) {case "IM":
					return d;case "Chatroom":
					return m;}
		}, r.prototype.createCmd = function () {
			var e = 1;return function (t, n) {
				var r = this,
				    o = this.configMap.cmdConfig[t];return t = { SID: o.sid, CID: o.cid, SER: "heartbeat" === t ? 0 : e++ }, o.params && (t.Q = [], o.params.forEach(function (e) {
					var o = e.type,
					    a = e.name,
					    s = e.entity,
					    c = n[a];if (!i(c)) {
						switch (o) {case "PropertyArray":
								o = "ArrayMable", c = c.map(function (e) {
									return { t: "Property", v: r.serialize(e, s) };
								});break;case "Property":
								c = r.serialize(c, a);break;case "bool":
								c = c ? "true" : "false";}t.Q.push({ t: o, v: c });
					}
				})), t;
			};
		}(), r.prototype.parseResponse = function (e) {
			var t = this,
			    n = JSON.parse(e),
			    r = { raw: n, rawStr: e, error: a.genError(n.code) },
			    i = t.configMap.packetConfig[n.sid + "_" + n.cid];if (!i) return r.notFound = { sid: n.sid, cid: n.cid }, r;var s = n.r,
			    c = "notify" === i.service && !i.cmd;if (r.isNotify = c, c) {
				var u = n.r[1].headerPacket;if (i = t.configMap.packetConfig[u.sid + "_" + u.cid], s = n.r[1].body, !i) return r.notFound = { sid: u.sid, cid: u.cid }, r;
			}if (r.service = i.service, r.cmd = i.cmd, r.error && 416 === r.error.code) {
				var l = s[0];l && (r.frequencyControlDuration = 1e3 * l);
			}var p = !1;return r.error && i.trivialErrorCodes && (p = i.trivialErrorCodes.indexOf(r.error.code) !== -1), r.error && !p || !i.response || (r.content = {}, i.response.forEach(function (e, i) {
				var a = s[i];if (!o.undef(a)) {
					var u = e.type,
					    l = e.name,
					    p = e.entity || l;switch (u) {case "Property":
							r.content[l] = t.unserialize(a, p);break;case "PropertyArray":
							r.content[l] = [], a.forEach(function (e) {
								r.content[l].push(t.unserialize(e, p));
							});break;case "KVArray":
							r.content[l] = a;break;case "long":case "Long":case "byte":case "Byte":case "Number":
							r.content[l] = +a;break;default:
							r.content[l] = a;}if (c && "msg" === l || "sysMsg" === l) {
						var f = r.content[l];o.isObject(f) && !f.idServer && (f.idServer = "" + n.r[0], f.type && "8" === f.type && f.deletedIdClient && (f.idServer = f.deletedIdClient));
					}
				}
			})), r;
		}, r.prototype.serialize = function (e, t) {
			var n = this.serializeMap[t],
			    r = {};for (var o in n) {
				e.hasOwnProperty(o) && (r[n[o]] = e[o]);
			}return r;
		}, r.prototype.unserialize = function (e, t) {
			var n = this.unserializeMap[t],
			    r = {};if (e) for (var o in n) {
				e.hasOwnProperty(o) && (r[n[o]] = e[o]);
			}return r;
		}, e.exports = r;
	},, function (e, t, n) {
		!function (t, r) {
			e.exports = r(n(41));
		}(this, function (e) {
			return function (e) {
				function t(r) {
					if (n[r]) return n[r].exports;var o = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
				}var n = {};return t.m = e, t.c = n, t.p = "", t(0);
			}([function (e, t, n) {
				"use strict";
				var r = n(1),
				    o = n(11),
				    i = n(12);r.json = o, r.upload = i, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = e.mode,
					    n = d,
					    r = f.getGlobal();return r.FormData || (t = "iframe"), "iframe" === t && (n = e.upload ? m : y), new n(e);
				}function o(e) {
					var t = e.upload = "multipart/form-data" === (e.headers || f.o)["Content-Type"],
					    n = !1;try {
						var o = (location.protocol + "//" + location.host).toLowerCase(),
						    i = f.url2origin(e.url);n = o !== i;
					} catch (error) {}return e.cors = n, t || n || e.mode ? r(e) : new d(e);
				}function i(e) {
					var t = h[e];t && (t.req.destroy(), delete h[e]);
				}function a(e, t) {
					t = { data: t };var n = e.result.headers;return n && (t.headers = e.req.header(n)), t;
				}function s(e, t, n) {
					var r = h[e];if (r) {
						"onload" === t && r.result && (n = a(r, n)), i(e);var o = { type: t, result: n };v(o), o.stopped || r[t](o.result);
					}
				}function c(e, t) {
					s(e, "onload", t);
				}function u(e, t) {
					s(e, "onerror", t);
				}function l(e, t) {
					var n = f.genUrlSep(e);return t = t || "", f.isObject(t) && (t = f.object2query(t)), t && (e += n + t), e;
				}function p(e, t) {
					t = t || {};var n = f.uniqueID(),
					    r = { result: t.result, onload: t.onload || f.f, onerror: t.onerror || f.f };h[n] = r, t.onload = c.bind(null, n), t.onerror = u.bind(null, n), t.query && (e = l(e, t.query));var i = t.method || "";return i && !/get/i.test(i) || !t.data || (e = l(e, t.data), t.data = null), t.url = e, r.req = o(t), n;
				}var f = n(2),
				    d = n(3),
				    m = n(7),
				    y = n(10),
				    h = {},
				    v = f.f;p.filter = function (e) {
					f.isFunction(e) && (v = e);
				}, p.abort = function (e) {
					var t = h[e];t && t.req.abort();
				}, e.exports = p;
			}, function (t, n) {
				t.exports = e;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;e.onuploading && t.on("uploading", e.onuploading), a.call(t, e);
				}var o = n(2),
				    i = n(4),
				    a = n(5),
				    s = a.prototype,
				    c = r.prototype = (0, _create2.default)(s);c.doSend = function () {
					var e = this,
					    t = e.options,
					    n = t.headers,
					    r = e.xhr = new XMLHttpRequest();if ("multipart/form-data" === n["Content-Type"]) {
						delete n["Content-Type"], r.upload.onprogress = e.onProgress.bind(e), r.upload.onload = e.onProgress.bind(e);var a = t.data;t.data = new window.FormData(), a && i.getKeys(a, t.putFileAtEnd).forEach(function (e) {
							var n = a[e];n.tagName && "INPUT" === n.tagName.toUpperCase() ? "file" === n.type && [].forEach.call(n.files, function (e) {
								t.data.append(o.dataset(n, "name") || n.name || e.name || "file-" + o.uniqueID(), e);
							}) : t.data.append(e, n);
						});
					}r.onreadystatechange = e.onStateChange.bind(e), 0 !== t.timeout && (e.timer = setTimeout(e.onTimeout.bind(e), t.timeout)), r.open(t.method, t.url, !t.sync), (0, _keys2.default)(n).forEach(function (e) {
						r.setRequestHeader(e, n[e]);
					}), t.cookie && "withCredentials" in r && (r.withCredentials = !0), r.send(t.data), e.afterSend();
				}, c.onProgress = function (e) {
					e.lengthComputable && e.loaded <= e.total && this.emit("uploading", e);
				}, c.onStateChange = function () {
					var e = this,
					    t = e.xhr;4 === t.readyState && e.onLoad({ status: t.status, result: t.responseText || "" });
				}, c.getResponseHeader = function (e) {
					var t = this.xhr;return t ? t.getResponseHeader(e) : "";
				}, c.destroy = function () {
					var e = this;clearTimeout(e.timer);try {
						e.xhr.onreadystatechange = o.f, e.xhr.abort();
					} catch (e) {}s.destroy.call(e);
				}, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				var r = n(2),
				    o = {};o.isFileInput = function (e) {
					var t = r.getGlobal();return e.tagName && "INPUT" === e.tagName.toUpperCase() || t.Blob && e instanceof t.Blob;
				}, o.getKeys = function (e, t) {
					var n = (0, _keys2.default)(e);return t && n.sort(function (t, n) {
						var r = o.isFileInput(e[t]),
						    i = o.isFileInput(e[n]);return r === i ? 0 : r ? 1 : -1;
					}), n;
				}, e.exports = o;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;e.onload && t.once("load", e.onload), e.onerror && t.once("error", e.onerror), e.onbeforesend && t.once("beforesend", e.onbeforesend), e.onaftersend && t.once("aftersend", e.onaftersend), e = t.options = o.fetch({ method: "GET", url: "", sync: !1, data: null, headers: {}, cookie: !1, timeout: 6e4, type: "text", form: null, input: null, putFileAtEnd: !1, proxyUrl: "" }, e);var n = e.headers,
					    r = "Content-Type";o.notexist(n[r]) && (n[r] = "application/x-www-form-urlencoded"), t.send();
				}var o = n(2),
				    i = o.f,
				    a = n(6),
				    s = r.prototype = (0, _create2.default)(a.prototype);s.send = function () {
					var e = this,
					    t = e.options;setTimeout(function () {
						try {
							try {
								e.emit("beforesend", t);
							} catch (error) {}e.doSend();
						} catch (error) {
							e.onError("serverError", "请求失败:" + error.message);
						}
					}, 0);
				}, s.doSend = i, s.afterSend = function () {
					var e = this;setTimeout(function () {
						e.emit("aftersend", e.options);
					}, 0);
				}, s.onLoad = function (e) {
					var t = this,
					    n = t.options,
					    r = e.status,
					    o = e.result;if (0 !== ("" + r).indexOf("2")) return void t.onError("serverError", "服务器返回异常状态", { status: r, result: o });if ("json" === n.type) try {
						o = JSON.parse(o);
					} catch (e) {
						return void t.onError("parseError", o);
					}t.emit("load", o);
				}, s.onError = function (e, t, n) {
					var r = o.isObject(n) ? n : {};r.code = e || "error", r.message = t || "发生错误", this.emit("error", r);
				}, s.onTimeout = function () {
					this.onError("timeout", "请求超时");
				}, s.abort = function () {
					this.onError("abort", "客户端中止");
				}, s.header = function (e) {
					var t = this;if (!o.isArray(e)) return t.getResponseHeader(e || "");var n = {};return e.forEach(function (e) {
						n[e] = t.header(e);
					}), n;
				}, s.getResponseHeader = i, s.destroy = i, e.exports = r;
			}, function (e, t, n) {
				var r;!function (t) {
					"use strict";
					function o() {}function i(e, t) {
						for (var n = e.length; n--;) {
							if (e[n].listener === t) return n;
						}return -1;
					}function a(e) {
						return function () {
							return this[e].apply(this, arguments);
						};
					}function s(e) {
						return "function" == typeof e || e instanceof RegExp || !(!e || "object" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e))) && s(e.listener);
					}var c = o.prototype,
					    u = t.EventEmitter;c.getListeners = function (e) {
						var t,
						    n,
						    r = this._getEvents();if (e instanceof RegExp) {
							t = {};for (n in r) {
								r.hasOwnProperty(n) && e.test(n) && (t[n] = r[n]);
							}
						} else t = r[e] || (r[e] = []);return t;
					}, c.flattenListeners = function (e) {
						var t,
						    n = [];for (t = 0; t < e.length; t += 1) {
							n.push(e[t].listener);
						}return n;
					}, c.getListenersAsObject = function (e) {
						var t,
						    n = this.getListeners(e);return n instanceof Array && (t = {}, t[e] = n), t || n;
					}, c.addListener = function (e, t) {
						if (!s(t)) throw new TypeError("listener must be a function");var n,
						    r = this.getListenersAsObject(e),
						    o = "object" == (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t));for (n in r) {
							r.hasOwnProperty(n) && i(r[n], t) === -1 && r[n].push(o ? t : { listener: t, once: !1 });
						}return this;
					}, c.on = a("addListener"), c.addOnceListener = function (e, t) {
						return this.addListener(e, { listener: t, once: !0 });
					}, c.once = a("addOnceListener"), c.defineEvent = function (e) {
						return this.getListeners(e), this;
					}, c.defineEvents = function (e) {
						for (var t = 0; t < e.length; t += 1) {
							this.defineEvent(e[t]);
						}return this;
					}, c.removeListener = function (e, t) {
						var n,
						    r,
						    o = this.getListenersAsObject(e);for (r in o) {
							o.hasOwnProperty(r) && (n = i(o[r], t), n !== -1 && o[r].splice(n, 1));
						}return this;
					}, c.off = a("removeListener"), c.addListeners = function (e, t) {
						return this.manipulateListeners(!1, e, t);
					}, c.removeListeners = function (e, t) {
						return this.manipulateListeners(!0, e, t);
					}, c.manipulateListeners = function (e, t, n) {
						var r,
						    o,
						    i = e ? this.removeListener : this.addListener,
						    a = e ? this.removeListeners : this.addListeners;if ("object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) || t instanceof RegExp) for (r = n.length; r--;) {
							i.call(this, t, n[r]);
						} else for (r in t) {
							t.hasOwnProperty(r) && (o = t[r]) && ("function" == typeof o ? i.call(this, r, o) : a.call(this, r, o));
						}return this;
					}, c.removeEvent = function (e) {
						var t,
						    n = typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e),
						    r = this._getEvents();if ("string" === n) delete r[e];else if (e instanceof RegExp) for (t in r) {
							r.hasOwnProperty(t) && e.test(t) && delete r[t];
						} else delete this._events;return this;
					}, c.removeAllListeners = a("removeEvent"), c.emitEvent = function (e, t) {
						var n,
						    r,
						    o,
						    i,
						    a,
						    s = this.getListenersAsObject(e);for (i in s) {
							if (s.hasOwnProperty(i)) for (n = s[i].slice(0), o = 0; o < n.length; o++) {
								r = n[o], r.once === !0 && this.removeListener(e, r.listener), a = r.listener.apply(this, t || []), a === this._getOnceReturnValue() && this.removeListener(e, r.listener);
							}
						}return this;
					}, c.trigger = a("emitEvent"), c.emit = function (e) {
						var t = Array.prototype.slice.call(arguments, 1);return this.emitEvent(e, t);
					}, c.setOnceReturnValue = function (e) {
						return this._onceReturnValue = e, this;
					}, c._getOnceReturnValue = function () {
						return !this.hasOwnProperty("_onceReturnValue") || this._onceReturnValue;
					}, c._getEvents = function () {
						return this._events || (this._events = {});
					}, o.noConflict = function () {
						return t.EventEmitter = u, o;
					}, r = function () {
						return o;
					}.call(t, n, t, e), !(void 0 !== r && (e.exports = r));
				}(this || {});
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;t.init(), a.call(t, e);
				}var o = n(2),
				    i = n(4),
				    a = n(5),
				    s = n(8),
				    c = "NEJ-UPLOAD-RESULT:",
				    u = {},
				    l = a.prototype,
				    p = r.prototype = (0, _create2.default)(l);p.init = function () {
					function e(e) {
						var t = e.data;if (0 === t.indexOf(c)) {
							t = JSON.parse(t.replace(c, ""));var n = t.key,
							    r = u[n];r && (delete u[n], t.result = decodeURIComponent(t.result || ""), r.onLoad(t.result));
						}
					}function t() {
						if (!n) {
							n = !0;var t = o.getGlobal();t.postMessage ? o.on(t, "message", e) : (s.addMsgListener(e), s.startTimer());
						}
					}var n = !1;return function () {
						t();
					};
				}(), p.doSend = function () {
					function e() {
						p.forEach(function (e, t) {
							var n = f[t];n.parentNode && (e.name = n.name, o.isFunction(e.setAttribute) && e.setAttribute("form", n.getAttribute("form")), n.parentNode.replaceChild(e, n));
						});
					}var t = this,
					    n = t.options,
					    r = t.key = "zoro-ajax-upload-iframe-" + o.uniqueID();u[r] = t;var a = t.form = o.html2node('<form style="display:none;"></form>');document.body.appendChild(a), a.target = r, a.method = "POST", a.enctype = "multipart/form-data", a.encoding = "multipart/form-data";var s = n.url,
					    c = o.genUrlSep(s);a.action = s + c + "_proxy_=form";var l = n.data,
					    p = [],
					    f = [];l && i.getKeys(l, n.putFileAtEnd).forEach(function (e) {
						var t = l[e];if (t.tagName && "INPUT" === t.tagName.toUpperCase()) {
							if ("file" === t.type) {
								var n = t,
								    r = n.cloneNode(!0);n.parentNode.insertBefore(r, n);var i = o.dataset(n, "name");i && (n.name = i), a.appendChild(n), o.isFunction(n.setAttribute) && (n.setAttribute("form", ""), n.removeAttribute("form")), p.push(t), f.push(r);
							}
						} else {
							var s = o.html2node('<input type="hidden"/>');s.name = e, s.value = t, a.appendChild(s);
						}
					});var d = t.iframe = o.createIframe({ name: r, onload: function onload() {
							return t.aborted ? void e() : (o.on(d, "load", t.checkResult.bind(t)), a.submit(), e(), void t.afterSend());
						} });
				}, p.checkResult = function () {
					var e,
					    t,
					    n = this;try {
						if (e = n.iframe.contentWindow.document.body, t = (e.innerText || e.textContent || "").trim(), t.indexOf(c) >= 0 || e.innerHTML.indexOf(c) >= 0) return;
					} catch (error) {
						return;
					}n.onLoad(t);
				}, p.onLoad = function (e) {
					var t = this;l.onLoad.call(t, { status: 200, result: e }), o.remove(t.form), o.remove(t.iframe), l.destroy.call(t);
				}, p.destroy = function () {
					o.remove(this.iframe), o.remove(this.form);
				}, p.abort = function () {
					var e = this;e.aborted = !0, delete u[e.key], l.abort.call(e);
				}, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}var o = n(9),
				    i = r(o),
				    a = i["default"].getGlobal(),
				    s = {},
				    c = a.name || "_parent",
				    u = [],
				    l = "MSG|",
				    p = [];s.addMsgListener = function (e) {
					u.push(e);
				};var f = function f(e) {
					for (var t = 0, n = u.length; t < n; t++) {
						try {
							u[t].call(null, e);
						} catch (e) {}
					}
				},
				    d = function () {
					var e = /^([\w]+?:\/\/.*?(?=\/|$))/i;return function (t) {
						return t = t || "", e.test(t) ? RegExp.$1 : "*";
					};
				}(),
				    m = function m() {
					var e = unescape(a.name || "").trim();if (e && 0 === e.indexOf(l)) {
						a.name = "";var t = i["default"].string2object(e.replace(l, ""), "|"),
						    n = (t.origin || "").toLowerCase();n && "*" !== n && 0 !== location.href.toLowerCase().indexOf(n) || f({ data: JSON.parse(t.data || "null"), source: a.frames[t.self] || t.self, origin: d(t.ref || document.referrer) });
					}
				},
				    y = function () {
					var e,
					    t = function t(e, _t) {
						for (var n = 0, r = e.length; n < r; n++) {
							if (e[n] === _t) return !0;
						}return !1;
					};return function () {
						if (p.length) {
							e = [];for (var n, r = p.length - 1; r >= 0; r--) {
								n = p[r], t(e, n.w) || (e.push(n.w), p.splice(r, 1), n.w.name = n.d);
							}e = null;
						}
					};
				}(),
				    h = s.startTimer = function () {
					var e = !1;return function () {
						e || (e = !0, a.postMessage || (setInterval(y, 100), setInterval(m, 20)));
					};
				}();s.postMessage = function (e) {
					var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (i["default"].fillUndef(t, { origin: "*", source: c }), a.postMessage) {
						var n = t.data;a.FormData || (n = (0, _stringify2.default)(n)), e.postMessage(n, t.origin);
					} else {
						if (h(), i["default"].isObject(t)) {
							var r = {};r.origin = t.origin || "", r.ref = location.href, r.self = t.source, r.data = (0, _stringify2.default)(t.data), t = l + i["default"].object2string(r, "|", !0);
						}p.unshift({ w: e, d: escape(t) });
					}
				}, e.exports = s;
			}, function (e, t, n) {
				"use strict";
				e.exports = n(2);
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					var t = this;t.init(), a.call(t, e);
				}var o = n(2),
				    i = n(8),
				    a = n(5),
				    s = {},
				    c = a.prototype,
				    u = r.prototype = (0, _create2.default)(c);u.init = function () {
					function e(e) {
						var t = e.data;if (0 === t.indexOf(n)) {
							t = JSON.parse(t.replace(n, ""));var r = t.key,
							    o = s[r];o && (delete s[r], t.result = decodeURIComponent(t.result || ""), o.onLoad(t));
						}
					}function t() {
						if (!r) {
							r = !0;var t = o.getGlobal();t.postMessage ? o.on(t, "message", e) : i.addMsgListener(e);
						}
					}var n = "NEJ-AJAX-DATA:",
					    r = !1;return function () {
						t();
					};
				}(), u.doSend = function () {
					var e = this,
					    t = e.options,
					    n = o.url2origin(t.url),
					    r = t.proxyUrl || n + "/res/nej_proxy_frame.html",
					    a = s[r];if (o.isArray(a)) return void a.push(e.doSend.bind(e, t));if (!a) return s[r] = [e.doSend.bind(e, t)], void o.createIframe({ src: r, onload: function onload(e) {
							var t = s[r];s[r] = o.target(e).contentWindow, t.forEach(function (e) {
								try {
									e();
								} catch (e) {}
							});
						} });if (!e.aborted) {
						var c = e.key = o.uniqueID();s[c] = e;var u = o.fetch({ method: "GET", url: "", data: null, headers: {}, timeout: 0 }, t);u.key = c, i.postMessage(a, { data: u }), e.afterSend();
					}
				}, u.abort = function () {
					var e = this;e.aborted = !0, delete s[e.key], c.abort.call(e);
				}, e.exports = r;
			}, function (e, t, n) {
				"use strict";
				var r = n(2),
				    o = n(1),
				    i = function () {
					var e = /json/i,
					    t = /post/i;return function (n, i) {
						i = i || {};var a = i.data = i.data || {},
						    s = i.headers = i.headers || {},
						    c = r.checkWithDefault(s, "Accept", "application/json"),
						    u = r.checkWithDefault(s, "Content-Type", "application/json");return e.test(c) && (i.type = "json"), t.test(i.method) && e.test(u) && (i.data = (0, _stringify2.default)(a)), o(n, i);
					};
				}();e.exports = i;
			}, function (e, t, n) {
				"use strict";
				var r = n(1),
				    o = function o(e, t) {
					return t.method = "POST", t.headers = t.headers || {}, t.headers["Content-Type"] = "multipart/form-data", t.timeout = 0, t.type = t.type || "json", r(e, t);
				};e.exports = o;
			}]);
		});
	}, function (module, exports, __webpack_require__) {
		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (module) {
			/*! Socket.IO.js build:0.9.11, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */
			var io = module.exports;window.io ? module && (module.exports = io = window.io) : window.io = io, function () {
				if (function (e, t) {
					var n = e;n.version = "0.9.11", n.protocol = 1, n.transports = [], n.j = [], n.sockets = {}, n.connect = function (e, r) {
						var o,
						    i,
						    a = n.util.parseUri(e);t && t.location && (a.protocol = a.protocol || t.location.protocol.slice(0, -1), a.host = a.host || (t.document ? t.document.domain : t.location.hostname), a.port = a.port || t.location.port), o = n.util.uniqueUri(a);var s = { host: a.host, secure: "https" == a.protocol, port: a.port || ("https" == a.protocol ? 443 : 80), query: a.query || "" };return n.util.merge(s, r), !s["force new connection"] && n.sockets[o] || (i = new n.Socket(s)), !s["force new connection"] && i && (n.sockets[o] = i), i = i || n.sockets[o], i.of(a.path.length > 1 ? a.path : "");
					};
				}(module.exports, window), function (e, t) {
					var n = e.util = {},
					    r = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
					    o = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];n.parseUri = function (e) {
						for (var t = r.exec(e || ""), n = {}, i = 14; i--;) {
							n[o[i]] = t[i] || "";
						}return n;
					}, n.uniqueUri = function (e) {
						var n = e.protocol,
						    r = e.host,
						    o = e.port;return "document" in t ? (r = r || document.domain, o = o || ("https" == n && "https:" !== document.location.protocol ? 443 : document.location.port)) : (r = r || "localhost", o || "https" != n || (o = 443)), (n || "http") + "://" + r + ":" + (o || 80);
					}, n.query = function (e, t) {
						var r = n.chunkQuery(e || ""),
						    o = [];n.merge(r, n.chunkQuery(t || ""));for (var i in r) {
							r.hasOwnProperty(i) && o.push(i + "=" + r[i]);
						}return o.length ? "?" + o.join("&") : "";
					}, n.chunkQuery = function (e) {
						for (var t, n = {}, r = e.split("&"), o = 0, i = r.length; o < i; ++o) {
							t = r[o].split("="), t[0] && (n[t[0]] = t[1]);
						}return n;
					};var i = !1;n.load = function (e) {
						return "document" in t && "complete" === document.readyState || i ? e() : void n.on(t, "load", e, !1);
					}, n.on = function (e, t, n, r) {
						e.attachEvent ? e.attachEvent("on" + t, n) : e.addEventListener && e.addEventListener(t, n, r);
					}, n.request = function (e) {
						if (e && "undefined" != typeof XDomainRequest && !n.ua.hasCORS) return new XDomainRequest();if ("undefined" != typeof XMLHttpRequest && (!e || n.ua.hasCORS)) return new XMLHttpRequest();if (!e) try {
							return new window[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
						} catch (e) {}return null;
					}, "undefined" != typeof window && n.load(function () {
						i = !0;
					}), n.defer = function (e) {
						return n.ua.webkit && "undefined" == typeof importScripts ? void n.load(function () {
							setTimeout(e, 100);
						}) : e();
					}, n.merge = function (e, t, r, o) {
						var i,
						    a = o || [],
						    s = "undefined" == typeof r ? 2 : r;for (i in t) {
							t.hasOwnProperty(i) && n.indexOf(a, i) < 0 && ("object" == (0, _typeof3.default)(e[i]) && s ? n.merge(e[i], t[i], s - 1, a) : (e[i] = t[i], a.push(t[i])));
						}return e;
					}, n.mixin = function (e, t) {
						n.merge(e.prototype, t.prototype);
					}, n.inherit = function (e, t) {
						function n() {}n.prototype = t.prototype, e.prototype = new n();
					}, n.isArray = Array.isArray || function (e) {
						return "[object Array]" === Object.prototype.toString.call(e);
					}, n.intersect = function (e, t) {
						for (var r = [], o = e.length > t.length ? e : t, i = e.length > t.length ? t : e, a = 0, s = i.length; a < s; a++) {
							~n.indexOf(o, i[a]) && r.push(i[a]);
						}return r;
					}, n.indexOf = function (e, t, n) {
						for (var r = e.length, n = n < 0 ? n + r < 0 ? 0 : n + r : n || 0; n < r && e[n] !== t; n++) {}return r <= n ? -1 : n;
					}, n.toArray = function (e) {
						for (var t = [], n = 0, r = e.length; n < r; n++) {
							t.push(e[n]);
						}return t;
					}, n.ua = {}, n.ua.hasCORS = "undefined" != typeof XMLHttpRequest && function () {
						try {
							var e = new XMLHttpRequest();
						} catch (e) {
							return !1;
						}return void 0 != e.withCredentials;
					}(), n.ua.webkit = "undefined" != typeof navigator && /webkit/i.test(navigator.userAgent), n.ua.iDevice = "undefined" != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent);
				}("undefined" != typeof io ? io : module.exports, window), function (e, t) {
					function n() {}e.EventEmitter = n, n.prototype.on = function (e, n) {
						return this.$events || (this.$events = {}), this.$events[e] ? t.util.isArray(this.$events[e]) ? this.$events[e].push(n) : this.$events[e] = [this.$events[e], n] : this.$events[e] = n, this;
					}, n.prototype.addListener = n.prototype.on, n.prototype.once = function (e, t) {
						function n() {
							r.removeListener(e, n), t.apply(this, arguments);
						}var r = this;return n.listener = t, this.on(e, n), this;
					}, n.prototype.removeListener = function (e, n) {
						if (this.$events && this.$events[e]) {
							var r = this.$events[e];if (t.util.isArray(r)) {
								for (var o = -1, i = 0, a = r.length; i < a; i++) {
									if (r[i] === n || r[i].listener && r[i].listener === n) {
										o = i;break;
									}
								}if (o < 0) return this;r.splice(o, 1), r.length || delete this.$events[e];
							} else (r === n || r.listener && r.listener === n) && delete this.$events[e];
						}return this;
					}, n.prototype.removeAllListeners = function (e) {
						return void 0 === e ? (this.$events = {}, this) : (this.$events && this.$events[e] && (this.$events[e] = null), this);
					}, n.prototype.listeners = function (e) {
						return this.$events || (this.$events = {}), this.$events[e] || (this.$events[e] = []), t.util.isArray(this.$events[e]) || (this.$events[e] = [this.$events[e]]), this.$events[e];
					}, n.prototype.emit = function (e) {
						if (!this.$events) return !1;var n = this.$events[e];if (!n) return !1;var r = Array.prototype.slice.call(arguments, 1);if ("function" == typeof n) n.apply(this, r);else {
							if (!t.util.isArray(n)) return !1;for (var o = n.slice(), i = 0, a = o.length; i < a; i++) {
								o[i].apply(this, r);
							}
						}return !0;
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (exports, nativeJSON) {
					"use strict";
					function f(e) {
						return e < 10 ? "0" + e : e;
					}function date(e, t) {
						return isFinite(e.valueOf()) ? e.getUTCFullYear() + "-" + f(e.getUTCMonth() + 1) + "-" + f(e.getUTCDate()) + "T" + f(e.getUTCHours()) + ":" + f(e.getUTCMinutes()) + ":" + f(e.getUTCSeconds()) + "Z" : null;
					}function quote(e) {
						return escapable.lastIndex = 0, escapable.test(e) ? '"' + e.replace(escapable, function (e) {
							var t = meta[e];return "string" == typeof t ? t : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
						}) + '"' : '"' + e + '"';
					}function str(e, t) {
						var n,
						    r,
						    o,
						    i,
						    a,
						    s = gap,
						    c = t[e];switch (c instanceof Date && (c = date(e)), "function" == typeof rep && (c = rep.call(t, e, c)), typeof c === "undefined" ? "undefined" : (0, _typeof3.default)(c)) {case "string":
								return quote(c);case "number":
								return isFinite(c) ? String(c) : "null";case "boolean":case "null":
								return String(c);case "object":
								if (!c) return "null";if (gap += indent, a = [], "[object Array]" === Object.prototype.toString.apply(c)) {
									for (i = c.length, n = 0; n < i; n += 1) {
										a[n] = str(n, c) || "null";
									}return o = 0 === a.length ? "[]" : gap ? "[\n" + gap + a.join(",\n" + gap) + "\n" + s + "]" : "[" + a.join(",") + "]", gap = s, o;
								}if (rep && "object" == (typeof rep === "undefined" ? "undefined" : (0, _typeof3.default)(rep))) for (i = rep.length, n = 0; n < i; n += 1) {
									"string" == typeof rep[n] && (r = rep[n], o = str(r, c), o && a.push(quote(r) + (gap ? ": " : ":") + o));
								} else for (r in c) {
									Object.prototype.hasOwnProperty.call(c, r) && (o = str(r, c), o && a.push(quote(r) + (gap ? ": " : ":") + o));
								}return o = 0 === a.length ? "{}" : gap ? "{\n" + gap + a.join(",\n" + gap) + "\n" + s + "}" : "{" + a.join(",") + "}", gap = s, o;}
					}if (nativeJSON && nativeJSON.parse) return exports.JSON = { parse: nativeJSON.parse, stringify: nativeJSON.stringify };var JSON = exports.JSON = {},
					    cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
					    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
					    gap,
					    indent,
					    meta = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" },
					    rep;JSON.stringify = function (e, t, n) {
						var r;if (gap = "", indent = "", "number" == typeof n) for (r = 0; r < n; r += 1) {
							indent += " ";
						} else "string" == typeof n && (indent = n);if (rep = t, t && "function" != typeof t && ("object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) || "number" != typeof t.length)) throw new Error("JSON.stringify");return str("", { "": e });
					}, JSON.parse = function (text, reviver) {
						function walk(e, t) {
							var n,
							    r,
							    o = e[t];if (o && "object" == (typeof o === "undefined" ? "undefined" : (0, _typeof3.default)(o))) for (n in o) {
								Object.prototype.hasOwnProperty.call(o, n) && (r = walk(o, n), void 0 !== r ? o[n] = r : delete o[n]);
							}return reviver.call(e, t, o);
						}var j;if (text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx, function (e) {
							return "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
						})), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return j = eval("(" + text + ")"), "function" == typeof reviver ? walk({ "": j }, "") : j;throw new SyntaxError("JSON.parse");
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof JSON ? JSON : void 0), function (e, t) {
					var n = e.parser = {},
					    r = n.packets = ["disconnect", "connect", "heartbeat", "message", "json", "event", "ack", "error", "noop"],
					    o = n.reasons = ["transport not supported", "client not handshaken", "unauthorized"],
					    i = n.advice = ["reconnect"],
					    a = t.JSON,
					    s = t.util.indexOf;n.encodePacket = function (e) {
						var t = s(r, e.type),
						    n = e.id || "",
						    c = e.endpoint || "",
						    u = e.ack,
						    l = null;switch (e.type) {case "error":
								var p = e.reason ? s(o, e.reason) : "",
								    f = e.advice ? s(i, e.advice) : "";"" === p && "" === f || (l = p + ("" !== f ? "+" + f : ""));break;case "message":
								"" !== e.data && (l = e.data);break;case "event":
								var d = { name: e.name };e.args && e.args.length && (d.args = e.args), l = a.stringify(d);break;case "json":
								l = a.stringify(e.data);break;case "connect":
								e.qs && (l = e.qs);break;case "ack":
								l = e.ackId + (e.args && e.args.length ? "+" + a.stringify(e.args) : "");}var m = [t, n + ("data" == u ? "+" : ""), c];return null !== l && void 0 !== l && m.push(l), m.join(":");
					}, n.encodePayload = function (e) {
						var t = "";if (1 == e.length) return e[0];for (var n = 0, r = e.length; n < r; n++) {
							var o = e[n];t += "�" + o.length + "�" + e[n];
						}return t;
					};var c = /([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/;n.decodePacket = function (e) {
						var t = e.match(c);if (!t) return {};var n = t[2] || "",
						    e = t[5] || "",
						    s = { type: r[t[1]], endpoint: t[4] || "" };switch (n && (s.id = n, t[3] ? s.ack = "data" : s.ack = !0), s.type) {case "error":
								var t = e.split("+");s.reason = o[t[0]] || "", s.advice = i[t[1]] || "";break;case "message":
								s.data = e || "";break;case "event":
								try {
									var u = a.parse(e);s.name = u.name, s.args = u.args;
								} catch (e) {}s.args = s.args || [];break;case "json":
								try {
									s.data = a.parse(e);
								} catch (e) {}break;case "connect":
								s.qs = e || "";break;case "ack":
								var t = e.match(/^([0-9]+)(\+)?(.*)/);if (t && (s.ackId = t[1], s.args = [], t[3])) try {
									s.args = t[3] ? a.parse(t[3]) : [];
								} catch (e) {}break;case "disconnect":case "heartbeat":}return s;
					}, n.decodePayload = function (e) {
						var t = function t(e, _t2) {
							for (var n = 0, r = e; r < _t2.length; r++) {
								if ("�" == _t2.charAt(r)) return n;n++;
							}return n;
						};if ("�" == e.charAt(0)) {
							for (var r = [], o = 1, i = ""; o < e.length; o++) {
								if ("�" == e.charAt(o)) {
									var a = e.substr(o + 1).substr(0, i);if ("�" != e.charAt(o + 1 + Number(i)) && o + 1 + Number(i) != e.length) {
										var s = Number(i);l = t(o + s + 1, e), a = e.substr(o + 1).substr(0, s + l), o += l;
									}r.push(n.decodePacket(a)), o += Number(i) + 1, i = "";
								} else i += e.charAt(o);
							}return r;
						}return [n.decodePacket(e)];
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t) {
					function n(e, t) {
						this.socket = e, this.sessid = t;
					}e.Transport = n, t.util.mixin(n, t.EventEmitter), n.prototype.heartbeats = function () {
						return !0;
					}, n.prototype.onData = function (e) {
						if (this !== this.socket.transport) return this;if (this.clearCloseTimeout(), (this.socket.connected || this.socket.connecting || this.socket.reconnecting) && this.setCloseTimeout(), "" !== e) {
							var n = t.parser.decodePayload(e);if (n && n.length) for (var r = 0, o = n.length; r < o; r++) {
								this.onPacket(n[r]);
							}
						}return this;
					}, n.prototype.onPacket = function (e) {
						return this.socket.setHeartbeatTimeout(), "heartbeat" == e.type ? this.onHeartbeat() : ("connect" == e.type && "" == e.endpoint && this.onConnect(), "error" == e.type && "reconnect" == e.advice && (this.isOpen = !1), this.socket.onPacket(e), this);
					}, n.prototype.setCloseTimeout = function () {
						if (!this.closeTimeout) {
							var e = this;this.closeTimeout = setTimeout(function () {
								e.onDisconnect();
							}, this.socket.closeTimeout);
						}
					}, n.prototype.onDisconnect = function () {
						return this.isOpen && this.close(), this.clearTimeouts(), this.socket.transport === this ? this.socket.onDisconnect() : this.socket.setBuffer(!1), this;
					}, n.prototype.onConnect = function () {
						return this.socket.onConnect(), this;
					}, n.prototype.clearCloseTimeout = function () {
						this.closeTimeout && (clearTimeout(this.closeTimeout), this.closeTimeout = null);
					}, n.prototype.clearTimeouts = function () {
						this.clearCloseTimeout(), this.reopenTimeout && clearTimeout(this.reopenTimeout);
					}, n.prototype.packet = function (e) {
						this.send(t.parser.encodePacket(e));
					}, n.prototype.onHeartbeat = function (e) {
						this.packet({ type: "heartbeat" });
					}, n.prototype.onOpen = function () {
						this.isOpen = !0, this.clearCloseTimeout(), this.socket.onOpen();
					}, n.prototype.onClose = function () {
						this.isOpen = !1, this.socket.transport === this ? this.socket.onClose() : this.socket.setBuffer(!1), this.onDisconnect();
					}, n.prototype.prepareUrl = function () {
						var e = this.socket.options;return this.scheme() + "://" + e.host + ":" + e.port + "/" + e.resource + "/" + t.protocol + "/" + this.name + "/" + this.sessid;
					}, n.prototype.ready = function (e, t) {
						t.call(this);
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t, n) {
					function r(e) {
						if (this.options = { port: 80, secure: !1, document: "document" in n && document, resource: "socket.io", transports: e.transports || t.transports, "connect timeout": 1e4, "try multiple transports": !0, reconnect: !0, "reconnection delay": 500, "reconnection limit": 1 / 0, "reopen delay": 3e3, "max reconnection attempts": 10, "sync disconnect on unload": !1, "auto connect": !0, "flash policy port": 10843, manualFlush: !1 }, t.util.merge(this.options, e), this.connected = !1, this.open = !1, this.connecting = !1, this.reconnecting = !1, this.namespaces = {}, this.buffer = [], this.doBuffer = !1, this.options["sync disconnect on unload"] && (!this.isXDomain() || t.util.ua.hasCORS)) {
							var r = this;t.util.on(n, "beforeunload", function () {
								r.disconnectSync();
							}, !1);
						}this.options["auto connect"] && this.connect();
					}function o() {}e.Socket = r, t.util.mixin(r, t.EventEmitter), r.prototype.of = function (e) {
						return this.namespaces[e] || (this.namespaces[e] = new t.SocketNamespace(this, e), "" !== e && this.namespaces[e].packet({ type: "connect" })), this.namespaces[e];
					}, r.prototype.publish = function () {
						this.emit.apply(this, arguments);var e;for (var t in this.namespaces) {
							this.namespaces.hasOwnProperty(t) && (e = this.of(t), e.$emit.apply(e, arguments));
						}
					}, r.prototype.handshake = function (e) {
						function n(t) {
							t instanceof Error ? (r.connecting = !1, r.onError(t.message)) : e.apply(null, t.split(":"));
						}var r = this,
						    i = this.options,
						    a = ["http" + (i.secure ? "s" : "") + ":/", i.host + ":" + i.port, i.resource, t.protocol, t.util.query(this.options.query, "t=" + +new Date())].join("/");if (this.isXDomain() && !t.util.ua.hasCORS) {
							var s = document.getElementsByTagName("script")[0],
							    c = document.createElement("script");c.src = a + "&jsonp=" + t.j.length, c.onreadystatechange = function () {
								"loaded" == this.readyState && c.parentNode && (c.parentNode.removeChild(c), r.connecting = !1, !r.reconnecting && r.onError("Server down or port not open"), r.publish("handshake_failed"));
							}, s.parentNode.insertBefore(c, s), t.j.push(function (e) {
								n(e), c.parentNode.removeChild(c);
							});
						} else {
							var u = t.util.request();u.open("GET", a, !0), this.isXDomain() && (u.withCredentials = !0), u.onreadystatechange = function () {
								4 == u.readyState && (u.onreadystatechange = o, 200 == u.status ? n(u.responseText) : 403 == u.status ? (r.onError(u.responseText), r.publish("handshake_failed")) : (r.connecting = !1, !r.reconnecting && r.onError(u.responseText), r.publish("handshake_failed")));
							}, u.send(null);
						}
					}, r.prototype.connect = function (e) {
						if (this.connecting) return this;var n = this;return n.connecting = !0, this.handshake(function (r, o, i, a) {
							n.sessionid = r, n.closeTimeout = 1e3 * i, n.heartbeatTimeout = 1e3 * o, n.transports || (n.transports = n.origTransports = a ? t.util.intersect(a.split(","), n.options.transports) : n.options.transports), n.setHeartbeatTimeout(), n.once("connect", function () {
								clearTimeout(n.connectTimeoutTimer), n.connectTimeoutTimer = null, e && "function" == typeof e && e();
							}), n.doConnect();
						}), this;
					}, r.prototype.doConnect = function () {
						var e = this;return e.transport && e.transport.clearTimeouts(), e.transport = e.getTransport(e.transports), e.transport ? void e.transport.ready(e, function () {
							e.connecting = !0, e.publish("connecting", e.transport.name), e.transport.open(), e.options["connect timeout"] && (e.connectTimeoutTimer && clearTimeout(e.connectTimeoutTimer), e.connectTimeoutTimer = setTimeout(e.tryNextTransport.bind(e), e.options["connect timeout"]));
						}) : e.publish("connect_failed");
					}, r.prototype.getTransport = function (e) {
						for (var n, r = e || this.transports, o = 0; n = r[o]; o++) {
							if (t.Transport[n] && t.Transport[n].check(this) && (!this.isXDomain() || t.Transport[n].xdomainCheck(this))) {
								var i = new t.Transport[n](this, this.sessionid);return i;
							}
						}return null;
					}, r.prototype.tryNextTransport = function () {
						var e = this;if (!e.connected && (e.connecting = !1, e.options["try multiple transports"])) {
							for (var t = e.transports; t.length > 0 && t.splice(0, 1)[0] != e.transport.name;) {}t.length ? e.doConnect() : e.publish("connect_failed");
						}
					}, r.prototype.setHeartbeatTimeout = function () {
						if (clearTimeout(this.heartbeatTimeoutTimer), !this.transport || this.transport.heartbeats()) {
							var e = this;this.heartbeatTimeoutTimer = setTimeout(function () {
								e.transport && e.transport.onClose();
							}, this.heartbeatTimeout);
						}
					}, r.prototype.packet = function (e) {
						return this.connected && !this.doBuffer ? this.transport.packet(e) : this.buffer.push(e), this;
					}, r.prototype.setBuffer = function (e) {
						this.doBuffer = e, !e && this.connected && this.buffer.length && (this.options.manualFlush || this.flushBuffer());
					}, r.prototype.flushBuffer = function () {
						this.transport.payload(this.buffer), this.buffer = [];
					}, r.prototype.disconnect = function () {
						return (this.connected || this.connecting) && (this.open && this.of("").packet({ type: "disconnect" }), this.onDisconnect("booted")), this;
					}, r.prototype.disconnectSync = function () {
						var e = t.util.request(),
						    n = ["http" + (this.options.secure ? "s" : "") + ":/", this.options.host + ":" + this.options.port, this.options.resource, t.protocol, "", this.sessionid].join("/") + "/?disconnect=1";e.open("GET", n, !1), e.send(null), this.onDisconnect("booted");
					}, r.prototype.isXDomain = function () {
						var e = n.location.port || ("https:" == n.location.protocol ? 443 : 80);return this.options.host !== n.location.hostname || this.options.port != e;
					}, r.prototype.onConnect = function () {
						this.connected || (this.connected = !0, this.connecting = !1, this.doBuffer || this.setBuffer(!1), this.emit("connect"));
					}, r.prototype.onOpen = function () {
						this.open = !0;
					}, r.prototype.onClose = function () {
						this.open = !1, clearTimeout(this.heartbeatTimeoutTimer);
					}, r.prototype.onPacket = function (e) {
						this.of(e.endpoint).onPacket(e);
					}, r.prototype.onError = function (e) {
						e && e.advice && "reconnect" === e.advice && (this.connected || this.connecting) && (this.disconnect(), this.options.reconnect && this.reconnect()), this.publish("error", e && e.reason ? e.reason : e);
					}, r.prototype.onDisconnect = function (e) {
						var t = this.connected,
						    n = this.connecting;this.connected = !1, this.connecting = !1, this.open = !1, (t || n) && (this.transport.close(), this.transport.clearTimeouts(), t && (this.publish("disconnect", e), "booted" != e && this.options.reconnect && !this.reconnecting && this.reconnect()), n && this.tryNextTransport());
					}, r.prototype.reconnect = function () {
						function e() {
							if (n.connected) {
								for (var e in n.namespaces) {
									n.namespaces.hasOwnProperty(e) && "" !== e && n.namespaces[e].packet({ type: "connect" });
								}n.publish("reconnect", n.transport.name, n.reconnectionAttempts);
							}clearTimeout(n.reconnectionTimer), n.removeListener("connect_failed", t), n.removeListener("connect", t), n.reconnecting = !1, delete n.reconnectionAttempts, delete n.reconnectionDelay, delete n.reconnectionTimer, delete n.redoTransports, n.options["try multiple transports"] = o;
						}function t() {
							if (n.reconnecting) return n.connected ? e() : n.connecting && n.reconnecting ? n.reconnectionTimer = setTimeout(t, 1e3) : void (n.reconnectionAttempts++ >= r ? n.redoTransports ? (n.publish("reconnect_failed"), e()) : (n.on("connect_failed", t), n.options["try multiple transports"] = !0, n.transports = n.origTransports, n.transport = n.getTransport(), n.redoTransports = !0, n.connect()) : (n.reconnectionDelay < i && (n.reconnectionDelay *= 2), n.connect(), n.publish("reconnecting", n.reconnectionDelay, n.reconnectionAttempts), n.reconnectionTimer = setTimeout(t, n.reconnectionDelay)));
						}this.reconnecting = !0, this.reconnectionAttempts = 0, this.reconnectionDelay = this.options["reconnection delay"];var n = this,
						    r = this.options["max reconnection attempts"],
						    o = this.options["try multiple transports"],
						    i = this.options["reconnection limit"];this.options["try multiple transports"] = !1, this.reconnectionTimer = setTimeout(t, this.reconnectionDelay), this.on("connect", t);
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t) {
					function n(e, t) {
						this.socket = e, this.name = t || "", this.flags = {}, this.json = new r(this, "json"), this.ackPackets = 0, this.acks = {};
					}function r(e, t) {
						this.namespace = e, this.name = t;
					}e.SocketNamespace = n, t.util.mixin(n, t.EventEmitter), n.prototype.$emit = t.EventEmitter.prototype.emit, n.prototype.of = function () {
						return this.socket.of.apply(this.socket, arguments);
					}, n.prototype.packet = function (e) {
						return e.endpoint = this.name, this.socket.packet(e), this.flags = {}, this;
					}, n.prototype.send = function (e, t) {
						var n = { type: this.flags.json ? "json" : "message", data: e };return "function" == typeof t && (n.id = ++this.ackPackets, n.ack = !0, this.acks[n.id] = t), this.packet(n);
					}, n.prototype.emit = function (e) {
						var t = Array.prototype.slice.call(arguments, 1),
						    n = t[t.length - 1],
						    r = { type: "event", name: e };return "function" == typeof n && (r.id = ++this.ackPackets, r.ack = "data", this.acks[r.id] = n, t = t.slice(0, t.length - 1)), r.args = t, this.packet(r);
					}, n.prototype.disconnect = function () {
						return "" === this.name ? this.socket.disconnect() : (this.packet({ type: "disconnect" }), this.$emit("disconnect")), this;
					}, n.prototype.onPacket = function (e) {
						function n() {
							r.packet({ type: "ack", args: t.util.toArray(arguments), ackId: e.id });
						}var r = this;switch (e.type) {case "connect":
								this.$emit("connect");break;case "disconnect":
								"" === this.name ? this.socket.onDisconnect(e.reason || "booted") : this.$emit("disconnect", e.reason);break;case "message":case "json":
								var o = ["message", e.data];"data" == e.ack ? o.push(n) : e.ack && this.packet({ type: "ack", ackId: e.id }), this.$emit.apply(this, o);break;case "event":
								var o = [e.name].concat(e.args);"data" == e.ack && o.push(n), this.$emit.apply(this, o);break;case "ack":
								this.acks[e.ackId] && (this.acks[e.ackId].apply(this, e.args), delete this.acks[e.ackId]);break;case "error":
								e.advice ? this.socket.onError(e) : "unauthorized" == e.reason ? this.$emit("connect_failed", e.reason) : this.$emit("error", e.reason);}
					}, r.prototype.send = function () {
						this.namespace.flags[this.name] = !0, this.namespace.send.apply(this.namespace, arguments);
					}, r.prototype.emit = function () {
						this.namespace.flags[this.name] = !0, this.namespace.emit.apply(this.namespace, arguments);
					};
				}("undefined" != typeof io ? io : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t, n) {
					function r(e) {
						t.Transport.apply(this, arguments);
					}e.websocket = r, t.util.inherit(r, t.Transport), r.prototype.name = "websocket", r.prototype.open = function () {
						var e,
						    r = t.util.query(this.socket.options.query),
						    o = this;return e || (e = n.MozWebSocket || n.WebSocket), this.websocket = new e(this.prepareUrl() + r), this.websocket.onopen = function () {
							o.onOpen(), o.socket.setBuffer(!1);
						}, this.websocket.onmessage = function (e) {
							o.onData(e.data);
						}, this.websocket.onclose = function () {
							o.socket.setBuffer(!0), o.onClose();
						}, this.websocket.onerror = function (e) {
							o.onError(e);
						}, this;
					}, t.util.ua.iDevice ? r.prototype.send = function (e) {
						var t = this;return setTimeout(function () {
							t.websocket.send(e);
						}, 0), this;
					} : r.prototype.send = function (e) {
						return this.websocket.send(e), this;
					}, r.prototype.payload = function (e) {
						for (var t = 0, n = e.length; t < n; t++) {
							this.packet(e[t]);
						}return this;
					}, r.prototype.close = function () {
						return this.websocket.close(), this;
					}, r.prototype.onError = function (e) {
						this.socket.onError(e);
					}, r.prototype.scheme = function () {
						return this.socket.options.secure ? "wss" : "ws";
					}, r.check = function () {
						return "WebSocket" in n && !("__addTask" in WebSocket) || "MozWebSocket" in n;
					}, r.xdomainCheck = function () {
						return !0;
					}, t.transports.push("websocket");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t) {
					function n() {
						t.Transport.websocket.apply(this, arguments);
					}e.flashsocket = n, t.util.inherit(n, t.Transport.websocket), n.prototype.name = "flashsocket", n.prototype.open = function () {
						var e = this,
						    n = arguments;return WebSocket.__addTask(function () {
							t.Transport.websocket.prototype.open.apply(e, n);
						}), this;
					}, n.prototype.send = function () {
						var e = this,
						    n = arguments;return WebSocket.__addTask(function () {
							t.Transport.websocket.prototype.send.apply(e, n);
						}), this;
					}, n.prototype.close = function () {
						return WebSocket.__tasks.length = 0, t.Transport.websocket.prototype.close.call(this), this;
					}, n.prototype.ready = function (e, r) {
						function o() {
							var t = e.options,
							    o = t["flash policy port"],
							    a = ["http" + (t.secure ? "s" : "") + ":/", t.host + ":" + t.port, t.resource, "static/flashsocket", "WebSocketMain" + (e.isXDomain() ? "Insecure" : "") + ".swf"];n.loaded || ("undefined" == typeof WEB_SOCKET_SWF_LOCATION && (WEB_SOCKET_SWF_LOCATION = a.join("/")), 843 !== o && WebSocket.loadFlashPolicyFile("xmlsocket://" + t.host + ":" + o), WebSocket.__initialize(), n.loaded = !0), r.call(i);
						}var i = this;return document.body ? o() : void t.util.load(o);
					}, n.check = function () {
						return !!("undefined" != typeof WebSocket && "__initialize" in WebSocket && swfobject) && swfobject.getFlashPlayerVersion().major >= 10;
					}, n.xdomainCheck = function () {
						return !0;
					}, "undefined" != typeof window && (window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = !0), t.transports.push("flashsocket");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports), "undefined" != typeof window && "undefined" != typeof window.document) var swfobject = function () {
					function e() {
						if (!H) {
							try {
								var e = R.getElementsByTagName("body")[0].appendChild(h("span"));e.parentNode.removeChild(e);
							} catch (aa) {
								return;
							}H = !0;for (var t = B.length, n = 0; n < t; n++) {
								B[n]();
							}
						}
					}function t(e) {
						H ? e() : B[B.length] = e;
					}function n(e) {
						if ((0, _typeof3.default)(F.addEventListener) != E) F.addEventListener("load", e, !1);else if ((0, _typeof3.default)(R.addEventListener) != E) R.addEventListener("load", e, !1);else if ((0, _typeof3.default)(F.attachEvent) != E) v(F, "onload", e);else if ("function" == typeof F.onload) {
							var t = F.onload;F.onload = function () {
								t(), e();
							};
						} else F.onload = e;
					}function r() {
						L ? o() : i();
					}function o() {
						var e = R.getElementsByTagName("body")[0],
						    t = h(O);t.setAttribute("type", A);var n = e.appendChild(t);if (n) {
							var r = 0;!function () {
								if ((0, _typeof3.default)(n.GetVariable) != E) {
									var o = n.GetVariable("$version");o && (o = o.split(" ")[1].split(","), K.pv = [parseInt(o[0], 10), parseInt(o[1], 10), parseInt(o[2], 10)]);
								} else if (r < 10) return r++, void setTimeout(arguments.callee, 10);e.removeChild(t), n = null, i();
							}();
						} else i();
					}function i() {
						var e = q.length;if (e > 0) for (var t = 0; t < e; t++) {
							var n = q[t].id,
							    r = q[t].callbackFn,
							    o = { success: !1, id: n };if (K.pv[0] > 0) {
								var i = y(n);if (i) if (!g(q[t].swfVersion) || K.wk && K.wk < 312) {
									if (q[t].expressInstall && s()) {
										var l = {};l.data = q[t].expressInstall, l.width = i.getAttribute("width") || "0", l.height = i.getAttribute("height") || "0", i.getAttribute("class") && (l.styleclass = i.getAttribute("class")), i.getAttribute("align") && (l.align = i.getAttribute("align"));for (var p = {}, f = i.getElementsByTagName("param"), d = f.length, m = 0; m < d; m++) {
											"movie" != f[m].getAttribute("name").toLowerCase() && (p[f[m].getAttribute("name")] = f[m].getAttribute("value"));
										}c(l, p, n, r);
									} else u(i), r && r(o);
								} else k(n, !0), r && (o.success = !0, o.ref = a(n), r(o));
							} else if (k(n, !0), r) {
								var h = a(n);h && (0, _typeof3.default)(h.SetVariable) != E && (o.success = !0, o.ref = h), r(o);
							}
						}
					}function a(e) {
						var t = null,
						    n = y(e);if (n && "OBJECT" == n.nodeName) if ((0, _typeof3.default)(n.SetVariable) != E) t = n;else {
							var r = n.getElementsByTagName(O)[0];r && (t = r);
						}return t;
					}function s() {
						return !$ && g("6.0.65") && (K.win || K.mac) && !(K.wk && K.wk < 312);
					}function c(e, t, n, r) {
						$ = !0, M = r || null, _ = { success: !1, id: n };var o = y(n);if (o) {
							"OBJECT" == o.nodeName ? (S = l(o), T = null) : (S = o, T = n), e.id = N, ((0, _typeof3.default)(e.width) == E || !/%$/.test(e.width) && parseInt(e.width, 10) < 310) && (e.width = "310"), ((0, _typeof3.default)(e.height) == E || !/%$/.test(e.height) && parseInt(e.height, 10) < 137) && (e.height = "137"), R.title = R.title.slice(0, 47) + " - Flash Player Installation";var i = K.ie && K.win ? ["Active"].concat("").join("X") : "PlugIn",
							    a = "MMredirectURL=" + F.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + i + "&MMdoctitle=" + R.title;if ((0, _typeof3.default)(t.flashvars) != E ? t.flashvars += "&" + a : t.flashvars = a, K.ie && K.win && 4 != o.readyState) {
								var s = h("div");n += "SWFObjectNew", s.setAttribute("id", n), o.parentNode.insertBefore(s, o), o.style.display = "none", function () {
									4 == o.readyState ? o.parentNode.removeChild(o) : setTimeout(arguments.callee, 10);
								}();
							}p(e, t, n);
						}
					}function u(e) {
						if (K.ie && K.win && 4 != e.readyState) {
							var t = h("div");e.parentNode.insertBefore(t, e), t.parentNode.replaceChild(l(e), t), e.style.display = "none", function () {
								4 == e.readyState ? e.parentNode.removeChild(e) : setTimeout(arguments.callee, 10);
							}();
						} else e.parentNode.replaceChild(l(e), e);
					}function l(e) {
						var t = h("div");if (K.win && K.ie) t.innerHTML = e.innerHTML;else {
							var n = e.getElementsByTagName(O)[0];if (n) {
								var r = n.childNodes;if (r) for (var o = r.length, i = 0; i < o; i++) {
									1 == r[i].nodeType && "PARAM" == r[i].nodeName || 8 == r[i].nodeType || t.appendChild(r[i].cloneNode(!0));
								}
							}
						}return t;
					}function p(e, t, n) {
						var r,
						    o = y(n);if (K.wk && K.wk < 312) return r;if (o) if ((0, _typeof3.default)(e.id) == E && (e.id = n), K.ie && K.win) {
							var i = "";for (var a in e) {
								e[a] != Object.prototype[a] && ("data" == a.toLowerCase() ? t.movie = e[a] : "styleclass" == a.toLowerCase() ? i += ' class="' + e[a] + '"' : "classid" != a.toLowerCase() && (i += " " + a + '="' + e[a] + '"'));
							}var s = "";for (var c in t) {
								t[c] != Object.prototype[c] && (s += '<param name="' + c + '" value="' + t[c] + '" />');
							}o.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + i + ">" + s + "</object>", U[U.length] = e.id, r = y(e.id);
						} else {
							var u = h(O);u.setAttribute("type", A);for (var l in e) {
								e[l] != Object.prototype[l] && ("styleclass" == l.toLowerCase() ? u.setAttribute("class", e[l]) : "classid" != l.toLowerCase() && u.setAttribute(l, e[l]));
							}for (var p in t) {
								t[p] != Object.prototype[p] && "movie" != p.toLowerCase() && f(u, p, t[p]);
							}o.parentNode.replaceChild(u, o), r = u;
						}return r;
					}function f(e, t, n) {
						var r = h("param");r.setAttribute("name", t), r.setAttribute("value", n), e.appendChild(r);
					}function d(e) {
						var t = y(e);t && "OBJECT" == t.nodeName && (K.ie && K.win ? (t.style.display = "none", function () {
							4 == t.readyState ? m(e) : setTimeout(arguments.callee, 10);
						}()) : t.parentNode.removeChild(t));
					}function m(e) {
						var t = y(e);if (t) {
							for (var n in t) {
								"function" == typeof t[n] && (t[n] = null);
							}t.parentNode.removeChild(t);
						}
					}function y(e) {
						var t = null;try {
							t = R.getElementById(e);
						} catch (Y) {}return t;
					}function h(e) {
						return R.createElement(e);
					}function v(e, t, n) {
						e.attachEvent(t, n), W[W.length] = [e, t, n];
					}function g(e) {
						var t = K.pv,
						    n = e.split(".");return n[0] = parseInt(n[0], 10), n[1] = parseInt(n[1], 10) || 0, n[2] = parseInt(n[2], 10) || 0, t[0] > n[0] || t[0] == n[0] && t[1] > n[1] || t[0] == n[0] && t[1] == n[1] && t[2] >= n[2];
					}function b(e, t, n, r) {
						if (!K.ie || !K.mac) {
							var o = R.getElementsByTagName("head")[0];if (o) {
								var i = n && "string" == typeof n ? n : "screen";if (r && (x = null, C = null), !x || C != i) {
									var a = h("style");a.setAttribute("type", "text/css"), a.setAttribute("media", i), x = o.appendChild(a), K.ie && K.win && (0, _typeof3.default)(R.styleSheets) != E && R.styleSheets.length > 0 && (x = R.styleSheets[R.styleSheets.length - 1]), C = i;
								}K.ie && K.win ? x && (0, _typeof3.default)(x.addRule) == O && x.addRule(e, t) : x && (0, _typeof3.default)(R.createTextNode) != E && x.appendChild(R.createTextNode(e + " {" + t + "}"));
							}
						}
					}function k(e, t) {
						if (X) {
							var n = t ? "visible" : "hidden";H && y(e) ? y(e).style.visibility = n : b("#" + e, "visibility:" + n);
						}
					}function w(e) {
						var t = /[\\\"<>\.;]/,
						    n = null != t.exec(e);return n && (typeof encodeURIComponent === "undefined" ? "undefined" : (0, _typeof3.default)(encodeURIComponent)) != E ? encodeURIComponent(e) : e;
					}var S,
					    T,
					    M,
					    _,
					    x,
					    C,
					    E = "undefined",
					    O = "object",
					    P = "Shockwave Flash",
					    I = "ShockwaveFlash.ShockwaveFlash",
					    A = "application/x-shockwave-flash",
					    N = "SWFObjectExprInst",
					    j = "onreadystatechange",
					    F = window,
					    R = document,
					    D = navigator,
					    L = !1,
					    B = [r],
					    q = [],
					    U = [],
					    W = [],
					    H = !1,
					    $ = !1,
					    X = !0,
					    K = function () {
						var e = (0, _typeof3.default)(R.getElementById) != E && (0, _typeof3.default)(R.getElementsByTagName) != E && (0, _typeof3.default)(R.createElement) != E,
						    t = D.userAgent.toLowerCase(),
						    n = D.platform.toLowerCase(),
						    r = n ? /win/.test(n) : /win/.test(t),
						    o = n ? /mac/.test(n) : /mac/.test(t),
						    i = !!/webkit/.test(t) && parseFloat(t.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")),
						    a = !1,
						    s = [0, 0, 0],
						    c = null;if ((0, _typeof3.default)(D.plugins) != E && (0, _typeof3.default)(D.plugins[P]) == O) c = D.plugins[P].description, !c || (0, _typeof3.default)(D.mimeTypes) != E && D.mimeTypes[A] && !D.mimeTypes[A].enabledPlugin || (L = !0, a = !1, c = c.replace(/^.*\s+(\S+\s+\S+$)/, "$1"), s[0] = parseInt(c.replace(/^(.*)\..*$/, "$1"), 10), s[1] = parseInt(c.replace(/^.*\.(.*)\s.*$/, "$1"), 10), s[2] = /[a-zA-Z]/.test(c) ? parseInt(c.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0);else if ((0, _typeof3.default)(F[["Active"].concat("Object").join("X")]) != E) try {
							var u = new window[["Active"].concat("Object").join("X")](I);u && (c = u.GetVariable("$version"), c && (a = !0, c = c.split(" ")[1].split(","), s = [parseInt(c[0], 10), parseInt(c[1], 10), parseInt(c[2], 10)]));
						} catch (Z) {}return { w3: e, pv: s, wk: i, ie: a, win: r, mac: o };
					}();(function () {
						K.w3 && (((0, _typeof3.default)(R.readyState) != E && "complete" == R.readyState || (0, _typeof3.default)(R.readyState) == E && (R.getElementsByTagName("body")[0] || R.body)) && e(), H || ((0, _typeof3.default)(R.addEventListener) != E && R.addEventListener("DOMContentLoaded", e, !1), K.ie && K.win && (R.attachEvent(j, function () {
							"complete" == R.readyState && (R.detachEvent(j, arguments.callee), e());
						}), F == top && !function () {
							if (!H) {
								try {
									R.documentElement.doScroll("left");
								} catch (X) {
									return void setTimeout(arguments.callee, 0);
								}e();
							}
						}()), K.wk && !function () {
							if (!H) return (/loaded|complete/.test(R.readyState) ? void e() : void setTimeout(arguments.callee, 0)
							);
						}(), n(e)));
					})(), function () {
						K.ie && K.win && window.attachEvent("onunload", function () {
							for (var e = W.length, t = 0; t < e; t++) {
								W[t][0].detachEvent(W[t][1], W[t][2]);
							}for (var n = U.length, r = 0; r < n; r++) {
								d(U[r]);
							}for (var o in K) {
								K[o] = null;
							}K = null;for (var i in swfobject) {
								swfobject[i] = null;
							}swfobject = null;
						});
					}();return { registerObject: function registerObject(e, t, n, r) {
							if (K.w3 && e && t) {
								var o = {};o.id = e, o.swfVersion = t, o.expressInstall = n, o.callbackFn = r, q[q.length] = o, k(e, !1);
							} else r && r({ success: !1, id: e });
						}, getObjectById: function getObjectById(e) {
							if (K.w3) return a(e);
						}, embedSWF: function embedSWF(e, n, r, o, i, a, u, l, f, d) {
							var m = { success: !1, id: n };K.w3 && !(K.wk && K.wk < 312) && e && n && r && o && i ? (k(n, !1), t(function () {
								r += "", o += "";var t = {};if (f && (typeof f === "undefined" ? "undefined" : (0, _typeof3.default)(f)) === O) for (var y in f) {
									t[y] = f[y];
								}t.data = e, t.width = r, t.height = o;var h = {};if (l && (typeof l === "undefined" ? "undefined" : (0, _typeof3.default)(l)) === O) for (var v in l) {
									h[v] = l[v];
								}if (u && (typeof u === "undefined" ? "undefined" : (0, _typeof3.default)(u)) === O) for (var b in u) {
									(0, _typeof3.default)(h.flashvars) != E ? h.flashvars += "&" + b + "=" + u[b] : h.flashvars = b + "=" + u[b];
								}if (g(i)) {
									var w = p(t, h, n);t.id == n && k(n, !0), m.success = !0, m.ref = w;
								} else {
									if (a && s()) return t.data = a, void c(t, h, n, d);k(n, !0);
								}d && d(m);
							})) : d && d(m);
						}, switchOffAutoHideShow: function switchOffAutoHideShow() {
							X = !1;
						}, ua: K, getFlashPlayerVersion: function getFlashPlayerVersion() {
							return { major: K.pv[0], minor: K.pv[1], release: K.pv[2] };
						}, hasFlashPlayerVersion: g, createSWF: function createSWF(e, t, n) {
							return K.w3 ? p(e, t, n) : void 0;
						}, showExpressInstall: function showExpressInstall(e, t, n, r) {
							K.w3 && s() && c(e, t, n, r);
						}, removeSWF: function removeSWF(e) {
							K.w3 && d(e);
						}, createCSS: function createCSS(e, t, n, r) {
							K.w3 && b(e, t, n, r);
						}, addDomLoadEvent: t, addLoadEvent: n, getQueryParamValue: function getQueryParamValue(e) {
							var t = R.location.search || R.location.hash;if (t) {
								if (/\?/.test(t) && (t = t.split("?")[1]), null == e) return w(t);for (var n = t.split("&"), r = 0; r < n.length; r++) {
									if (n[r].substring(0, n[r].indexOf("=")) == e) return w(n[r].substring(n[r].indexOf("=") + 1));
								}
							}return "";
						}, expressInstallCallback: function expressInstallCallback() {
							if ($) {
								var e = y(N);e && S && (e.parentNode.replaceChild(S, e), T && (k(T, !0), K.ie && K.win && (S.style.display = "block")), M && M(_)), $ = !1;
							}
						} };
				}();!function () {
					if ("undefined" != typeof window && !window.WebSocket) {
						var e = window.console;if (e && e.log && e.error || (e = { log: function log() {}, error: function error() {} }), !swfobject.hasFlashPlayerVersion("10.0.0")) return void e.error("Flash Player >= 10.0.0 is required.");"file:" == location.protocol && e.error("WARNING: web-socket-js doesn't work in file:///... URL unless you set Flash Security Settings properly. Open the page via Web server i.e. http://..."), WebSocket = function (_WebSocket) {
							function WebSocket(_x, _x2, _x3, _x4, _x5) {
								return _WebSocket.apply(this, arguments);
							}

							WebSocket.toString = function () {
								return _WebSocket.toString();
							};

							return WebSocket;
						}(function (e, t, n, r, o) {
							var i = this;i.__id = WebSocket.__nextId++, WebSocket.__instances[i.__id] = i, i.readyState = WebSocket.CONNECTING, i.bufferedAmount = 0, i.__events = {}, t ? "string" == typeof t && (t = [t]) : t = [], setTimeout(function () {
								WebSocket.__addTask(function () {
									WebSocket.__flash.create(i.__id, e, t, n || null, r || 0, o || null);
								});
							}, 0);
						}), WebSocket.prototype.send = function (e) {
							if (this.readyState == WebSocket.CONNECTING) throw "INVALID_STATE_ERR: Web Socket connection has not been established";var t = WebSocket.__flash.send(this.__id, encodeURIComponent(e));return t < 0 || (this.bufferedAmount += t, !1);
						}, WebSocket.prototype.close = function () {
							this.readyState != WebSocket.CLOSED && this.readyState != WebSocket.CLOSING && (this.readyState = WebSocket.CLOSING, WebSocket.__flash.close(this.__id));
						}, WebSocket.prototype.addEventListener = function (e, t, n) {
							e in this.__events || (this.__events[e] = []), this.__events[e].push(t);
						}, WebSocket.prototype.removeEventListener = function (e, t, n) {
							if (e in this.__events) for (var r = this.__events[e], o = r.length - 1; o >= 0; --o) {
								if (r[o] === t) {
									r.splice(o, 1);break;
								}
							}
						}, WebSocket.prototype.dispatchEvent = function (e) {
							for (var t = this.__events[e.type] || [], n = 0; n < t.length; ++n) {
								t[n](e);
							}var r = this["on" + e.type];r && r(e);
						}, WebSocket.prototype.__handleEvent = function (e) {
							"readyState" in e && (this.readyState = e.readyState), "protocol" in e && (this.protocol = e.protocol);var t;if ("open" == e.type || "error" == e.type) t = this.__createSimpleEvent(e.type);else if ("close" == e.type) t = this.__createSimpleEvent("close");else {
								if ("message" != e.type) throw "unknown event type: " + e.type;var n = decodeURIComponent(e.message);t = this.__createMessageEvent("message", n);
							}this.dispatchEvent(t);
						}, WebSocket.prototype.__createSimpleEvent = function (e) {
							if (document.createEvent && window.Event) {
								var t = document.createEvent("Event");return t.initEvent(e, !1, !1), t;
							}return { type: e, bubbles: !1, cancelable: !1 };
						}, WebSocket.prototype.__createMessageEvent = function (e, t) {
							if (document.createEvent && window.MessageEvent && !window.opera) {
								var n = document.createEvent("MessageEvent");return n.initMessageEvent("message", !1, !1, t, null, null, window, null), n;
							}return { type: e, data: t, bubbles: !1, cancelable: !1 };
						}, WebSocket.CONNECTING = 0, WebSocket.OPEN = 1, WebSocket.CLOSING = 2, WebSocket.CLOSED = 3, WebSocket.__flash = null, WebSocket.__instances = {}, WebSocket.__tasks = [], WebSocket.__nextId = 0, WebSocket.loadFlashPolicyFile = function (e) {
							WebSocket.__addTask(function () {
								WebSocket.__flash.loadManualPolicyFile(e);
							});
						}, WebSocket.__initialize = function () {
							if (!WebSocket.__flash) {
								if (WebSocket.__swfLocation && (window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation), !window.WEB_SOCKET_SWF_LOCATION) return void e.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");var t = document.createElement("div");t.id = "webSocketContainer", t.style.position = "absolute", WebSocket.__isFlashLite() ? (t.style.left = "0px", t.style.top = "0px") : (t.style.left = "-100px", t.style.top = "-100px");var n = document.createElement("div");n.id = "webSocketFlash", t.appendChild(n), document.body.appendChild(t), swfobject.embedSWF(WEB_SOCKET_SWF_LOCATION, "webSocketFlash", "1", "1", "10.0.0", null, null, { hasPriority: !0, swliveconnect: !0, allowScriptAccess: "always" }, null, function (t) {
									t.success || e.error("[WebSocket] swfobject.embedSWF failed");
								});
							}
						}, WebSocket.__onFlashInitialized = function () {
							setTimeout(function () {
								WebSocket.__flash = document.getElementById("webSocketFlash"), WebSocket.__flash.setCallerUrl(location.href), WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);for (var e = 0; e < WebSocket.__tasks.length; ++e) {
									WebSocket.__tasks[e]();
								}WebSocket.__tasks = [];
							}, 0);
						}, WebSocket.__onFlashEvent = function () {
							return setTimeout(function () {
								try {
									for (var t = WebSocket.__flash.receiveEvents(), n = 0; n < t.length; ++n) {
										WebSocket.__instances[t[n].webSocketId].__handleEvent(t[n]);
									}
								} catch (e) {
									e.error(e);
								}
							}, 0), !0;
						};var t = function t() {
							var e = function e(_e, t) {
								t = t || 2;for (var n = "" + _e; n.length < t;) {
									n = "0" + n;
								}return n;
							},
							    t = new Date(),
							    n = t.getFullYear() + "-" + e(t.getMonth() + 1) + "-" + e(t.getDate()) + " " + e(t.getHours()) + ":" + e(t.getMinutes()) + ":" + e(t.getSeconds()) + ":" + e(t.getMilliseconds(), 3);return n;
						};WebSocket.__log = function (n) {
							e.log(t(), decodeURIComponent(n));
						}, WebSocket.__error = function (n) {
							e.error(t(), decodeURIComponent(n));
						}, WebSocket.__addTask = function (e) {
							WebSocket.__flash ? e() : WebSocket.__tasks.push(e);
						}, WebSocket.__isFlashLite = function () {
							if (!window.navigator || !window.navigator.mimeTypes) return !1;var e = window.navigator.mimeTypes["application/x-shockwave-flash"];return !!(e && e.enabledPlugin && e.enabledPlugin.filename) && !!e.enabledPlugin.filename.match(/flashlite/i);
						}, window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION || (window.addEventListener ? window.addEventListener("load", function () {
							WebSocket.__initialize();
						}, !1) : window.attachEvent("onload", function () {
							WebSocket.__initialize();
						}));
					}
				}(), function (e, t, n) {
					function r(e) {
						e && (t.Transport.apply(this, arguments), this.sendBuffer = []);
					}function o() {}e.XHR = r, t.util.inherit(r, t.Transport), r.prototype.open = function () {
						return this.socket.setBuffer(!1), this.onOpen(), this.get(), this.setCloseTimeout(), this;
					}, r.prototype.payload = function (e) {
						for (var n = [], r = 0, o = e.length; r < o; r++) {
							n.push(t.parser.encodePacket(e[r]));
						}this.send(t.parser.encodePayload(n));
					}, r.prototype.send = function (e) {
						return this.post(e), this;
					}, r.prototype.post = function (e) {
						function t() {
							4 == this.readyState && (this.onreadystatechange = o, i.posting = !1, 200 == this.status ? i.socket.setBuffer(!1) : i.onClose());
						}function r() {
							this.onload = o, i.socket.setBuffer(!1);
						}var i = this;this.socket.setBuffer(!0), this.sendXHR = this.request("POST"), n.XDomainRequest && this.sendXHR instanceof XDomainRequest ? this.sendXHR.onload = this.sendXHR.onerror = r : this.sendXHR.onreadystatechange = t, this.sendXHR.send(e);
					}, r.prototype.close = function () {
						return this.onClose(), this;
					}, r.prototype.request = function (e) {
						var n = t.util.request(this.socket.isXDomain()),
						    r = t.util.query(this.socket.options.query, "t=" + +new Date());if (n.open(e || "GET", this.prepareUrl() + r, !0), "POST" == e) try {
							n.setRequestHeader ? n.setRequestHeader("Content-type", "text/plain;charset=UTF-8") : n.contentType = "text/plain";
						} catch (e) {}return n;
					}, r.prototype.scheme = function () {
						return this.socket.options.secure ? "https" : "http";
					}, r.check = function (e, r) {
						try {
							var o = t.util.request(r),
							    i = n.XDomainRequest && o instanceof XDomainRequest,
							    a = e && e.options && e.options.secure ? "https:" : "http:",
							    s = n.location && a != n.location.protocol;if (o && (!i || !s)) return !0;
						} catch (e) {}return !1;
					}, r.xdomainCheck = function (e) {
						return r.check(e, !0);
					};
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t) {
					function n(e) {
						t.Transport.XHR.apply(this, arguments);
					}e.htmlfile = n, t.util.inherit(n, t.Transport.XHR), n.prototype.name = "htmlfile", n.prototype.get = function () {
						this.doc = new window[["Active"].concat("Object").join("X")]("htmlfile"), this.doc.open(), this.doc.write("<html></html>"), this.doc.close(), this.doc.parentWindow.s = this;var e = this.doc.createElement("div");e.className = "socketio", this.doc.body.appendChild(e), this.iframe = this.doc.createElement("iframe"), e.appendChild(this.iframe);var n = this,
						    r = t.util.query(this.socket.options.query, "t=" + +new Date());this.iframe.src = this.prepareUrl() + r, t.util.on(window, "unload", function () {
							n.destroy();
						});
					}, n.prototype._ = function (e, t) {
						this.onData(e);try {
							var n = t.getElementsByTagName("script")[0];n.parentNode.removeChild(n);
						} catch (e) {}
					}, n.prototype.destroy = function () {
						if (this.iframe) {
							try {
								this.iframe.src = "about:blank";
							} catch (e) {}this.doc = null, this.iframe.parentNode.removeChild(this.iframe), this.iframe = null, CollectGarbage();
						}
					}, n.prototype.close = function () {
						return this.destroy(), t.Transport.XHR.prototype.close.call(this);
					}, n.check = function (e) {
						if ("undefined" != typeof window && ["Active"].concat("Object").join("X") in window) try {
							var n = new window[["Active"].concat("Object").join("X")]("htmlfile");return n && t.Transport.XHR.check(e);
						} catch (e) {}return !1;
					}, n.xdomainCheck = function () {
						return !1;
					}, t.transports.push("htmlfile");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports), function (e, t, n) {
					function r() {
						t.Transport.XHR.apply(this, arguments);
					}function o() {}e["xhr-polling"] = r, t.util.inherit(r, t.Transport.XHR), t.util.merge(r, t.Transport.XHR), r.prototype.name = "xhr-polling", r.prototype.heartbeats = function () {
						return !1;
					}, r.prototype.open = function () {
						var e = this;return t.Transport.XHR.prototype.open.call(e), !1;
					}, r.prototype.get = function () {
						function e() {
							4 == this.readyState && (this.onreadystatechange = o, 200 == this.status ? (i.onData(this.responseText), i.get()) : i.onClose());
						}function t() {
							this.onload = o, this.onerror = o, i.retryCounter = 1, i.onData(this.responseText), i.get();
						}function r() {
							i.retryCounter++, !i.retryCounter || i.retryCounter > 3 ? i.onClose() : i.get();
						}if (this.isOpen) {
							var i = this;this.xhr = this.request(), n.XDomainRequest && this.xhr instanceof XDomainRequest ? (this.xhr.onload = t, this.xhr.onerror = r) : this.xhr.onreadystatechange = e, this.xhr.send(null);
						}
					}, r.prototype.onClose = function () {
						if (t.Transport.XHR.prototype.onClose.call(this), this.xhr) {
							this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = o;try {
								this.xhr.abort();
							} catch (e) {}this.xhr = null;
						}
					}, r.prototype.ready = function (e, n) {
						var r = this;t.util.defer(function () {
							n.call(r);
						});
					}, t.transports.push("xhr-polling");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), function (e, t, n) {
					function r(e) {
						t.Transport["xhr-polling"].apply(this, arguments), this.index = t.j.length;var n = this;t.j.push(function (e) {
							n._(e);
						});
					}var o = n.document && "MozAppearance" in n.document.documentElement.style;e["jsonp-polling"] = r, t.util.inherit(r, t.Transport["xhr-polling"]), r.prototype.name = "jsonp-polling", r.prototype.post = function (e) {
						function n() {
							r(), o.socket.setBuffer(!1);
						}function r() {
							o.iframe && o.form.removeChild(o.iframe);try {
								a = document.createElement('<iframe name="' + o.iframeId + '">');
							} catch (e) {
								a = document.createElement("iframe"), a.name = o.iframeId;
							}a.id = o.iframeId, o.form.appendChild(a), o.iframe = a;
						}var o = this,
						    i = t.util.query(this.socket.options.query, "t=" + +new Date() + "&i=" + this.index);if (!this.form) {
							var a,
							    s = document.createElement("form"),
							    c = document.createElement("textarea"),
							    u = this.iframeId = "socketio_iframe_" + this.index;s.className = "socketio", s.style.position = "absolute", s.style.top = "0px", s.style.left = "0px", s.style.display = "none", s.target = u, s.method = "POST", s.setAttribute("accept-charset", "utf-8"), c.name = "d", s.appendChild(c), document.body.appendChild(s), this.form = s, this.area = c;
						}this.form.action = this.prepareUrl() + i, r(), this.area.value = t.JSON.stringify(e);try {
							this.form.submit();
						} catch (e) {}this.iframe.attachEvent ? a.onreadystatechange = function () {
							"complete" == o.iframe.readyState && n();
						} : this.iframe.onload = n, this.socket.setBuffer(!0);
					}, r.prototype.get = function () {
						var e = this,
						    n = document.createElement("script"),
						    r = t.util.query(this.socket.options.query, "t=" + +new Date() + "&i=" + this.index);this.script && (this.script.parentNode.removeChild(this.script), this.script = null), n.async = !0, n.src = this.prepareUrl() + r, n.onerror = function () {
							e.onClose();
						};var i = document.getElementsByTagName("script")[0];i.parentNode.insertBefore(n, i), this.script = n, o && setTimeout(function () {
							var e = document.createElement("iframe");document.body.appendChild(e), document.body.removeChild(e);
						}, 100);
					}, r.prototype._ = function (e) {
						return this.onData(e), this.isOpen && this.get(), this;
					}, r.prototype.ready = function (e, n) {
						var r = this;return o ? void t.util.load(function () {
							n.call(r);
						}) : n.call(this);
					}, r.check = function () {
						return "document" in n;
					}, r.xdomainCheck = function () {
						return !0;
					}, t.transports.push("jsonp-polling");
				}("undefined" != typeof io ? io.Transport : module.exports, "undefined" != typeof io ? io : module.parent.exports, window), __WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
					return io;
				}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), !(void 0 !== __WEBPACK_AMD_DEFINE_RESULT__ && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			}();
		}).call(exports, __webpack_require__(40)(module));
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			return e && e.__esModule ? e : { "default": e };
		}function o() {}var i = n(9),
		    a = r(i),
		    s = a["default"].clientTypeMap;o.reverse = function (e) {
			var t = e;return t.type = s[t.type], t;
		}, o.reverseType = function (e) {
			return s[e] || e;
		}, e.exports = o;
	},,,, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;i.verifyOptions(e, "appKey account token chatroomId chatroomAddresses"), i.verifyParamType("chatroomAddresses", e.chatroomAddresses, "array"), i.verifyCallback(e, "onconnect onerror onwillreconnect ondisconnect onmsg onmsgs"), o.call(t, e);
		}var o = n(10),
		    i = n(1),
		    a = i.undef,
		    s = i.notundef,
		    c = n(6),
		    u = n(14).getInstance("Chatroom"),
		    l = n(57),
		    p = n(44),
		    f = o.fn,
		    d = r.fn = r.prototype = (0, _create2.default)(f);d.init = function () {
			var e = this;f.init.call(e), e.parser = u, e.syncResult = {}, e.timetags = {}, e.msgBuffer = [];
		}, d.reset = function () {
			var e = this;f.reset.call(e);var t = e.options;a(t.msgBufferInterval) && (t.msgBufferInterval = 300), i.verifyParamType("msgBufferInterval", t.msgBufferInterval, "number"), a(t.msgBufferSize) && (t.msgBufferSize = 500), i.verifyParamType("msgBufferSize", t.msgBufferSize, "number"), s(t.chatroomAddresses) && (e.socketUrls = t.chatroomAddresses.map(function (t) {
				return c.formatSocketUrl({ url: t, secure: e.options.secure });
			}), e.socketUrlsBackup = e.socketUrls.slice(0));
		}, d.processChatroom = function (e) {
			var t = this;switch (e.cmd) {case "login":
					e.error || (e.obj = { chatroom: l.reverse(e.content.chatroom), member: p.reverse(e.content.chatroomMember) });break;case "kicked":
					t.onKicked(e);break;case "logout":
					break;case "sendMsg":
					t.onSendMsg(e);break;case "msg":
					t.onMsg(e);break;case "getChatroomMembers":
					t.onChatroomMembers(e);break;case "getHistoryMsgs":
					t.onHistoryMsgs(e);break;case "markChatroomMember":
					t.onMarkChatroomMember(e);break;case "closeChatroom":
					break;case "getChatroom":
					t.onChatroom(e);break;case "updateChatroom":
					break;case "updateMyChatroomMemberInfo":
					delete e.obj.chatroomMember;break;case "getChatroomMembersInfo":
					t.onChatroomMembersInfo(e);break;case "kickChatroomMember":
					break;case "updateChatroomMemberTempMute":
					break;case "queueList":
					e.error || (e.obj = e.content);}
		}, d.onChatroom = function (e) {
			e.error || (e.obj.chatroom = l.reverse(e.content.chatroom));
		}, e.exports = r, n(138), n(137), n(140), n(139);
	}, function (e, t) {
		"use strict";
		var n = t.createUniqueKey = "undefined" != typeof _symbol2.default ? _symbol2.default : function (e) {
			return "[[" + e + "_" + Math.random().toFixed(8).slice(2) + "]]";
		};t.LISTENERS = n("listeners"), t.CAPTURE = 1, t.BUBBLE = 2, t.ATTRIBUTE = 3, t.newNode = function (e, t) {
			return { listener: e, kind: t, next: null };
		};
	}, function (e, t) {
		"use strict";
		function n(e) {
			if (null === e || void 0 === e) throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e);
		}function r() {
			try {
				if (!_assign2.default) return !1;var e = new String("abc");if (e[5] = "de", "5" === (0, _getOwnPropertyNames2.default)(e)[0]) return !1;for (var t = {}, n = 0; n < 10; n++) {
					t["_" + String.fromCharCode(n)] = n;
				}var r = (0, _getOwnPropertyNames2.default)(t).map(function (e) {
					return t[e];
				});if ("0123456789" !== r.join("")) return !1;var o = {};return "abcdefghijklmnopqrst".split("").forEach(function (e) {
					o[e] = e;
				}), "abcdefghijklmnopqrst" === (0, _keys2.default)((0, _assign2.default)({}, o)).join("");
			} catch (e) {
				return !1;
			}
		}var o = Object.prototype.hasOwnProperty,
		    i = Object.prototype.propertyIsEnumerable;e.exports = r() ? _assign2.default : function (e, t) {
			for (var r, a, s = n(e), c = 1; c < arguments.length; c++) {
				r = Object(arguments[c]);for (var u in r) {
					o.call(r, u) && (s[u] = r[u]);
				}if (_getOwnPropertySymbols2.default) {
					a = (0, _getOwnPropertySymbols2.default)(r);for (var l = 0; l < a.length; l++) {
						i.call(r, a[l]) && (s[a[l]] = r[a[l]]);
					}
				}
			}return s;
		};
	}, function (e, t) {
		function n(e, t) {
			for (var n = t.split("."); n.length;) {
				var r = n.shift(),
				    o = !1;if ("?" == r[r.length - 1] && (r = r.slice(0, -1), o = !0), e = e[r], !e && o) return e;
			}return e;
		}e.exports = n;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;return t.subType = "chatroom", e.Protocol = i, e.Message = c, e.constructor = r, t.init(e);
		}var o = n(7),
		    i = n(22),
		    a = n(6),
		    s = n(57),
		    c = n(120),
		    u = n(1),
		    l = u.verifyOptions,
		    p = u.verifyParamType,
		    f = n(14).getInstance("Chatroom");r.Protocol = i, r.parser = f, r.use = o.use, r.getInstance = o.getInstance, r.genInstanceName = function (e) {
			return u.verifyOptions(e, "chatroomId"), "Chatroom-account-" + e.account + "-chatroomId-" + e.chatroomId;
		};var d = r.fn = r.prototype = (0, _create2.default)(o.prototype);r.info = d.info = a.info, d.getChatroom = function (e) {
			var t = this;t.processCallback(e), t.sendCmd("getChatroom", e);
		}, d.updateChatroom = function (e) {
			l(e, "chatroom needNotify"), p("needNotify", e.needNotify, "boolean"), this.processCustom(e), this.processCallback(e), e.chatroom = new s(e.chatroom), this.sendCmd("updateChatroom", e);
		}, d.closeChatroom = function (e) {
			var t = this;t.processCustom(e), t.processCallback(e), t.sendCmd("closeChatroom", e);
		}, e.exports = r, n(86), n(85), n(87);
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			switch (i.notundef(e.type) ? i.verifyFileType(e.type) : e.type = "file", i.verifyOptions(e, "file"), i.verifyOptions(e.file, "url ext size md5", !0, "file."), e.type) {case "image":
					a.verifyFile(e.file);break;case "audio":
					s.verifyFile(e.file);break;case "video":
					c.verifyFile(e.file);}o.call(this, e), this.attach = (0, _stringify2.default)(e.file);
		}var o = n(12),
		    i = n(1);r.prototype = (0, _create2.default)(o.prototype), r.reverse = function (e) {
			var t = o.reverse(e);return e.attach = e.attach ? "" + e.attach : "", t.file = e.attach ? JSON.parse(e.attach) : {}, "audio" === t.type && (t.file.mp3Url = t.file.url + "?audioTrans&type=mp3"), t;
		}, e.exports = r;var a = n(119),
		    s = n(116),
		    c = n(124);
	},,, function (e, t) {
		"use strict";
		function n(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}var r = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
			return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		} : function (e) {
			return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		},
		    o = function () {
			function e() {
				n(this, e), this._entries = [];
			}return e.prototype.append = function (e, t) {
				if ("string" != typeof e) throw new TypeError("FormData name must be a string");if ("string" != typeof t && ("object" !== ("undefined" == typeof t ? "undefined" : r(t)) || "string" != typeof t.uri)) throw new TypeError("FormData value must be a string or { uri: tempFilePath }");this._entries.push([e, t]);
			}, e.prototype.set = function (e, t) {
				var n = this.get(e);n ? n[1] = t : this.append(e, t);
			}, e.prototype["delete"] = function (e) {
				this._entries = this._entries.filter(function (t) {
					return t[0] !== e;
				});
			}, e.prototype.entries = function () {
				return this._entries;
			}, e.prototype.get = function (e) {
				return this._entries.find(function (t) {
					return t[0] === e;
				});
			}, e.prototype.getAll = function (e) {
				return this._entries.filter(function (t) {
					return t[0] === e;
				});
			}, e.prototype.has = function (e) {
				return this._entries.some(function (t) {
					return t[0] === e;
				});
			}, e.prototype.keys = function () {
				return this._entries.map(function (e) {
					return e[0];
				});
			}, e.prototype.values = function () {
				return this._entries.map(function (e) {
					return e[1];
				});
			}, e;
		}();e.exports = o;
	}, function (e, t) {
		"use strict";
		function n(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}var r = function () {
			function e() {
				n(this, e);
			}return e.prototype.getItem = function (e) {
				return wx.getStorageSync(e);
			}, e.prototype.setItem = function (e, t) {
				return wx.setStorageSync(e, t);
			}, e.prototype.removeItem = function (e) {
				return this.setItem(e, "");
			}, e.prototype.clear = function () {
				return wx.clearStorageSync();
			}, e;
		}();e.exports = new r();
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}function o(e, t) {
			if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && "function" != typeof t ? e : t;
		}function i(e, t) {
			if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)));e.prototype = (0, _create2.default)(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(e, t) : e.__proto__ = t);
		}var a = function () {
			function e(e, t) {
				for (var n = 0; n < t.length; n++) {
					var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), (0, _defineProperty2.default)(e, r.key, r);
				}
			}return function (t, n, r) {
				return n && e(t.prototype, n), r && e(t, r), t;
			};
		}(),
		    s = n(37),
		    c = n(24),
		    u = 0,
		    l = 1,
		    p = 2,
		    f = 3,
		    d = ["open", "error", "message", "close"],
		    m = void 0;wx.onSocketOpen(function (e) {
			m && (m._readyState = l, m.dispatchEvent({ type: "open" }));
		}), wx.onSocketError(function (e) {
			m && (m._readyState = f, m.dispatchEvent(e));
		}), wx.onSocketMessage(function (e) {
			if (m) {
				var t = e.data,
				    n = e.origin,
				    r = e.ports,
				    o = e.source;m.dispatchEvent({ data: t, origin: n, ports: r, source: o, type: "message" });
			}
		}), wx.onSocketClose(function (e) {
			if (m) {
				m._readyState = f;var t = e.code,
				    n = e.reason,
				    r = e.wasClean;console && void 0, console && void 0, console && void 0, m.dispatchEvent({ code: t, reason: n, wasClean: r, type: "close" }), m = null;
			}
		});var y = function (e) {
			function t(n, i) {
				if (r(this, t), !n) throw new TypeError("Failed to construct 'WebSocket': url required");if (i) throw new Error("subprotocal not supported in weapp");var a = o(this, e.call(this));return n = n.replace(/:\d+/, ""), a._url = n, a._protocal = "", a._readyState = u, m && m.dispatchEvent({ type: "close" }), m = a, wx.connectSocket({ url: n }), a;
			}return i(t, e), t.prototype.close = function () {
				this.readyState === u, wx.closeSocket();
			}, t.prototype.send = function (e) {
				if (this.readyState !== l) throw new Error("INVALID_STATE_ERR");if ("string" != typeof e) throw new TypeError("only string typed data are supported");wx.sendSocketMessage({ data: e });
			}, a(t, [{ key: "url", get: function get() {
					return this._url;
				} }, { key: "protocal", get: function get() {
					return this._protocal;
				} }, { key: "readyState", get: function get() {
					return this._readyState;
				} }]), t;
		}(s(d));c(y, { CONNECTING: u, OPEN: l, CLOSING: p, CLOSED: f }), e.exports = y;
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
		}function o(e, t) {
			if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)) && "function" != typeof t ? e : t;
		}function i(e, t) {
			if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t)));e.prototype = (0, _create2.default)(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(e, t) : e.__proto__ = t);
		}function a(e) {
			this.status = e.statusCode, this.statusText = e.statusCode;var t = e.data;"string" != typeof t && (t = (0, _stringify2.default)(t)), this.responseText = this.response = t, this.readyState = m, this.dispatchEvent({ type: "readystatechange" });
		}var s = n(37),
		    c = n(30),
		    u = n(24),
		    l = 0,
		    p = 1,
		    f = 2,
		    d = 3,
		    m = 4,
		    y = ["abort", "error", "load", "loadstart", "progress", "timeout", "loadend", "readystatechange"],
		    h = function (e) {
			function t() {
				r(this, t);var n = o(this, e.call(this));return n.withCredentials = !0, n.readyState = l, n._headers = {}, n;
			}return i(t, e), t.prototype.abort = function () {}, t.prototype.getAllResponseHeaders = function () {
				return "";
			}, t.prototype.getResponseHeader = function (e) {
				return "content-type" === e ? "application/json" : "";
			}, t.prototype.overrideMimeType = function () {
				throw new Error("not supported in weapp");
			}, t.prototype.open = function (e, t) {
				var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];if (this.readyState !== l) throw new Error("request is already opened");if (!n) throw new Error("sync request is not supported");this._method = e, t = t.replace(/:\d+/, ""), this._url = t, this.readyState = p, this.dispatchEvent({ type: "readystatechange" });
			}, t.prototype.setRequestHeader = function (e, t) {
				if (this.readyState !== p) throw new Error("request is not opened");this._headers[e.toLowerCase()] = t;
			}, t.prototype.send = function (e) {
				var t = this;if (this.readyState !== p) throw new Error("request is not opened");if (e instanceof c) {
					var n = e.entries(),
					    r = n.filter(function (e) {
						return "string" != typeof e[1];
					});if (0 === r.length) throw new Error("Must specify a Blob field in FormData");r.length > 1;var o = n.filter(function (e) {
						return "string" == typeof e[1];
					}).reduce(function (e, t) {
						var n;return u(e, (n = {}, n[t[0]] = t[1], n));
					}, {});wx.uploadFile({ url: this._url, name: r[0][0], filePath: r[0][1].uri, formData: o, header: this._headers, success: a.bind(this), fail: function fail(e) {
							t.dispatchEvent({ type: "error" });
						} });
				} else wx.request({ url: this._url, data: e || "", method: this._method, header: this._headers, success: a.bind(this), fail: function fail(e) {
						e.errMsg && e.errMsg.indexOf("url not in domain list") !== -1 && wx.showModal({ title: "domain error", content: e.errMsg + " " + t._url }), t.dispatchEvent({ type: "error" });
					} });
			}, t;
		}(s(y));u(h, { UNSENT: l, OPENED: p, HEADERS_RECEIVED: f, LOADING: d, DONE: m }), e.exports = h;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			o.verifyOptions(e, "type"), o.verifyParamValid("type", e.type, r.validTypes), o.merge(this, e), this.type = i[e.type];
		}var o = n(1),
		    i = { stripmeta: 0, blur: 2, quality: 3, crop: 4, rotate: 5, thumbnail: 7, interlace: 9 },
		    a = { 0: "stripmeta", 1: "type", 2: "blur", 3: "quality", 4: "crop", 5: "rotate", 6: "pixel", 7: "thumbnail", 8: "watermark", 9: "interlace", 10: "tmp" };r.validTypes = (0, _keys2.default)(i), r.reverse = function (e) {
			var t = o.copy(e);return t.type = a[t.type], t;
		}, r.reverseImageOps = function (e) {
			return e.map(function (e) {
				return r.reverse(e);
			});
		}, e.exports = r;
	}, function (e, t) {
		"use strict";
		var n = { link: { id: 1, heartbeat: 2 }, misc: { id: 6, getSimpleNosToken: 1, getNosToken: 2, notifyUploadLog: 3, uploadSdkLogUrl: 4, audioToText: 5, processImage: 6 } },
		    r = { heartbeat: { sid: n.link.id, cid: n.link.heartbeat }, getSimpleNosToken: { sid: n.misc.id, cid: n.misc.getSimpleNosToken, params: [{ type: "int", name: "num" }] }, getNosToken: { sid: n.misc.id, cid: n.misc.getNosToken, params: [{ type: "String", name: "responseBody" }] }, uploadSdkLogUrl: { sid: n.misc.id, cid: n.misc.uploadSdkLogUrl, params: [{ type: "string", name: "url" }] }, audioToText: { sid: n.misc.id, cid: n.misc.audioToText, params: [{ type: "Property", name: "audioToText" }] }, processImage: { sid: n.misc.id, cid: n.misc.processImage, params: [{ type: "String", name: "url" }, { type: "PropertyArray", name: "imageOps", entity: "imageOp" }] } },
		    o = { "1_2": { service: "link", cmd: "heartbeat" }, "6_1": { service: "misc", cmd: "getSimpleNosToken", response: [{ type: "PropertyArray", name: "nosTokens", entity: "nosToken" }] }, "6_2": { service: "misc", cmd: "getNosToken", response: [{ type: "Property", name: "nosToken" }] }, "6_3": { service: "misc", cmd: "notifyUploadLog" }, "6_5": { service: "misc", cmd: "audioToText", response: [{ type: "String", name: "text" }] }, "6_6": { service: "misc", cmd: "processImage", response: [{ type: "String", name: "url" }] } };e.exports = { idMap: n, cmdConfig: r, packetConfig: o };
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = {};o.fromDataURL = r.blobFromDataURL, e.exports = o;
	}, function (e, t, n) {
		"use strict";
		var r = n(23),
		    o = n(74),
		    i = n(75),
		    a = r.LISTENERS,
		    s = r.CAPTURE,
		    c = r.BUBBLE,
		    u = r.ATTRIBUTE,
		    l = r.newNode,
		    p = o.defineCustomEventTarget,
		    f = i.createEventWrapper,
		    d = i.STOP_IMMEDIATE_PROPAGATION_FLAG,
		    m = "undefined" != typeof window && "undefined" != typeof window.EventTarget,
		    y = e.exports = function h() {
			if (!(this instanceof h)) {
				if (1 === arguments.length && Array.isArray(arguments[0])) return p(h, arguments[0]);if (arguments.length > 0) {
					for (var e = Array(arguments.length), t = 0; t < arguments.length; ++t) {
						e[t] = arguments[t];
					}return p(h, e);
				}throw new TypeError("Cannot call a class as a function");
			}(0, _defineProperty2.default)(this, a, { value: (0, _create2.default)(null) });
		};y.prototype = (0, _create2.default)((m ? window.EventTarget : Object).prototype, { constructor: { value: y, writable: !0, configurable: !0 }, addEventListener: { value: function value(e, t, n) {
					if (null == t) return !1;if ("function" != typeof t && "object" != (typeof t === "undefined" ? "undefined" : (0, _typeof3.default)(t))) throw new TypeError('"listener" is not an object.');var r = n ? s : c,
					    o = this[a][e];if (null == o) return this[a][e] = l(t, r), !0;for (var i = null; null != o;) {
						if (o.listener === t && o.kind === r) return !1;i = o, o = o.next;
					}return i.next = l(t, r), !0;
				}, configurable: !0, writable: !0 }, removeEventListener: { value: function value(e, t, n) {
					if (null == t) return !1;for (var r = n ? s : c, o = null, i = this[a][e]; null != i;) {
						if (i.listener === t && i.kind === r) return null == o ? this[a][e] = i.next : o.next = i.next, !0;o = i, i = i.next;
					}return !1;
				}, configurable: !0, writable: !0 }, dispatchEvent: { value: function value(e) {
					var t = this[a][e.type];if (null == t) return !0;for (var n = f(e, this); null != t && ("function" == typeof t.listener ? t.listener.call(this, n) : t.kind !== u && "function" == typeof t.listener.handleEvent && t.listener.handleEvent(n), !n[d]);) {
						t = t.next;
					}return !n.defaultPrevented;
				}, configurable: !0, writable: !0 } });
	}, function (e, t) {
		function n(e) {
			var t = r.call(e);return "[object Function]" === t || "function" == typeof e && "[object RegExp]" !== t || "undefined" != typeof window && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt);
		}e.exports = n;var r = Object.prototype.toString;
	}, function (e, t) {
		e.exports = function n(e, t) {
			"use strict";
			var r,
			    o,
			    i = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
			    a = /(^[ ]*|[ ]*$)/g,
			    s = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
			    c = /^0x[0-9a-f]+$/i,
			    u = /^0/,
			    l = function l(e) {
				return n.insensitive && ("" + e).toLowerCase() || "" + e;
			},
			    p = l(e).replace(a, "") || "",
			    f = l(t).replace(a, "") || "",
			    d = p.replace(i, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"),
			    m = f.replace(i, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0"),
			    y = parseInt(p.match(c), 16) || 1 !== d.length && p.match(s) && Date.parse(p),
			    h = parseInt(f.match(c), 16) || y && f.match(s) && Date.parse(f) || null;if (h) {
				if (y < h) return -1;if (y > h) return 1;
			}for (var v = 0, g = Math.max(d.length, m.length); v < g; v++) {
				if (r = !(d[v] || "").match(u) && parseFloat(d[v]) || d[v] || 0, o = !(m[v] || "").match(u) && parseFloat(m[v]) || m[v] || 0, isNaN(r) !== isNaN(o)) return isNaN(r) ? 1 : -1;if ((typeof r === "undefined" ? "undefined" : (0, _typeof3.default)(r)) != (typeof o === "undefined" ? "undefined" : (0, _typeof3.default)(o)) && (r += "", o += ""), r < o) return -1;if (r > o) return 1;
			}return 0;
		};
	}, function (e, t) {
		e.exports = function (e) {
			return e.webpackPolyfill || (e.deprecate = function () {}, e.paths = [], e.children = [], e.webpackPolyfill = 1), e;
		};
	}, function (e, t, n) {
		!function (t, n) {
			e.exports = n();
		}(this, function () {
			return function (e) {
				function t(r) {
					if (n[r]) return n[r].exports;var o = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
				}var n = {};return t.m = e, t.c = n, t.p = "", t(0);
			}([function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function o(e) {
					if (e && e.__esModule) return e;var t = {};if (null != e) for (var n in e) {
						Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
					}return t["default"] = e, t;
				}t.__esModule = !0;var i = n(1),
				    a = o(i),
				    s = n(3),
				    c = o(s),
				    u = n(4),
				    l = o(u),
				    p = n(5),
				    f = o(p),
				    d = n(6),
				    m = o(d),
				    y = n(8),
				    h = r(y),
				    v = n(2),
				    g = r(v),
				    b = n(9),
				    k = o(b),
				    w = n(10),
				    S = o(w),
				    T = n(11),
				    M = r(T),
				    _ = n(12),
				    x = o(_),
				    C = n(7),
				    E = o(C),
				    O = n(13),
				    P = o(O),
				    I = x.merge({}, a, c, l, f, m, { forOwn: h["default"], getGlobal: g["default"] }, k, S, { mixin: M["default"] }, x, E, P);delete I.__esModule, t["default"] = I, e.exports = t["default"];
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function o(e) {
					var t = (0, s["default"])(),
					    n = void 0;n = e.split(",")[0].indexOf("base64") >= 0 ? t.atob(e.split(",")[1]) : t.decodeURIComponent(e.split(",")[1]);for (var r = e.split(",")[0].split(":")[1].split(";")[0], o = new Uint8Array(n.length), i = 0; i < n.length; i++) {
						o[i] = n.charCodeAt(i);
					}return new t.Blob([o], { type: r });
				}function i(e, t) {
					var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "image/jpeg",
					    r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;if (e.toBlob) e.toBlob(t, n, r);else {
						var i = e.toDataURL(n, r);t(o(i));
					}
				}t.__esModule = !0, t.blobFromDataURL = o, t.blobFromCanvas = i;var a = n(2),
				    s = r(a);
			}, function (e, t) {
				(function (n) {
					"use strict";
					t.__esModule = !0, t["default"] = function () {
						return "undefined" != typeof window ? window : "undefined" != typeof self ? self : "undefined" != typeof n ? n : {};
					}, e.exports = t["default"];
				}).call(t, function () {
					return this;
				}());
			}, function (e, t) {
				"use strict";
				function n(e) {
					var t = !1,
					    n = "Webkit Moz ms O".split(" "),
					    r = document.createElement("div"),
					    o = null;if (e = e.toLowerCase(), void 0 !== r.style[e] && (t = !0), t === !1) {
						o = e.charAt(0).toUpperCase() + e.substr(1);for (var i = 0; i < n.length; i++) {
							if (void 0 !== r.style[n[i] + o]) {
								t = !0;break;
							}
						}
					}return t;
				}t.__esModule = !0, t.detectCSSFeature = n;
			}, function (e, t) {
				"use strict";
				t.__esModule = !0;t.o = {}, t.emptyObj = {}, t.f = function () {}, t.emptyFunc = function () {}, t.regBlank = /\s+/gi, t.regWhiteSpace = /\s+/gi;
			}, function (e, t) {
				"use strict";
				function n(e, t) {
					t = t || 2;for (var n = "" + e; n.length < t;) {
						n = "0" + n;
					}return n;
				}function r(e) {
					return "" + e.getFullYear();
				}function o(e) {
					return n(e.getMonth() + 1);
				}function i(e) {
					return n(e.getDate());
				}function a(e) {
					return n(e.getHours());
				}function s(e) {
					return n(e.getMinutes());
				}function c(e) {
					return n(e.getSeconds());
				}function u(e) {
					return n(e.getMilliseconds(), 3);
				}function l(e) {
					return e = "" + e, new Date(e.replace(/-/g, "/").replace("T", " "));
				}t.__esModule = !0, t.fix = n, t.getYearStr = r, t.getMonthStr = o, t.getDayStr = i, t.getHourStr = a, t.getMinuteStr = s, t.getSecondStr = c, t.getMillisecondStr = u, t.dateFromDateTimeLocal = l;t.format = function () {
					var e = /yyyy|MM|dd|hh|mm|ss|SSS/g,
					    t = { yyyy: r, MM: o, dd: i, hh: a, mm: s, ss: c, SSS: u };return function (n, r) {
						return n = new Date(n), isNaN(+n) ? "invalid date" : (r = r || "yyyy-MM-dd", r.replace(e, function (e) {
							return t[e](n);
						}));
					};
				}();
			}, function (e, t, n) {
				"use strict";
				function r(e, t) {
					if (e === t) return !0;for (; t.parentNode;) {
						if (t.parentNode === e) return !0;t = t.parentNode;
					}return !1;
				}function o(e) {
					var t = e.parentNode || document.body;e = e.cloneNode(!0), e.style.display = "block", e.style.opacity = 0, e.style.height = "auto", t.appendChild(e);var n = e.offsetHeight;return t.removeChild(e), n;
				}function i(e) {
					e.parentNode && e.parentNode.removeChild(e);
				}function a(e, t, n) {
					return (0, l.exist)(n) ? void e.setAttribute("data-" + t, n) : e.getAttribute("data-" + t);
				}function s(e) {
					return e.target || e.srcElement;
				}function c(e) {
					function t(r) {
						n.src && (e.multi || m(n, "load", t), e.onload(r));
					}e = e || {};var n;if (e.name) try {
						n = document.createElement('<iframe name="' + e.name + '"></iframe>'), n.frameBorder = 0;
					} catch (error) {
						n = document.createElement("iframe"), n.name = e.name;
					} else n = document.createElement("iframe");e.visible || (n.style.display = "none"), (0, l.isFunction)(e.onload) && f(n, "load", t);var r = e.parent;(r || document.body).appendChild(n);var o = e.src || "about:blank";return setTimeout(function () {
						n.src = o;
					}, 0), n;
				}function u(e) {
					var t = document.createElement("div");t.innerHTML = e;var n = [],
					    r = void 0,
					    o = void 0;if (t.children) for (r = 0, o = t.children.length; r < o; r++) {
						n.push(t.children[r]);
					} else for (r = 0, o = t.childNodes.length; r < o; r++) {
						var i = t.childNodes[r];1 === i.nodeType && n.push(i);
					}return n.length > 1 ? t : n[0];
				}t.__esModule = !0, t.off = t.removeEventListener = t.on = t.addEventListener = void 0, t.containsNode = r, t.calcHeight = o, t.remove = i, t.dataset = a, t.target = s, t.createIframe = c, t.html2node = u;var l = n(7),
				    p = t.addEventListener = function (e, t, n) {
					e.addEventListener ? e.addEventListener(t, n, !1) : e.attachEvent && e.attachEvent("on" + t, n);
				},
				    f = t.on = p,
				    d = t.removeEventListener = function (e, t, n) {
					e.removeEventListener ? e.removeEventListener(t, n, !1) : e.detachEvent && e.detachEvent("on" + t, n);
				},
				    m = t.off = d;
			}, function (e, t) {
				"use strict";
				function n(e) {
					return Object.prototype.toString.call(e).slice(8, -1);
				}function r(e) {
					return n(e).toLowerCase();
				}function o(e) {
					return "string" === r(e);
				}function i(e) {
					return "number" === r(e);
				}function a(e) {
					return "boolean" === r(e);
				}function s(e) {
					return "array" === r(e);
				}function c(e) {
					return "function" === r(e);
				}function u(e) {
					return "date" === r(e);
				}function l(e) {
					return "regexp" === r(e);
				}function p(e) {
					return "error" === r(e);
				}function f(e) {
					return null === e;
				}function d(e) {
					return null !== e;
				}function m(e) {
					return "undefined" == typeof e;
				}function y(e) {
					return "undefined" != typeof e;
				}function h(e) {
					return y(e) && d(e);
				}function v(e) {
					return m(e) || f(e);
				}function g(e) {
					return h(e) && "object" === r(e);
				}function b(e) {
					return v(e) || (o(e) || s(e)) && 0 === e.length;
				}t.__esModule = !0, t.getClass = n, t.typeOf = r, t.isString = o, t.isNumber = i, t.isBoolean = a, t.isArray = s, t.isFunction = c, t.isDate = u, t.isRegExp = l, t.isError = p, t.isnull = f, t.notnull = d, t.undef = m, t.notundef = y, t.exist = h, t.notexist = v, t.isObject = g, t.isEmpty = b;
			}, function (e, t) {
				"use strict";
				t.__esModule = !0, t["default"] = function () {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
					    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function () {},
					    n = arguments[2];for (var r in e) {
						e.hasOwnProperty(r) && t.call(n, r, e[r]);
					}
				}, e.exports = t["default"];
			}, function (e, t) {
				"use strict";
				t.__esModule = !0;t.uniqueID = function () {
					var e = 0;return function () {
						return "" + e++;
					};
				}();
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function o(e) {
					return (0, c.isString)(e) && 0 === e.indexOf("{") && e.lastIndexOf("}") === e.length - 1;
				}function i(e) {
					try {
						o(e) && (e = JSON.parse(e)), (0, c.isObject)(e) && (0, s["default"])(e, function (t, n) {
							switch ((0, c.typeOf)(n)) {case "string":case "object":
									e[t] = i(n);}
						});
					} catch (error) {}return e;
				}t.__esModule = !0, t.isJSON = o, t.parseJSON = i;var a = n(8),
				    s = r(a),
				    c = n(7);
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}t.__esModule = !0;var o = n(8),
				    i = r(o);t["default"] = function (e, t) {
					(0, i["default"])(t, function (t, n) {
						e[t] = n;
					});
				}, e.exports = t["default"];
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e && e.__esModule ? e : { "default": e };
				}function o(e) {
					return JSON.parse((0, _stringify2.default)(e));
				}function i() {
					for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = arguments.length, n = Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
						n[r - 1] = arguments[r];
					}return n.forEach(function (t) {
						(0, f["default"])(e, t);
					}), e;
				}function a(e, t) {
					return (0, m["default"])(t, function (t, n) {
						(0, y.undef)(e[t]) && (e[t] = n);
					}), e;
				}function s(e, t, n) {
					var r = e[t] || e[t.toLowerCase()];return (0, y.notexist)(r) && (r = n, e[t] = r), r;
				}function c(e, t) {
					return (0, m["default"])(e, function (n, r) {
						(0, y.exist)(t[n]) && (e[n] = t[n]);
					}), e;
				}function u() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ",",
					    n = {};return e.split(t).forEach(function (e) {
						var t = e.split("="),
						    r = t.shift();r && (n[decodeURIComponent(r)] = decodeURIComponent(t.join("=")));
					}), n;
				}function l(e, t, n) {
					if (!e) return "";var r = [];return (0, m["default"])(e, function (e, t) {
						(0, y.isFunction)(t) || ((0, y.isDate)(t) ? t = t.getTime() : (0, y.isArray)(t) ? t = t.join(",") : (0, y.isObject)(t) && (t = (0, _stringify2.default)(t)), n && (t = encodeURIComponent(t)), r.push(encodeURIComponent(e) + "=" + t));
					}), r.join(t || ",");
				}t.__esModule = !0, t.simpleClone = o, t.merge = i, t.fillUndef = a, t.checkWithDefault = s, t.fetch = c, t.string2object = u, t.object2string = l;var p = n(11),
				    f = r(p),
				    d = n(8),
				    m = r(d),
				    y = n(7);
			}, function (e, t, n) {
				"use strict";
				function r(e) {
					return e.indexOf("?") < 0 ? "?" : "&";
				}function o(e) {
					return (0, i.object2string)(e, "&", !0);
				}t.__esModule = !0, t.url2origin = void 0, t.genUrlSep = r, t.object2query = o;var i = n(12);t.url2origin = function () {
					var e = /^([\w]+?:\/\/.*?(?=\/|$))/i;return function (t) {
						return e.test(t || "") ? RegExp.$1.toLowerCase() : "";
					};
				}();
			}]);
		});
	}, function (e, t, n) {
		var r;(function (o) {
			!function (i, a) {
				"use strict";
				function s() {
					return "undefined" != typeof i ? i : "undefined" != typeof self ? self : "undefined" != typeof o ? o : {};
				}i = s();var c,
				    u = i.IDBKeyRange || i.webkitIDBKeyRange,
				    l = { readonly: "readonly", readwrite: "readwrite" },
				    p = Object.prototype.hasOwnProperty,
				    f = function f() {
					if (!c && (c = i.indexedDB || i.webkitIndexedDB || i.mozIndexedDB || i.oIndexedDB || i.msIndexedDB || (null === i.indexedDB && i.shimIndexedDB ? i.shimIndexedDB : a), !c)) throw "IndexedDB required";return c;
				},
				    d = function d(e) {
					return e;
				},
				    m = function m(e) {
					return Object.prototype.toString.call(e).slice(8, -1).toLowerCase();
				},
				    y = function y(e) {
					return "function" == typeof e;
				},
				    h = function h(e) {
					return "number" === m(e);
				},
				    v = function v(e) {
					return "array" === m(e);
				},
				    g = function g(e) {
					return e === a;
				},
				    b = function b(e, t) {
					var n = this,
					    r = !1;this.name = t, this.getIndexedDB = function () {
						return e;
					}, this.add = function (t) {
						if (r) throw "Database has been closed";for (var o = [], i = 0, a = 0; a < arguments.length - 1; a++) {
							if (Array.isArray(arguments[a + 1])) for (var s = 0; s < arguments[a + 1].length; s++) {
								o[i] = arguments[a + 1][s], i++;
							} else o[i] = arguments[a + 1], i++;
						}var c = e.transaction(t, l.readwrite),
						    u = c.objectStore(t);return new _promise2.default(function (e, t) {
							o.forEach(function (e) {
								var t;if (e.item && e.key) {
									var n = e.key;e = e.item, t = u.add(e, n);
								} else t = u.add(e);t.onsuccess = function (t) {
									var n = t.target,
									    r = n.source.keyPath;null === r && (r = "__id__"), (0, _defineProperty2.default)(e, r, { value: n.result, enumerable: !0 });
								};
							}), c.oncomplete = function () {
								e(o, n);
							}, c.onerror = function (e) {
								e.preventDefault(), t(e);
							}, c.onabort = function (e) {
								t(e);
							};
						});
					}, this.updateAndDelete = function (t, n, o) {
						if (r) throw "Database has been closed";var i = e.transaction(t, l.readwrite),
						    a = i.objectStore(t),
						    s = a.keyPath;return new _promise2.default(function (e, t) {
							n.forEach(function (e) {
								if (e.item && e.key) {
									var t = e.key;e = e.item, a.put(e, t);
								} else a.put(e);
							}), o.forEach(function (e) {
								a["delete"](e[s]);
							}), i.oncomplete = function () {
								e([n, o]);
							}, i.onerror = function (e) {
								t(e);
							};
						});
					}, this.update = function (t) {
						if (r) throw "Database has been closed";for (var o, i = [], a = 1; a < arguments.length; a++) {
							o = arguments[a], Array.isArray(o) ? i = i.concat(o) : i.push(o);
						}var s = e.transaction(t, l.readwrite),
						    c = s.objectStore(t);c.keyPath;return new _promise2.default(function (e, t) {
							i.forEach(function (e) {
								var t;if (e.item && e.key) {
									var n = e.key;e = e.item, t = c.put(e, n);
								} else t = c.put(e);t.onsuccess = function (e) {}, t.onerror = function (e) {};
							}), s.oncomplete = function () {
								e(i, n);
							}, s.onerror = function (e) {
								t(e);
							}, s.onabort = function (e) {
								t(e);
							};
						});
					}, this.remove = function (t, n) {
						if (r) throw "Database has been closed";var o = e.transaction(t, l.readwrite),
						    i = o.objectStore(t);return new _promise2.default(function (e, t) {
							Array.isArray(n) || (n = [n]), n.forEach(function (e) {
								i["delete"](e);
							}), o.oncomplete = function () {
								e(n);
							}, o.onerror = function (e) {
								t(e);
							}, o.onabort = function (e) {
								t(e);
							};
						});
					}, this.clear = function (t) {
						if (r) throw "Database has been closed";var n = e.transaction(t, l.readwrite),
						    o = n.objectStore(t);o.clear();return new _promise2.default(function (e, t) {
							n.oncomplete = function () {
								e();
							}, n.onerror = function (e) {
								t(e);
							};
						});
					}, this.close = function () {
						r || (e.close(), r = !0, delete T[t]);
					}, this.get = function (t, n) {
						if (r) throw "Database has been closed";var o = e.transaction(t),
						    i = o.objectStore(t),
						    a = i.get(n);return new _promise2.default(function (e, t) {
							a.onsuccess = function (t) {
								e(t.target.result);
							}, o.onerror = function (e) {
								t(e);
							};
						});
					}, this.query = function (t, n) {
						if (r) throw "Database has been closed";return new k(t, e, n);
					}, this.count = function (t, n) {
						if (r) throw "Database has been closed";var o = e.transaction(t);o.objectStore(t);
					};for (var o = 0, i = e.objectStoreNames.length; o < i; o++) {
						!function (e) {
							n[e] = {};for (var t in n) {
								p.call(n, t) && "close" !== t && (n[e][t] = function (t) {
									return function () {
										var r = [e].concat([].slice.call(arguments, 0));return n[t].apply(n, r);
									};
								}(t));
							}
						}(e.objectStoreNames[o]);
					}
				},
				    k = function k(e, t, n) {
					var r = this,
					    o = !1,
					    i = !1,
					    s = function s(r, _s, c, p, f, d, m) {
						return new _promise2.default(function (h, v) {
							var g = o || i ? l.readwrite : l.readonly,
							    b = t.transaction(e, g),
							    k = b.objectStore(e),
							    w = n ? k.index(n) : k,
							    S = r ? u[r].apply(null, _s) : null,
							    T = [],
							    M = [S],
							    _ = 0;f = f ? f : null, d = d ? d : [], "count" !== c && M.push(p || "next");var x = !!o && (0, _keys2.default)(o),
							    C = function C(e) {
								for (var t = 0; t < x.length; t++) {
									var n = x[t],
									    r = o[n];r instanceof Function && (r = r(e)), e[n] = r;
								}return e;
							};w[c].apply(w, M).onsuccess = function (e) {
								var t = e.target.result;if ("number" == typeof t) T = t;else if (t) if (null !== f && f[0] > _) _ = f[0], t.advance(f[0]);else if (null !== f && _ >= f[0] + f[1]) ;else {
									var n = !0,
									    r = "value" in t ? t.value : t.key;d.forEach(function (e) {
										e && e.length && (2 === e.length ? n = n && r[e[0]] === e[1] : y(e[0]) && (n = n && e[0].apply(a, [r])));
									}), n && (_++, T.push(m(r)), i ? t["delete"]() : o && (r = C(r), t.update(r))), t["continue"]();
								}
							}, b.oncomplete = function () {
								h(T);
							}, b.onerror = function (e) {
								v(e);
							}, b.onabort = function (e) {
								v(e);
							};
						});
					},
					    c = function c(e, t) {
						var n = "next",
						    r = "openCursor",
						    a = [],
						    c = null,
						    u = d,
						    l = !1,
						    p = function p() {
							return s(e, t, r, l ? n + "unique" : n, c, a, u);
						},
						    f = function f() {
							return n = null, r = "count", { execute: p };
						},
						    m = function m() {
							return c = v(arguments[0]) ? arguments[0] : Array.prototype.slice.call(arguments, 0, 2), 1 == c.length && c.unshift(0), h(c[1]) || (c = null), { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    b = function b(e) {
							return e = !!g(e) || !!e, e && (r = "openKeyCursor"), { execute: p, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    k = function k() {
							return a.push(Array.prototype.slice.call(arguments, 0, 2)), { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    w = function w(e) {
							return e = !!g(e) || !!e, n = e ? "next" : "prev", { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    S = function S(e) {
							return e = !!g(e) || !!e, n = e ? "prev" : "next", { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    T = function T(e) {
							return e = !!g(e) || !!e, l = e, { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    M = function M(e) {
							return o = e, { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    _ = function _(e) {
							return y(e) && (u = e), { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						},
						    x = function x(e) {
							return e = !!g(e) || !!e, i = e, { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
						};return { execute: p, count: f, keys: b, filter: k, asc: w, desc: S, distinct: T, modify: M, limit: m, map: _, remove: x };
					};"only bound upperBound lowerBound".split(" ").forEach(function (e) {
						r[e] = function () {
							return new c(e, arguments);
						};
					}), this.filter = function () {
						var e = new c(null, null);return e.filter.apply(e, arguments);
					}, this.all = function () {
						return this.filter();
					};
				},
				    w = function w(e, t, n) {
					"function" == typeof t && (t = t());for (var r in t) {
						var o,
						    i = t[r];o = !p.call(t, r) || n.objectStoreNames.contains(r) ? e.currentTarget.transaction.objectStore(r) : n.createObjectStore(r, i.key);for (var a in i.indexes) {
							var s = i.indexes[a];try {
								o.index(a);
							} catch (e) {
								o.createIndex(a, s.key || a, (0, _keys2.default)(s).length ? s : { unique: !1 });
							}
						}
					}
				},
				    S = function S(e, t, n, r) {
					var o = e.target.result,
					    i = new b(o, t);return T[t] = o, _promise2.default.resolve(i);
				},
				    T = {},
				    M = { version: "0.10.2", open: function open(e) {
						var t;return new _promise2.default(function (n, r) {
							if (T[e.server]) S({ target: { result: T[e.server] } }, e.server, e.version, e.schema).then(n, r);else {
								try {
									t = f().open(e.server, e.version);
								} catch (e) {
									r(e);
								}t.onsuccess = function (t) {
									S(t, e.server, e.version, e.schema).then(n, r);
								}, t.onupgradeneeded = function (t) {
									w(t, e.schema, t.target.result);
								}, t.onerror = function (e) {
									r(e);
								};
							}
						});
					}, remove: function remove(e) {
						return new _promise2.default(function (t, n) {
							if (!e) return t();(typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) === b && (e = e.name);var r;"string" == typeof e && (r = T[e]), r && "function" == typeof r.close && r.close();var o;try {
								o = f().deleteDatabase(e);
							} catch (e) {
								n(e);
							}o.onsuccess = function (n) {
								delete T[e], t(e);
							}, o.onerror = function (e) {
								n(e);
							}, o.onblocked = function (e) {
								n(e);
							};
						});
					} };"undefined" != typeof e && "undefined" != typeof e.exports ? e.exports = M : (r = function () {
					return M;
				}.call(t, n, t, e), !(r !== a && (e.exports = r)));
			}(window);
		}).call(t, function () {
			return this;
		}());
	}, function (e, t, n) {
		"use strict";
		t.__esModule = !0, t["default"] = function (e) {
			u.merge(e, { platform: r, xhr: o, io: i, naturalSort: a, deepAccess: s, db: c, util: u, support: l, blob: p, ajax: f, Promise: d });
		};var r = n(11),
		    o = n(82),
		    i = n(17),
		    a = n(39),
		    s = n(25),
		    c = n(42),
		    u = n(1),
		    l = n(47),
		    p = n(36),
		    f = n(16),
		    d = n(2).Promise;e.exports = t["default"];
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;i(e.nick) && (t.nick = "" + e.nick), i(e.avatar) && (t.avatar = "" + e.avatar), i(e.custom) && (t.custom = "" + e.custom);
		}var o = n(1),
		    i = o.notundef,
		    a = { "-1": "restricted", 0: "common", 1: "owner", 2: "manager" };r.reverse = function (e) {
			var t = o.copy(e);return i(t.chatroomId) && (t.chatroomId = "" + t.chatroomId), i(t.type) && (t.type = a[t.type]), i(t.level) && (t.level = +t.level), i(t.online) && (t.online = 1 === +t.online), i(t.enterTime) && (t.enterTime = +t.enterTime), i(t.guest) && (t.guest = 1 === +t.guest), i(t.blacked) && (t.blacked = 1 === +t.blacked), i(t.gaged) && (t.gaged = 1 === +t.gaged), i(t.valid) && (t.valid = 1 === +t.valid), i(t.updateTime) && (t.updateTime = +t.updateTime), i(t.tempMuted) ? t.tempMuted = 1 === +t.tempMuted : t.tempMuted = !1, i(t.tempMuteDuration) ? t.tempMuteDuration = +t.tempMuteDuration : t.tempMuteDuration = 0, t.online || delete t.enterTime, t.guest && (t.type = "guest", delete t.valid), "common" !== t.type && delete t.level, delete t.guest, t;
		}, r.reverseMembers = function (e) {
			return e.map(function (e) {
				return r.reverse(e);
			});
		}, r.validTypes = (0, _keys2.default)(a), e.exports = r;
	},, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = n(35),
		    i = r.merge({}, o.idMap, { auth: { id: 2, login: 3, kicked: 5, logout: 6, multiPortLogin: 7, kick: 8 }, user: { id: 3, markInBlacklist: 3, getBlacklist: 4, markInMutelist: 5, getMutelist: 6, getRelations: 8, getUsers: 7, updateMyInfo: 10, updateDonnop: 15, syncMyInfo: 109, syncUpdateMyInfo: 110 }, notify: { id: 4, markRead: 3, syncOfflineMsgs: 4, batchMarkRead: 5, syncOfflineSysMsgs: 6, syncRoamingMsgs: 9, syncMsgReceipts: 12 }, sync: { id: 5, sync: 1, syncTeamMembers: 2 }, msg: { id: 7, sendMsg: 1, msg: 2, sysMsg: 3, getHistoryMsgs: 6, sendCustomSysMsg: 7, searchHistoryMsgs: 8, deleteSessions: 9, getSessions: 10, syncSendMsg: 101, sendMsgReceipt: 11, msgReceipt: 12, deleteMsg: 13, msgDeleted: 14, markSessionAck: 16 }, team: { id: 8, createTeam: 1, sendTeamMsg: 2, teamMsg: 3, teamMsgs: 4, addTeamMembers: 5, removeTeamMembers: 6, updateTeam: 7, leaveTeam: 8, getTeam: 9, getTeams: 10, getTeamMembers: 11, dismissTeam: 12, applyTeam: 13, passTeamApply: 14, rejectTeamApply: 15, addTeamManagers: 16, removeTeamManagers: 17, transferTeam: 18, updateInfoInTeam: 19, updateNickInTeam: 20, acceptTeamInvite: 21, rejectTeamInvite: 22, getTeamHistoryMsgs: 23, searchTeamHistoryMsgs: 24, updateMuteStateInTeam: 25, getMyTeamMembers: 26, getMutedTeamMembers: 27, syncMyTeamMembers: 126, syncTeams: 109, syncTeamMembers: 111, syncCreateTeam: 101, syncSendTeamMsg: 102, syncUpdateTeamMember: 119 }, friend: { id: 12, friendRequest: 1, syncFriendRequest: 101, deleteFriend: 2, syncDeleteFriend: 102, updateFriend: 3, syncUpdateFriend: 103, getFriends: 4 }, chatroom: { id: 13, getChatroomAddress: 1 }, filter: { id: 101, sendFilterMsg: 1, filterMsg: 2, filterSysMsg: 3, sendFilterCustomSysMsg: 7 }, eventService: { id: 14, publishEvent: 1, pushEvent: 2, subscribeEvent: 3, unSubscribeEventsByAccounts: 4, unSubscribeEventsByType: 5, querySubscribeEventsByAccounts: 6, querySubscribeEventsByType: 7, pushEvents: 9 } }),
		    a = r.merge({}, o.cmdConfig, { login: { sid: i.auth.id, cid: i.auth.login, params: [{ type: "Property", name: "login" }] }, logout: { sid: i.auth.id, cid: i.auth.logout }, kick: { sid: i.auth.id, cid: i.auth.kick, params: [{ type: "StrArray", name: "deviceIds" }] }, markInBlacklist: { sid: i.user.id, cid: i.user.markInBlacklist, params: [{ type: "String", name: "account" }, { type: "bool", name: "isAdd" }] }, getBlacklist: { sid: i.user.id, cid: i.user.getBlacklist, params: [{ type: "long", name: "time" }] }, markInMutelist: { sid: i.user.id, cid: i.user.markInMutelist, params: [{ type: "String", name: "account" }, { type: "bool", name: "isAdd" }] }, getMutelist: { sid: i.user.id, cid: i.user.getMutelist, params: [{ type: "long", name: "time" }] }, getRelations: { sid: i.user.id, cid: i.user.getRelations, params: [{ type: "long", name: "timetag" }] }, getUsers: { sid: i.user.id, cid: i.user.getUsers, params: [{ type: "StrArray", name: "accounts" }] }, updateMyInfo: { sid: i.user.id, cid: i.user.updateMyInfo, params: [{ type: "Property", name: "user" }] }, updateDonnop: { sid: i.user.id, cid: i.user.updateDonnop, params: [{ type: "Property", name: "donnop" }] }, markRead: { sid: i.notify.id, cid: i.notify.markRead, params: [{ type: "long", name: "id" }, { type: "ph", name: "ph" }] }, batchMarkRead: { sid: i.notify.id, cid: i.notify.batchMarkRead, params: [{ type: "byte", name: "sid" }, { type: "byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, sync: { sid: i.sync.id, cid: i.sync.sync, params: [{ type: "Property", name: "sync" }] }, syncTeamMembers: { sid: i.sync.id, cid: i.sync.syncTeamMembers, params: [{ type: "LongLongMap", name: "sync" }] }, sendMsg: { sid: i.msg.id, cid: i.msg.sendMsg, params: [{ type: "Property", name: "msg" }] }, getHistoryMsgs: { sid: i.msg.id, cid: i.msg.getHistoryMsgs, params: [{ type: "String", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "long", name: "lastMsgId" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, sendCustomSysMsg: { sid: i.msg.id, cid: i.msg.sendCustomSysMsg, params: [{ type: "Property", name: "sysMsg" }] }, searchHistoryMsgs: { sid: i.msg.id, cid: i.msg.searchHistoryMsgs, params: [{ type: "String", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "String", name: "keyword" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, getSessions: { sid: i.msg.id, cid: i.msg.getSessions, params: [{ type: "long", name: "time" }] }, deleteSessions: { sid: i.msg.id, cid: i.msg.deleteSessions, params: [{ type: "StrArray", name: "sessions" }] }, sendMsgReceipt: { sid: i.msg.id, cid: i.msg.sendMsgReceipt, params: [{ type: "Property", name: "msgReceipt" }] }, deleteMsg: { sid: i.msg.id, cid: i.msg.deleteMsg, params: [{ type: "Property", name: "sysMsg" }] }, markSessionAck: { sid: i.msg.id, cid: i.msg.markSessionAck, params: [{ type: "byte", name: "scene" }, { type: "String", name: "to" }, { type: "long", name: "timetag" }] }, createTeam: { sid: i.team.id, cid: i.team.createTeam, params: [{ type: "Property", name: "team" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }] }, sendTeamMsg: { sid: i.team.id, cid: i.team.sendTeamMsg, params: [{ type: "Property", name: "msg" }] }, addTeamMembers: { sid: i.team.id, cid: i.team.addTeamMembers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }] }, removeTeamMembers: { sid: i.team.id, cid: i.team.removeTeamMembers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, updateTeam: { sid: i.team.id, cid: i.team.updateTeam, params: [{ type: "Property", name: "team" }] }, leaveTeam: { sid: i.team.id, cid: i.team.leaveTeam, params: [{ type: "long", name: "teamId" }] }, getTeam: { sid: i.team.id, cid: i.team.getTeam, params: [{ type: "long", name: "teamId" }] }, getTeams: { sid: i.team.id, cid: i.team.getTeams, params: [{ type: "long", name: "timetag" }] }, getTeamMembers: { sid: i.team.id, cid: i.team.getTeamMembers, params: [{ type: "long", name: "teamId" }, { type: "long", name: "timetag" }] }, dismissTeam: { sid: i.team.id, cid: i.team.dismissTeam, params: [{ type: "long", name: "teamId" }] }, applyTeam: { sid: i.team.id, cid: i.team.applyTeam, params: [{ type: "long", name: "teamId" }, { type: "String", name: "ps" }] }, passTeamApply: { sid: i.team.id, cid: i.team.passTeamApply, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }] }, rejectTeamApply: { sid: i.team.id, cid: i.team.rejectTeamApply, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, addTeamManagers: { sid: i.team.id, cid: i.team.addTeamManagers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, removeTeamManagers: { sid: i.team.id, cid: i.team.removeTeamManagers, params: [{ type: "long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, transferTeam: { sid: i.team.id, cid: i.team.transferTeam, params: [{ type: "long", name: "teamId" }, { type: "String", name: "account" }, { type: "bool", name: "leave" }] }, updateInfoInTeam: { sid: i.team.id, cid: i.team.updateInfoInTeam, params: [{ type: "Property", name: "teamMember" }] }, updateNickInTeam: { sid: i.team.id, cid: i.team.updateNickInTeam, params: [{ type: "Property", name: "teamMember" }] }, acceptTeamInvite: { sid: i.team.id, cid: i.team.acceptTeamInvite, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }] }, rejectTeamInvite: { sid: i.team.id, cid: i.team.rejectTeamInvite, params: [{ type: "long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, getTeamHistoryMsgs: { sid: i.team.id, cid: i.team.getTeamHistoryMsgs, params: [{ type: "long", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "long", name: "lastMsgId" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, searchTeamHistoryMsgs: { sid: i.team.id, cid: i.team.searchTeamHistoryMsgs, params: [{ type: "long", name: "to" }, { type: "long", name: "beginTime" }, { type: "long", name: "endTime" }, { type: "String", name: "keyword" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, updateMuteStateInTeam: { sid: i.team.id, cid: i.team.updateMuteStateInTeam, params: [{ type: "long", name: "teamId" }, { type: "String", name: "account" }, { type: "int", name: "mute" }] }, getMyTeamMembers: { sid: i.team.id, cid: i.team.getMyTeamMembers, params: [{ type: "LongArray", name: "teamIds" }] }, getMutedTeamMembers: { sid: i.team.id, cid: i.team.getMutedTeamMembers, params: [{ type: "long", name: "teamId" }] }, friendRequest: { sid: i.friend.id, cid: i.friend.friendRequest, params: [{ type: "String", name: "account" }, { type: "byte", name: "type" }, { type: "String", name: "ps" }] }, deleteFriend: { sid: i.friend.id, cid: i.friend.deleteFriend, params: [{ type: "String", name: "account" }] }, updateFriend: { sid: i.friend.id, cid: i.friend.updateFriend, params: [{ type: "Property", name: "friend" }] }, getFriends: { sid: i.friend.id, cid: i.friend.getFriends, params: [{ type: "long", name: "timetag" }] }, getChatroomAddress: { sid: i.chatroom.id, cid: i.chatroom.getChatroomAddress, params: [{ type: "long", name: "chatroomId" }] }, sendFilterMsg: { sid: i.filter.id, cid: i.filter.sendFilterMsg, params: [{ type: "Property", name: "msg" }] }, sendFilterCustomSysMsg: { sid: i.filter.id, cid: i.filter.sendFilterCustomSysMsg, params: [{ type: "Property", name: "sysMsg" }] }, publishEvent: { sid: i.eventService.id, cid: i.eventService.publishEvent, params: [{ type: "Property", name: "msgEvent" }] }, pushEvent: { sid: i.eventService.id, cid: i.eventService.pushEvent }, subscribeEvent: { sid: i.eventService.id, cid: i.eventService.subscribeEvent, params: [{ type: "Property", name: "msgEventSubscribe" }, { type: "StrArray", name: "accounts" }] }, unSubscribeEventsByAccounts: { sid: i.eventService.id, cid: i.eventService.unSubscribeEventsByAccounts, params: [{ type: "Property", name: "msgEventSubscribe" }, { type: "StrArray", name: "accounts" }] }, unSubscribeEventsByType: { sid: i.eventService.id, cid: i.eventService.unSubscribeEventsByType, params: [{ type: "Property", name: "msgEventSubscribe" }] }, querySubscribeEventsByAccounts: { sid: i.eventService.id, cid: i.eventService.querySubscribeEventsByAccounts, params: [{ type: "Property", name: "msgEventSubscribe" }, { type: "StrArray", name: "accounts" }] }, querySubscribeEventsByType: { sid: i.eventService.id, cid: i.eventService.querySubscribeEventsByType, params: [{ type: "Property", name: "msgEventSubscribe" }] }, pushEvents: { sid: i.eventService.id, cid: i.eventService.pushEvents } }),
		    s = r.merge({}, o.packetConfig, { "2_3": { service: "auth", cmd: "login", response: [{ type: "Property", name: "loginRes" }, { type: "PropertyArray", name: "loginPorts", entity: "loginPort" }] }, "2_5": { service: "auth", cmd: "kicked", response: [{ type: "Number", name: "from" }, { type: "Number", name: "reason" }] }, "2_6": { service: "auth", cmd: "logout" }, "2_7": { service: "auth", cmd: "multiPortLogin", response: [{ type: "Number", name: "state" }, { type: "PropertyArray", name: "loginPorts", entity: "loginPort" }] }, "2_8": { service: "auth", cmd: "kick", response: [{ type: "StrArray", name: "deviceIds" }] }, "3_3": { service: "user", cmd: "markInBlacklist" }, "3_103": { service: "user", cmd: "syncMarkInBlacklist", response: [{ type: "String", name: "account" }, { type: "Boolean", name: "isAdd" }] }, "3_4": { service: "user", cmd: "getBlacklist", response: [{ type: "StrArray", name: "blacklist" }] }, "3_5": { service: "user", cmd: "markInMutelist" }, "3_105": { service: "user", cmd: "syncMarkInMutelist", response: [{ type: "String", name: "account" }, { type: "Boolean", name: "isAdd" }] }, "3_6": { service: "user", cmd: "getMutelist", response: [{ type: "StrArray", name: "mutelist" }] }, "3_8": { service: "user", cmd: "getRelations", response: [{ type: "PropertyArray", name: "specialRelations", entity: "specialRelation" }, { type: "Number", name: "timetag" }] }, "3_7": { service: "user", cmd: "getUsers", response: [{ type: "PropertyArray", name: "users", entity: "user" }] }, "3_10": { service: "user", cmd: "updateMyInfo", response: [{ type: "Number", name: "timetag" }] }, "3_15": { service: "user", cmd: "updateDonnop", response: [{ type: "Number", name: "timetag" }] }, "3_115": { service: "user", cmd: "syncUpdateDonnop", response: [{ type: "Property", name: "donnop" }, { type: "Number", name: "timetag" }] }, "3_109": { service: "user", cmd: "syncMyInfo", response: [{ type: "Property", name: "user" }, { type: "Number", name: "timetag" }] }, "3_110": { service: "user", cmd: "syncUpdateMyInfo", response: [{ type: "Property", name: "user" }] }, "4_1": { service: "notify" }, "4_2": { service: "notify" }, "4_3": { service: "notify", cmd: "markRead" }, "4_4": { service: "notify", cmd: "syncOfflineMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "4_5": { service: "notify", cmd: "batchMarkRead" }, "4_6": { service: "notify", cmd: "syncOfflineSysMsgs", response: [{ type: "PropertyArray", name: "sysMsgs", entity: "sysMsg" }] }, "4_9": { service: "notify", cmd: "syncRoamingMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "4_12": { service: "notify", cmd: "syncMsgReceipts", response: [{ type: "PropertyArray", name: "msgReceipts", entity: "msgReceipt" }, { type: "Number", name: "timetag" }] }, "4_13": { service: "notify", cmd: "syncDonnop", response: [{ type: "Property", name: "donnop" }, { type: "Number", name: "timetag" }] }, "4_14": { service: "notify", cmd: "syncSessionAck", response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Number", name: "timetag" }] }, "4_100": { service: "notify", cmd: "syncOfflineFilterMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "4_101": { service: "notify", cmd: "syncOfflineFilterSysMsgs", response: [{ type: "PropertyArray", name: "sysMsgs", entity: "sysMsg" }] }, "5_1": { service: "sync", cmd: "syncDone", response: [{ type: "Number", name: "timetag" }] }, "5_2": { service: "sync", cmd: "syncTeamMembersDone", response: [{ type: "Number", name: "timetag" }] }, "7_1": { service: "msg", cmd: "sendMsg", response: [{ type: "Property", name: "msg" }], trivialErrorCodes: [7101] }, "7_2": { service: "msg", cmd: "msg", response: [{ type: "Property", name: "msg" }] }, "7_3": { service: "msg", cmd: "sysMsg", response: [{ type: "Property", name: "sysMsg" }] }, "7_6": { service: "msg", cmd: "getHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "7_7": { service: "msg", cmd: "sendCustomSysMsg", trivialErrorCodes: [7101] }, "7_8": { service: "msg", cmd: "searchHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "7_9": { service: "msg", cmd: "deleteSessions" }, "7_10": { service: "msg", cmd: "getSessions", response: [{ type: "StrArray", name: "sessions" }] }, "7_101": { service: "msg", cmd: "syncSendMsg", response: [{ type: "Property", name: "msg" }] }, "7_11": { service: "msg", cmd: "sendMsgReceipt", response: [{ type: "Property", name: "msgReceipt" }] }, "7_12": { service: "msg", cmd: "msgReceipt", response: [{ type: "Property", name: "msgReceipt" }] }, "7_13": { service: "msg", cmd: "onDeleteMsg" }, "7_14": { service: "msg", cmd: "onMsgDeleted", response: [{ type: "Property", name: "sysMsg" }] }, "7_15": { service: "msg", cmd: "onDeleteMsgOfflineRoaming", response: [{ type: "PropertyArray", name: "sysMsgs", entity: "sysMsg" }, { type: "Number", name: "timetag" }, { type: "Number", name: "type" }] }, "7_16": { service: "msg", cmd: "onMarkSessionAck" }, "7_116": { service: "msg", cmd: "syncMarkSessionAck", response: [{ type: "Number", name: "scene" }, { type: "String", name: "to" }, { type: "Number", name: "timetag" }] }, "8_1": { service: "team", cmd: "createTeam", response: [{ type: "Property", name: "team" }] }, "8_2": { service: "team", cmd: "sendTeamMsg", response: [{ type: "Property", name: "msg" }] }, "8_3": { service: "team", cmd: "teamMsg", response: [{ type: "Property", name: "msg" }] }, "8_4": { service: "team", cmd: "teamMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "8_5": { service: "team", cmd: "addTeamMembers" }, "8_6": { service: "team", cmd: "removeTeamMembers" }, "8_7": { service: "team", cmd: "updateTeam", response: [{ type: "Number", name: "id" }, { type: "Number", name: "time" }] }, "8_8": { service: "team", cmd: "leaveTeam" }, "8_9": { service: "team", cmd: "getTeam", response: [{ type: "Property", name: "team" }] }, "8_10": { service: "team", cmd: "getTeams", response: [{ type: "PropertyArray", name: "teams", entity: "team" }, { type: "Number", name: "timetag" }] }, "8_11": { service: "team", cmd: "getTeamMembers", response: [{ type: "Number", name: "teamId" }, { type: "PropertyArray", name: "members", entity: "teamMember" }, { type: "Number", name: "timetag" }] }, "8_12": { service: "team", cmd: "dismissTeam" }, "8_13": { service: "team", cmd: "applyTeam", response: [{ type: "Property", name: "team" }] }, "8_14": { service: "team", cmd: "passTeamApply" }, "8_15": { service: "team", cmd: "rejectTeamApply" }, "8_16": { service: "team", cmd: "addTeamManagers" }, "8_17": { service: "team", cmd: "removeTeamManagers" }, "8_18": { service: "team", cmd: "transferTeam" }, "8_19": { service: "team", cmd: "updateInfoInTeam" }, "8_20": { service: "team", cmd: "updateNickInTeam" }, "8_21": { service: "team", cmd: "acceptTeamInvite", response: [{ type: "Property", name: "team" }] }, "8_22": { service: "team", cmd: "rejectTeamInvite" }, "8_23": { service: "team", cmd: "getTeamHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "8_24": { service: "team", cmd: "searchTeamHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "8_25": { service: "team", cmd: "updateMuteStateInTeam" }, "8_26": { service: "team", cmd: "getMyTeamMembers",
				response: [{ type: "PropertyArray", name: "teamMembers", entity: "teamMember" }] }, "8_27": { service: "team", cmd: "getMutedTeamMembers", response: [{ type: "Number", name: "teamId" }, { type: "PropertyArray", name: "teamMembers", entity: "teamMember" }] }, "8_126": { service: "team", cmd: "syncMyTeamMembers", response: [{ type: "PropertyArray", name: "teamMembers", entity: "teamMember" }, { type: "Number", name: "timetag" }] }, "8_109": { service: "team", cmd: "syncTeams", response: [{ type: "Number", name: "timetag" }, { type: "PropertyArray", name: "teams", entity: "team" }] }, "8_111": { service: "team", cmd: "syncTeamMembers", response: [{ type: "Number", name: "teamId" }, { type: "PropertyArray", name: "members", entity: "teamMember" }, { type: "Number", name: "timetag" }] }, "8_101": { service: "team", cmd: "syncCreateTeam", response: [{ type: "Property", name: "team" }] }, "8_102": { service: "team", cmd: "syncSendTeamMsg", response: [{ type: "Property", name: "msg" }] }, "8_119": { service: "team", cmd: "syncUpdateTeamMember", response: [{ type: "Property", name: "teamMember" }] }, "12_1": { service: "friend", cmd: "friendRequest" }, "12_101": { service: "friend", cmd: "syncFriendRequest", response: [{ type: "String", name: "account" }, { type: "Number", name: "type" }, { type: "String", name: "ps" }] }, "12_2": { service: "friend", cmd: "deleteFriend" }, "12_102": { service: "friend", cmd: "syncDeleteFriend", response: [{ type: "String", name: "account" }] }, "12_3": { service: "friend", cmd: "updateFriend" }, "12_103": { service: "friend", cmd: "syncUpdateFriend", response: [{ type: "Property", name: "friend" }] }, "12_4": { service: "friend", cmd: "getFriends", response: [{ type: "PropertyArray", name: "friends", entity: "friend" }, { type: "Number", name: "timetag" }] }, "12_5": { service: "friend", cmd: "syncFriends", response: [{ type: "PropertyArray", name: "friends", entity: "friend" }, { type: "Number", name: "timetag" }] }, "12_6": { service: "friend", cmd: "syncFriendUsers", response: [{ type: "PropertyArray", name: "users", entity: "user" }, { type: "Number", name: "timetag" }] }, "13_1": { service: "chatroom", cmd: "getChatroomAddress", response: [{ type: "StrArray", name: "address" }] }, "14_1": { service: "eventService", cmd: "publishEvent", response: [{ type: "Property", name: "msgEvent" }] }, "14_2": { service: "eventService", cmd: "pushEvent", response: [{ type: "Property", name: "msgEvent" }] }, "14_3": { service: "eventService", cmd: "subscribeEvent", response: [{ type: "StrArray", name: "accounts" }] }, "14_4": { service: "eventService", cmd: "unSubscribeEventsByAccounts", response: [{ type: "StrArray", name: "accounts" }] }, "14_5": { service: "eventService", cmd: "unSubscribeEventsByType" }, "14_6": { service: "eventService", cmd: "querySubscribeEventsByAccounts", response: [{ type: "PropertyArray", name: "msgEventSubscribes", entity: "msgEventSubscribe" }] }, "14_7": { service: "eventService", cmd: "querySubscribeEventsByType", response: [{ type: "PropertyArray", name: "msgEventSubscribes", entity: "msgEventSubscribe" }] }, "14_9": { service: "eventService", cmd: "pushEvents", response: [{ type: "PropertyArray", name: "msgEvents", entity: "msgEvent" }] }, "101_1": { service: "filter", cmd: "sendFilterMsg", response: [{ type: "Property", name: "msg" }] }, "101_2": { service: "filter", cmd: "filterMsg", response: [{ type: "Property", name: "msg" }] }, "101_3": { service: "filter", cmd: "filterSysMsg", response: [{ type: "Property", name: "sysMsg" }] }, "101_7": { service: "filter", cmd: "sendFilterCustomSysMsg" } });e.exports = { idMap: i, cmdConfig: a, packetConfig: s };
	}, function (e, t) {
		"use strict";
		var n = {};n.set = function (e, t, r) {
			n[e] = t, r && (r.support = t);
		}, e.exports = n;
	}, function (e, t, n) {
		"use strict";
		function r() {}var o = n(9);r.typeMap = { text: 0, image: 1, audio: 2, video: 3, geo: 4, notification: 5, file: 6, tip: 10, custom: 100 };var i = r.typeReverseMap = { 0: "text", 1: "image", 2: "audio", 3: "video", 4: "geo", 5: "notification", 6: "file", 10: "tip", 100: "custom" };r.validTypes = (0, _keys2.default)(r.typeMap), r.setFlow = function (e, t) {
			var n = t === e.from;n && t === e.to && (n = o.deviceId === e.fromDeviceId), e.flow = n ? "out" : "in";
		}, r.getType = function (e) {
			var t = e.type;return i[t] || t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(50).polyfill;window = window || {}, r(), r(window), localStorage = localStorage || n(31), XMLHttpRequest = XMLHttpRequest || n(33), WebSocket = WebSocket || n(32);
	}, function (e, t, n) {
		(function (t) {
			"use strict";
			var r = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
				return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
			} : function (e) {
				return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
			},
			    o = n(31),
			    i = n(33),
			    a = n(30),
			    s = n(32),
			    c = n(24);e.exports = { polyfill: function polyfill() {
					var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t || window;if ("object" !== ("undefined" == typeof e ? "undefined" : r(e))) throw new Error("polyfill target is not an Object");c(e, { localStorage: o, XMLHttpRequest: i, FormData: a, WebSocket: s, Object: Object, postMessage: function postMessage() {} }), e.localStorage !== o && (e.wxStorage = o);
				}, localStorage: o, XMLHttpRequest: i, FormData: a, WebSocket: s };
		}).call(t, function () {
			return this;
		}());
	}, function (e, t, n) {
		"use strict";
		var r = n(7).fn;r.isConnected = function () {
			return this.protocol.isConnected();
		}, r.connect = function () {
			this.protocol.connect();
		}, r.disconnect = function () {
			this.protocol.disconnect();
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = n(7).fn;o.uploadSdkLogUrl = function (e) {
			return r.verifyOptions(e, "url"), this.cbAndSendCmd("uploadSdkLogUrl", e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(7).fn,
		    o = n(1),
		    i = n(3),
		    a = n(6),
		    s = n(70),
		    c = (n(72), n(36));r.sendText = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.TextMessage(e), t.sendMsg(e);
		}, r.previewFile = function (e) {
			if (o.verifyOptions(e, "done"), e.type || (e.type = "file"), o.verifyParamPresentJustOne(e, "dataURL blob fileInput wxFilePath"), e.dataURL) e.blob = c.fromDataURL(e.dataURL);else if (e.blob) ;else if (e.fileInput) {
				if (e.fileInput = o.verifyFileInput(e.fileInput), e.fileInput.files && !e.fileInput.files.length) return void e.done(i.newNoFileError("请选择" + e.type + "文件"), e);e.fileInputName = o.getFileName(e.fileInput);
			}this.processCallback(e);var t = s.genResponseBody(e.type) || {};this.getNosToken({ responseBody: (0, _stringify2.default)(t).replace(/"/gi, '\\"'), callback: function (t, n) {
					return t ? void e.done(t, e.callback.options) : (e.nosToken = n, void this._doPreviewFile(e));
				}.bind(this) });
		}, r._doPreviewFile = function (e) {
			function t(t, i) {
				if (e.uploaddone = r, t) return t.appendMessage("上传文件失败"), void e.done(t, e.callback.options);if (i = s.parseResponse(i, n.options.exifOrientation), i.url = a.genDownloadUrl(e.nosToken.bucket, c.Object), o.exist(e.fileInputName)) i.name = e.fileInputName;else if (e.blob) {
					var u = e.blob.name;if (i.name = u || "blob-" + i.md5, !u) {
						var l = e.blob.type;i.ext = l.slice(l.lastIndexOf("/") + 1);
					}
				}if (i.name = e.wxFilePath, !i.ext) {
					var p = i.name.lastIndexOf(".");p === -1 ? i.ext = "unknown" : i.ext = i.name.slice(p + 1);
				}return void e.done(null, o.copy(i));
			}var n = this,
			    r = e.uploaddone,
			    i = a.genUploadUrl(e.nosToken.bucket),
			    c = this.assembleUploadParams(e.nosToken),
			    u = "file";o.verifyOptions(e, "wxFilePath"), wx.uploadFile({ url: i, filePath: e.wxFilePath, name: u, formData: c, fail: function fail(e) {}, success: function success(e) {
					if (200 === e.statusCode) try {
						t(null, JSON.parse(e.data));
					} catch (e) {
						t({ code: "PARSE_WX_UPLOAD_FILE_RES_ERROR", str: e.data, msg: e.errMsg });
					} else t({ code: e.statusCode, msg: e.errMsg });
				} });
		}, r.sendFile = function (e) {
			var t = this;if (e.type || (e.type = "file"), o.verifyParamPresentJustOne(e, "dataURL blob fileInput file wxFilePath"), t.processCallback(e), e.dataURL) t._previewAndSendFile(e);else if (e.blob) t._previewAndSendFile(e);else if (e.fileInput) {
				if (e.fileInput = o.verifyFileInput(e.fileInput), e.fileInput.files && !e.fileInput.files.length) return void e.done(i.newNoFileError("请选择" + e.type + "文件"), e.callback.options);t._previewAndSendFile(e);
			} else if (e.wxFilePath) t._previewAndSendFile(e);else if (e.file) return e.msg = new t.message.FileMessage(e), t.sendMsg(e);
		}, r._previewAndSendFile = function (e) {
			var t = this;o.verifyCallback(e, "uploaddone beforesend");var n = e.done;e.done = function (r, i) {
				e.done = n, r ? e.uploaddone(r, e.callback.options) : (e.uploaddone(null, o.copy(i)), e.file = i, e.msg = new t.message.FileMessage(e), e.beforesend(t.sendMsg(e)));
			}, t.previewFile(e);
		}, r.assembleUploadParams = function (e) {
			return e ? { Object: decodeURIComponent(e.objectName), "x-nos-token": e.token, "x-nos-entity-type": "json" } : null;
		}, r.sendGeo = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.GeoMessage(e), t.sendMsg(e);
		}, r.sendTipMsg = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.TipMessage(e), t.sendMsg(e);
		}, r.sendCustomMsg = function (e) {
			var t = this;return t.processCallback(e), e.msg = new t.message.CustomMessage(e), t.sendMsg(e);
		}, r.sendMsg = function (e) {
			var t = this,
			    n = t.protocol,
			    r = e.msg,
			    i = {},
			    a = !!e.isLocal;if (a && e.time && (r.time = e.time), e.resend && ("out" !== e.flow || "fail" !== e.status)) return o.onError("只能重发发送失败的消息");e.callback.options.idClient = r.idClient, t.beforeSendMsg(e, i);var s = e.rtnMsg = t.formatReturnMsg(r);return a && (s.status = "success", s.isLocal = !0), n.storeSendMsg && (i.promise = n.storeSendMsg(s)), e.cbaop = function (e) {
				if (e && "server" !== e.from) return s.status = "fail", n.updateSendMsgError && n.updateSendMsgError(s), s;
			}, a || (i.msg = r, t.sendCmd(e.cmd, i, e.callback)), t.afterSendMsg(e), a && setTimeout(function () {
				s = o.simpleClone(s), e.done(null, s);
			}, 0), o.copy(s);
		}, r.beforeSendMsg = function () {}, r.afterSendMsg = function () {}, r.formatReturnMsg = function (e) {
			var t = this;return e = o.copy(e), t.protocol.completeMsg(e), e.status = "sending", e = t.message.reverse(e);
		}, r.resendMsg = function (e) {
			var t = this;return o.verifyOptions(e, "msg"), t.trimMsgFlag(e), e.resend = !0, t._sendMsgByType(e);
		}, r.forwardMsg = function (e) {
			var t = this;return o.verifyOptions(e, "msg"), t.beforeForwardMsg(e), t.trimMsgFlag(e), e.forward = !0, t._sendMsgByType(e);
		}, r.trimMsgFlag = function (e) {
			e && e.msg && (e.mgs = o.copy(e.msg), delete e.msg.resend, delete e.msg.forward);
		}, r.beforeForwardMsg = function () {}, r._sendMsgByType = function (e) {
			var t = this;switch (o.verifyOptions(e, "msg"), o.verifyParamValid("msg.type", e.msg.type, t.message.validTypes), o.merge(e, e.msg), e.type) {case "text":
					return t.sendText(e);case "image":case "audio":case "video":case "file":
					return t.sendFile(e);case "geo":
					return t.sendGeo(e);case "custom":
					return t.sendCustomMsg(e);case "tip":
					return t.sendTipMsg(e);default:
					throw new i("不能发送类型为 " + e.type + " 的消息");}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = n(7).fn,
		    i = n(34);o.getSimpleNosToken = function () {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return e.num = 1, r.verifyOptions(e), this.cbAndSendCmd("getSimpleNosToken", e);
		}, o.getNosToken = function (e) {
			this.sendCmd("getNosToken", { responseBody: e.responseBody }, e.callback);
		}, o.packFileDownloadName = function (e) {
			r.verifyOptions(e, "url name");var t = e.url;return t + r.genUrlSep(t) + "download=" + encodeURIComponent(e.name);
		}, o.audioToMp3 = function (e) {
			r.verifyOptions(e, "url");var t = e.url;return t + r.genUrlSep(t) + "audioTrans&type=mp3";
		}, o.stripImageMeta = function (e) {
			return this.beforeProcessImage(e, "stripmeta");
		}, o.qualityImage = function (e) {
			return this.beforeProcessImage(e, "quality");
		}, o.interlaceImage = function (e) {
			return this.beforeProcessImage(e, "interlace");
		}, o.rotateImage = function (e) {
			return this.beforeProcessImage(e, "rotate");
		}, o.blurImage = function (e) {
			return this.beforeProcessImage(e, "blur");
		}, o.cropImage = function (e) {
			return this.beforeProcessImage(e, "crop");
		}, o.thumbnailImage = function (e) {
			return this.beforeProcessImage(e, "thumbnail");
		}, o.beforeProcessImage = function (e, t) {
			var n = r.copy(e);return n.type = t, e.ops = [n], this.processImage(e);
		}, o.processImage = function (e) {
			var t = this;r.verifyOptions(e, "url ops"), r.verifyParamType("ops", e.ops, "array");var n = e.ops.map(function (e) {
				return r.verifyOptions(e, "type"), r.verifyParamValid("type", e.type, i.validTypes), t["gen" + e.type.slice(0, 1).toUpperCase() + e.type.slice(1) + "Op"](e);
			});t.processCallback(e), t.sendCmd("processImage", { url: e.url, imageOps: n }, e.callback);
		}, o.genStripmetaOp = function (e) {
			return new i({ type: e.type, stripmeta: e.strip ? 1 : 0 });
		}, o.genQualityOp = function (e) {
			r.verifyOptions(e, "quality"), r.verifyParamType("quality", e.quality, "number"), r.verifyParamMin("quality", e.quality, 0), r.verifyParamMax("quality", e.quality, 100);var t = Math.round(e.quality);return new i({ type: e.type, qualityQuality: t });
		}, o.genInterlaceOp = function (e) {
			return new i({ type: e.type });
		}, o.genRotateOp = function (e) {
			for (r.verifyOptions(e, "angle"), r.verifyParamType("angle", e.angle, "number"); e.angle < 0;) {
				e.angle = e.angle + 360;
			}e.angle = e.angle % 360;var t = Math.round(e.angle);return new i({ type: e.type, rotateAngle: t });
		}, o.genBlurOp = function (e) {
			r.verifyOptions(e, "radius sigma"), r.verifyParamType("radius", e.radius, "number"), r.verifyParamMin("radius", e.radius, 1), r.verifyParamMax("radius", e.radius, 50), r.verifyParamType("sigma", e.sigma, "number"), r.verifyParamMin("sigma", e.sigma, 0);var t = Math.round(e.radius),
			    n = Math.round(e.sigma);return new i({ type: e.type, blurRadius: t, blurSigma: n });
		}, o.genCropOp = function (e) {
			r.verifyOptions(e, "x y width height"), r.verifyParamType("x", e.x, "number"), r.verifyParamMin("x", e.x, 0), r.verifyParamType("y", e.y, "number"), r.verifyParamMin("y", e.y, 0), r.verifyParamType("width", e.width, "number"), r.verifyParamMin("width", e.width, 0), r.verifyParamType("height", e.height, "number"), r.verifyParamMin("height", e.height, 0);var t = Math.round(e.x),
			    n = Math.round(e.y),
			    o = Math.round(e.width),
			    a = Math.round(e.height);return new i({ type: e.type, cropX: t, cropY: n, cropWidth: o, cropHeight: a });
		}, o.genThumbnailOp = function () {
			var e = { cover: "z", contain: "x", crop: "y" };return function (t) {
				r.verifyOptions(t, "mode"), r.verifyParamValid("mode", t.mode, (0, _keys2.default)(e)), "contain" === t.mode ? r.verifyParamAtLeastPresentOne(t, "width height") : r.verifyOptions(t, "width height"), r.undef(t.width) && (t.width = 0), r.undef(t.height) && (t.height = 0), r.verifyParamType("width", t.width, "number"), r.verifyParamMin("width", t.width, 0), r.verifyParamType("height", t.height, "number"), r.verifyParamMin("height", t.height, 0);var n = Math.round(t.width),
				    o = Math.round(t.height),
				    a = new i({ type: t.type, thumbnailMode: e[t.mode], thumbnailWidth: n, thumbnailHeight: o });if ("crop" === t.mode && r.notundef(t.axis)) {
					r.undef(t.axis.x) && (t.axis.x = 5), r.undef(t.axis.y) && (t.axis.y = 5), r.verifyParamMin("axis.x", t.axis.x, 0), r.verifyParamMax("axis.x", t.axis.x, 10), r.verifyParamMin("axis.y", t.axis.y, 0), r.verifyParamMax("axis.y", t.axis.y, 10);var s = Math.round(t.axis.x),
					    c = Math.round(t.axis.y);a.thumbnailAxisX = s, a.thumbnailAxisY = c;
				}return r.notundef(t.enlarge) && (r.verifyParamType("enlarge", t.enlarge, "boolean"), t.enlarge && (a.thumbnailEnlarge = 1)), a;
			};
		}();
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			e = "" + e;var t = e.indexOf("?") === -1 ? "?imageView&" : "&";return t;
		}function o(e) {
			e = e || "";var t = e.indexOf("https") >= 0 ? "https://" : "http://",
			    n = e.replace(t, "");n.indexOf("?") >= 0 && (n = n.substring(0, n.indexOf("?")));var r = n.split("/");n = r[0];var o = "";if (r.length > 0 && (o = r.slice(1).join("/")), e.indexOf("?") === -1) return { protocol: t, hostname: n, path: o, query: {} };var i = function () {
				var r = e.substr(e.indexOf("?") + 1),
				    i = r.split("&"),
				    a = {};return i.forEach(function (e) {
					if (e.indexOf("=") > 0) {
						var t = e.split("=");a[t[0]] = decodeURIComponent(t[1]);
					} else a[e] = "";
				}), { v: { protocol: t, hostname: n, path: o, query: a } };
			}();return "object" === ("undefined" == typeof i ? "undefined" : a(i)) ? i.v : void 0;
		}function i(e) {
			var t = e.protocol,
			    n = e.hostname,
			    r = e.path,
			    o = e.query;t = t || "http://", n = n || "", r && (n = n + "/" + r), o = o || {};var i = [];for (var a in o) {
				"imageView" !== a && i.push(a + "=" + encodeURIComponent(o[a]));
			}return i.length > 0 ? "" + t + n + "?imageView&" + i.join("&") : "" + t + n;
		}var a = "function" == typeof _symbol2.default && "symbol" == (0, _typeof3.default)(_iterator2.default) ? function (e) {
			return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		} : function (e) {
			return e && "function" == typeof _symbol2.default && e.constructor === _symbol2.default && e !== _symbol2.default.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
		},
		    s = n(1),
		    c = n(7).fn;c.viewImageSync = function (e) {
			var t = this.options;s.verifyOptions(e, "url");var n = e.url,
			    r = o(n),
			    c = r.protocol,
			    u = r.hostname,
			    l = r.path,
			    p = r.query;if ("boolean" == typeof e.strip && (p.stripmeta = e.strip ? 1 : 0), "number" == typeof e.quality && (s.verifyParamMin("quality", e.quality, 0), s.verifyParamMax("quality", e.quality, 100), p.quality = Math.round(e.quality)), "boolean" == typeof e.interlace && (p.interlace = e.interlace ? 1 : 0), "number" == typeof e.rotate && (p.rotate = Math.round(e.rotate)), "object" === a(e.thumbnail)) {
				var f = e.thumbnail.mode || "crop",
				    d = e.thumbnail.width,
				    m = e.thumbnail.height;if (d >= 0 && m >= 0 && d < 4096 && m < 4096 && (d > 0 || m > 0)) {
					switch (f) {case "crop":
							f = "y";break;case "contain":
							f = "x";break;case "cover":
							f = "z";break;default:
							f = "x";}p.thumbnail = "" + d + f + m;
				}
			}if (t.downloadUrl) {
				var y = o(t.downloadUrl);return i({ protocol: y.protocol, hostname: y.hostname, path: l, query: (0, _assign2.default)(y.query, p) });
			}return i({ protocol: c, hostname: u, path: l, query: p });
		}, c.viewImageStripMeta = function (e) {
			s.verifyOptions(e, "url strip"), s.verifyParamType("strip", e.strip, "boolean");var t = "stripmeta=" + (e.strip ? 1 : 0),
			    n = r(e.url);return e.url + n + t;
		}, c.viewImageQuality = function (e) {
			s.verifyOptions(e, "url quality"), s.verifyParamType("quality", e.quality, "number"), s.verifyParamMin("quality", e.quality, 0), s.verifyParamMax("quality", e.quality, 100);var t = Math.round(e.quality),
			    n = "quality=" + t,
			    o = r(e.url);return e.url + o + n;
		}, c.viewImageInterlace = function (e) {
			s.verifyOptions(e, "url");var t = "interlace=1",
			    n = r(e.url);return e.url + n + t;
		}, c.viewImageRotate = function (e) {
			for (s.verifyOptions(e, "url angle"), s.verifyParamType("angle", e.angle, "number"); e.angle < 0;) {
				e.angle = e.angle + 360;
			}e.angle = e.angle % 360;var t = Math.round(e.angle),
			    n = "rotate=" + t,
			    o = r(e.url);return e.url + o + n;
		}, c.viewImageBlur = function (e) {
			s.verifyOptions(e, "url radius sigma"), s.verifyParamType("radius", e.radius, "number"), s.verifyParamMin("radius", e.radius, 1), s.verifyParamMax("radius", e.radius, 50), s.verifyParamType("sigma", e.sigma, "number"), s.verifyParamMin("sigma", e.sigma, 0);var t = Math.round(e.radius),
			    n = Math.round(e.sigma),
			    o = "blur=" + t + "x" + n,
			    i = r(e.url);return e.url + i + o;
		}, c.viewImageCrop = function (e) {
			s.verifyOptions(e, "url x y width height"), s.verifyParamType("x", e.x, "number"), s.verifyParamMin("x", e.x, 0), s.verifyParamType("y", e.y, "number"), s.verifyParamMin("y", e.y, 0), s.verifyParamType("width", e.width, "number"), s.verifyParamMin("width", e.width, 0), s.verifyParamType("height", e.height, "number"), s.verifyParamMin("height", e.height, 0);var t = Math.round(e.x),
			    n = Math.round(e.y),
			    o = Math.round(e.width),
			    i = Math.round(e.height),
			    a = "crop=" + t + "_" + n + "_" + o + "_" + i,
			    c = r(e.url);return e.url + c + a;
		}, c.viewImageThumbnail = function () {
			var e = { cover: "z", contain: "x", crop: "y" };return function (t) {
				s.verifyOptions(t, "url mode"), s.verifyParamValid("mode", t.mode, (0, _keys2.default)(e)), "contain" === t.mode ? s.verifyParamAtLeastPresentOne(t, "width height") : s.verifyOptions(t, "width height"), s.undef(t.width) && (t.width = 0), s.undef(t.height) && (t.height = 0), s.verifyParamType("width", t.width, "number"), s.verifyParamMin("width", t.width, 0), s.verifyParamType("height", t.height, "number"), s.verifyParamMin("height", t.height, 0);var n = Math.round(t.width),
				    o = Math.round(t.height),
				    i = "thumbnail=" + n + e[t.mode] + o;if ("crop" === t.mode && s.notundef(t.axis)) {
					s.undef(t.axis.x) && (t.axis.x = 5), s.undef(t.axis.y) && (t.axis.y = 5), s.verifyParamMin("axis.x", t.axis.x, 0), s.verifyParamMax("axis.x", t.axis.x, 10), s.verifyParamMin("axis.y", t.axis.y, 0), s.verifyParamMax("axis.y", t.axis.y, 10);var a = Math.round(t.axis.x),
					    c = Math.round(t.axis.y);i = i + "&axis=" + a + "_" + c;
				}s.notundef(t.enlarge) && (s.verifyParamType("enlarge", t.enlarge, "boolean"), t.enlarge && (i += "&enlarge=1"));var u = r(t.url);return t.url + u + i;
			};
		}();
	}, function (e, t, n) {
		"use strict";
		n(49);
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;i(e.name) && (t.name = "" + e.name), i(e.announcement) && (t.announcement = "" + e.announcement), i(e.broadcastUrl) && (t.broadcastUrl = "" + e.broadcastUrl), i(e.custom) && (t.custom = "" + e.custom);
		}var o = n(1),
		    i = o.notundef,
		    a = o.undef;r.reverse = function (e) {
			var t = o.copy(e);return a(t.announcement) && (t.announcement = ""), a(t.broadcastUrl) && (t.broadcastUrl = ""), a(t.custom) && (t.custom = ""), i(t.createTime) && (t.createTime = +t.createTime), i(t.updateTime) && (t.updateTime = +t.updateTime), i(t.onlineMemberNum) && (t.onlineMemberNum = +t.onlineMemberNum), i(t.mute) && (t.mute = "1" === t.mute), t;
		}, e.exports = r;
	},, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    o = n(3),
		    i = n(11),
		    a = n(18),
		    s = n(9),
		    c = n(6),
		    u = n(1),
		    l = u.notundef;r.login = function () {
			var e = this;e.sendCmd("login", e.assembleLogin(), e.onLogin.bind(e)), e.autoconnect = !1;
		}, r.genSessionKey = function () {
			var e = {};return function () {
				var t = this,
				    n = t.name,
				    r = e[n] = e[n] || u.guid();return r;
			};
		}(), r.assembleIMLogin = function () {
			var e = this,
			    t = e.options,
			    n = t.account,
			    r = e.autoconnect ? 0 : 1;return { appLogin: r, appKey: t.appKey, account: n, token: t.token, sdkVersion: c.info.sdkVersion, protocolVersion: c.info.protocolVersion, os: i.os.toString(), browser: i.name + " " + i.version, session: e.genSessionKey(), deviceId: s.deviceId };
		}, r.onLogin = function (e, t) {
			var n = this;n.loginResult = t, e ? n.onAuthError(e) : (n.startHeartbeat(), n.afterLogin(t));
		}, r.afterLogin = u.emptyFunc, r.notifyLogin = function () {
			var e = this,
			    t = e.loginResult;e.logger.info("onConnect", t), e.options.onconnect(t);
		}, r.logout = function () {
			var e = this;if (e.isConnected()) {
				var t = new o("主动退出", "logout");e.onAuthError(t);
			}
		}, r.onKicked = function (e) {
			var t = this,
			    n = e.content,
			    r = n.from,
			    i = n.reason,
			    s = n.custom,
			    c = { reason: t.kickedReasons[i] || "unknown", message: t.kickedMessages[i] || "未知原因" };if (l(r) && (c.from = a.reverseType(r)), l(s) && (c.custom = s), t.shouldNotifyKicked(c)) {
				var p = new o("被踢了", "kicked");u.merge(p, c), t.onAuthError(p);
			} else t.logger.warn("silentlyKick"), t.shouldReconnect = !1, t.hasNotifyDisconnected = !0, t.disconnectSocket();
		}, r.shouldNotifyKicked = function (e) {
			return "silentlyKick" !== e.reason;
		}, r.onAuthError = function (e) {
			var t = this;t.shouldReconnect = !1, t.markAllCallbackInvalid(e || o.newConnectionError()), t.notifyDisconnect(e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    o = n(3),
		    i = n(73),
		    a = n(17),
		    s = n(6),
		    c = n(1);r.initConnect = function () {
			var e = this;e.socket = null, e.retryCount = 0, e.connecting = !1, e.shouldReconnect = !0, e.hasNotifyDisconnected = !1;
		}, r.resetConnect = function () {
			var e = this,
			    t = e.options;c.notundef(t.needReconnect) ? (c.verifyParamType("needReconnect", t.needReconnect, "boolean"), e.needReconnect = t.needReconnect) : e.needReconnect = !0, c.notundef(t.reconnectionAttempts) && c.verifyParamType("reconnectionAttempts", t.reconnectionAttempts, "number"), e.reconnectionAttempts = t.reconnectionAttempts || 1 / 0, e.backoff = new i({ min: s.reconnectionDelay, max: s.reconnectionDelayMax, jitter: s.reconnectionJitter });
		}, r.connect = function () {
			var e = this;if (!e.isConnected() && !e.connecting) if (e.connecting = !0, e.hasNotifyDisconnected = !1, e.socket) e.logger.info("connecting"), e.socket.socket.connect();else {
				var t = e.getNextSocketUrl();t ? e.connectToUrl(t) : e.refreshSocketUrl();
			}
		}, r.getNextSocketUrl = function () {
			return this.socketUrls.shift();
		}, r.isConnected = function () {
			var e = this;return !!e.socket && !!e.socket.socket && e.socket.socket.connected;
		}, r.connectToUrl = function (e) {
			var t = this;if (t.logger.log("try connect to ", e), !window.location) {
				var n = e.split(":");window.location = { protocol: n[0], hostname: n[1].slice(2), port: n[2] };
			}this.options.transports = ["websocket"];var r = this.options.transports || ["websocket", "xhr-polling"];t.socket = a.connect(e, { transports: r, reconnect: !1, "force new connection": !0, "connect timeout": s.connectTimeout }), t.socket.on("connect", t.onConnect.bind(t)), t.socket.on("handshake_failed", t.onHandshakeFailed.bind(t)), t.socket.on("connect_failed", t.onConnectFailed.bind(t)), t.socket.on("error", t.onError.bind(t)), t.socket.on("message", t.onMessage.bind(t)), t.socket.on("disconnect", function () {
				t.logger.info("socket disconnect"), t.onDisconnect(!0);
			});
		}, r.disconnect = function () {
			var e = this;e.isConnected() && (e.logger.info("disconnecting"), e.logout());
		}, r.onConnect = function () {
			var e = this;e.backoff && e.backoff.reset(), e.retryCount = 0, e.connecting = !1, e.shouldReconnect = !0, e.hasNotifyDisconnected = !1, e.login();
		}, r.onHandshakeFailed = function () {
			this.onDisconnect();
		}, r.onConnectFailed = function () {
			this.onDisconnect();
		}, r.onError = function () {
			var e = arguments[0];e && this.notifyError(new o(e));
		}, r.onDisconnect = function () {
			var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
			    t = this;t.connected = e, t.connecting = !1, t.markAllCallbackInvalid(o.newNetworkError()), t.stopHeartbeat(), t.reconnect();
		}, r.willReconnect = function () {
			var e = this;return e.shouldReconnect && e.needReconnect && e.retryCount < e.reconnectionAttempts;
		}, r.reconnect = function () {
			var e = this;if (e.willReconnect()) {
				e.socket = null, e.connected && (e.autoconnect = !0), e.retryCount++;var t = e.backoff.duration();e.logger.log("will retry after", t + "ms", ", retryCount", e.retryCount), e.options.onwillreconnect({ retryCount: e.retryCount, duration: t }), setTimeout(function () {
					e.connect();
				}, t);
			} else e.notifyDisconnect();
		}, r.notifyConnectError = function (e) {
			var t = this,
			    n = o.newConnectError(e);t.logger.error(n), t.options.onerror(n);
		}, r.notifyDisconnect = function (e) {
			var t = this;t.hasNotifyDisconnected || (t.hasNotifyDisconnected = !0, t.disconnectSocket(), e = e || new o(), e.retryCount = t.retryCount, e.willReconnect = t.willReconnect(), t.backoff && t.backoff.reset(), t.retryCount = 0, t.connecting = !1, t.logger.info("onDisconnect", e), t.options.ondisconnect(e));
		}, r.disconnectSocket = function () {
			var e = this;if (e.isConnected()) try {
				e.socket.disconnect(), e.socket = null;
			} catch (e) {}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    o = n(6);r.processLink = function (e) {
			switch (e.cmd) {case "heartbeat":}
		}, r.startHeartbeat = function () {
			var e = this;e.stopHeartbeat(), e.heartbeatTimer = setTimeout(function () {
				e.sendCmd("heartbeat", null, e.onHeartbeat.bind(e));
			}, o.heartbeatInterval);
		}, r.stopHeartbeat = function () {
			var e = this;e.heartbeatTimer && (clearTimeout(e.heartbeatTimer), e.heartbeatTimer = null);
		}, r.onHeartbeat = function (e, t) {
			var n = this;e || n.startHeartbeat(), n.onMiscError(e, t, "heartbeat");
		}, r.heartbeat = function () {};
	}, function (e, t, n) {
		"use strict";
		var r = n(10).fn,
		    o = n(34);r.processMisc = function (e) {
			switch (e.cmd) {case "getSimpleNosToken":
					e.error || (e.obj = e.content.nosTokens[0]);break;case "getNosToken":
					e.error || (e.obj = e.content.nosToken);break;case "notifyUploadLog":
					e.error || this.emitAPI({ type: "notifyUploadLog" });break;case "audioToText":
					e.error || (e.obj.text = e.content.text);break;case "processImage":
					e.obj.imageOps = o.reverseImageOps(e.obj.imageOps), e.error || (e.obj = { url: e.content.url });}
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = n(35),
		    i = r.merge({}, o.idMap, { chatroom: { id: 13, login: 2, kicked: 3, logout: 4, sendMsg: 6, msg: 7, getChatroomMembers: 8, getHistoryMsgs: 9, markChatroomMember: 11, closeChatroom: 12, getChatroom: 13, updateChatroom: 14, updateMyChatroomMemberInfo: 15, getChatroomMembersInfo: 16, kickChatroomMember: 17, updateChatroomMemberTempMute: 19, queueOffer: 20, queuePoll: 21, queueList: 22, queueDrop: 24, queueInit: 25 } }),
		    a = r.merge({}, o.cmdConfig, { login: { sid: i.chatroom.id, cid: i.chatroom.login, params: [{ type: "byte", name: "type" }, { type: "Property", name: "login" }, { type: "Property", name: "imLogin" }] }, logout: { sid: i.chatroom.id, cid: i.chatroom.logout }, sendMsg: { sid: i.chatroom.id, cid: i.chatroom.sendMsg, params: [{ type: "Property", name: "msg" }] }, getChatroomMembers: { sid: i.chatroom.id, cid: i.chatroom.getChatroomMembers, params: [{ type: "byte", name: "type" }, { type: "long", name: "time" }, { type: "int", name: "limit" }] }, getHistoryMsgs: { sid: i.chatroom.id, cid: i.chatroom.getHistoryMsgs, params: [{ type: "long", name: "timetag" }, { type: "int", name: "limit" }, { type: "bool", name: "reverse" }] }, markChatroomMember: { sid: i.chatroom.id, cid: i.chatroom.markChatroomMember, params: [{ type: "string", name: "account" }, { type: "int", name: "type" }, { type: "bool", name: "isAdd" }, { type: "int", name: "level" }, { type: "string", name: "custom" }] }, closeChatroom: { sid: i.chatroom.id, cid: i.chatroom.closeChatroom, params: [{ type: "string", name: "custom" }] }, getChatroom: { sid: i.chatroom.id, cid: i.chatroom.getChatroom }, updateChatroom: { sid: i.chatroom.id, cid: i.chatroom.updateChatroom, params: [{ type: "Property", name: "chatroom" }, { type: "boolean", name: "needNotify" }, { type: "String", name: "custom" }] }, updateMyChatroomMemberInfo: { sid: i.chatroom.id, cid: i.chatroom.updateMyChatroomMemberInfo, params: [{ type: "Property", name: "chatroomMember" }, { type: "boolean", name: "needNotify" }, { type: "String", name: "custom" }, { type: "boolean", name: "needSave" }] }, getChatroomMembersInfo: { sid: i.chatroom.id, cid: i.chatroom.getChatroomMembersInfo, params: [{ type: "StrArray", name: "accounts" }] }, kickChatroomMember: { sid: i.chatroom.id, cid: i.chatroom.kickChatroomMember, params: [{ type: "string", name: "account" }, { type: "string", name: "custom" }] }, updateChatroomMemberTempMute: { sid: i.chatroom.id, cid: i.chatroom.updateChatroomMemberTempMute, params: [{ type: "String", name: "account" }, { type: "long", name: "duration" }, { type: "boolean", name: "needNotify" }, { type: "String", name: "custom" }] }, queueOffer: { sid: i.chatroom.id, cid: i.chatroom.queueOffer, params: [{ type: "string", name: "elementKey" }, { type: "string", name: "elementValue" }] }, queuePoll: { sid: i.chatroom.id, cid: i.chatroom.queuePoll, params: [{ type: "string", name: "elementKey" }] }, queueList: { sid: i.chatroom.id, cid: i.chatroom.queueList }, queueDrop: { sid: i.chatroom.id, cid: i.chatroom.queueDrop }, queueInit: { sid: i.chatroom.id, cid: i.chatroom.queueInit, params: [{ type: "int", name: "limit" }] } }),
		    s = "chatroom",
		    c = r.merge({}, o.packetConfig, { "4_10": { service: "notify" }, "4_11": { service: "notify" }, "13_2": { service: s, cmd: "login", response: [{ type: "Property", name: "chatroom" }, { type: "Property", name: "chatroomMember" }] }, "13_3": { service: s, cmd: "kicked", response: [{ type: "Number", name: "reason" }, { type: "String", name: "custom" }] }, "13_4": { service: s, cmd: "logout" }, "13_6": { service: s, cmd: "sendMsg", response: [{ type: "Property", name: "msg" }] }, "13_7": { service: s, cmd: "msg", response: [{ type: "Property", name: "msg" }] }, "13_8": { service: s, cmd: "getChatroomMembers", response: [{ type: "PropertyArray", name: "members", entity: "chatroomMember" }] }, "13_9": { service: s, cmd: "getHistoryMsgs", response: [{ type: "PropertyArray", name: "msgs", entity: "msg" }] }, "13_11": { service: s, cmd: "markChatroomMember", response: [{ type: "Property", name: "chatroomMember" }] }, "13_12": { service: s, cmd: "closeChatroom" }, "13_13": { service: s, cmd: "getChatroom", response: [{ type: "Property", name: "chatroom" }] }, "13_14": { service: s, cmd: "updateChatroom" }, "13_15": { service: s, cmd: "updateMyChatroomMemberInfo" }, "13_16": { service: s, cmd: "getChatroomMembersInfo", response: [{ type: "PropertyArray", name: "members", entity: "chatroomMember" }] }, "13_17": { service: s, cmd: "kickChatroomMember" }, "13_19": { service: s, cmd: "updateChatroomMemberTempMute" }, "13_20": { service: s, cmd: "queueOffer" }, "13_21": { service: s, cmd: "queuePoll", response: [{ type: "String", name: "elementKey" }, { type: "String", name: "elementValue" }] }, "13_22": { service: s, cmd: "queueList", response: [{ type: "KVArray", name: "queueList" }] }, "13_24": { service: s, cmd: "queueDrop" }, "13_25": { service: s, cmd: "queueInit" } });e.exports = { idMap: i, cmdConfig: a, packetConfig: c };
	}, function (e, t) {
		"use strict";
		e.exports = { imLogin: { os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, deviceId: 13, appKey: 18, account: 19, browser: 24, session: 26, token: 1e3 }, nosToken: { objectName: 1, token: 2, bucket: 3, expireTime: 4 }, audioToText: { url: 2 }, imageOp: { type: 0, stripmeta: 1, typeType: 2, blurRadius: 3, blurSigma: 4, qualityQuality: 5, cropX: 6, cropY: 7, cropWidth: 8, cropHeight: 9, rotateAngle: 10, pixelPixel: 11, thumbnailMode: 12, thumbnailWidth: 13, thumbnailHeight: 14, thumbnailAxisX: 15, thumbnailAxisY: 16, thumbnailCenterX: 17, thumbnailCenterY: 18, thumbnailEnlarge: 19, thumbnailToStatic: 20, watermarkType: 21, watermarkGravity: 22, watermarkDissolve: 23, watermarkDx: 24, watermarkDy: 25, watermarkImage: 26, watermarkText: 27, watermarkFont: 28, watermarkFontSize: 29, watermarkFontColor: 30, interlace: 31 }, login: { appKey: 1, account: 2, deviceId: 3, chatroomId: 5, chatroomNick: 20, chatroomAvatar: 21, chatroomCustom: 22, chatroomEnterCustom: 23, session: 26 }, chatroom: { id: 1, name: 3, announcement: 4, broadcastUrl: 5, custom: 12, createTime: 14, updateTime: 15, creator: 100, onlineMemberNum: 101, mute: 102 }, msg: { idClient: 1, type: 2, attach: 3, custom: 4, resend: 5, userUpdateTime: 6, fromNick: 7, fromAvatar: 8, fromCustom: 9, yidunEnable: 10, antiSpamContent: 11, time: 20, from: 21, chatroomId: 22, fromClientType: 23 }, chatroomMember: { chatroomId: 1, account: 2, type: 3, level: 4, nick: 5, avatar: 6, custom: 7, online: 8, guest: 9, enterTime: 10, blacked: 12, gaged: 13, valid: 14, updateTime: 15, tempMuted: 16, tempMuteDuration: 17 } };
	}, function (e, t) {
		"use strict";
		e.exports = { nosToken: { objectName: 1, token: 2, bucket: 3, expireTime: 4 }, audioToText: { url: 2 }, imageOp: { type: 0, stripmeta: 1, typeType: 2, blurRadius: 3, blurSigma: 4, qualityQuality: 5, cropX: 6, cropY: 7, cropWidth: 8, cropHeight: 9, rotateAngle: 10, pixelPixel: 11, thumbnailMode: 12, thumbnailWidth: 13, thumbnailHeight: 14, thumbnailAxisX: 15, thumbnailAxisY: 16, thumbnailCenterX: 17, thumbnailCenterY: 18, thumbnailEnlarge: 19, thumbnailToStatic: 20, watermarkType: 21, watermarkGravity: 22, watermarkDissolve: 23, watermarkDx: 24, watermarkDy: 25, watermarkImage: 26, watermarkText: 27, watermarkFont: 28, watermarkFontSize: 29, watermarkFontColor: 30, interlace: 31 }, login: { os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, deviceId: 13, appKey: 18, account: 19, browser: 24, session: 26, token: 1e3 }, loginRes: { lastLoginDeviceId: 17, connectionId: 102, ip: 103, port: 104, country: 106 }, loginPort: { type: 3, os: 4, mac: 5, deviceId: 13, account: 19, connectionId: 102, ip: 103, time: 109 }, sync: { myInfo: 1, offlineMsgs: 2, teams: 3, roamingMsgs: 7, relations: 9, friends: 11, sessions: 12,
				friendUsers: 13, msgReceipts: 14, myTeamMembers: 15, donnop: 16, deleteMsg: 17, sessionAck: 18, filterMsgs: 100 }, donnop: { open: 1 }, team: { teamId: 1, name: 3, type: 4, owner: 5, level: 6, selfCustom: 7, valid: 8, memberNum: 9, memberUpdateTime: 10, createTime: 11, updateTime: 12, validToCurrentUser: 13, intro: 14, announcement: 15, joinMode: 16, bits: 17, custom: 18, serverCustom: 19, avatar: 20, beInviteMode: 21, inviteMode: 22, updateTeamMode: 23, updateCustomMode: 24, mute: 100 }, teamMember: { teamId: 1, account: 3, type: 4, nickInTeam: 5, bits: 7, active: 8, valid: 9, joinTime: 10, updateTime: 11, custom: 12, mute: 13 }, msg: { scene: 0, to: 1, from: 2, fromClientType: 4, fromDeviceId: 5, fromNick: 6, time: 7, type: 8, body: 9, attach: 10, idClient: 11, idServer: 12, resend: 13, userUpdateTime: 14, custom: 15, pushPayload: 16, pushContent: 17, apnsAccounts: 18, apnsContent: 19, apnsForcePush: 20, yidunEnable: 21, antiSpamContent: 22, isHistoryable: 100, isRoamingable: 101, isSyncable: 102, isMuted: 104, cc: 105, isPushable: 107, isOfflinable: 108, isUnreadable: 109, needPushNick: 110 }, msgReceipt: { to: 1, from: 2, time: 7, idClient: 11 }, sysMsg: { time: 0, type: 1, to: 2, from: 3, ps: 4, attach: 5, idServer: 6, sendToOnlineUsersOnly: 7, apnsText: 8, pushPayload: 9, deletedIdClient: 10, deletedIdServer: 11, yidunEnable: 12, antiSpamContent: 13, deletedMsgTime: 14, deletedMsgFromNick: 15, cc: 105, isPushable: 107, isUnreadable: 109, needPushNick: 110 }, friend: { account: 4, flag: 5, beflag: 6, source: 7, alias: 8, bits: 9, custom: 10, createTime: 11, updateTime: 12 }, user: { account: 1, nick: 3, avatar: 4, sign: 5, gender: 6, email: 7, birth: 8, tel: 9, custom: 10, createTime: 12, updateTime: 13 }, specialRelation: { account: 0, isMuted: 1, isBlacked: 2, createTime: 3, updateTime: 4 }, msgEvent: { type: 1, value: 2, idClient: 3, custom: 4, validTime: 5, broadcastType: 6, sync: 7, validTimeType: 8, durable: 9, time: 10, idServer: 11, clientType: 12, serverConfig: 13, serverCustom: 14, appid: 101, account: 103, enableMultiClient: 104, consid: 106 }, msgEventSubscribe: { type: 1, subscribeTime: 2, sync: 3, to: 102, from: 104, time: 105 } };
	}, function (e, t) {
		"use strict";
		e.exports = { imLogin: { 4: "os", 6: "sdkVersion", 8: "appLogin", 9: "protocolVersion", 13: "deviceId", 18: "appKey", 19: "account", 24: "browser", 26: "session", 1000: "token" }, nosToken: { 1: "objectName", 2: "token", 3: "bucket", 4: "expireTime" }, audioToText: { 2: "url" }, imageOp: { 0: "type", 1: "stripmeta", 2: "typeType", 3: "blurRadius", 4: "blurSigma", 5: "qualityQuality", 6: "cropX", 7: "cropY", 8: "cropWidth", 9: "cropHeight", 10: "rotateAngle", 11: "pixelPixel", 12: "thumbnailMode", 13: "thumbnailWidth", 14: "thumbnailHeight", 15: "thumbnailAxisX", 16: "thumbnailAxisY", 17: "thumbnailCenterX", 18: "thumbnailCenterY", 19: "thumbnailEnlarge", 20: "thumbnailToStatic", 21: "watermarkType", 22: "watermarkGravity", 23: "watermarkDissolve", 24: "watermarkDx", 25: "watermarkDy", 26: "watermarkImage", 27: "watermarkText", 28: "watermarkFont", 29: "watermarkFontSize", 30: "watermarkFontColor", 31: "interlace" }, login: { 1: "appKey", 2: "account", 3: "deviceId", 5: "chatroomId", 20: "chatroomNick", 21: "chatroomAvatar", 22: "chatroomCustom", 23: "chatroomEnterCustom", 26: "session" }, chatroom: { 1: "id", 3: "name", 4: "announcement", 5: "broadcastUrl", 12: "custom", 14: "createTime", 15: "updateTime", 100: "creator", 101: "onlineMemberNum", 102: "mute" }, msg: { 1: "idClient", 2: "type", 3: "attach", 4: "custom", 5: "resend", 6: "userUpdateTime", 7: "fromNick", 8: "fromAvatar", 9: "fromCustom", 10: "yidunEnable", 11: "antiSpamContent", 20: "time", 21: "from", 22: "chatroomId", 23: "fromClientType" }, chatroomMember: { 1: "chatroomId", 2: "account", 3: "type", 4: "level", 5: "nick", 6: "avatar", 7: "custom", 8: "online", 9: "guest", 10: "enterTime", 12: "blacked", 13: "gaged", 14: "valid", 15: "updateTime", 16: "tempMuted", 17: "tempMuteDuration" } };
	}, function (e, t) {
		"use strict";
		e.exports = { nosToken: { 1: "objectName", 2: "token", 3: "bucket", 4: "expireTime" }, audioToText: { 2: "url" }, imageOp: { 0: "type", 1: "stripmeta", 2: "typeType", 3: "blurRadius", 4: "blurSigma", 5: "qualityQuality", 6: "cropX", 7: "cropY", 8: "cropWidth", 9: "cropHeight", 10: "rotateAngle", 11: "pixelPixel", 12: "thumbnailMode", 13: "thumbnailWidth", 14: "thumbnailHeight", 15: "thumbnailAxisX", 16: "thumbnailAxisY", 17: "thumbnailCenterX", 18: "thumbnailCenterY", 19: "thumbnailEnlarge", 20: "thumbnailToStatic", 21: "watermarkType", 22: "watermarkGravity", 23: "watermarkDissolve", 24: "watermarkDx", 25: "watermarkDy", 26: "watermarkImage", 27: "watermarkText", 28: "watermarkFont", 29: "watermarkFontSize", 30: "watermarkFontColor", 31: "interlace" }, login: { 4: "os", 6: "sdkVersion", 8: "appLogin", 9: "protocolVersion", 13: "deviceId", 18: "appKey", 19: "account", 24: "browser", 26: "session", 1000: "token" }, loginRes: { 17: "lastLoginDeviceId", 102: "connectionId", 103: "ip", 104: "port", 106: "country" }, loginPort: { 3: "type", 4: "os", 5: "mac", 13: "deviceId", 19: "account", 102: "connectionId", 103: "ip", 109: "time" }, sync: { 1: "myInfo", 2: "offlineMsgs", 3: "teams", 7: "roamingMsgs", 9: "relations", 11: "friends", 12: "sessions", 13: "friendUsers", 14: "msgReceipts", 15: "myTeamMembers", 16: "donnop", 17: "deleteMsg", 18: "sessionAck", 100: "filterMsgs" }, donnop: { 1: "open" }, team: { 1: "teamId", 3: "name", 4: "type", 5: "owner", 6: "level", 7: "selfCustom", 8: "valid", 9: "memberNum", 10: "memberUpdateTime", 11: "createTime", 12: "updateTime", 13: "validToCurrentUser", 14: "intro", 15: "announcement", 16: "joinMode", 17: "bits", 18: "custom", 19: "serverCustom", 20: "avatar", 21: "beInviteMode", 22: "inviteMode", 23: "updateTeamMode", 24: "updateCustomMode", 100: "mute" }, teamMember: { 1: "teamId", 3: "account", 4: "type", 5: "nickInTeam", 7: "bits", 8: "active", 9: "valid", 10: "joinTime", 11: "updateTime", 12: "custom", 13: "mute" }, msg: { 0: "scene", 1: "to", 2: "from", 4: "fromClientType", 5: "fromDeviceId", 6: "fromNick", 7: "time", 8: "type", 9: "body", 10: "attach", 11: "idClient", 12: "idServer", 13: "resend", 14: "userUpdateTime", 15: "custom", 16: "pushPayload", 17: "pushContent", 18: "apnsAccounts", 19: "apnsContent", 20: "apnsForcePush", 21: "yidunEnable", 22: "antiSpamContent", 100: "isHistoryable", 101: "isRoamingable", 102: "isSyncable", 104: "isMuted", 105: "cc", 107: "isPushable", 108: "isOfflinable", 109: "isUnreadable", 110: "needPushNick" }, msgReceipt: { 1: "to", 2: "from", 7: "time", 11: "idClient" }, sysMsg: { 0: "time", 1: "type", 2: "to", 3: "from", 4: "ps", 5: "attach", 6: "idServer", 7: "sendToOnlineUsersOnly", 8: "apnsText", 9: "pushPayload", 10: "deletedIdClient", 11: "deletedIdServer", 12: "yidunEnable", 13: "antiSpamContent", 14: "deletedMsgTime", 15: "deletedMsgFromNick", 105: "cc", 107: "isPushable", 109: "isUnreadable", 110: "needPushNick" }, friend: { 4: "account", 5: "flag", 6: "beflag", 7: "source", 8: "alias", 9: "bits", 10: "custom", 11: "createTime", 12: "updateTime" }, user: { 1: "account", 3: "nick", 4: "avatar", 5: "sign", 6: "gender", 7: "email", 8: "birth", 9: "tel", 10: "custom", 12: "createTime", 13: "updateTime" }, specialRelation: { 0: "account", 1: "isMuted", 2: "isBlacked", 3: "createTime", 4: "updateTime" }, msgEvent: { 1: "type", 2: "value", 3: "idClient", 4: "custom", 5: "validTime", 6: "broadcastType", 7: "sync", 8: "validTimeType", 9: "durable", 10: "time", 11: "idServer", 12: "clientType", 13: "serverConfig", 14: "serverCustom", 101: "appid", 103: "account", 104: "enableMultiClient", 106: "consid" }, msgEventSubscribe: { 1: "type", 2: "subscribeTime", 3: "sync", 102: "to", 104: "from", 105: "time" } };
	}, function (e, t, n) {
		"use strict";
		"undefined" != typeof window && (!window.console, 1);
	}, function (e, t, n) {
		"use strict";
		function r() {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};i.merge(this, { options: e, debug: !1, api: "log", style: "color:blue;", log: i.emptyFunc, info: i.emptyFunc, warn: i.emptyFunc, error: i.emptyFunc }), this.prefix = e.prefix || "", this.setDebug(e.debug);
		}var o = n(11),
		    i = n(1),
		    a = r.prototype,
		    s = ["Chrome", "Safari", "Firefox"];a.setDebug = function () {
			var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
			    t = this;if (t.debug = e, e.style && (t.style = e.style), t.debug && i.exist(console)) {
				var n = console;t.log = function () {
					var e = t.formatArgs(arguments);s.indexOf(o.name) !== -1 && i.isString(e[0]) && (e[0] = "%c" + e[0], e.splice(1, 0, t.style)), t._log("log", e);
				}, t.info = function () {
					var e = t.formatArgs(arguments);t._log("info", e);
				}, t.warn = function () {
					var e = t.formatArgs(arguments);t._log("warn", e);
				}, t.error = function () {
					var e = t.formatArgs(arguments);t._log("error", e);
				}, t._log = function (e, r) {
					var o = t.options.logFunc;if (o && (o[e] && (o = o[e]), i.isFunction(o))) return void o.apply(null, r);if (n[e]) try {
						n[e].apply ? t.chrome(e, r) : t.ie(e, r);
					} catch (e) {}
				}, t.chrome = function (e, r) {
					s.indexOf(o.name) !== -1 ? n[e].apply(n, r) : t.ie(e, r);
				}, t.ie = function (e, t) {
					t.forEach(function (t) {
						n[e]((0, _stringify2.default)(t, null, 4));
					});
				};
			}
		}, a.formatArgs = function (e) {
			var t = this;e = [].slice.call(e, 0);var n = new Date(),
			    r = n.getFullYear() + "-" + c(n.getMonth() + 1) + "-" + c(n.getDate()) + " " + c(n.getHours()) + ":" + c(n.getMinutes()) + ":" + c(n.getSeconds()) + ":" + c(n.getMilliseconds(), 3),
			    o = "[NIM SDK LOG " + r + " " + +n + " " + t.prefix + "]\t";return i.isString(e[0]) ? e[0] = o + e[0] : e.splice(0, 0, o), e.forEach(function (t, n) {
				(i.isArray(t) || i.isObject(t)) && (e[n] = i.simpleClone(t));
			}), e;
		};var c = function c(e, t) {
			t = t || 2;for (var n = "" + e; n.length < t;) {
				n = "0" + n;
			}return n;
		};e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = { file: { md5: "$(Etag)", size: "$(ObjectSize)" }, image: { md5: "$(Etag)", size: "$(ObjectSize)", w: "$(ImageInfo.Width)", h: "$(ImageInfo.Height)", orientation: "$(ImageInfo.Orientation)" }, audio: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Audio.Duration)" }, video: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Video.Duration)", w: "$(AVinfo.Video.Width)", h: "$(AVinfo.Video.Height)" } },
		    i = {};i.genResponseBody = function (e) {
			return e = e || "file", o[e];
		}, i.parseResponse = function (e, t) {
			r.notundef(e.size) && (e.size = +e.size), r.notundef(e.w) && (e.w = +e.w), r.notundef(e.h) && (e.h = +e.h), r.notundef(e.dur) && (e.dur = +e.dur);var n = e.orientation;if (r.notundef(n) && (delete e.orientation, t && ("right, top" === n || "left, bottom" === n))) {
				var o = e.w;e.w = e.h, e.h = o;
			}return e;
		}, e.exports = i;
	}, function (e, t, n) {
		"use strict";
		var r = n(1);r.fillPropertyWithDefault = function (e, t, n) {
			return !!r.undef(e[t]) && (e[t] = n, !0);
		};
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			var t = this;t.options = o.copy(e), o.verifyOptions(e, "url fileName"), o.verifyParamPresentJustOne(e, "blob fileInput"), o.verifyCallback(e, "beginupload uploadprogress uploaddone"), e.fileInput && (e.fileInput = o.verifyFileInput(e.fileInput)), e.type && o.verifyFileType(e.type), e.timeout ? o.verifyParamType("timeout", e.timeout, "number") : e.timeout = 6e5, o.verifyFileUploadCallback(e), e.data = {};var n = e.fileName,
			    r = e.fileInput;if (c) {
				if (r) {
					var s = e.type ? o.filterFiles(r.files, e.type) : [].slice.call(r.files, 0);if (!s || !s.length) return void e.uploaddone(i.newWrongFileTypeError("未读取到" + e.type + "类型的文件, 请确保文件选择节点的文件不为空, 并且请确保选择了" + e.type + "类型的文件"));var l = r.files[0].size;if (l > u) return void e.uploaddone(i.newFileTooLargeError("文件大小超过100M"));e.data[n] = s[0];
				} else e.blob && (e.data[n] = e.blob);
			} else o.dataset(r, "name", n), e.data.input = r;e.params && o.merge(e.data, e.params);var p = { data: e.data, onaftersend: function onaftersend() {
					e.beginupload(t);
				}, onuploading: function onuploading(t) {
					var n = Math.floor(1e4 * t.loaded / t.total) / 100,
					    r = { total: t.total, loaded: t.loaded, percentage: n, percentageText: n + "%" };e.fileInput && (r.fileInput = e.fileInput), e.blob && (r.blob = e.blob), e.uploadprogress(r);
				}, onload: function onload(n) {
					n.Error ? t.onError(n) : e.uploaddone(null, n);
				}, onerror: function onerror(n) {
					try {
						if (n.result) var r = JSON.parse(n.result);else r = n;t.onError(r);
					} catch (error) {
						e.uploaddone(new i(n.message, n.code), t.options);
					}
				} };c || (p.mode = "iframe"), p.putFileAtEnd = !0, t.sn = a(e.url, p);
		}var o = n(1),
		    i = n(3),
		    a = n(16).upload,
		    s = n(16).abort,
		    c = o.supportFormData,
		    u = 104857600;r.prototype.onError = function (e) {
			var t,
			    n,
			    r,
			    o = this,
			    a = o.options;e = e || {}, t = e.Error || e || {}, n = t.Code || t.code || "unknown", r = t.Message || t.message || "未知错误", a.uploaddone(new i(n + "(" + r + ")", n));
		}, r.prototype.abort = function () {
			s(this.sn);
		}, e.exports = r;
	}, function (e, t) {
		function n(e) {
			e = e || {}, this.ms = e.min || 100, this.max = e.max || 1e4, this.factor = e.factor || 2, this.jitter = e.jitter > 0 && e.jitter <= 1 ? e.jitter : 0, this.attempts = 0;
		}e.exports = n, n.prototype.duration = function () {
			var e = this.ms * Math.pow(this.factor, this.attempts++);if (this.jitter) {
				var t = Math.random(),
				    n = Math.floor(t * this.jitter * e);e = 0 == (1 & Math.floor(10 * t)) ? e - n : e + n;
			}return 0 | Math.min(e, this.max);
		}, n.prototype.reset = function () {
			this.attempts = 0;
		}, n.prototype.setMin = function (e) {
			this.ms = e;
		}, n.prototype.setMax = function (e) {
			this.max = e;
		}, n.prototype.setJitter = function (e) {
			this.jitter = e;
		};
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			for (var n = e[a][t]; null != n;) {
				if (n.kind === s) return n.listener;n = n.next;
			}return null;
		}function o(e, t, n) {
			"function" != typeof n && "object" != (typeof n === "undefined" ? "undefined" : (0, _typeof3.default)(n)) && (n = null);for (var r = null, o = e[a][t]; null != o;) {
				o.kind === s ? null == r ? e[a][t] = o.next : r.next = o.next : r = o, o = o.next;
			}null != n && (null == r ? e[a][t] = c(n, s) : r.next = c(n, s));
		}var i = n(23),
		    a = i.LISTENERS,
		    s = i.ATTRIBUTE,
		    c = i.newNode;t.defineCustomEventTarget = function (e, t) {
			function n() {
				e.call(this);
			}var i = { constructor: { value: n, configurable: !0, writable: !0 } };return t.forEach(function (e) {
				i["on" + e] = { get: function get() {
						return r(this, e);
					}, set: function set(t) {
						o(this, e, t);
					}, configurable: !0, enumerable: !0 };
			}), n.prototype = (0, _create2.default)(e.prototype, i), n;
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(23).createUniqueKey,
		    o = r("stop_immediate_propagation_flag"),
		    i = r("canceled_flag"),
		    a = r("original_event"),
		    s = (0, _freeze2.default)({ stopPropagation: (0, _freeze2.default)({ value: function value() {
					var e = this[a];"function" == typeof e.stopPropagation && e.stopPropagation();
				}, writable: !0, configurable: !0 }), stopImmediatePropagation: (0, _freeze2.default)({ value: function value() {
					this[o] = !0;var e = this[a];"function" == typeof e.stopImmediatePropagation && e.stopImmediatePropagation();
				}, writable: !0, configurable: !0 }), preventDefault: (0, _freeze2.default)({ value: function value() {
					this.cancelable === !0 && (this[i] = !0);var e = this[a];"function" == typeof e.preventDefault && e.preventDefault();
				}, writable: !0, configurable: !0 }), defaultPrevented: (0, _freeze2.default)({ get: function get() {
					return this[i];
				}, enumerable: !0, configurable: !0 }) });t.STOP_IMMEDIATE_PROPAGATION_FLAG = o, t.createEventWrapper = function (e, t) {
			var n = "number" == typeof e.timeStamp ? e.timeStamp : Date.now(),
			    r = { type: { value: e.type, enumerable: !0 }, target: { value: t, enumerable: !0 }, currentTarget: { value: t, enumerable: !0 }, eventPhase: { value: 2, enumerable: !0 }, bubbles: { value: Boolean(e.bubbles), enumerable: !0 }, cancelable: { value: Boolean(e.cancelable), enumerable: !0 }, timeStamp: { value: n, enumerable: !0 }, isTrusted: { value: !1, enumerable: !0 } };return r[o] = { value: !1, writable: !0 }, r[i] = { value: !1, writable: !0 }, r[a] = { value: e }, "undefined" != typeof e.detail && (r.detail = { value: e.detail, enumerable: !0 }), (0, _create2.default)((0, _create2.default)(e, s), r);
		};
	}, function (e, t, n) {
		"use strict";
		function r() {}function o(e, t, n) {
			this.fn = e, this.context = t, this.once = n || !1;
		}function i() {
			this._events = new r(), this._eventsCount = 0;
		}var a = Object.prototype.hasOwnProperty,
		    s = "~";_create2.default && (r.prototype = (0, _create2.default)(null), new r().__proto__ || (s = !1)), i.prototype.eventNames = function () {
			var e,
			    t,
			    n = [];if (0 === this._eventsCount) return n;for (t in e = this._events) {
				a.call(e, t) && n.push(s ? t.slice(1) : t);
			}return _getOwnPropertySymbols2.default ? n.concat((0, _getOwnPropertySymbols2.default)(e)) : n;
		}, i.prototype.listeners = function (e, t) {
			var n = s ? s + e : e,
			    r = this._events[n];if (t) return !!r;if (!r) return [];if (r.fn) return [r.fn];for (var o = 0, i = r.length, a = new Array(i); o < i; o++) {
				a[o] = r[o].fn;
			}return a;
		}, i.prototype.emit = function (e, t, n, r, o, i) {
			var a = s ? s + e : e;if (!this._events[a]) return !1;var c,
			    u,
			    l = this._events[a],
			    p = arguments.length;if (l.fn) {
				switch (l.once && this.removeListener(e, l.fn, void 0, !0), p) {case 1:
						return l.fn.call(l.context), !0;case 2:
						return l.fn.call(l.context, t), !0;case 3:
						return l.fn.call(l.context, t, n), !0;case 4:
						return l.fn.call(l.context, t, n, r), !0;case 5:
						return l.fn.call(l.context, t, n, r, o), !0;case 6:
						return l.fn.call(l.context, t, n, r, o, i), !0;}for (u = 1, c = new Array(p - 1); u < p; u++) {
					c[u - 1] = arguments[u];
				}l.fn.apply(l.context, c);
			} else {
				var f,
				    d = l.length;for (u = 0; u < d; u++) {
					switch (l[u].once && this.removeListener(e, l[u].fn, void 0, !0), p) {case 1:
							l[u].fn.call(l[u].context);break;case 2:
							l[u].fn.call(l[u].context, t);break;case 3:
							l[u].fn.call(l[u].context, t, n);break;case 4:
							l[u].fn.call(l[u].context, t, n, r);break;default:
							if (!c) for (f = 1, c = new Array(p - 1); f < p; f++) {
								c[f - 1] = arguments[f];
							}l[u].fn.apply(l[u].context, c);}
				}
			}return !0;
		}, i.prototype.on = function (e, t, n) {
			var r = new o(t, n || this),
			    i = s ? s + e : e;return this._events[i] ? this._events[i].fn ? this._events[i] = [this._events[i], r] : this._events[i].push(r) : (this._events[i] = r, this._eventsCount++), this;
		}, i.prototype.once = function (e, t, n) {
			var r = new o(t, n || this, !0),
			    i = s ? s + e : e;return this._events[i] ? this._events[i].fn ? this._events[i] = [this._events[i], r] : this._events[i].push(r) : (this._events[i] = r, this._eventsCount++), this;
		}, i.prototype.removeListener = function (e, t, n, o) {
			var i = s ? s + e : e;if (!this._events[i]) return this;if (!t) return 0 === --this._eventsCount ? this._events = new r() : delete this._events[i], this;var a = this._events[i];if (a.fn) a.fn !== t || o && !a.once || n && a.context !== n || (0 === --this._eventsCount ? this._events = new r() : delete this._events[i]);else {
				for (var c = 0, u = [], l = a.length; c < l; c++) {
					(a[c].fn !== t || o && !a[c].once || n && a[c].context !== n) && u.push(a[c]);
				}u.length ? this._events[i] = 1 === u.length ? u[0] : u : 0 === --this._eventsCount ? this._events = new r() : delete this._events[i];
			}return this;
		}, i.prototype.removeAllListeners = function (e) {
			var t;return e ? (t = s ? s + e : e, this._events[t] && (0 === --this._eventsCount ? this._events = new r() : delete this._events[t])) : (this._events = new r(), this._eventsCount = 0), this;
		}, i.prototype.off = i.prototype.removeListener, i.prototype.addListener = i.prototype.on, i.prototype.setMaxListeners = function () {
			return this;
		}, i.prefixed = s, i.EventEmitter = i, e.exports = i;
	}, function (e, t, n) {
		function r(e, t, n) {
			if (!s(t)) throw new TypeError("iterator must be a function");arguments.length < 3 && (n = this), "[object Array]" === c.call(e) ? o(e, t, n) : "string" == typeof e ? i(e, t, n) : a(e, t, n);
		}function o(e, t, n) {
			for (var r = 0, o = e.length; r < o; r++) {
				u.call(e, r) && t.call(n, e[r], r, e);
			}
		}function i(e, t, n) {
			for (var r = 0, o = e.length; r < o; r++) {
				t.call(n, e.charAt(r), r, e);
			}
		}function a(e, t, n) {
			for (var r in e) {
				u.call(e, r) && t.call(n, e[r], r, e);
			}
		}var s = n(38);e.exports = r;var c = Object.prototype.toString,
		    u = Object.prototype.hasOwnProperty;
	}, function (e, t) {
		(function (t) {
			"undefined" != typeof window ? e.exports = window : "undefined" != typeof t ? e.exports = t : "undefined" != typeof self ? e.exports = self : e.exports = {};
		}).call(t, function () {
			return this;
		}());
	}, function (e, t, n) {
		var r = n(81),
		    o = n(77),
		    i = function i(e) {
			return "[object Array]" === Object.prototype.toString.call(e);
		};e.exports = function (e) {
			if (!e) return {};var t = {};return o(r(e).split("\n"), function (e) {
				var n = e.indexOf(":"),
				    o = r(e.slice(0, n)).toLowerCase(),
				    a = r(e.slice(n + 1));"undefined" == typeof t[o] ? t[o] = a : i(t[o]) ? t[o].push(a) : t[o] = [t[o], a];
			}), t;
		};
	}, function (e, t) {
		function n() {
			throw new Error("setTimeout has not been defined");
		}function r() {
			throw new Error("clearTimeout has not been defined");
		}function o(e) {
			if (l === setTimeout) return setTimeout(e, 0);if ((l === n || !l) && setTimeout) return l = setTimeout, setTimeout(e, 0);try {
				return l(e, 0);
			} catch (e) {
				try {
					return l.call(null, e, 0);
				} catch (e) {
					return l.call(this, e, 0);
				}
			}
		}function i(e) {
			if (p === clearTimeout) return clearTimeout(e);if ((p === r || !p) && clearTimeout) return p = clearTimeout, clearTimeout(e);try {
				return p(e);
			} catch (e) {
				try {
					return p.call(null, e);
				} catch (e) {
					return p.call(this, e);
				}
			}
		}function a() {
			y && d && (y = !1, d.length ? m = d.concat(m) : h = -1, m.length && s());
		}function s() {
			if (!y) {
				var e = o(a);y = !0;for (var t = m.length; t;) {
					for (d = m, m = []; ++h < t;) {
						d && d[h].run();
					}h = -1, t = m.length;
				}d = null, y = !1, i(e);
			}
		}function c(e, t) {
			this.fun = e, this.array = t;
		}function u() {}var l,
		    p,
		    f = e.exports = {};!function () {
			try {
				l = "function" == typeof setTimeout ? setTimeout : n;
			} catch (e) {
				l = n;
			}try {
				p = "function" == typeof clearTimeout ? clearTimeout : r;
			} catch (e) {
				p = r;
			}
		}();var d,
		    m = [],
		    y = !1,
		    h = -1;f.nextTick = function (e) {
			var t = new Array(arguments.length - 1);if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) {
				t[n - 1] = arguments[n];
			}m.push(new c(e, t)), 1 !== m.length || y || o(s);
		}, c.prototype.run = function () {
			this.fun.apply(null, this.array);
		}, f.title = "browser", f.browser = !0, f.env = {}, f.argv = [], f.version = "", f.versions = {}, f.on = u, f.addListener = u, f.once = u, f.off = u, f.removeListener = u, f.removeAllListeners = u, f.emit = u, f.binding = function (e) {
			throw new Error("process.binding is not supported");
		}, f.cwd = function () {
			return "/";
		}, f.chdir = function (e) {
			throw new Error("process.chdir is not supported");
		}, f.umask = function () {
			return 0;
		};
	}, function (e, t) {
		function n(e) {
			return e.replace(/^\s*|\s*$/g, "");
		}t = e.exports = n, t.left = function (e) {
			return e.replace(/^\s*/, "");
		}, t.right = function (e) {
			return e.replace(/\s*$/, "");
		};
	}, function (e, t, n) {
		"use strict";
		function r(e, t) {
			for (var n = 0; n < e.length; n++) {
				t(e[n]);
			}
		}function o(e) {
			for (var t in e) {
				if (e.hasOwnProperty(t)) return !1;
			}return !0;
		}function i(e, t, n) {
			var r = e;return p(t) ? (n = t, "string" == typeof e && (r = { uri: e })) : r = d(t, { uri: e }), r.callback = n, r;
		}function a(e, t, n) {
			return t = i(e, t, n), s(t);
		}function s(e) {
			function t() {
				4 === p.readyState && i();
			}function n() {
				var e = void 0;if (e = p.response ? p.response : p.responseText || c(p), w) try {
					e = JSON.parse(e);
				} catch (e) {}return e;
			}function r(e) {
				return clearTimeout(y), e instanceof Error || (e = new Error("" + (e || "Unknown XMLHttpRequest Error"))), e.statusCode = 0, u(e, l);
			}function i() {
				if (!m) {
					var t;clearTimeout(y), t = e.useXDR && void 0 === p.status ? 200 : 1223 === p.status ? 204 : p.status;var r = l,
					    o = null;return 0 !== t ? (r = { body: n(), statusCode: t, method: v, headers: {}, url: h, rawRequest: p }, p.getAllResponseHeaders && (r.headers = f(p.getAllResponseHeaders()))) : o = new Error("Internal XMLHttpRequest Error"), u(o, r, r.body);
				}
			}if ("undefined" == typeof e.callback) throw new Error("callback argument missing");var s = !1,
			    u = function u(t, n, r) {
				s || (s = !0, e.callback(t, n, r));
			},
			    l = { body: void 0, headers: {}, statusCode: 0, method: v, url: h, rawRequest: p },
			    p = e.xhr || null;p || (p = e.cors || e.useXDR ? new a.XDomainRequest() : new a.XMLHttpRequest());var d,
			    m,
			    y,
			    h = p.url = e.uri || e.url,
			    v = p.method = e.method || "GET",
			    g = e.body || e.data || null,
			    b = p.headers = e.headers || {},
			    k = !!e.sync,
			    w = !1;if ("json" in e && e.json !== !1 && (w = !0, b.accept || b.Accept || (b.Accept = "application/json"), "GET" !== v && "HEAD" !== v && (b["content-type"] || b["Content-Type"] || (b["Content-Type"] = "application/json"), g = (0, _stringify2.default)(e.json === !0 ? g : e.json))), p.onreadystatechange = t, p.onload = i, p.onerror = r, p.onprogress = function () {}, p.onabort = function () {
				m = !0;
			}, p.ontimeout = r, p.open(v, h, !k, e.username, e.password), k || (p.withCredentials = !!e.withCredentials), !k && e.timeout > 0 && (y = setTimeout(function () {
				if (!m) {
					m = !0, p.abort("timeout");var e = new Error("XMLHttpRequest timeout");e.code = "ETIMEDOUT", r(e);
				}
			}, e.timeout)), p.setRequestHeader) for (d in b) {
				b.hasOwnProperty(d) && p.setRequestHeader(d, b[d]);
			} else if (e.headers && !o(e.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");return "responseType" in e && (p.responseType = e.responseType), "beforeSend" in e && "function" == typeof e.beforeSend && e.beforeSend(p), p.send(g), p;
		}function c(e) {
			if ("document" === e.responseType) return e.responseXML;var t = 204 === e.status && e.responseXML && "parsererror" === e.responseXML.documentElement.nodeName;return "" !== e.responseType || t ? null : e.responseXML;
		}function u() {}var l = n(78),
		    p = n(38),
		    f = n(79),
		    d = n(83);e.exports = a, a.XMLHttpRequest = l.XMLHttpRequest || u, a.XDomainRequest = "withCredentials" in new a.XMLHttpRequest() ? a.XMLHttpRequest : l.XDomainRequest, r(["get", "put", "post", "patch", "head", "delete"], function (e) {
			a["delete" === e ? "del" : e] = function (t, n, r) {
				return n = i(t, n, r), n.method = e.toUpperCase(), s(n);
			};
		});
	}, function (e, t) {
		function n() {
			for (var e = {}, t = 0; t < arguments.length; t++) {
				var n = arguments[t];for (var o in n) {
					r.call(n, o) && (e[o] = n[o]);
				}
			}return e;
		}e.exports = n;var r = Object.prototype.hasOwnProperty;
	}, function (e, t) {}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = r.undef,
		    i = r.verifyOptions,
		    a = r.verifyParamType,
		    s = n(44),
		    c = n(26).fn;c.updateMyChatroomMemberInfo = function (e) {
			i(e, "member needNotify"), a("needNotify", e.needNotify, "boolean"), e.needSave = e.needSave || !1, a("needSave", e.needSave, "boolean"), this.processCustom(e), this.processCallback(e), e.chatroomMember = new s(e.member), this.sendCmd("updateMyChatroomMemberInfo", e);
		}, c.getChatroomMembers = function (e) {
			var t = this;i(e, "guest"), a("guest", e.guest, "boolean"), o(e.time) ? e.time = 0 : a("time", e.time, "number"), o(e.limit) ? e.limit = 100 : a("limit", e.limit, "number"), t.processCallback(e), e.type = e.guest ? 1 : 0, !e.guest && e.onlyOnline && (e.type = 2), t.sendCmd("getChatroomMembers", e);
		}, c.getChatroomMembersInfo = function (e) {
			var t = this;i(e, "accounts"), a("accounts", e.accounts, "array"), t.processCallback(e), t.sendCmd("getChatroomMembersInfo", e);
		}, c.markChatroomManager = function (e) {
			e.type = 1, this.markChatroomMember(e);
		}, c.markChatroomCommonMember = function (e) {
			e.type = 2, this.markChatroomMember(e);
		}, c.markChatroomBlacklist = function (e) {
			e.type = -1, this.markChatroomMember(e);
		}, c.markChatroomGaglist = function (e) {
			e.type = -2, this.markChatroomMember(e);
		}, c.markChatroomMember = function (e) {
			i(e, "account type isAdd"), a("isAdd", e.isAdd, "boolean"), o(e.level) ? e.level = 0 : a("level", e.level, "number");var t = this;t.processCustom(e), t.processCallback(e), t.sendCmd("markChatroomMember", e);
		}, c.kickChatroomMember = function (e) {
			var t = this;i(e, "account"), t.processCustom(e), t.processCallback(e), t.sendCmd("kickChatroomMember", e);
		}, c.updateChatroomMemberTempMute = function (e) {
			var t = this;i(e, "account duration needNotify"), a("duration", e.duration, "number"), a("needNotify", e.needNotify, "boolean"), t.processCustom(e), t.processCallback(e), t.sendCmd("updateChatroomMemberTempMute", e);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = r.undef,
		    i = n(26).fn;i.beforeSendMsg = function (e) {
			e.cmd = "sendMsg";
		}, i.getHistoryMsgs = function (e) {
			r.verifyOptions(e), o(e.timetag) ? e.timetag = 0 : r.verifyParamType("timetag", e.timetag, "number"), o(e.limit) ? e.limit = 100 : r.verifyParamType("limit", e.limit, "number"), o(e.reverse) ? e.reverse = !1 : r.verifyParamType("reverse", e.reverse, "boolean");var t = this;t.processCallback(e), t.sendCmd("getHistoryMsgs", e, e.callback);
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(26).fn,
		    o = n(1);r.queueOffer = function (e) {
			o.verifyOptions(e, "elementKey elementValue"), this.processCallback(e), this.sendCmd("queueOffer", e, e.callback);
		}, r.queuePoll = function () {
			var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};e.elementKey = e.elementKey || "", this.processCallback(e), this.sendCmd("queuePoll", e, e.callback);
		}, r.queueList = function (e) {
			this.processCallback(e), this.sendCmd("queueList", e, e.callback);
		}, r.queueDrop = function (e) {
			this.processCallback(e), this.sendCmd("queueDrop", e, e.callback);
		};
	},,,,,,,,,,,,,,,,,,,,,,,,,,, function (e, t, n) {
		"use strict";
		var r = n(26),
		    o = n(43);o(r), e.exports = r;
	},, function (e, t, n) {
		"use strict";
		function r() {}var o = n(27),
		    i = n(1);r.prototype = (0, _create2.default)(o.prototype), r.verifyFile = function (e) {
			i.verifyOptions(e, "dur", !0, "file.");
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			i.verifyOptions(e, "content"), e.type = "custom", o.call(this, e), this.attach = e.content;
		}var o = n(12),
		    i = n(1);r.prototype = (0, _create2.default)(o.prototype), r.reverse = function (e) {
			var t = o.reverse(e);return t.content = e.attach, t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			e.type = "geo", i.verifyOptions(e, "geo"), i.verifyOptions(e.geo, "lng lat title", !0, "geo."), i.verifyParamType("geo.lng", e.geo.lng, "number"), i.verifyParamType("geo.lat", e.geo.lat, "number"), i.verifyParamType("geo.title", e.geo.title, "string"), o.call(this, e), this.attach = (0, _stringify2.default)(e.geo);
		}var o = n(12),
		    i = n(1);r.prototype = (0, _create2.default)(o.prototype), r.reverse = function (e) {
			var t = o.reverse(e);return e.attach = e.attach ? "" + e.attach : "", t.geo = e.attach ? JSON.parse(e.attach) : {}, t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r() {}var o = n(1),
		    i = n(27);r.prototype = (0, _create2.default)(i.prototype), r.verifyFile = function (e) {
			o.verifyOptions(e, "w h", !0, "file.");
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		var r = n(1),
		    o = function o(e) {
			this.account = e.account;
		},
		    i = o.prototype,
		    a = i.Message = n(12),
		    s = i.TextMessage = n(122),
		    c = i.FileMessage = n(27),
		    u = i.GeoMessage = n(118),
		    l = i.NotificationMessage = n(121),
		    p = i.CustomMessage = n(117),
		    f = i.TipMessage = n(123);i.validTypes = a.validTypes, i.reverse = function (e) {
			var t,
			    n = a.getType(e);switch (n) {case "text":
					t = s.reverse(e);break;case "image":case "audio":case "video":case "file":
					t = c.reverse(e);break;case "geo":
					t = u.reverse(e);break;case "notification":
					t = l.reverse(e);break;case "custom":
					t = p.reverse(e);break;case "tip":
					t = f.reverse(e);break;default:
					t = a.reverse(e);}return a.setExtra(t, this.account), t;
		}, i.reverseMsgs = function (e, t) {
			var n,
			    o,
			    i = this;return e.map(function (e) {
				return e = i.reverse(e), t && (n = t.modifyObj, n && (e = r.merge(e, n)), o = t.mapper, r.isFunction(o) && (e = o(e))), e;
			});
		}, e.exports = o;
	}, function (e, t, n) {
		"use strict";
		function r() {}var o = n(1),
		    i = o.notundef,
		    a = n(12),
		    s = { 301: "memberEnter", 302: "memberExit", 303: "blackMember", 304: "unblackMember", 305: "gagMember", 306: "ungagMember", 307: "addManager", 308: "removeManager", 309: "addCommon", 310: "removeCommon", 311: "closeChatroom", 312: "updateChatroom", 313: "kickMember", 314: "addTempMute", 315: "removeTempMute", 316: "updateMemberInfo", 317: "updateQueue", 318: "muteRoom", 319: "unmuteRoom" };r.prototype = (0, _create2.default)(a.prototype), r.reverse = function (e) {
			var t = a.reverse(e);if (e.attach = e.attach ? "" + e.attach : "", e.attach) {
				var n = JSON.parse(e.attach);if (t.attach = { type: s[n.id] }, i(n.data)) {
					var r = n.data;i(r.operator) && (t.attach.from = r.operator), i(r.opeNick) && (t.attach.fromNick = r.opeNick), i(r.target) && (t.attach.to = r.target), i(r.tarNick) && (t.attach.toNick = r.tarNick), i(r.muteDuration) && (t.attach.duration = parseInt(r.muteDuration, 10)), "memberEnter" === t.attach.type && (i(r.muted) ? t.attach.gaged = 1 === +r.muted : t.attach.gaged = !1, i(r.tempMuted) ? t.attach.tempMuted = 1 === +r.tempMuted : t.attach.tempMuted = !1, i(r.muteTtl) ? t.attach.tempMuteDuration = +r.muteTtl : t.attach.tempMuteDuration = 0), i(r.ext) && (t.attach.custom = r.ext);
				}
			} else t.attach = {};return t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			i.verifyOptions(e, "text"), e.type = "text", o.call(this, e), this.attach = e.text;
		}var o = n(12),
		    i = n(1);r.prototype = (0, _create2.default)(o.prototype), r.reverse = function (e) {
			var t = o.reverse(e);return t.text = e.attach, t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r(e) {
			i.verifyOptions(e, "tip"), e.type = "tip", o.call(this, e), this.attach = e.tip;
		}var o = n(12),
		    i = n(1);r.prototype = (0, _create2.default)(o.prototype), r.reverse = function (e) {
			var t = o.reverse(e);return t.tip = e.attach, t;
		}, e.exports = r;
	}, function (e, t, n) {
		"use strict";
		function r() {}var o = n(27),
		    i = n(1);r.prototype = (0, _create2.default)(o.prototype), r.verifyFile = function (e) {
			i.verifyOptions(e, "dur w h", !0, "file.");
		}, e.exports = r;
	},,,,,,,,,,,,, function (e, t, n) {
		"use strict";
		var r = n(22).fn,
		    o = n(9),
		    i = n(1);r.assembleLogin = function () {
			var e = this,
			    t = e.options,
			    n = { appKey: t.appKey, account: t.account, deviceId: o.deviceId, chatroomId: t.chatroomId, session: e.genSessionKey() };return n = i.merge(n, i.filterObj(t, "chatroomNick chatroomAvatar chatroomCustom chatroomEnterCustom")), { type: 1, login: n, imLogin: e.assembleIMLogin() };
		}, r.afterLogin = function (e) {
			var t = this,
			    n = e.chatroom;t.chatroom = n, t.notifyLogin();
		}, r.kickedReasons = ["", "chatroomClosed", "managerKick", "samePlatformKick", "silentlyKick", "blacked"], r.kickedMessages = ["", "聊天室关闭了", "被房主或者管理员踢出", "不允许同一个帐号在多个地方同时登录", "悄悄被踢", "被拉黑了"];
	}, function (e, t, n) {
		"use strict";
		var r = n(22).fn;r.refreshSocketUrl = function () {
			var e = this;e.socketUrls = e.socketUrlsBackup.slice(0), e.connectToUrl(e.getNextSocketUrl());
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(22).fn,
		    o = n(44);r.onChatroomMembersInfo = r.onChatroomMembers = function (e) {
			e.error || (e.obj.members = o.reverseMembers(e.content.members));
		}, r.onMarkChatroomMember = function (e) {
			e.error || (e.obj.member = o.reverse(e.content.chatroomMember));
		};
	}, function (e, t, n) {
		"use strict";
		var r = n(22).fn,
		    o = n(1);r.completeMsg = function (e) {
			var t = this;e.chatroomId = t.chatroom.id, e.from = t.options.account, e.fromClientType = "Web", e.time || (e.time = +new Date());
		}, r.onMsg = function (e) {
			var t = this,
			    n = t.message.reverse(e.content.msg);t.checkMsgUnique(n) && (t.msgBuffer.push(n), t.msgFlushTimer || t.startMsgFlushTimer());
		}, r.startMsgFlushTimer = function () {
			var e = this,
			    t = e.options;e.msgFlushTimer = setTimeout(function () {
				var n = e.msgBuffer.splice(0, t.msgBufferSize);e.options.onmsgs(n), e.msgBuffer.length ? e.startMsgFlushTimer() : delete e.msgFlushTimer;
			}, t.msgBufferInterval);
		}, r.checkMsgUnique = o.genCheckUniqueFunc("idClient"), r.onSendMsg = function (e) {
			var t = e.obj.msg;e.error ? t.status = "fail" : (t = e.content.msg, t.status = "success"), t = this.message.reverse(t), e.obj = t;
		}, r.onHistoryMsgs = function (e) {
			e.error || (e.obj.msgs = this.message.reverseMsgs(e.content.msgs));
		};
	}]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5JTV9XZWJfQ2hhdHJvb21fdjMuOC4wLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIkNoYXRyb29tIiwiciIsIm4iLCJvIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJpIiwiYSIsInMiLCJ1IiwibCIsImdldEdsb2JhbCIsInNob3VsZERpc3BsYXlJbnN0YWxsRmxhc2hIaW50IiwibmFtZSIsInRvTG93ZXJDYXNlIiwidmVyc2lvbiIsIk1hdGgiLCJmbG9vciIsIlRyYW5zcG9ydCIsImZsYXNoc29ja2V0IiwiY2hlY2siLCJkZWR1cGxpY2F0ZSIsImZvckVhY2giLCJpbmRleE9mIiwicHVzaCIsImNhcEZpcnN0TGV0dGVyIiwic2xpY2UiLCJ0b1VwcGVyQ2FzZSIsImd1aWQiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImV4dGVuZCIsImZpbHRlck9iaiIsImlzU3RyaW5nIiwic3BsaXQiLCJoYXNPd25Qcm9wZXJ0eSIsInNpbXBsZUNsb25lIiwiSlNPTiIsInBhcnNlIiwiY29weSIsImV4aXN0IiwiY29weVdpdGhOdWxsIiwiaXNudWxsIiwiZmluZE9iakluZGV4SW5BcnJheSIsImtleVBhdGgiLCJzb21lIiwidmFsdWUiLCJmaW5kT2JqSW5BcnJheSIsIm1lcmdlT2JqQXJyYXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpc0FycmF5Iiwic29ydFBhdGgiLCJzaGlmdCIsIm1lcmdlIiwibm90U29ydCIsInNvcnRPYmpBcnJheSIsImN1dE9iakFycmF5IiwiaXNPYmplY3QiLCJzcGxpY2UiLCJpbnNlbnNpdGl2ZSIsImRlc2MiLCJpc0Z1bmN0aW9uIiwiY29tcGFyZSIsInNvcnQiLCJlbXB0eUZ1bmMiLCJpc0VtcHR5RnVuYyIsIm5vdEVtcHR5RnVuYyIsInJlc2hhcGUyZCIsIkFycmF5IiwidmVyaWZ5UGFyYW1UeXBlIiwiY2VpbCIsImZsYXR0ZW4yZCIsImNvbmNhdCIsInYiLCJkcm9wQXJyYXlEdXBsaWNhdGVzIiwib25FcnJvciIsInZlcmlmeVBhcmFtUHJlc2VudCIsInR5cGVPZiIsIm5vdGV4aXN0Iiwib25QYXJhbUFic2VudCIsIm9uUGFyYW1FcnJvciIsInZlcmlmeVBhcmFtQWJzZW50Iiwib25QYXJhbVByZXNlbnQiLCJtYXAiLCJpc05hTiIsIm9uUGFyYW1JbnZhbGlkVHlwZSIsImpvaW4iLCJ2ZXJpZnlQYXJhbVZhbGlkIiwib25QYXJhbUludmFsaWRWYWx1ZSIsInZlcmlmeVBhcmFtTWluIiwidmVyaWZ5UGFyYW1NYXgiLCJ2ZXJpZnlBcnJheU1heCIsInZlcmlmeUVtYWlsIiwidGVzdCIsInZlcmlmeVRlbCIsInZlcmlmeUJpcnRoIiwidmVyaWZ5T3B0aW9ucyIsInZlcmlmeVBhcmFtQXRMZWFzdFByZXNlbnRPbmUiLCJ2ZXJpZnlQYXJhbVByZXNlbnRKdXN0T25lIiwicmVkdWNlIiwidmVyaWZ5Qm9vbGVhbldpdGhEZWZhdWx0IiwidW5kZWYiLCJpc0Jvb2xlYW4iLCJ2ZXJpZnlGaWxlSW5wdXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidGFnTmFtZSIsInR5cGUiLCJ2ZXJpZnlGaWxlVHlwZSIsInZhbGlkRmlsZVR5cGVzIiwidmVyaWZ5Q2FsbGJhY2siLCJ2ZXJpZnlGaWxlVXBsb2FkQ2FsbGJhY2siLCJ2YWxpZEZpbGVFeHRzIiwiaW1hZ2UiLCJhdWRpbyIsInZpZGVvIiwiZmlsdGVyRmlsZXMiLCJsYXN0SW5kZXhPZiIsImYiLCJzdXBwb3J0Rm9ybURhdGEiLCJub3R1bmRlZiIsIkZvcm1EYXRhIiwiZ2V0RmlsZU5hbWUiLCJmaWxlcyIsInNpemVUZXh0IiwicHJvbWlzZXMyY21kcyIsImNtZCIsIm9ianMyYWNjb3VudHMiLCJhY2NvdW50IiwidGVhbXMyaWRzIiwidGVhbUlkIiwib2JqczJpZHMiLCJnZXRNYXhVcGRhdGVUaW1lIiwidXBkYXRlVGltZSIsIm1heCIsImFwcGx5IiwiZ2VuQ2hlY2tVbmlxdWVGdW5jIiwiRyIsIkoiLCJuZXh0VGljayIsInoiLCJaIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsInNldFRpbWVvdXQiLCJWIiwibmUiLCJkIiwicnVuT25Mb29wIiwicnVuT25Db250ZXh0IiwiaCIsIm9lIiwiRiIsIl9zdGF0ZSIsIkEiLCJfcmVzdWx0IiwiRSIsInkiLCJNIiwiVHlwZUVycm9yIiwiZyIsImIiLCJ0aGVuIiwiZXJyb3IiLCJjZSIsImsiLCJ3IiwieCIsIkMiLCJfbGFiZWwiLCJTIiwiYWUiLCJzZSIsIlQiLCJyZXNvbHZlIiwiXyIsIl9vbmVycm9yIiwiTyIsImllIiwiX3N1YnNjcmliZXJzIiwiUCIsIkkiLCJ1ZSIsIk4iLCJqIiwibGUiLCJSIiwiX2luc3RhbmNlQ29uc3RydWN0b3IiLCJwcm9taXNlIiwiSyIsIl9pbnB1dCIsIl9yZW1haW5pbmciLCJfZW51bWVyYXRlIiwiRCIsIkVycm9yIiwiTCIsIkIiLCJxIiwiVSIsIlciLCJIIiwiJCIsInNlbGYiLCJGdW5jdGlvbiIsIlByb21pc2UiLCJPYmplY3QiLCJjYXN0IiwiWCIsInJlIiwiWSIsIndpbmRvdyIsIlEiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImVlIiwidGUiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJfZWFjaEVudHJ5IiwiX3NldHRsZWRBdCIsIl93aWxsU2V0dGxlQXQiLCJhbGwiLCJyYWNlIiwicmVqZWN0IiwiX3NldFNjaGVkdWxlciIsIl9zZXRBc2FwIiwiX2FzYXAiLCJwb2x5ZmlsbCIsIm1lc3NhZ2UiLCJjb2RlIiwidGltZSIsIkRhdGUiLCJ0aW1ldGFnIiwiYXBwZW5kTWVzc2FnZSIsIkNvbm5lY3RfRmFpbGVkIiwiRXJyb3JfSW50ZXJuZXRfRGlzY29ubmVjdGVkIiwiRXJyb3JfQ29ubmVjdGlvbl9pc19ub3RfRXN0YWJsaXNoZWQiLCJFcnJvcl9Db25uZWN0aW9uX1NvY2tldF9TdGF0ZV9ub3RfTWF0Y2giLCJFcnJvcl9UaW1lb3V0IiwiUGFyYW1fRXJyb3IiLCJOb19GaWxlX1NlbGVjdGVkIiwiV3JvbmdfRmlsZV9UeXBlIiwiRmlsZV9Ub29fTGFyZ2UiLCJDcm9zc19PcmlnaW5fSWZyYW1lIiwiTm90X1N1cHBvcnQiLCJOT19EQiIsIkRCIiwiU3RpbGxfSW5fVGVhbSIsIlNlc3Npb25fRXhpc3QiLCJTZXNzaW9uX05vdF9FeGlzdCIsIkVycm9yX1Vua25vd24iLCJPcGVyYXRpb25fQ2FuY2VsZWQiLCJnZW5FcnJvciIsIm11bHRpSW5zdGFuY2UiLCJuZXdOZXR3b3JrRXJyb3IiLCJuZXdDb25uZWN0RXJyb3IiLCJuZXdDb25uZWN0aW9uRXJyb3IiLCJuZXdTb2NrZXRTdGF0ZUVycm9yIiwibmV3VGltZW91dEVycm9yIiwibmV3RnJlcXVlbmN5Q29udHJvbEVycm9yIiwiZnJvbSIsIm5ld1BhcmFtRXJyb3IiLCJuZXdOb0ZpbGVFcnJvciIsIm5ld1dyb25nRmlsZVR5cGVFcnJvciIsIm5ld0ZpbGVUb29MYXJnZUVycm9yIiwibmV3Q09SU0lmcmFtZUVycm9yIiwibmV3U3VwcG9ydEVycm9yIiwibmV3U3VwcG9ydERCRXJyb3IiLCJub0RCRXJyb3IiLCJuZXdEQkVycm9yIiwibmV3VW5rbm93bkVycm9yIiwic3RpbGxJblRlYW1FcnJvciIsInNlc3Npb25FeGlzdCIsInNlc3Npb25Ob3RFeGlzdCIsImNhbmNlbCIsIldFSVhJTl9BUFAiLCJOT0RFX0VOViIsImluZm8iLCJoYXNoIiwic2hvcnRIYXNoIiwic2RrVmVyc2lvbiIsInByb3RvY29sVmVyc2lvbiIsImFnZW50VmVyc2lvbiIsImxic1VybCIsImNvbm5lY3RUaW1lb3V0IiwieGhyVGltZW91dCIsInNvY2tldFRpbWVvdXQiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlY29ubmVjdGlvbkRlbGF5TWF4IiwicmVjb25uZWN0aW9uSml0dGVyIiwiaGVhcnRiZWF0SW50ZXJ2YWwiLCJjbWRUaW1lb3V0IiwiZm9ybWF0U29ja2V0VXJsIiwidXJsIiwic2VjdXJlIiwiZmlsZVNlcnZlclVybCIsInJlcGxhY2VVcmwiLCJnZW5VcGxvYWRVcmwiLCJ1cGxvYWRVcmwiLCJnZW5Eb3dubG9hZFVybCIsImRvd25sb2FkVXJsIiwiZ2V0SW5zdGFuY2UiLCJnZW5JbnN0YW5jZU5hbWUiLCJ1cGRhdGVJbnN0YW5jZSIsInNldE9wdGlvbnMiLCJjb25uZWN0IiwiZm4iLCJpbml0IiwiX2Rpc2FibGVTaW5nbGV0b24iLCJsb2dnZXIiLCJkZWJ1ZyIsImxvZ0Z1bmMiLCJwcmVmaXgiLCJzdWJUeXBlIiwiYXBpIiwicHJvdG9jb2wiLCJQcm90b2NvbCIsIk1lc3NhZ2UiLCJvcHRpb25zIiwicmVzZXQiLCJwcm9jZXNzQ2FsbGJhY2siLCJwcm9jZXNzQ2FsbGJhY2tQcm9taXNlIiwiY2FsbGJhY2siLCJjYmFvcCIsImRvbmUiLCJjYiIsInByb2Nlc3NQcyIsInBzIiwicHJvY2Vzc0N1c3RvbSIsImN1c3RvbSIsInNlbmRDbWQiLCJzZW5kQ21kV2l0aFJlc3AiLCJjYkFuZFNlbmRDbWQiLCJ1c2UiLCJpbnN0YWxsIiwiZGV2aWNlSWQiLCJjbGllbnRUeXBlTWFwIiwiY21kVGFza0FycmF5IiwidGltZXJNYXAiLCJjbWRDYWxsYmFja01hcCIsImNtZENvbnRlbnRNYXAiLCJpbml0Q29ubmVjdCIsInJlc2V0Q29ubmVjdCIsImhlYXJ0YmVhdCIsImxvZyIsInBhcnNlciIsImNyZWF0ZUNtZCIsIlNFUiIsInNpbmdsZSIsIk5PVFNUT1JFIiwiY21kTmFtZSIsInN0YXJ0Q21kVGFza1RpbWVyIiwiY21kVGFza1RpbWVyIiwiZXhlY3V0ZUNtZFRhc2siLCJpc0ZyZXF1ZW5jeUNvbnRyb2xsZWQiLCJ3YXJuIiwibWFya0NhbGxiYWNrSW52YWxpZCIsImlzQ29ubmVjdGVkIiwiZG9TZW5kQ21kIiwiZnJlcXVlbmN5Q29udHJvbE1hcCIsIm5vdyIsImR1cmF0aW9uIiwic29ja2V0Iiwic2VuZCIsIm9uRGlzY29ubmVjdCIsImdldE9ialdpdGhTZXIiLCJnZXRDYWxsYmFja1dpdGhTZXIiLCJnZXRUaW1lcldpdGhTZXIiLCJjbGVhclRpbWVyV2l0aFNlciIsImNsZWFyVGltZW91dCIsIm1hcmtBbGxDYWxsYmFja0ludmFsaWQiLCJnZXRQYWNrZXRPYmoiLCJyYXciLCJzZXIiLCJjYWxsUGFja2V0QWNrQ2FsbGJhY2siLCJvYmoiLCJldmVudCIsImNvbnRlbnQiLCJvbk1lc3NhZ2UiLCJwYXJzZVJlc3BvbnNlIiwibm90Rm91bmQiLCJmcmVxdWVuY3lDb250cm9sRHVyYXRpb24iLCJzZXJ2aWNlIiwib25NaXNjRXJyb3IiLCJub3RpZnlFcnJvciIsIm9uZXJyb3IiLCJlbWl0QVBJIiwiZW1pdCIsIlN0cmluZyIsImNoYXJBdCIsImV4ZWMiLCJyZXBsYWNlIiwiUmVnRXhwIiwicGF0dGVybiIsImxhYmVsIiwiZGVzY3JpcHRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJsaWtlQ2hyb21lIiwiamF2YSIsImVudmlyb25tZW50Iiwib3BlcmFtaW5pIiwib3BlcmEiLCJBcHBsZSIsImlQYWQiLCJpUGhvbmUiLCJpUG9kIiwiQXJjaG9zIiwiQW1hem9uIiwiS2luZGxlIiwiQXN1cyIsIlRyYW5zZm9ybWVyIiwiTm9vayIsIkJsYWNrQmVycnkiLCJQbGF5Qm9vayIsIkdvb2dsZSIsIk5leHVzIiwiSFAiLCJUb3VjaFBhZCIsIkhUQyIsIkxHIiwiTWljcm9zb2Z0IiwiWGJveCIsIk1vdG9yb2xhIiwiWG9vbSIsIk5pbnRlbmRvIiwiV2lpIiwiTm9raWEiLCJMdW1pYSIsIlNhbXN1bmciLCJTb255IiwibWFudWZhY3R1cmVyIiwicHJvZHVjdCIsInVuc2hpZnQiLCJwYXJzZUZsb2F0IiwibGFuZyIsIlN5c3RlbSIsImdldFByb3BlcnR5Iiwic3lzdGVtIiwib3MiLCJwcm9jZXNzIiwiYnJvd3NlciIsImFyY2giLCJwbGF0Zm9ybSIsInJ1bnRpbWUiLCJmbGFzaCIsIkNhcGFiaWxpdGllcyIsInBoYW50b20iLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJkb2N1bWVudE1vZGUiLCJ0b0ZpeGVkIiwiYXBwTWlub3JWZXJzaW9uIiwiZXh0ZXJuYWwiLCJwYXJzZUludCIsImFyY2hpdGVjdHVyZSIsImZhbWlseSIsImNwdUNsYXNzIiwibGF5b3V0IiwicHJlcmVsZWFzZSIsInVhIiwib2JqZWN0Iiwibm9kZVR5cGUiLCJnbG9iYWwiLCJwb3ciLCJyZXNlbmQiLCJpZENsaWVudCIsInlpZHVuRW5hYmxlIiwiYW50aVNwYW1Db250ZW50IiwidHlwZU1hcCIsInZhbGlkVHlwZXMiLCJnZXRUeXBlIiwicmV2ZXJzZSIsImZyb21DbGllbnRUeXBlIiwicmV2ZXJzZVR5cGUiLCJ1c2VyVXBkYXRlVGltZSIsInN0YXR1cyIsInNldEV4dHJhIiwic2V0RmxvdyIsIm1peGluIiwiY29uZmlnTWFwIiwic2VyaWFsaXplTWFwIiwidW5zZXJpYWxpemVNYXAiLCJjbWRDb25maWciLCJTSUQiLCJzaWQiLCJDSUQiLCJjaWQiLCJwYXJhbXMiLCJlbnRpdHkiLCJzZXJpYWxpemUiLCJyYXdTdHIiLCJwYWNrZXRDb25maWciLCJpc05vdGlmeSIsImhlYWRlclBhY2tldCIsImJvZHkiLCJ0cml2aWFsRXJyb3JDb2RlcyIsInJlc3BvbnNlIiwidW5zZXJpYWxpemUiLCJpZFNlcnZlciIsImRlbGV0ZWRJZENsaWVudCIsImpzb24iLCJ1cGxvYWQiLCJtb2RlIiwiaGVhZGVycyIsImxvY2F0aW9uIiwiaG9zdCIsInVybDJvcmlnaW4iLCJjb3JzIiwicmVxIiwiZGVzdHJveSIsInJlc3VsdCIsImhlYWRlciIsInN0b3BwZWQiLCJnZW5VcmxTZXAiLCJvYmplY3QycXVlcnkiLCJ1bmlxdWVJRCIsIm9ubG9hZCIsImJpbmQiLCJxdWVyeSIsIm1ldGhvZCIsImZpbHRlciIsImFib3J0Iiwib251cGxvYWRpbmciLCJvbiIsImRvU2VuZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25wcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJnZXRLZXlzIiwicHV0RmlsZUF0RW5kIiwiYXBwZW5kIiwiZGF0YXNldCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9uU3RhdGVDaGFuZ2UiLCJ0aW1lb3V0IiwidGltZXIiLCJvblRpbWVvdXQiLCJvcGVuIiwic3luYyIsInNldFJlcXVlc3RIZWFkZXIiLCJjb29raWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJhZnRlclNlbmQiLCJsZW5ndGhDb21wdXRhYmxlIiwidG90YWwiLCJyZWFkeVN0YXRlIiwib25Mb2FkIiwicmVzcG9uc2VUZXh0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJpc0ZpbGVJbnB1dCIsIkJsb2IiLCJvbmNlIiwib25iZWZvcmVzZW5kIiwib25hZnRlcnNlbmQiLCJmZXRjaCIsImZvcm0iLCJpbnB1dCIsInByb3h5VXJsIiwibGlzdGVuZXIiLCJFdmVudEVtaXR0ZXIiLCJnZXRMaXN0ZW5lcnMiLCJfZ2V0RXZlbnRzIiwiZmxhdHRlbkxpc3RlbmVycyIsImdldExpc3RlbmVyc0FzT2JqZWN0IiwiYWRkTGlzdGVuZXIiLCJhZGRPbmNlTGlzdGVuZXIiLCJkZWZpbmVFdmVudCIsImRlZmluZUV2ZW50cyIsInJlbW92ZUxpc3RlbmVyIiwib2ZmIiwiYWRkTGlzdGVuZXJzIiwibWFuaXB1bGF0ZUxpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVycyIsInJlbW92ZUV2ZW50IiwiX2V2ZW50cyIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXRFdmVudCIsIl9nZXRPbmNlUmV0dXJuVmFsdWUiLCJ0cmlnZ2VyIiwic2V0T25jZVJldHVyblZhbHVlIiwiX29uY2VSZXR1cm5WYWx1ZSIsIm5vQ29uZmxpY3QiLCJrZXkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhZGRNc2dMaXN0ZW5lciIsInN0YXJ0VGltZXIiLCJwYXJlbnROb2RlIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVwbGFjZUNoaWxkIiwiaHRtbDJub2RlIiwiYXBwZW5kQ2hpbGQiLCJ0YXJnZXQiLCJlbmN0eXBlIiwiZW5jb2RpbmciLCJhY3Rpb24iLCJjbG9uZU5vZGUiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpZnJhbWUiLCJjcmVhdGVJZnJhbWUiLCJhYm9ydGVkIiwiY2hlY2tSZXN1bHQiLCJzdWJtaXQiLCJjb250ZW50V2luZG93IiwiaW5uZXJUZXh0IiwidGV4dENvbnRlbnQiLCJ0cmltIiwiaW5uZXJIVE1MIiwicmVtb3ZlIiwiX19lc01vZHVsZSIsIiQxIiwidW5lc2NhcGUiLCJzdHJpbmcyb2JqZWN0Iiwib3JpZ2luIiwiaHJlZiIsInNvdXJjZSIsImZyYW1lcyIsInJlZiIsInJlZmVycmVyIiwic2V0SW50ZXJ2YWwiLCJmaWxsVW5kZWYiLCJvYmplY3Qyc3RyaW5nIiwiZXNjYXBlIiwic3JjIiwiY2hlY2tXaXRoRGVmYXVsdCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJpbyIsInRyYW5zcG9ydHMiLCJzb2NrZXRzIiwidXRpbCIsInBhcnNlVXJpIiwiZG9tYWluIiwiaG9zdG5hbWUiLCJwb3J0IiwidW5pcXVlVXJpIiwiU29ja2V0Iiwib2YiLCJwYXRoIiwiY2h1bmtRdWVyeSIsImxvYWQiLCJhdHRhY2hFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXF1ZXN0IiwiWERvbWFpblJlcXVlc3QiLCJoYXNDT1JTIiwiZGVmZXIiLCJ3ZWJraXQiLCJpbmhlcml0IiwiaW50ZXJzZWN0IiwidG9BcnJheSIsImlEZXZpY2UiLCIkZXZlbnRzIiwibGlzdGVuZXJzIiwicGFyZW50IiwibmF0aXZlSlNPTiIsImRhdGUiLCJpc0Zpbml0ZSIsInZhbHVlT2YiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJxdW90ZSIsImVzY2FwYWJsZSIsImxhc3RJbmRleCIsIm1ldGEiLCJjaGFyQ29kZUF0Iiwic3RyIiwiZ2FwIiwicmVwIiwiaW5kZW50Iiwic3RyaW5naWZ5IiwiY3giLCJ0ZXh0IiwicmV2aXZlciIsIndhbGsiLCJldmFsIiwiU3ludGF4RXJyb3IiLCJwYWNrZXRzIiwicmVhc29ucyIsImFkdmljZSIsImVuY29kZVBhY2tldCIsImVuZHBvaW50IiwiYWNrIiwicmVhc29uIiwiYXJncyIsInFzIiwiYWNrSWQiLCJlbmNvZGVQYXlsb2FkIiwiZGVjb2RlUGFja2V0IiwibWF0Y2giLCJkZWNvZGVQYXlsb2FkIiwic3Vic3RyIiwiTnVtYmVyIiwic2Vzc2lkIiwiaGVhcnRiZWF0cyIsIm9uRGF0YSIsInRyYW5zcG9ydCIsImNsZWFyQ2xvc2VUaW1lb3V0IiwiY29ubmVjdGVkIiwiY29ubmVjdGluZyIsInJlY29ubmVjdGluZyIsInNldENsb3NlVGltZW91dCIsIm9uUGFja2V0Iiwic2V0SGVhcnRiZWF0VGltZW91dCIsIm9uSGVhcnRiZWF0Iiwib25Db25uZWN0IiwiaXNPcGVuIiwiY2xvc2VUaW1lb3V0IiwiY2xvc2UiLCJjbGVhclRpbWVvdXRzIiwic2V0QnVmZmVyIiwicmVvcGVuVGltZW91dCIsInBhY2tldCIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJwcmVwYXJlVXJsIiwic2NoZW1lIiwicmVzb3VyY2UiLCJyZWFkeSIsInJlY29ubmVjdCIsIm1hbnVhbEZsdXNoIiwibmFtZXNwYWNlcyIsImJ1ZmZlciIsImRvQnVmZmVyIiwiaXNYRG9tYWluIiwiZGlzY29ubmVjdFN5bmMiLCJTb2NrZXROYW1lc3BhY2UiLCJwdWJsaXNoIiwiJGVtaXQiLCJoYW5kc2hha2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsInNlc3Npb25pZCIsImhlYXJ0YmVhdFRpbWVvdXQiLCJvcmlnVHJhbnNwb3J0cyIsImNvbm5lY3RUaW1lb3V0VGltZXIiLCJkb0Nvbm5lY3QiLCJnZXRUcmFuc3BvcnQiLCJ0cnlOZXh0VHJhbnNwb3J0IiwieGRvbWFpbkNoZWNrIiwiaGVhcnRiZWF0VGltZW91dFRpbWVyIiwiZmx1c2hCdWZmZXIiLCJwYXlsb2FkIiwiZGlzY29ubmVjdCIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwicmVjb25uZWN0aW9uVGltZXIiLCJyZWRvVHJhbnNwb3J0cyIsImZsYWdzIiwiYWNrUGFja2V0cyIsImFja3MiLCJuYW1lc3BhY2UiLCJ3ZWJzb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbmNsb3NlIiwiX19hZGRUYXNrIiwiX190YXNrcyIsIldFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OIiwibG9hZEZsYXNoUG9saWN5RmlsZSIsIl9faW5pdGlhbGl6ZSIsInN3Zm9iamVjdCIsImdldEZsYXNoUGxheWVyVmVyc2lvbiIsIldFQl9TT0NLRVRfRElTQUJMRV9BVVRPX0lOSVRJQUxJWkFUSU9OIiwiYWEiLCJHZXRWYXJpYWJsZSIsInB2IiwiY2FsbGVlIiwiY2FsbGJhY2tGbiIsInN1Y2Nlc3MiLCJzd2ZWZXJzaW9uIiwid2siLCJleHByZXNzSW5zdGFsbCIsIndpZHRoIiwiaGVpZ2h0Iiwic3R5bGVjbGFzcyIsImFsaWduIiwiU2V0VmFyaWFibGUiLCJub2RlTmFtZSIsIndpbiIsIm1hYyIsInRpdGxlIiwiZmxhc2h2YXJzIiwic3R5bGUiLCJkaXNwbGF5IiwiY2hpbGROb2RlcyIsIm1vdmllIiwib3V0ZXJIVE1MIiwic3R5bGVTaGVldHMiLCJhZGRSdWxlIiwidmlzaWJpbGl0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInBsdWdpbnMiLCJtaW1lVHlwZXMiLCJlbmFibGVkUGx1Z2luIiwidzMiLCJkZXRhY2hFdmVudCIsInRvcCIsImRvY3VtZW50RWxlbWVudCIsImRvU2Nyb2xsIiwicmVnaXN0ZXJPYmplY3QiLCJnZXRPYmplY3RCeUlkIiwiZW1iZWRTV0YiLCJzd2l0Y2hPZmZBdXRvSGlkZVNob3ciLCJyZWxlYXNlIiwiaGFzRmxhc2hQbGF5ZXJWZXJzaW9uIiwiY3JlYXRlU1dGIiwic2hvd0V4cHJlc3NJbnN0YWxsIiwicmVtb3ZlU1dGIiwiY3JlYXRlQ1NTIiwiYWRkRG9tTG9hZEV2ZW50IiwiYWRkTG9hZEV2ZW50IiwiZ2V0UXVlcnlQYXJhbVZhbHVlIiwic2VhcmNoIiwiZXhwcmVzc0luc3RhbGxDYWxsYmFjayIsImNvbnNvbGUiLCJfX2lkIiwiX19uZXh0SWQiLCJfX2luc3RhbmNlcyIsIkNPTk5FQ1RJTkciLCJidWZmZXJlZEFtb3VudCIsIl9fZXZlbnRzIiwiX19mbGFzaCIsImNyZWF0ZSIsIkNMT1NFRCIsIkNMT1NJTkciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsIl9faGFuZGxlRXZlbnQiLCJfX2NyZWF0ZVNpbXBsZUV2ZW50IiwiX19jcmVhdGVNZXNzYWdlRXZlbnQiLCJjcmVhdGVFdmVudCIsIkV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJNZXNzYWdlRXZlbnQiLCJpbml0TWVzc2FnZUV2ZW50IiwiT1BFTiIsImxvYWRNYW51YWxQb2xpY3lGaWxlIiwiX19zd2ZMb2NhdGlvbiIsInBvc2l0aW9uIiwiX19pc0ZsYXNoTGl0ZSIsImxlZnQiLCJoYXNQcmlvcml0eSIsInN3bGl2ZWNvbm5lY3QiLCJhbGxvd1NjcmlwdEFjY2VzcyIsIl9fb25GbGFzaEluaXRpYWxpemVkIiwic2V0Q2FsbGVyVXJsIiwic2V0RGVidWciLCJXRUJfU09DS0VUX0RFQlVHIiwiX19vbkZsYXNoRXZlbnQiLCJyZWNlaXZlRXZlbnRzIiwid2ViU29ja2V0SWQiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJfX2xvZyIsIl9fZXJyb3IiLCJmaWxlbmFtZSIsInNlbmRCdWZmZXIiLCJYSFIiLCJnZXQiLCJwb3N0IiwicG9zdGluZyIsInNlbmRYSFIiLCJjb250ZW50VHlwZSIsImh0bWxmaWxlIiwiZG9jIiwid3JpdGUiLCJwYXJlbnRXaW5kb3ciLCJjbGFzc05hbWUiLCJDb2xsZWN0R2FyYmFnZSIsInJldHJ5Q291bnRlciIsImluZGV4IiwiaWZyYW1lSWQiLCJhcmVhIiwic2NyaXB0IiwiYXN5bmMiLCJjaGF0cm9vbUFkZHJlc3NlcyIsInN5bmNSZXN1bHQiLCJ0aW1ldGFncyIsIm1zZ0J1ZmZlciIsIm1zZ0J1ZmZlckludGVydmFsIiwibXNnQnVmZmVyU2l6ZSIsInNvY2tldFVybHMiLCJzb2NrZXRVcmxzQmFja3VwIiwicHJvY2Vzc0NoYXRyb29tIiwiY2hhdHJvb20iLCJtZW1iZXIiLCJjaGF0cm9vbU1lbWJlciIsIm9uS2lja2VkIiwib25TZW5kTXNnIiwib25Nc2ciLCJvbkNoYXRyb29tTWVtYmVycyIsIm9uSGlzdG9yeU1zZ3MiLCJvbk1hcmtDaGF0cm9vbU1lbWJlciIsIm9uQ2hhdHJvb20iLCJvbkNoYXRyb29tTWVtYmVyc0luZm8iLCJjcmVhdGVVbmlxdWVLZXkiLCJMSVNURU5FUlMiLCJDQVBUVVJFIiwiQlVCQkxFIiwiQVRUUklCVVRFIiwibmV3Tm9kZSIsImtpbmQiLCJuZXh0IiwiZnJvbUNoYXJDb2RlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjaGF0cm9vbUlkIiwiZ2V0Q2hhdHJvb20iLCJ1cGRhdGVDaGF0cm9vbSIsIm5lZWROb3RpZnkiLCJjbG9zZUNoYXRyb29tIiwiZmlsZSIsInZlcmlmeUZpbGUiLCJhdHRhY2giLCJtcDNVcmwiLCJfZW50cmllcyIsInVyaSIsInNldCIsImVudHJpZXMiLCJmaW5kIiwiZ2V0QWxsIiwiaGFzIiwia2V5cyIsInZhbHVlcyIsImdldEl0ZW0iLCJ3eCIsImdldFN0b3JhZ2VTeW5jIiwic2V0SXRlbSIsInNldFN0b3JhZ2VTeW5jIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwiY2xlYXJTdG9yYWdlU3luYyIsIlJlZmVyZW5jZUVycm9yIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiX19wcm90b19fIiwib25Tb2NrZXRPcGVuIiwiX3JlYWR5U3RhdGUiLCJvblNvY2tldEVycm9yIiwib25Tb2NrZXRNZXNzYWdlIiwicG9ydHMiLCJvblNvY2tldENsb3NlIiwid2FzQ2xlYW4iLCJfdXJsIiwiX3Byb3RvY2FsIiwiY29ubmVjdFNvY2tldCIsImNsb3NlU29ja2V0Iiwic2VuZFNvY2tldE1lc3NhZ2UiLCJzdGF0dXNDb2RlIiwic3RhdHVzVGV4dCIsIl9oZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwib3ZlcnJpZGVNaW1lVHlwZSIsIl9tZXRob2QiLCJ1cGxvYWRGaWxlIiwiZmlsZVBhdGgiLCJmb3JtRGF0YSIsImZhaWwiLCJlcnJNc2ciLCJzaG93TW9kYWwiLCJVTlNFTlQiLCJPUEVORUQiLCJIRUFERVJTX1JFQ0VJVkVEIiwiTE9BRElORyIsIkRPTkUiLCJzdHJpcG1ldGEiLCJibHVyIiwicXVhbGl0eSIsImNyb3AiLCJyb3RhdGUiLCJ0aHVtYm5haWwiLCJpbnRlcmxhY2UiLCJyZXZlcnNlSW1hZ2VPcHMiLCJsaW5rIiwibWlzYyIsImdldFNpbXBsZU5vc1Rva2VuIiwiZ2V0Tm9zVG9rZW4iLCJub3RpZnlVcGxvYWRMb2ciLCJ1cGxvYWRTZGtMb2dVcmwiLCJhdWRpb1RvVGV4dCIsInByb2Nlc3NJbWFnZSIsImlkTWFwIiwiZnJvbURhdGFVUkwiLCJibG9iRnJvbURhdGFVUkwiLCJkZWZpbmVDdXN0b21FdmVudFRhcmdldCIsImNyZWF0ZUV2ZW50V3JhcHBlciIsIlNUT1BfSU1NRURJQVRFX1BST1BBR0FUSU9OX0ZMQUciLCJFdmVudFRhcmdldCIsImhhbmRsZUV2ZW50IiwiZGVmYXVsdFByZXZlbnRlZCIsImFsZXJ0IiwiY29uZmlybSIsInByb21wdCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJmb3JPd24iLCJhdG9iIiwiVWludDhBcnJheSIsInRvQmxvYiIsInRvRGF0YVVSTCIsImJsb2JGcm9tQ2FudmFzIiwiZGV0ZWN0Q1NTRmVhdHVyZSIsImVtcHR5T2JqIiwicmVnQmxhbmsiLCJyZWdXaGl0ZVNwYWNlIiwiZml4IiwiZ2V0WWVhclN0ciIsImdldE1vbnRoU3RyIiwiZ2V0RGF5U3RyIiwiZ2V0SG91clN0ciIsImdldE1pbnV0ZVN0ciIsImdldFNlY29uZFN0ciIsImdldE1pbGxpc2Vjb25kU3RyIiwiZGF0ZUZyb21EYXRlVGltZUxvY2FsIiwiZm9ybWF0IiwieXl5eSIsIk1NIiwiZGQiLCJoaCIsIm1tIiwic3MiLCJTU1MiLCJvcGFjaXR5Iiwib2Zmc2V0SGVpZ2h0Iiwic3JjRWxlbWVudCIsIm11bHRpIiwiZnJhbWVCb3JkZXIiLCJ2aXNpYmxlIiwiY29udGFpbnNOb2RlIiwiY2FsY0hlaWdodCIsImdldENsYXNzIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc1JlZ0V4cCIsImlzRXJyb3IiLCJub3RudWxsIiwiaXNFbXB0eSIsImlzSlNPTiIsInBhcnNlSlNPTiIsImdldFRpbWUiLCJJREJLZXlSYW5nZSIsIndlYmtpdElEQktleVJhbmdlIiwicmVhZG9ubHkiLCJyZWFkd3JpdGUiLCJpbmRleGVkREIiLCJ3ZWJraXRJbmRleGVkREIiLCJtb3pJbmRleGVkREIiLCJvSW5kZXhlZERCIiwibXNJbmRleGVkREIiLCJzaGltSW5kZXhlZERCIiwiZ2V0SW5kZXhlZERCIiwiYWRkIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsIml0ZW0iLCJvbnN1Y2Nlc3MiLCJvbmNvbXBsZXRlIiwicHJldmVudERlZmF1bHQiLCJvbmFib3J0IiwidXBkYXRlQW5kRGVsZXRlIiwicHV0IiwidXBkYXRlIiwiY291bnQiLCJvYmplY3RTdG9yZU5hbWVzIiwiYWR2YW5jZSIsImV4ZWN1dGUiLCJhc2MiLCJkaXN0aW5jdCIsIm1vZGlmeSIsImxpbWl0IiwiY29udGFpbnMiLCJjdXJyZW50VGFyZ2V0IiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJpbmRleGVzIiwiY3JlYXRlSW5kZXgiLCJ1bmlxdWUiLCJzZXJ2ZXIiLCJzY2hlbWEiLCJvbnVwZ3JhZGVuZWVkZWQiLCJkZWxldGVEYXRhYmFzZSIsIm9uYmxvY2tlZCIsIm5hdHVyYWxTb3J0IiwiZGVlcEFjY2VzcyIsImRiIiwic3VwcG9ydCIsImJsb2IiLCJhamF4IiwibmljayIsImF2YXRhciIsImxldmVsIiwib25saW5lIiwiZW50ZXJUaW1lIiwiZ3Vlc3QiLCJibGFja2VkIiwiZ2FnZWQiLCJ2YWxpZCIsInRlbXBNdXRlZCIsInRlbXBNdXRlRHVyYXRpb24iLCJyZXZlcnNlTWVtYmVycyIsImF1dGgiLCJsb2dpbiIsImtpY2tlZCIsImxvZ291dCIsIm11bHRpUG9ydExvZ2luIiwia2ljayIsInVzZXIiLCJtYXJrSW5CbGFja2xpc3QiLCJnZXRCbGFja2xpc3QiLCJtYXJrSW5NdXRlbGlzdCIsImdldE11dGVsaXN0IiwiZ2V0UmVsYXRpb25zIiwiZ2V0VXNlcnMiLCJ1cGRhdGVNeUluZm8iLCJ1cGRhdGVEb25ub3AiLCJzeW5jTXlJbmZvIiwic3luY1VwZGF0ZU15SW5mbyIsIm5vdGlmeSIsIm1hcmtSZWFkIiwic3luY09mZmxpbmVNc2dzIiwiYmF0Y2hNYXJrUmVhZCIsInN5bmNPZmZsaW5lU3lzTXNncyIsInN5bmNSb2FtaW5nTXNncyIsInN5bmNNc2dSZWNlaXB0cyIsInN5bmNUZWFtTWVtYmVycyIsIm1zZyIsInNlbmRNc2ciLCJzeXNNc2ciLCJnZXRIaXN0b3J5TXNncyIsInNlbmRDdXN0b21TeXNNc2ciLCJzZWFyY2hIaXN0b3J5TXNncyIsImRlbGV0ZVNlc3Npb25zIiwiZ2V0U2Vzc2lvbnMiLCJzeW5jU2VuZE1zZyIsInNlbmRNc2dSZWNlaXB0IiwibXNnUmVjZWlwdCIsImRlbGV0ZU1zZyIsIm1zZ0RlbGV0ZWQiLCJtYXJrU2Vzc2lvbkFjayIsInRlYW0iLCJjcmVhdGVUZWFtIiwic2VuZFRlYW1Nc2ciLCJ0ZWFtTXNnIiwidGVhbU1zZ3MiLCJhZGRUZWFtTWVtYmVycyIsInJlbW92ZVRlYW1NZW1iZXJzIiwidXBkYXRlVGVhbSIsImxlYXZlVGVhbSIsImdldFRlYW0iLCJnZXRUZWFtcyIsImdldFRlYW1NZW1iZXJzIiwiZGlzbWlzc1RlYW0iLCJhcHBseVRlYW0iLCJwYXNzVGVhbUFwcGx5IiwicmVqZWN0VGVhbUFwcGx5IiwiYWRkVGVhbU1hbmFnZXJzIiwicmVtb3ZlVGVhbU1hbmFnZXJzIiwidHJhbnNmZXJUZWFtIiwidXBkYXRlSW5mb0luVGVhbSIsInVwZGF0ZU5pY2tJblRlYW0iLCJhY2NlcHRUZWFtSW52aXRlIiwicmVqZWN0VGVhbUludml0ZSIsImdldFRlYW1IaXN0b3J5TXNncyIsInNlYXJjaFRlYW1IaXN0b3J5TXNncyIsInVwZGF0ZU11dGVTdGF0ZUluVGVhbSIsImdldE15VGVhbU1lbWJlcnMiLCJnZXRNdXRlZFRlYW1NZW1iZXJzIiwic3luY015VGVhbU1lbWJlcnMiLCJzeW5jVGVhbXMiLCJzeW5jQ3JlYXRlVGVhbSIsInN5bmNTZW5kVGVhbU1zZyIsInN5bmNVcGRhdGVUZWFtTWVtYmVyIiwiZnJpZW5kIiwiZnJpZW5kUmVxdWVzdCIsInN5bmNGcmllbmRSZXF1ZXN0IiwiZGVsZXRlRnJpZW5kIiwic3luY0RlbGV0ZUZyaWVuZCIsInVwZGF0ZUZyaWVuZCIsInN5bmNVcGRhdGVGcmllbmQiLCJnZXRGcmllbmRzIiwiZ2V0Q2hhdHJvb21BZGRyZXNzIiwic2VuZEZpbHRlck1zZyIsImZpbHRlck1zZyIsImZpbHRlclN5c01zZyIsInNlbmRGaWx0ZXJDdXN0b21TeXNNc2ciLCJldmVudFNlcnZpY2UiLCJwdWJsaXNoRXZlbnQiLCJwdXNoRXZlbnQiLCJzdWJzY3JpYmVFdmVudCIsInVuU3Vic2NyaWJlRXZlbnRzQnlBY2NvdW50cyIsInVuU3Vic2NyaWJlRXZlbnRzQnlUeXBlIiwicXVlcnlTdWJzY3JpYmVFdmVudHNCeUFjY291bnRzIiwicXVlcnlTdWJzY3JpYmVFdmVudHNCeVR5cGUiLCJwdXNoRXZlbnRzIiwiZ2VvIiwibm90aWZpY2F0aW9uIiwidGlwIiwidHlwZVJldmVyc2VNYXAiLCJ0byIsImZyb21EZXZpY2VJZCIsImZsb3ciLCJsb2NhbFN0b3JhZ2UiLCJ3eFN0b3JhZ2UiLCJzZW5kVGV4dCIsIlRleHRNZXNzYWdlIiwicHJldmlld0ZpbGUiLCJkYXRhVVJMIiwiZmlsZUlucHV0IiwiZmlsZUlucHV0TmFtZSIsImdlblJlc3BvbnNlQm9keSIsInJlc3BvbnNlQm9keSIsIm5vc1Rva2VuIiwiX2RvUHJldmlld0ZpbGUiLCJ1cGxvYWRkb25lIiwiZXhpZk9yaWVudGF0aW9uIiwiYnVja2V0IiwibWQ1IiwiZXh0Iiwid3hGaWxlUGF0aCIsImFzc2VtYmxlVXBsb2FkUGFyYW1zIiwic2VuZEZpbGUiLCJfcHJldmlld0FuZFNlbmRGaWxlIiwiRmlsZU1lc3NhZ2UiLCJiZWZvcmVzZW5kIiwib2JqZWN0TmFtZSIsInRva2VuIiwic2VuZEdlbyIsIkdlb01lc3NhZ2UiLCJzZW5kVGlwTXNnIiwiVGlwTWVzc2FnZSIsInNlbmRDdXN0b21Nc2ciLCJDdXN0b21NZXNzYWdlIiwiaXNMb2NhbCIsImJlZm9yZVNlbmRNc2ciLCJydG5Nc2ciLCJmb3JtYXRSZXR1cm5Nc2ciLCJzdG9yZVNlbmRNc2ciLCJ1cGRhdGVTZW5kTXNnRXJyb3IiLCJhZnRlclNlbmRNc2ciLCJjb21wbGV0ZU1zZyIsInJlc2VuZE1zZyIsInRyaW1Nc2dGbGFnIiwiX3NlbmRNc2dCeVR5cGUiLCJmb3J3YXJkTXNnIiwiYmVmb3JlRm9yd2FyZE1zZyIsImZvcndhcmQiLCJtZ3MiLCJudW0iLCJwYWNrRmlsZURvd25sb2FkTmFtZSIsImF1ZGlvVG9NcDMiLCJzdHJpcEltYWdlTWV0YSIsImJlZm9yZVByb2Nlc3NJbWFnZSIsInF1YWxpdHlJbWFnZSIsImludGVybGFjZUltYWdlIiwicm90YXRlSW1hZ2UiLCJibHVySW1hZ2UiLCJjcm9wSW1hZ2UiLCJ0aHVtYm5haWxJbWFnZSIsIm9wcyIsImltYWdlT3BzIiwiZ2VuU3RyaXBtZXRhT3AiLCJzdHJpcCIsImdlblF1YWxpdHlPcCIsInJvdW5kIiwicXVhbGl0eVF1YWxpdHkiLCJnZW5JbnRlcmxhY2VPcCIsImdlblJvdGF0ZU9wIiwiYW5nbGUiLCJyb3RhdGVBbmdsZSIsImdlbkJsdXJPcCIsInJhZGl1cyIsInNpZ21hIiwiYmx1clJhZGl1cyIsImJsdXJTaWdtYSIsImdlbkNyb3BPcCIsImNyb3BYIiwiY3JvcFkiLCJjcm9wV2lkdGgiLCJjcm9wSGVpZ2h0IiwiZ2VuVGh1bWJuYWlsT3AiLCJjb3ZlciIsImNvbnRhaW4iLCJ0aHVtYm5haWxNb2RlIiwidGh1bWJuYWlsV2lkdGgiLCJ0aHVtYm5haWxIZWlnaHQiLCJheGlzIiwidGh1bWJuYWlsQXhpc1giLCJ0aHVtYm5haWxBeGlzWSIsImVubGFyZ2UiLCJ0aHVtYm5haWxFbmxhcmdlIiwidmlld0ltYWdlU3luYyIsInZpZXdJbWFnZVN0cmlwTWV0YSIsInZpZXdJbWFnZVF1YWxpdHkiLCJ2aWV3SW1hZ2VJbnRlcmxhY2UiLCJ2aWV3SW1hZ2VSb3RhdGUiLCJ2aWV3SW1hZ2VCbHVyIiwidmlld0ltYWdlQ3JvcCIsInZpZXdJbWFnZVRodW1ibmFpbCIsImFubm91bmNlbWVudCIsImJyb2FkY2FzdFVybCIsImNyZWF0ZVRpbWUiLCJvbmxpbmVNZW1iZXJOdW0iLCJtdXRlIiwiYXNzZW1ibGVMb2dpbiIsIm9uTG9naW4iLCJhdXRvY29ubmVjdCIsImdlblNlc3Npb25LZXkiLCJhc3NlbWJsZUlNTG9naW4iLCJhcHBMb2dpbiIsImFwcEtleSIsInNlc3Npb24iLCJsb2dpblJlc3VsdCIsIm9uQXV0aEVycm9yIiwic3RhcnRIZWFydGJlYXQiLCJhZnRlckxvZ2luIiwibm90aWZ5TG9naW4iLCJvbmNvbm5lY3QiLCJraWNrZWRSZWFzb25zIiwia2lja2VkTWVzc2FnZXMiLCJzaG91bGROb3RpZnlLaWNrZWQiLCJzaG91bGRSZWNvbm5lY3QiLCJoYXNOb3RpZnlEaXNjb25uZWN0ZWQiLCJkaXNjb25uZWN0U29ja2V0Iiwibm90aWZ5RGlzY29ubmVjdCIsInJldHJ5Q291bnQiLCJuZWVkUmVjb25uZWN0IiwiYmFja29mZiIsIm1pbiIsImppdHRlciIsImdldE5leHRTb2NrZXRVcmwiLCJjb25uZWN0VG9VcmwiLCJyZWZyZXNoU29ja2V0VXJsIiwib25IYW5kc2hha2VGYWlsZWQiLCJvbkNvbm5lY3RGYWlsZWQiLCJzdG9wSGVhcnRiZWF0Iiwid2lsbFJlY29ubmVjdCIsIm9ud2lsbHJlY29ubmVjdCIsIm5vdGlmeUNvbm5lY3RFcnJvciIsIm9uZGlzY29ubmVjdCIsInByb2Nlc3NMaW5rIiwiaGVhcnRiZWF0VGltZXIiLCJwcm9jZXNzTWlzYyIsIm5vc1Rva2VucyIsImdldENoYXRyb29tTWVtYmVycyIsIm1hcmtDaGF0cm9vbU1lbWJlciIsInVwZGF0ZU15Q2hhdHJvb21NZW1iZXJJbmZvIiwiZ2V0Q2hhdHJvb21NZW1iZXJzSW5mbyIsImtpY2tDaGF0cm9vbU1lbWJlciIsInVwZGF0ZUNoYXRyb29tTWVtYmVyVGVtcE11dGUiLCJxdWV1ZU9mZmVyIiwicXVldWVQb2xsIiwicXVldWVMaXN0IiwicXVldWVEcm9wIiwicXVldWVJbml0IiwiaW1Mb2dpbiIsImV4cGlyZVRpbWUiLCJpbWFnZU9wIiwidHlwZVR5cGUiLCJwaXhlbFBpeGVsIiwidGh1bWJuYWlsQ2VudGVyWCIsInRodW1ibmFpbENlbnRlclkiLCJ0aHVtYm5haWxUb1N0YXRpYyIsIndhdGVybWFya1R5cGUiLCJ3YXRlcm1hcmtHcmF2aXR5Iiwid2F0ZXJtYXJrRGlzc29sdmUiLCJ3YXRlcm1hcmtEeCIsIndhdGVybWFya0R5Iiwid2F0ZXJtYXJrSW1hZ2UiLCJ3YXRlcm1hcmtUZXh0Iiwid2F0ZXJtYXJrRm9udCIsIndhdGVybWFya0ZvbnRTaXplIiwid2F0ZXJtYXJrRm9udENvbG9yIiwiY2hhdHJvb21OaWNrIiwiY2hhdHJvb21BdmF0YXIiLCJjaGF0cm9vbUN1c3RvbSIsImNoYXRyb29tRW50ZXJDdXN0b20iLCJjcmVhdG9yIiwiZnJvbU5pY2siLCJmcm9tQXZhdGFyIiwiZnJvbUN1c3RvbSIsImxvZ2luUmVzIiwibGFzdExvZ2luRGV2aWNlSWQiLCJjb25uZWN0aW9uSWQiLCJpcCIsImNvdW50cnkiLCJsb2dpblBvcnQiLCJteUluZm8iLCJvZmZsaW5lTXNncyIsInRlYW1zIiwicm9hbWluZ01zZ3MiLCJyZWxhdGlvbnMiLCJmcmllbmRzIiwic2Vzc2lvbnMiLCJmcmllbmRVc2VycyIsIm1zZ1JlY2VpcHRzIiwibXlUZWFtTWVtYmVycyIsImRvbm5vcCIsInNlc3Npb25BY2siLCJmaWx0ZXJNc2dzIiwib3duZXIiLCJzZWxmQ3VzdG9tIiwibWVtYmVyTnVtIiwibWVtYmVyVXBkYXRlVGltZSIsInZhbGlkVG9DdXJyZW50VXNlciIsImludHJvIiwiam9pbk1vZGUiLCJiaXRzIiwic2VydmVyQ3VzdG9tIiwiYmVJbnZpdGVNb2RlIiwiaW52aXRlTW9kZSIsInVwZGF0ZVRlYW1Nb2RlIiwidXBkYXRlQ3VzdG9tTW9kZSIsInRlYW1NZW1iZXIiLCJuaWNrSW5UZWFtIiwiYWN0aXZlIiwiam9pblRpbWUiLCJzY2VuZSIsInB1c2hQYXlsb2FkIiwicHVzaENvbnRlbnQiLCJhcG5zQWNjb3VudHMiLCJhcG5zQ29udGVudCIsImFwbnNGb3JjZVB1c2giLCJpc0hpc3RvcnlhYmxlIiwiaXNSb2FtaW5nYWJsZSIsImlzU3luY2FibGUiLCJpc011dGVkIiwiY2MiLCJpc1B1c2hhYmxlIiwiaXNPZmZsaW5hYmxlIiwiaXNVbnJlYWRhYmxlIiwibmVlZFB1c2hOaWNrIiwic2VuZFRvT25saW5lVXNlcnNPbmx5IiwiYXBuc1RleHQiLCJkZWxldGVkSWRTZXJ2ZXIiLCJkZWxldGVkTXNnVGltZSIsImRlbGV0ZWRNc2dGcm9tTmljayIsImZsYWciLCJiZWZsYWciLCJhbGlhcyIsInNpZ24iLCJnZW5kZXIiLCJlbWFpbCIsImJpcnRoIiwidGVsIiwic3BlY2lhbFJlbGF0aW9uIiwiaXNCbGFja2VkIiwibXNnRXZlbnQiLCJ2YWxpZFRpbWUiLCJicm9hZGNhc3RUeXBlIiwidmFsaWRUaW1lVHlwZSIsImR1cmFibGUiLCJjbGllbnRUeXBlIiwic2VydmVyQ29uZmlnIiwiYXBwaWQiLCJlbmFibGVNdWx0aUNsaWVudCIsImNvbnNpZCIsIm1zZ0V2ZW50U3Vic2NyaWJlIiwic3Vic2NyaWJlVGltZSIsImZvcm1hdEFyZ3MiLCJfbG9nIiwiY2hyb21lIiwic2l6ZSIsIm9yaWVudGF0aW9uIiwiZHVyIiwiZmlsbFByb3BlcnR5V2l0aERlZmF1bHQiLCJmaWxlTmFtZSIsImJlZ2ludXBsb2FkIiwicGVyY2VudGFnZSIsInBlcmNlbnRhZ2VUZXh0IiwidXBsb2FkcHJvZ3Jlc3MiLCJzbiIsIkNvZGUiLCJtcyIsImZhY3RvciIsImF0dGVtcHRzIiwic2V0TWluIiwic2V0TWF4Iiwic2V0Sml0dGVyIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidGltZVN0YW1wIiwiZXZlbnRQaGFzZSIsIkJvb2xlYW4iLCJpc1RydXN0ZWQiLCJkZXRhaWwiLCJjb250ZXh0IiwiX2V2ZW50c0NvdW50IiwiZXZlbnROYW1lcyIsInNldE1heExpc3RlbmVycyIsInByZWZpeGVkIiwicnVuIiwiZnVuIiwiYXJyYXkiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsInJpZ2h0IiwidXNlWERSIiwicmF3UmVxdWVzdCIsImFjY2VwdCIsIkFjY2VwdCIsIm9udGltZW91dCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJyZXNwb25zZVR5cGUiLCJiZWZvcmVTZW5kIiwicmVzcG9uc2VYTUwiLCJuZWVkU2F2ZSIsIm9ubHlPbmxpbmUiLCJhY2NvdW50cyIsIm1hcmtDaGF0cm9vbU1hbmFnZXIiLCJtYXJrQ2hhdHJvb21Db21tb25NZW1iZXIiLCJtYXJrQ2hhdHJvb21CbGFja2xpc3QiLCJtYXJrQ2hhdHJvb21HYWdsaXN0IiwiaXNBZGQiLCJlbGVtZW50S2V5IiwibG5nIiwibGF0IiwiTm90aWZpY2F0aW9uTWVzc2FnZSIsInJldmVyc2VNc2dzIiwibW9kaWZ5T2JqIiwibWFwcGVyIiwib3BlcmF0b3IiLCJvcGVOaWNrIiwidGFyTmljayIsInRvTmljayIsIm11dGVEdXJhdGlvbiIsIm11dGVkIiwibXV0ZVR0bCIsIm1lbWJlcnMiLCJjaGVja01zZ1VuaXF1ZSIsIm1zZ0ZsdXNoVGltZXIiLCJzdGFydE1zZ0ZsdXNoVGltZXIiLCJvbm1zZ3MiLCJtc2dzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxxQkFBaUJDLE9BQWpCLHVEQUFpQkEsT0FBakIsTUFBMEIsb0JBQWlCQyxNQUFqQix1REFBaUJBLE1BQWpCLEVBQTFCLEdBQWtEQSxPQUFPRCxPQUFQLEdBQWVELEdBQWpFLEdBQXFFLGNBQVksT0FBT0csTUFBbkIsSUFBMkJBLE9BQU9DLEdBQWxDLEdBQXNDRCxPQUFPLEVBQVAsRUFBVUgsQ0FBVixDQUF0QyxHQUFtRCxvQkFBaUJDLE9BQWpCLHVEQUFpQkEsT0FBakIsS0FBeUJBLFFBQVFJLFFBQVIsR0FBaUJMLEdBQTFDLEdBQThDRCxFQUFFTSxRQUFGLEdBQVdMLEdBQWpMO0FBQXFMLENBQW5NLFlBQXlNLFlBQVU7QUFBQyxRQUFPLFVBQVNELENBQVQsRUFBVztBQUFDLFdBQVNDLENBQVQsQ0FBV00sQ0FBWCxFQUFhO0FBQUMsT0FBR0MsRUFBRUQsQ0FBRixDQUFILEVBQVEsT0FBT0MsRUFBRUQsQ0FBRixFQUFLTCxPQUFaLENBQW9CLElBQUlPLElBQUVELEVBQUVELENBQUYsSUFBSyxFQUFDTCxTQUFRLEVBQVQsRUFBWVEsSUFBR0gsQ0FBZixFQUFpQkksUUFBTyxDQUFDLENBQXpCLEVBQVgsQ0FBdUMsT0FBT1gsRUFBRU8sQ0FBRixFQUFLSyxJQUFMLENBQVVILEVBQUVQLE9BQVosRUFBb0JPLENBQXBCLEVBQXNCQSxFQUFFUCxPQUF4QixFQUFnQ0QsQ0FBaEMsR0FBbUNRLEVBQUVFLE1BQUYsR0FBUyxDQUFDLENBQTdDLEVBQStDRixFQUFFUCxPQUF4RDtBQUFnRSxPQUFJTSxJQUFFLEVBQU4sQ0FBUyxPQUFPUCxFQUFFWSxDQUFGLEdBQUliLENBQUosRUFBTUMsRUFB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bGUiOiJOSU1fV2ViX0NoYXRyb29tX3YzLjguMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuQ2hhdHJvb209dCgpOmUuQ2hhdHJvb209dCgpfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQocil7aWYobltyXSlyZXR1cm4gbltyXS5leHBvcnRzO3ZhciBvPW5bcl09e2V4cG9ydHM6e30saWQ6cixsb2FkZWQ6ITF9O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubG9hZGVkPSEwLG8uZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5wPVwiXCIsdCgwKX0oW2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtuKDU2KSxlLmV4cG9ydHM9bigxMTQpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sbz1uKDExKSxpPW4oMTcpLGE9bigzOSkscz1uKDI1KTtuKDY4KTt2YXIgYz1uKDMpLHU9big0MSksbD11LmdldEdsb2JhbCgpLHA9L1xccysvO3Uuc2hvdWxkRGlzcGxheUluc3RhbGxGbGFzaEhpbnQ9ZnVuY3Rpb24oKXt2YXIgZT1vLm5hbWUudG9Mb3dlckNhc2UoKTtpZihcImllXCI9PT1lKXt2YXIgdD0rby52ZXJzaW9ufHwwO3JldHVybiB0PU1hdGguZmxvb3IodCksNz09PXQmJiFpLlRyYW5zcG9ydC5mbGFzaHNvY2tldC5jaGVjaygpfXJldHVybiExfSx1LmRlZHVwbGljYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSl7dC5pbmRleE9mKGUpPT09LTEmJnQucHVzaChlKX0pLHR9LHUuY2FwRmlyc3RMZXR0ZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/KGU9XCJcIitlLGUuc2xpY2UoMCwxKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpOlwiXCJ9LHUuZ3VpZD1mdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKCl7cmV0dXJuKDY1NTM2KigxK01hdGgucmFuZG9tKCkpfDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSl9O3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKCkrZSgpK2UoKStlKCkrZSgpK2UoKStlKCkrZSgpfX0oKSx1LmV4dGVuZD1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciByIGluIHQpXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGVbcl0mJm4hPT0hMHx8KGVbcl09dFtyXSl9LHUuZmlsdGVyT2JqPWZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuIHUuaXNTdHJpbmcodCkmJih0PXQuc3BsaXQocCkpLHQuZm9yRWFjaChmdW5jdGlvbih0KXtlLmhhc093blByb3BlcnR5KHQpJiYoblt0XT1lW3RdKX0pLG59LHUuc2ltcGxlQ2xvbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpfSx1LmNvcHk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHx7fSxlPyhPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3UuZXhpc3QoZVtuXSkmJih0W25dPWVbbl0pfSksdCk6dH0sdS5jb3B5V2l0aE51bGw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHx7fSxlPyhPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4peyh1LmV4aXN0KGVbbl0pfHx1LmlzbnVsbChlW25dKSkmJih0W25dPWVbbl0pfSksdCk6dH0sdS5maW5kT2JqSW5kZXhJbkFycmF5PWZ1bmN0aW9uKGUsdCl7ZT1lfHxbXTt2YXIgbj10LmtleVBhdGh8fFwiaWRcIixyPS0xO3JldHVybiBlLnNvbWUoZnVuY3Rpb24oZSxvKXtpZihzKGUsbik9PT10LnZhbHVlKXJldHVybiByPW8sITB9KSxyfSx1LmZpbmRPYmpJbkFycmF5PWZ1bmN0aW9uKGUsdCl7dmFyIG49dS5maW5kT2JqSW5kZXhJbkFycmF5KGUsdCk7cmV0dXJuIG49PT0tMT9udWxsOmVbbl19LHUubWVyZ2VPYmpBcnJheT1mdW5jdGlvbigpe3ZhciBlPVtdLHQ9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMCwtMSksbj1hcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTt1LmlzQXJyYXkobikmJih0LnB1c2gobiksbj17fSk7dmFyIHI9bi5rZXlQYXRoPW4ua2V5UGF0aHx8XCJpZFwiO2ZvcihuLnNvcnRQYXRoPW4uc29ydFBhdGh8fHI7IWUubGVuZ3RoJiZ0Lmxlbmd0aDspZT10LnNoaWZ0KCl8fFtdLGU9ZS5zbGljZSgwKTt2YXIgbztyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QmJnQuZm9yRWFjaChmdW5jdGlvbih0KXtvPXUuZmluZE9iakluZGV4SW5BcnJheShlLHtrZXlQYXRoOnIsdmFsdWU6cyh0LHIpfSksbyE9PS0xP2Vbb109dS5tZXJnZSh7fSxlW29dLHQpOmUucHVzaCh0KX0pfSksbi5ub3RTb3J0fHwoZT11LnNvcnRPYmpBcnJheShlLG4pKSxlfSx1LmN1dE9iakFycmF5PWZ1bmN0aW9uKGUpe3ZhciB0PWUuc2xpY2UoMCksbj1hcmd1bWVudHMubGVuZ3RoLHI9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSxuLTEpLG89YXJndW1lbnRzW24tMV07dS5pc09iamVjdChvKXx8KHIucHVzaChvKSxvPXt9KTt2YXIgaSxhPW8ua2V5UGF0aD1vLmtleVBhdGh8fFwiaWRcIjtyZXR1cm4gci5mb3JFYWNoKGZ1bmN0aW9uKGUpe3UuaXNBcnJheShlKXx8KGU9W2VdKSxlLmZvckVhY2goZnVuY3Rpb24oZSl7ZSYmKG8udmFsdWU9cyhlLGEpLGk9dS5maW5kT2JqSW5kZXhJbkFycmF5KHQsbyksaSE9PS0xJiZ0LnNwbGljZShpLDEpKX0pfSksdH0sdS5zb3J0T2JqQXJyYXk9ZnVuY3Rpb24oZSx0KXt0PXR8fHt9O3ZhciBuPXQuc29ydFBhdGh8fFwiaWRcIjthLmluc2Vuc2l0aXZlPSEhdC5pbnNlbnNpdGl2ZTt2YXIgcixvLGksYz0hIXQuZGVzYztyZXR1cm4gaT11LmlzRnVuY3Rpb24odC5jb21wYXJlKT90LmNvbXBhcmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcj1zKGUsbiksbz1zKHQsbiksYz9hKG8scik6YShyLG8pfSxlLnNvcnQoaSl9LHUuZW1wdHlGdW5jPWZ1bmN0aW9uKCl7fSx1LmlzRW1wdHlGdW5jPWZ1bmN0aW9uKGUpe3JldHVybiBlPT09dS5lbXB0eUZ1bmN9LHUubm90RW1wdHlGdW5jPWZ1bmN0aW9uKGUpe3JldHVybiBlIT09dS5lbXB0eUZ1bmN9LHUuc3BsaWNlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5bXS5zcGxpY2UuY2FsbChlLHQsbil9LHUucmVzaGFwZTJkPWZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSl7dS52ZXJpZnlQYXJhbVR5cGUoXCJ0eXBlXCIsdCxcIm51bWJlclwiKTt2YXIgbj1lLmxlbmd0aDtpZihuPD10KXJldHVybltlXTtmb3IodmFyIHI9TWF0aC5jZWlsKG4vdCksbz1bXSxpPTA7aTxyO2krKylvLnB1c2goZS5zbGljZShpKnQsKGkrMSkqdCkpO3JldHVybiBvfXJldHVybiBlfSx1LmZsYXR0ZW4yZD1mdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgdD1mdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSl7dD10LmNvbmNhdChlKX0pLHt2OnR9fSgpO2lmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpyKHQpKSlyZXR1cm4gdC52fXJldHVybiBlfSx1LmRyb3BBcnJheUR1cGxpY2F0ZXM9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciB0PXt9LG49W107ZS5sZW5ndGg+MDspe3ZhciByPWUuc2hpZnQoKTt0W3JdPSEwfWZvcih2YXIgbyBpbiB0KXRbb109PT0hMCYmbi5wdXNoKG8pO3JldHVybiBufXJldHVybiBlfSx1Lm9uRXJyb3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IGMoZSl9LHUudmVyaWZ5UGFyYW1QcmVzZW50PWZ1bmN0aW9uKGUsdCxuKXtuPW58fFwiXCI7dmFyIHI9ITE7c3dpdGNoKHUudHlwZU9mKHQpKXtjYXNlXCJ1bmRlZmluZWRcIjpjYXNlXCJudWxsXCI6cj0hMDticmVhaztjYXNlXCJzdHJpbmdcIjpcIlwiPT09dCYmKHI9ITApO2JyZWFrO2Nhc2VcIm9iamVjdFwiOk9iamVjdC5rZXlzKHQpLmxlbmd0aHx8KHI9ITApO2JyZWFrO2Nhc2VcImFycmF5XCI6dC5sZW5ndGg/dC5zb21lKGZ1bmN0aW9uKGUpe2lmKHUubm90ZXhpc3QoZSkpcmV0dXJuIHI9ITAsITB9KTpyPSEwfXImJnUub25QYXJhbUFic2VudChuK2UpfSx1Lm9uUGFyYW1BYnNlbnQ9ZnVuY3Rpb24oZSl7dS5vblBhcmFtRXJyb3IoJ+e8uuWwkeWPguaVsFwiJytlKydcIiwg6K+356Gu5L+d5Y+C5pWw5LiN5pivIOepuuWtl+espuS4suOAgeepuuWvueixoeOAgeepuuaVsOe7hOOAgW51bGzmiJZ1bmRlZmluZWQsIOaIluiAheaVsOe7hOeahOWGheWuueS4jeaYryBudWxsL3VuZGVmaW5lZCcpfSx1LnZlcmlmeVBhcmFtQWJzZW50PWZ1bmN0aW9uKGUsdCxuKXtuPW58fFwiXCIsdm9pZCAwIT09dCYmdS5vblBhcmFtUHJlc2VudChuK2UpfSx1Lm9uUGFyYW1QcmVzZW50PWZ1bmN0aW9uKGUpe3Uub25QYXJhbUVycm9yKCflpJrkvZnnmoTlj4LmlbBcIicrZSsnXCInKX0sdS52ZXJpZnlQYXJhbVR5cGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXUudHlwZU9mKHQpLnRvTG93ZXJDYXNlKCk7dS5pc0FycmF5KG4pfHwobj1bbl0pLG49bi5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9Mb3dlckNhc2UoKX0pO3ZhciBvPSEwO3N3aXRjaChuLmluZGV4T2Yocik9PT0tMSYmKG89ITEpLHIpe2Nhc2VcIm51bWJlclwiOmlzTmFOKHQpJiYobz0hMSl9b3x8dS5vblBhcmFtSW52YWxpZFR5cGUoZSxuKX0sdS5vblBhcmFtSW52YWxpZFR5cGU9ZnVuY3Rpb24oZSx0LG4pe249bnx8XCJcIix1LmlzQXJyYXkodCk/KHQ9dC5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuJ1wiJytlKydcIid9KSx0PXQuam9pbihcIiwgXCIpKTp0PSdcIicrdCsnXCInLHUub25QYXJhbUVycm9yKCflj4LmlbBcIicrbitlKydcIuexu+Wei+mUmeivrywg5ZCI5rOV55qE57G75Z6L5YyF5ousOiBbJyt0K1wiXVwiKX0sdS52ZXJpZnlQYXJhbVZhbGlkPWZ1bmN0aW9uKGUsdCxuKXt1LmlzQXJyYXkobil8fChuPVtuXSksbi5pbmRleE9mKHQpPT09LTEmJnUub25QYXJhbUludmFsaWRWYWx1ZShlLG4pfSx1Lm9uUGFyYW1JbnZhbGlkVmFsdWU9ZnVuY3Rpb24oZSx0KXt1LmlzQXJyYXkodCl8fCh0PVt0XSksdD10Lm1hcChmdW5jdGlvbihlKXtyZXR1cm4nXCInK2UrJ1wiJ30pLHUuaXNBcnJheSh0KSYmKHQ9dC5qb2luKFwiLCBcIikpLHUub25QYXJhbUVycm9yKCflj4LmlbBcIicrZSsnXCLlgLzplJnor68sIOWQiOazleeahOWAvOWMheaLrDogWycrdCtcIl1cIil9LHUudmVyaWZ5UGFyYW1NaW49ZnVuY3Rpb24oZSx0LG4pe3Q8biYmdS5vblBhcmFtRXJyb3IoXCLlj4LmlbBcIitlK1wi55qE5YC85LiN6IO95bCP5LqOXCIrbil9LHUudmVyaWZ5UGFyYW1NYXg9ZnVuY3Rpb24oZSx0LG4pe3Q+biYmdS5vblBhcmFtRXJyb3IoXCLlj4LmlbBcIitlK1wi55qE5YC85LiN6IO95aSn5LqOXCIrbil9LHUudmVyaWZ5QXJyYXlNYXg9ZnVuY3Rpb24oZSx0LG4pe3QubGVuZ3RoPm4mJnUub25QYXJhbUVycm9yKFwi5Y+C5pWwXCIrZStcIueahOmVv+W6puS4jeiDveWkp+S6jlwiK24pfSx1LnZlcmlmeUVtYWlsPWZ1bmN0aW9uKCl7dmFyIGU9L15cXFMrQFxcUyskLztyZXR1cm4gZnVuY3Rpb24odCxuKXtlLnRlc3Qobil8fHUub25QYXJhbUVycm9yKFwi5Y+C5pWwXCIrdCtcIumCrueuseagvOW8j+mUmeivrywg5ZCI5rOV5qC85byP5b+F6aG75YyF5ZCrQOespuWPtywgQOespuWPt+WJjeWQjuiHs+WwkeimgeWQhOacieS4gOS4quWtl+esplwiKX19KCksdS52ZXJpZnlUZWw9ZnVuY3Rpb24oKXt2YXIgZT0vXlsrXFwtKClcXGRdKyQvO3JldHVybiBmdW5jdGlvbih0LG4pe2UudGVzdChuKXx8dS5vblBhcmFtRXJyb3IoXCLlj4LmlbBcIit0K1wi55S16K+d5Y+356CB5qC85byP6ZSZ6K+vLCDlkIjms5XlrZfnrKbljIXmi6wr44CBLeOAgeiLseaWh+aLrOWPt+WSjOaVsOWtl1wiKX19KCksdS52ZXJpZnlCaXJ0aD1mdW5jdGlvbigpe3ZhciBlPS9eKFxcZHs0fSktKDBbMS05XXwxWzAxMl0pLSgwWzEtOV18WzEyXVswLTldfDNbMDFdKSQvO3JldHVybiBmdW5jdGlvbih0LG4pe2UudGVzdChuKXx8dS5vblBhcmFtRXJyb3IoXCLlj4LmlbBcIit0KyfnlJ/ml6XmoLzlvI/plJnor68sIOWQiOazleS4ulwieXl5eS1NTS1kZFwiJyl9fSgpLHUub25QYXJhbUVycm9yPWZ1bmN0aW9uKGUpe3Uub25FcnJvcihlKX0sdS52ZXJpZnlPcHRpb25zPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKGU9ZXx8e30sdCYmKHUuaXNTdHJpbmcodCkmJih0PXQuc3BsaXQocCkpLHUuaXNBcnJheSh0KSkpe249dm9pZCAwPT09bnx8ISFuO3ZhciBvPW4/dS52ZXJpZnlQYXJhbVByZXNlbnQ6dS52ZXJpZnlQYXJhbUFic2VudDt0LmZvckVhY2goZnVuY3Rpb24odCl7by5jYWxsKHUsdCxlW3RdLHIpfSl9cmV0dXJuIGV9LHUudmVyaWZ5UGFyYW1BdExlYXN0UHJlc2VudE9uZT1mdW5jdGlvbihlLHQpe2lmKHQmJih1LmlzU3RyaW5nKHQpJiYodD10LnNwbGl0KHApKSx1LmlzQXJyYXkodCkpKXt2YXIgbj10LnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIHUuZXhpc3QoZVt0XSl9KTtufHx1Lm9uUGFyYW1FcnJvcihcIuS7peS4i+WPguaVsFtcIit0LmpvaW4oXCIsIFwiKStcIl3oh7PlsJHpnIDopoHkvKDlhaXkuIDkuKpcIil9fSx1LnZlcmlmeVBhcmFtUHJlc2VudEp1c3RPbmU9ZnVuY3Rpb24oZSx0KXtpZih0JiYodS5pc1N0cmluZyh0KSYmKHQ9dC5zcGxpdChwKSksdS5pc0FycmF5KHQpKSl7dmFyIG49dC5yZWR1Y2UoZnVuY3Rpb24odCxuKXtyZXR1cm4gdS5leGlzdChlW25dKSYmdCsrLHR9LDApOzEhPT1uJiZ1Lm9uUGFyYW1FcnJvcihcIuS7peS4i+WPguaVsFtcIit0LmpvaW4oXCIsIFwiKStcIl3lv4XpobvkuJTlj6rog73kvKDlhaXkuIDkuKpcIil9fSx1LnZlcmlmeUJvb2xlYW5XaXRoRGVmYXVsdD1mdW5jdGlvbihlLHQsbixyKXt1LnVuZGVmKG4pJiYobj0hMCkscC50ZXN0KHQpJiYodD10LnNwbGl0KHApKSx1LmlzQXJyYXkodCk/dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3UudmVyaWZ5Qm9vbGVhbldpdGhEZWZhdWx0KGUsdCxuLHIpfSk6XCJ1bmRlZmluZWRcIj09dHlwZW9mIGVbdF0/ZVt0XT1uOnUuaXNCb29sZWFuKGVbdF0pfHx1Lm9uUGFyYW1JbnZhbGlkVHlwZSh0LFwiYm9vbGVhblwiLHIpfSx1LnZlcmlmeUZpbGVJbnB1dD1mdW5jdGlvbihlKXtyZXR1cm4gdS52ZXJpZnlQYXJhbVByZXNlbnQoXCJmaWxlSW5wdXRcIixlKSx1LmlzU3RyaW5nKGUpJiYoZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKSxlfHx1Lm9uUGFyYW1FcnJvcihcIuaJvuS4jeWIsOimgeS4iuS8oOeahOaWh+S7tuWvueW6lOeahGlucHV0LCDor7fmo4Dmn6VmaWxlSW5wdXQgaWRcIikpLGUudGFnTmFtZSYmXCJpbnB1dFwiPT09ZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJlwiZmlsZVwiPT09ZS50eXBlLnRvTG93ZXJDYXNlKCl8fHUub25QYXJhbUVycm9yKFwi6K+35o+Q5L6b5q2j56Gu55qEIGZpbGVJbnB1dCwg5b+F6aG75Li6IGZpbGUg57G75Z6L55qEIGlucHV0IOiKgueCuVwiKSxlfSx1LnZlcmlmeUZpbGVUeXBlPWZ1bmN0aW9uKGUpe3UudmVyaWZ5UGFyYW1WYWxpZChcInR5cGVcIixlLHUudmFsaWRGaWxlVHlwZXMpfSx1LnZlcmlmeUNhbGxiYWNrPWZ1bmN0aW9uKGUsdCl7cC50ZXN0KHQpJiYodD10LnNwbGl0KHApKSx1LmlzQXJyYXkodCk/dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3UudmVyaWZ5Q2FsbGJhY2soZSx0KX0pOmVbdF0/dS5pc0Z1bmN0aW9uKGVbdF0pfHx1Lm9uUGFyYW1JbnZhbGlkVHlwZSh0LFwiZnVuY3Rpb25cIik6ZVt0XT11LmVtcHR5RnVuY30sdS52ZXJpZnlGaWxlVXBsb2FkQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7dS52ZXJpZnlDYWxsYmFjayhlLFwidXBsb2FkcHJvZ3Jlc3MgdXBsb2FkZG9uZSB1cGxvYWRlcnJvciB1cGxvYWRjYW5jZWxcIil9LHUudmFsaWRGaWxlVHlwZXM9W1wiaW1hZ2VcIixcImF1ZGlvXCIsXCJ2aWRlb1wiLFwiZmlsZVwiXSx1LnZhbGlkRmlsZUV4dHM9e2ltYWdlOltcImJtcFwiLFwiZ2lmXCIsXCJqcGdcIixcImpwZWdcIixcImpuZ1wiLFwicG5nXCIsXCJ3ZWJwXCJdLGF1ZGlvOltcIm1wM1wiLFwid2F2XCIsXCJhYWNcIixcIndtYVwiLFwid212XCIsXCJhbXJcIixcIm1wMlwiLFwiZmxhY1wiLFwidm9yYmlzXCIsXCJhYzNcIl0sdmlkZW86W1wibXA0XCIsXCJybVwiLFwicm12YlwiLFwid212XCIsXCJhdmlcIixcIm1wZ1wiLFwibXBlZ1wiXX0sdS5maWx0ZXJGaWxlcz1mdW5jdGlvbihlLHQpe3Q9dC50b0xvd2VyQ2FzZSgpO3ZhciBuLHIsbyxpPVwiZmlsZVwiPT09dCxhPVtdO3JldHVybltdLmZvckVhY2guY2FsbChlLGZ1bmN0aW9uKGUpe2lmKGkpYS5wdXNoKGUpO2Vsc2UgaWYobj1lLm5hbWUuc2xpY2UoZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKSsxKSxyPWUudHlwZS5zcGxpdChcIi9cIiksclswXSYmclsxXSl7bz1yWzBdLnRvTG93ZXJDYXNlKCk7dmFyIHM9ITE7cz1vPT09dHx8dS52YWxpZEZpbGVFeHRzW3RdLmluZGV4T2YobikhPT0tMSxzJiZhLnB1c2goZSl9fSksYX07dmFyIGY9dS5zdXBwb3J0Rm9ybURhdGE9dS5ub3R1bmRlZihsLkZvcm1EYXRhKTt1LmdldEZpbGVOYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlPXUudmVyaWZ5RmlsZUlucHV0KGUpLGY/ZS5maWxlc1swXS5uYW1lOmUudmFsdWUuc2xpY2UoZS52YWx1ZS5sYXN0SW5kZXhPZihcIlxcXFxcIikrMSl9fSgpLHUuc2l6ZVRleHQ9ZnVuY3Rpb24oKXt2YXIgZT1bXCJCXCIsXCJLQlwiLFwiTUJcIixcIkdCXCIsXCJUQlwiLFwiUEJcIixcIkVCXCIsXCJaQlwiLFwiQkJcIl07cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBuLHI9MDtkb3t0PU1hdGguZmxvb3IoMTAwKnQpLzEwMDt2YXIgbz1lW3JdO249dCtvLHQvPTEwMjQscisrfXdoaWxlKHQ+MSk7cmV0dXJuIG59fSgpLHUucHJvbWlzZXMyY21kcz1mdW5jdGlvbihlKXtyZXR1cm4gZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY21kfSl9LHUub2JqczJhY2NvdW50cz1mdW5jdGlvbihlKXtyZXR1cm4gZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuYWNjb3VudH0pfSx1LnRlYW1zMmlkcz1mdW5jdGlvbihlKXtyZXR1cm4gZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUudGVhbUlkfSl9LHUub2JqczJpZHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkfSl9LHUuZ2V0TWF4VXBkYXRlVGltZT1mdW5jdGlvbihlKXt2YXIgdD1lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4rZS51cGRhdGVUaW1lfSk7cmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsdCl9LHUuZ2VuQ2hlY2tVbmlxdWVGdW5jPWZ1bmN0aW9uKGUsdCl7dmFyIG49W10scj17fTtyZXR1cm4gZT1lfHxcImlkXCIsdD10fHwxZTMsZnVuY3Rpb24obyl7dmFyIGk7cmV0dXJuIG4ubGVuZ3RoPj10JiYoaT1uLnNoaWZ0KCksZGVsZXRlIHJbaV0pLGk9cyhvLGUpLCFyW2ldJiYocltpXT0hMCxuLnB1c2goaSksITApfX0sZS5leHBvcnRzPXUsbig3MSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCxyKXsvKiFcclxuXHQgKiBAb3ZlcnZpZXcgZXM2LXByb21pc2UgLSBhIHRpbnkgaW1wbGVtZW50YXRpb24gb2YgUHJvbWlzZXMvQSsuXHJcblx0ICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcclxuXHQgKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXHJcblx0ICogICAgICAgICAgICBTZWUgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N0ZWZhbnBlbm5lci9lczYtcHJvbWlzZS9tYXN0ZXIvTElDRU5TRVxyXG5cdCAqIEB2ZXJzaW9uICAgNC4wLjVcclxuXHQgKi9cclxuIWZ1bmN0aW9uKHQsbil7ZS5leHBvcnRzPW4oKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGUoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZXx8XCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lfWZ1bmN0aW9uIG8oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1mdW5jdGlvbiBpKGUpe0c9ZX1mdW5jdGlvbiBhKGUpe0o9ZX1mdW5jdGlvbiBzKCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQubmV4dFRpY2soZil9fWZ1bmN0aW9uIGMoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygej9mdW5jdGlvbigpe3ooZil9OnAoKX1mdW5jdGlvbiB1KCl7dmFyIGU9MCx0PW5ldyBaKGYpLG49ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7cmV0dXJuIHQub2JzZXJ2ZShuLHtjaGFyYWN0ZXJEYXRhOiEwfSksZnVuY3Rpb24oKXtuLmRhdGE9ZT0rK2UlMn19ZnVuY3Rpb24gbCgpe3ZhciBlPW5ldyBNZXNzYWdlQ2hhbm5lbDtyZXR1cm4gZS5wb3J0MS5vbm1lc3NhZ2U9ZixmdW5jdGlvbigpe3JldHVybiBlLnBvcnQyLnBvc3RNZXNzYWdlKDApfX1mdW5jdGlvbiBwKCl7dmFyIGU9c2V0VGltZW91dDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZShmLDEpfX1mdW5jdGlvbiBmKCl7Zm9yKHZhciBlPTA7ZTxWO2UrPTIpe3ZhciB0PW5lW2VdLG49bmVbZSsxXTt0KG4pLG5lW2VdPXZvaWQgMCxuZVtlKzFdPXZvaWQgMH1WPTB9ZnVuY3Rpb24gZCgpe3RyeXt2YXIgZT1uKDg0KTtyZXR1cm4gej1lLnJ1bk9uTG9vcHx8ZS5ydW5PbkNvbnRleHQsYygpfWNhdGNoKGUpe3JldHVybiBwKCl9fWZ1bmN0aW9uIG0oZSx0KXt2YXIgbj1hcmd1bWVudHMscj10aGlzLG89bmV3IHRoaXMuY29uc3RydWN0b3IoaCk7dm9pZCAwPT09b1tvZV0mJkYobyk7dmFyIGk9ci5fc3RhdGU7cmV0dXJuIGk/IWZ1bmN0aW9uKCl7dmFyIGU9bltpLTFdO0ooZnVuY3Rpb24oKXtyZXR1cm4gQShpLG8sZSxyLl9yZXN1bHQpfSl9KCk6RShyLG8sZSx0KSxvfWZ1bmN0aW9uIHkoZSl7dmFyIHQ9dGhpcztpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3Rvcj09PXQpcmV0dXJuIGU7dmFyIG49bmV3IHQoaCk7cmV0dXJuIE0obixlKSxufWZ1bmN0aW9uIGgoKXt9ZnVuY3Rpb24gdigpe3JldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKX1mdW5jdGlvbiBnKCl7cmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuXCIpfWZ1bmN0aW9uIGIoZSl7dHJ5e3JldHVybiBlLnRoZW59Y2F0Y2goZXJyb3Ipe3JldHVybiBjZS5lcnJvcj1lcnJvcixjZX19ZnVuY3Rpb24gayhlLHQsbixyKXt0cnl7ZS5jYWxsKHQsbixyKX1jYXRjaChlKXtyZXR1cm4gZX19ZnVuY3Rpb24gdyhlLHQsbil7SihmdW5jdGlvbihlKXt2YXIgcj0hMSxvPWsobix0LGZ1bmN0aW9uKG4pe3J8fChyPSEwLHQhPT1uP00oZSxuKTp4KGUsbikpfSxmdW5jdGlvbih0KXtyfHwocj0hMCxDKGUsdCkpfSxcIlNldHRsZTogXCIrKGUuX2xhYmVsfHxcIiB1bmtub3duIHByb21pc2VcIikpOyFyJiZvJiYocj0hMCxDKGUsbykpfSxlKX1mdW5jdGlvbiBTKGUsdCl7dC5fc3RhdGU9PT1hZT94KGUsdC5fcmVzdWx0KTp0Ll9zdGF0ZT09PXNlP0MoZSx0Ll9yZXN1bHQpOkUodCx2b2lkIDAsZnVuY3Rpb24odCl7cmV0dXJuIE0oZSx0KX0sZnVuY3Rpb24odCl7cmV0dXJuIEMoZSx0KX0pfWZ1bmN0aW9uIFQoZSx0LG4pe3QuY29uc3RydWN0b3I9PT1lLmNvbnN0cnVjdG9yJiZuPT09bSYmdC5jb25zdHJ1Y3Rvci5yZXNvbHZlPT09eT9TKGUsdCk6bj09PWNlP0MoZSxjZS5lcnJvcik6dm9pZCAwPT09bj94KGUsdCk6byhuKT93KGUsdCxuKTp4KGUsdCl9ZnVuY3Rpb24gTSh0LG4pe3Q9PT1uP0ModCx2KCkpOmUobik/VCh0LG4sYihuKSk6eCh0LG4pfWZ1bmN0aW9uIF8oZSl7ZS5fb25lcnJvciYmZS5fb25lcnJvcihlLl9yZXN1bHQpLE8oZSl9ZnVuY3Rpb24geChlLHQpe2UuX3N0YXRlPT09aWUmJihlLl9yZXN1bHQ9dCxlLl9zdGF0ZT1hZSwwIT09ZS5fc3Vic2NyaWJlcnMubGVuZ3RoJiZKKE8sZSkpfWZ1bmN0aW9uIEMoZSx0KXtlLl9zdGF0ZT09PWllJiYoZS5fc3RhdGU9c2UsZS5fcmVzdWx0PXQsSihfLGUpKX1mdW5jdGlvbiBFKGUsdCxuLHIpe3ZhciBvPWUuX3N1YnNjcmliZXJzLGk9by5sZW5ndGg7ZS5fb25lcnJvcj1udWxsLG9baV09dCxvW2krYWVdPW4sb1tpK3NlXT1yLDA9PT1pJiZlLl9zdGF0ZSYmSihPLGUpfWZ1bmN0aW9uIE8oZSl7dmFyIHQ9ZS5fc3Vic2NyaWJlcnMsbj1lLl9zdGF0ZTtpZigwIT09dC5sZW5ndGgpe2Zvcih2YXIgcj12b2lkIDAsbz12b2lkIDAsaT1lLl9yZXN1bHQsYT0wO2E8dC5sZW5ndGg7YSs9MylyPXRbYV0sbz10W2Erbl0scj9BKG4scixvLGkpOm8oaSk7ZS5fc3Vic2NyaWJlcnMubGVuZ3RoPTB9fWZ1bmN0aW9uIFAoKXt0aGlzLmVycm9yPW51bGx9ZnVuY3Rpb24gSShlLHQpe3RyeXtyZXR1cm4gZSh0KX1jYXRjaChlKXtyZXR1cm4gdWUuZXJyb3I9ZSx1ZX19ZnVuY3Rpb24gQShlLHQsbixyKXt2YXIgaT1vKG4pLGE9dm9pZCAwLHM9dm9pZCAwLGM9dm9pZCAwLHU9dm9pZCAwO2lmKGkpe2lmKGE9SShuLHIpLGE9PT11ZT8odT0hMCxzPWEuZXJyb3IsYT1udWxsKTpjPSEwLHQ9PT1hKXJldHVybiB2b2lkIEModCxnKCkpfWVsc2UgYT1yLGM9ITA7dC5fc3RhdGUhPT1pZXx8KGkmJmM/TSh0LGEpOnU/Qyh0LHMpOmU9PT1hZT94KHQsYSk6ZT09PXNlJiZDKHQsYSkpfWZ1bmN0aW9uIE4oZSx0KXt0cnl7dChmdW5jdGlvbih0KXtNKGUsdCl9LGZ1bmN0aW9uKHQpe0MoZSx0KX0pfWNhdGNoKGUpe0MoZSxlKX19ZnVuY3Rpb24gaigpe3JldHVybiBsZSsrfWZ1bmN0aW9uIEYoZSl7ZVtvZV09bGUrKyxlLl9zdGF0ZT12b2lkIDAsZS5fcmVzdWx0PXZvaWQgMCxlLl9zdWJzY3JpYmVycz1bXX1mdW5jdGlvbiBSKGUsdCl7dGhpcy5faW5zdGFuY2VDb25zdHJ1Y3Rvcj1lLHRoaXMucHJvbWlzZT1uZXcgZShoKSx0aGlzLnByb21pc2Vbb2VdfHxGKHRoaXMucHJvbWlzZSksSyh0KT8odGhpcy5faW5wdXQ9dCx0aGlzLmxlbmd0aD10Lmxlbmd0aCx0aGlzLl9yZW1haW5pbmc9dC5sZW5ndGgsdGhpcy5fcmVzdWx0PW5ldyBBcnJheSh0aGlzLmxlbmd0aCksMD09PXRoaXMubGVuZ3RoP3godGhpcy5wcm9taXNlLHRoaXMuX3Jlc3VsdCk6KHRoaXMubGVuZ3RoPXRoaXMubGVuZ3RofHwwLHRoaXMuX2VudW1lcmF0ZSgpLDA9PT10aGlzLl9yZW1haW5pbmcmJngodGhpcy5wcm9taXNlLHRoaXMuX3Jlc3VsdCkpKTpDKHRoaXMucHJvbWlzZSxEKCkpfWZ1bmN0aW9uIEQoKXtyZXR1cm4gbmV3IEVycm9yKFwiQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5XCIpfWZ1bmN0aW9uIEwoZSl7cmV0dXJuIG5ldyBSKHRoaXMsZSkucHJvbWlzZX1mdW5jdGlvbiBCKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyB0KEsoZSk/ZnVuY3Rpb24obixyKXtmb3IodmFyIG89ZS5sZW5ndGgsaT0wO2k8bztpKyspdC5yZXNvbHZlKGVbaV0pLnRoZW4obixyKX06ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdChuZXcgVHlwZUVycm9yKFwiWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLlwiKSl9KX1mdW5jdGlvbiBxKGUpe3ZhciB0PXRoaXMsbj1uZXcgdChoKTtyZXR1cm4gQyhuLGUpLG59ZnVuY3Rpb24gVSgpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yXCIpfWZ1bmN0aW9uIFcoKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpfWZ1bmN0aW9uIEgoZSl7dGhpc1tvZV09aigpLHRoaXMuX3Jlc3VsdD10aGlzLl9zdGF0ZT12b2lkIDAsdGhpcy5fc3Vic2NyaWJlcnM9W10saCE9PWUmJihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZVKCksdGhpcyBpbnN0YW5jZW9mIEg/Tih0aGlzLGUpOlcoKSl9ZnVuY3Rpb24gJCgpe3ZhciBlPXZvaWQgMDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgcillPXI7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZillPXNlbGY7ZWxzZSB0cnl7ZT1GdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwicG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50XCIpfXZhciB0PWUuUHJvbWlzZTtpZih0KXt2YXIgbj1udWxsO3RyeXtuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0LnJlc29sdmUoKSl9Y2F0Y2goZSl7fWlmKFwiW29iamVjdCBQcm9taXNlXVwiPT09biYmIXQuY2FzdClyZXR1cm59ZS5Qcm9taXNlPUh9dmFyIFg9dm9pZCAwO1g9QXJyYXkuaXNBcnJheT9BcnJheS5pc0FycmF5OmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX07dmFyIEs9WCxWPTAsej12b2lkIDAsRz12b2lkIDAsSj1mdW5jdGlvbihlLHQpe25lW1ZdPWUsbmVbVisxXT10LFYrPTIsMj09PVYmJihHP0coZik6cmUoKSl9LFk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwLFE9WXx8e30sWj1RLk11dGF0aW9uT2JzZXJ2ZXJ8fFEuV2ViS2l0TXV0YXRpb25PYnNlcnZlcixlZT1cInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZiYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQmJlwiW29iamVjdCBwcm9jZXNzXVwiPT09e30udG9TdHJpbmcuY2FsbCh0KSx0ZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhDbGFtcGVkQXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbXBvcnRTY3JpcHRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgTWVzc2FnZUNoYW5uZWwsbmU9bmV3IEFycmF5KDFlMykscmU9dm9pZCAwO3JlPWVlP3MoKTpaP3UoKTp0ZT9sKCk6dm9pZCAwPT09WT9kKCk6cCgpO3ZhciBvZT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpLGllPXZvaWQgMCxhZT0xLHNlPTIsY2U9bmV3IFAsdWU9bmV3IFAsbGU9MDtyZXR1cm4gUi5wcm90b3R5cGUuX2VudW1lcmF0ZT1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmxlbmd0aCx0PXRoaXMuX2lucHV0LG49MDt0aGlzLl9zdGF0ZT09PWllJiZuPGU7bisrKXRoaXMuX2VhY2hFbnRyeSh0W25dLG4pfSxSLnByb3RvdHlwZS5fZWFjaEVudHJ5PWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcixyPW4ucmVzb2x2ZTtpZihyPT09eSl7dmFyIG89YihlKTtpZihvPT09bSYmZS5fc3RhdGUhPT1pZSl0aGlzLl9zZXR0bGVkQXQoZS5fc3RhdGUsdCxlLl9yZXN1bHQpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbyl0aGlzLl9yZW1haW5pbmctLSx0aGlzLl9yZXN1bHRbdF09ZTtlbHNlIGlmKG49PT1IKXt2YXIgaT1uZXcgbihoKTtUKGksZSxvKSx0aGlzLl93aWxsU2V0dGxlQXQoaSx0KX1lbHNlIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgbihmdW5jdGlvbih0KXtyZXR1cm4gdChlKX0pLHQpfWVsc2UgdGhpcy5fd2lsbFNldHRsZUF0KHIoZSksdCl9LFIucHJvdG90eXBlLl9zZXR0bGVkQXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMucHJvbWlzZTtyLl9zdGF0ZT09PWllJiYodGhpcy5fcmVtYWluaW5nLS0sZT09PXNlP0MocixuKTp0aGlzLl9yZXN1bHRbdF09biksMD09PXRoaXMuX3JlbWFpbmluZyYmeChyLHRoaXMuX3Jlc3VsdCl9LFIucHJvdG90eXBlLl93aWxsU2V0dGxlQXQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO0UoZSx2b2lkIDAsZnVuY3Rpb24oZSl7cmV0dXJuIG4uX3NldHRsZWRBdChhZSx0LGUpfSxmdW5jdGlvbihlKXtyZXR1cm4gbi5fc2V0dGxlZEF0KHNlLHQsZSl9KX0sSC5hbGw9TCxILnJhY2U9QixILnJlc29sdmU9eSxILnJlamVjdD1xLEguX3NldFNjaGVkdWxlcj1pLEguX3NldEFzYXA9YSxILl9hc2FwPUosSC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOkgsdGhlbjptLFwiY2F0Y2hcIjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKG51bGwsZSl9fSxILnBvbHlmaWxsPSQsSC5Qcm9taXNlPUgsSH0pfSkuY2FsbCh0LG4oODApLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXt2YXIgbj10aGlzO24ubWVzc2FnZT1lLG4uY29kZT10LG4udGltZT1uZXcgRGF0ZSxuLnRpbWV0YWc9K24udGltZX1uLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSksbi5wcm90b3R5cGUubmFtZT1cIk5JTUVycm9yXCIsbi5wcm90b3R5cGUuYXBwZW5kTWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QubWVzc2FnZT9lJiYodC5tZXNzYWdlKz1cIihcIitlK1wiKVwiKTp0Lm1lc3NhZ2U9ZX07dmFyIHI9ezIwMTpcIuWuouaIt+err+eJiOacrOS4jeWvuSwg6ZyA5Y2H57qnc2RrXCIsMzAyOlwi55So5oi35ZCN5oiW5a+G56CB6ZSZ6K+vLCDor7fmo4Dmn6VhcHBLZXnlkox0b2tlbuaYr+WQpuacieaViCwgYWNjb3VudOWSjHRva2Vu5piv5ZCm5Yy56YWNXCIsNDAzOlwi6Z2e5rOV5pON5L2c5oiW5rKh5pyJ5p2D6ZmQXCIsNDA0Olwi5a+56LGhKOeUqOaIty/nvqQv6IGK5aSp5a6kKeS4jeWtmOWcqFwiLDQwNTpcIuWPguaVsOmVv+W6pui/h+mVv1wiLDQwODpcIuWuouaIt+err+ivt+axgui2heaXtlwiLDQxNDpcIuWPguaVsOmUmeivr1wiLDQxNTpcIuacjeWKoeS4jeWPr+eUqC/msqHmnInogYrlpKnlrqTmnI3liqHlmajlj6/liIbphY1cIiw0MTY6XCLpopHnjofmjqfliLZcIiw0MTc6XCLph43lpI3mk43kvZxcIiw0MjI6XCLluJDlj7fooqvnpoHnlKhcIiw1MDA6XCLmnI3liqHlmajlhoXpg6jplJnor69cIiw1MDE6XCLmlbDmja7lupPmk43kvZzlpLHotKVcIiw1MDM6XCLmnI3liqHlmajnuYHlv5lcIiw1MDg6XCLliKDpmaTmnInmlYjmnJ/ov4fkuoZcIiw1MDk6XCLlt7LlpLHmlYhcIiw3MTAxOlwi6KKr5ouJ6buRXCIsODAxOlwi576k5Lq65pWw6L6+5Yiw5LiK6ZmQXCIsODAyOlwi5rKh5pyJ5p2D6ZmQXCIsODAzOlwi576k5LiN5a2Y5Zyo5oiW5pyq5Y+R55Sf5Y+Y5YyWXCIsODA0Olwi55So5oi35LiN5Zyo576k6YeM6Z2iXCIsODA1Olwi576k57G75Z6L5LiN5Yy56YWNXCIsODA2Olwi5Yib5bu6576k5pWw6YeP6L6+5Yiw6ZmQ5Yi2XCIsODA3Olwi576k5oiQ5ZGY54q25oCB5LiN5a+5XCIsODA5Olwi5bey57uP5Zyo576k6YeMXCIsOTk3Olwi5Y2P6K6u5bey5aSx5pWIXCIsOTk4Olwi6Kej5YyF6ZSZ6K+vXCIsOTk5Olwi5omT5YyF6ZSZ6K+vXCIsOTEwMjpcIumAmumBk+WkseaViFwiLDkxMDM6XCLlt7Lnu4/lnKjlhbbku5bnq6/mjqXlkKwv5ouS57ud6L+H6L+Z6YCa55S16K+dXCIsMTEwMDE6XCLlr7nmlrnnprvnur8sIOmAmuivneS4jeWPr+mAgei+vlwiLDEzMDAyOlwi6IGK5aSp5a6k54q25oCB5byC5bi4XCIsMTMwMDM6XCLlnKjpu5HlkI3ljZXkuK1cIiwxMzAwNDpcIuWcqOemgeiogOWQjeWNleS4rVwiLDEzMDA2Olwi6IGK5aSp5a6k5aSE5LqO5pW05L2T56aB6KiA54q25oCBLOWPquacieeuoeeQhuWRmOiDveWPkeiogFwiLENvbm5lY3RfRmFpbGVkOlwi5peg5rOV5bu656uL6L+e5o6lLCDor7fnoa7kv53og70gcGluZy90ZWxuZXQg5Yiw5LqR5L+h5pyN5Yqh5ZmoOyDlpoLmnpzmmK9JRTgvOSwg6K+356Gu5L+d6aG555uu6YOo572y5ZyoIEhUVFBTIOeOr+Wig+S4i1wiLEVycm9yX0ludGVybmV0X0Rpc2Nvbm5lY3RlZDpcIue9keaWreS6hlwiLEVycm9yX0Nvbm5lY3Rpb25faXNfbm90X0VzdGFibGlzaGVkOlwi6L+e5o6l5pyq5bu656uLXCIsRXJyb3JfQ29ubmVjdGlvbl9Tb2NrZXRfU3RhdGVfbm90X01hdGNoOlwic29ja2V054q25oCB5LiN5a+5XCIsRXJyb3JfVGltZW91dDpcIui2heaXtlwiLFBhcmFtX0Vycm9yOlwi5Y+C5pWw6ZSZ6K+vXCIsTm9fRmlsZV9TZWxlY3RlZDpcIuivt+mAieaLqeaWh+S7tlwiLFdyb25nX0ZpbGVfVHlwZTpcIuaWh+S7tuexu+Wei+mUmeivr1wiLEZpbGVfVG9vX0xhcmdlOlwi5paH5Lu26L+H5aSnXCIsQ3Jvc3NfT3JpZ2luX0lmcmFtZTpcIuS4jeiDveiOt+WPlui3qOWfn0lmcmFtZeeahOWGheWuuVwiLE5vdF9TdXBwb3J0Olwi5LiN5pSv5oyBXCIsTk9fREI6XCLml6DmlbDmja7lupNcIixEQjpcIuaVsOaNruW6k+mUmeivr1wiLFN0aWxsX0luX1RlYW06XCLov5jlnKjnvqTph4xcIixTZXNzaW9uX0V4aXN0Olwi5Lya6K+d5bey5a2Y5ZyoXCIsU2Vzc2lvbl9Ob3RfRXhpc3Q6XCLkvJror53kuI3lrZjlnKhcIixFcnJvcl9Vbmtub3duOlwi5pyq55+l6ZSZ6K+vXCIsT3BlcmF0aW9uX0NhbmNlbGVkOlwi5pON5L2c5Y+W5raIXCJ9O1syMDAsNDA2LDgwOCw4MTBdLmZvckVhY2goZnVuY3Rpb24oZSl7cltlXT1udWxsfSksbi5nZW5FcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1yW2VdO3JldHVybiB2b2lkIDA9PT10JiYodD1cIuaTjeS9nOWksei0pVwiKSxudWxsPT09dD9udWxsOm5ldyBuKHQsZSl9LG4ubXVsdGlJbnN0YW5jZT1mdW5jdGlvbigpe3JldHVybiBuZXcgbihcIuS4jeWFgeiuuOWIneWni+WMluWkmuS4quWunuS+i1wiLFwiTm90X0FsbG93X011bHRpX0luc3RhbmNlXCIpfSxuLm5ld05ldHdvcmtFcnJvcj1mdW5jdGlvbigpe3ZhciBlPVwiRXJyb3JfSW50ZXJuZXRfRGlzY29ubmVjdGVkXCI7cmV0dXJuIG5ldyBuKHJbZV0sZSl9LG4ubmV3Q29ubmVjdEVycm9yPWZ1bmN0aW9uKGUpe3ZhciB0PVwiQ29ubmVjdF9GYWlsZWRcIjtyZXR1cm4gbmV3IG4oclt0XXx8ZSx0KX0sbi5uZXdDb25uZWN0aW9uRXJyb3I9ZnVuY3Rpb24oKXt2YXIgZT1cIkVycm9yX0Nvbm5lY3Rpb25faXNfbm90X0VzdGFibGlzaGVkXCI7cmV0dXJuIG5ldyBuKHJbZV0sZSl9LG4ubmV3U29ja2V0U3RhdGVFcnJvcj1mdW5jdGlvbigpe3ZhciBlPVwiRXJyb3JfQ29ubmVjdGlvbl9Tb2NrZXRfU3RhdGVfbm90X01hdGNoXCI7cmV0dXJuIG5ldyBuKHJbZV0sZSl9LG4ubmV3VGltZW91dEVycm9yPWZ1bmN0aW9uKCl7dmFyIGU9XCJFcnJvcl9UaW1lb3V0XCI7cmV0dXJuIG5ldyBuKHJbZV0sZSl9LG4ubmV3RnJlcXVlbmN5Q29udHJvbEVycm9yPWZ1bmN0aW9uKCl7dmFyIGU9NDE2LHQ9bmV3IG4ocltlXSxlKTtyZXR1cm4gdC5mcm9tPVwibG9jYWxcIix0fSxuLm5ld1BhcmFtRXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJQYXJhbV9FcnJvclwiO3JldHVybiBuZXcgbihlfHxyW3RdLHQpfSxuLm5ld05vRmlsZUVycm9yPWZ1bmN0aW9uKGUpe3ZhciB0PVwiTm9fRmlsZV9TZWxlY3RlZFwiO3JldHVybiBuZXcgbihlfHxyW3RdLHQpfSxuLm5ld1dyb25nRmlsZVR5cGVFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1cIldyb25nX0ZpbGVfVHlwZVwiO3JldHVybiBuZXcgbihlfHxyW3RdLHQpfSxuLm5ld0ZpbGVUb29MYXJnZUVycm9yPWZ1bmN0aW9uKGUpe3ZhciB0PVwiRmlsZV9Ub29fTGFyZ2VcIjtyZXR1cm4gbmV3IG4oZXx8clt0XSx0KX0sbi5uZXdDT1JTSWZyYW1lRXJyb3I9ZnVuY3Rpb24oKXt2YXIgZT1cIkNyb3NzX09yaWdpbl9JZnJhbWVcIjtyZXR1cm4gbmV3IG4ocltlXSxlKX0sbi5uZXdTdXBwb3J0RXJyb3I9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IG4oXCLkuI3mlK/mjIFcIitlLFwiTm90X1N1cHBvcnRfXCIrdCl9LG4ubmV3U3VwcG9ydERCRXJyb3I9ZnVuY3Rpb24oKXtyZXR1cm4gbi5uZXdTdXBwb3J0RXJyb3IoXCLmlbDmja7lupNcIixcIkRCXCIpfSxuLm5vREJFcnJvcj1mdW5jdGlvbigpe3ZhciBlPVwiTk9fREJcIjtyZXR1cm4gbmV3IG4ocltlXSxlKX0sbi5uZXdEQkVycm9yPWZ1bmN0aW9uKCl7dmFyIGU9XCJEQlwiO3JldHVybiBuZXcgbihyW2VdLGUpfSxuLm5ld1Vua25vd25FcnJvcj1mdW5jdGlvbigpe3ZhciBlPVwiRXJyb3JfVW5rbm93blwiO3JldHVybiBuZXcgbihyW2VdLGUpfSxuLnN0aWxsSW5UZWFtRXJyb3I9ZnVuY3Rpb24oKXt2YXIgZT1cIlN0aWxsX0luX1RlYW1cIjtyZXR1cm4gbmV3IG4ocltlXSxlKX0sbi5zZXNzaW9uRXhpc3Q9ZnVuY3Rpb24oKXt2YXIgZT1cIlNlc3Npb25fRXhpc3RcIjtyZXR1cm4gbmV3IG4ocltlXSxlKX0sbi5zZXNzaW9uTm90RXhpc3Q9ZnVuY3Rpb24oKXt2YXIgZT1cIlNlc3Npb25fTm90X0V4aXN0XCI7cmV0dXJuIG5ldyBuKHJbZV0sZSl9LG4uY2FuY2VsPWZ1bmN0aW9uKCl7dmFyIGU9XCJPcGVyYXRpb25fQ2FuY2VsZWRcIjtyZXR1cm4gbmV3IG4ocltlXSxlKX0sZS5leHBvcnRzPW59LCwsZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPVwiJ2I0MjRhMDQ0OWQ3ZTY5YzMxNTFiZTE2YjlkMDk4MTQyY2JmMWM3YzBcIixvPVwiYjQyNGEwNCdcIixpPVwiMy44LjBcIixhPVwiMi4wLjAuNTI0XCIscz0zNSxjPTEsdT1cImh0dHBzOi8vbGJzLm5ldGVhc2UuaW0vbGJzL3dlYmNvbmYuanNwXCIsbD1cImRldmVsb3BtZW50XCI9PT17V0VJWElOX0FQUDohMH0uTk9ERV9FTlY/NmUzOjQyZTMscD17aW5mbzp7aGFzaDpyLHNob3J0SGFzaDpvLHZlcnNpb246aSxzZGtWZXJzaW9uOnMscHJvdG9jb2xWZXJzaW9uOmN9LGFnZW50VmVyc2lvbjphLGxic1VybDp1LGNvbm5lY3RUaW1lb3V0OmwseGhyVGltZW91dDpsLHNvY2tldFRpbWVvdXQ6bCxyZWNvbm5lY3Rpb25EZWxheTo2NTYuMjUscmVjb25uZWN0aW9uRGVsYXlNYXg6bCxyZWNvbm5lY3Rpb25KaXR0ZXI6LjEsaGVhcnRiZWF0SW50ZXJ2YWw6MThlNCxjbWRUaW1lb3V0Omx9O3AuZm9ybWF0U29ja2V0VXJsPWZ1bmN0aW9uKGUpe3ZhciB0PWUudXJsLG49ZS5zZWN1cmUscj1uP1wiaHR0cHNcIjpcImh0dHBcIjtyZXR1cm4gdC5pbmRleE9mKFwiaHR0cFwiKT09PS0xP3IrXCI6Ly9cIit0OnR9LHAuZmlsZVNlcnZlclVybD1cImh0dHBzOi8vbm9zLm5ldGVhc2UuY29tXCIscC5yZXBsYWNlVXJsPVwiaHR0cDovL25vcy5uZXRlYXNlLmltXCIscC5nZW5VcGxvYWRVcmw9ZnVuY3Rpb24oZSl7cmV0dXJuIHAudXBsb2FkVXJsP3AudXBsb2FkVXJsK1wiL1wiK2U6cC5maWxlU2VydmVyVXJsK1wiL1wiK2V9LHAuZ2VuRG93bmxvYWRVcmw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcC5kb3dubG9hZFVybD9wLnJlcGxhY2VVcmwrXCIvXCIrZStcIi9cIit0OnAuZmlsZVNlcnZlclVybCtcIi9cIitlK1wiL1wiK3R9LGUuZXhwb3J0cz1wfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcigpe312YXIgbz1uKDc2KSxpPW4oMikuUHJvbWlzZSxhPW4oMSkscz1hLm5vdHVuZGVmLGM9big2OSksdT1uKDYpLGw9e307ci5nZXRJbnN0YW5jZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2EudmVyaWZ5T3B0aW9ucyhlLFwiYWNjb3VudFwiKTt2YXIgbj10Lmdlbkluc3RhbmNlTmFtZShlKSxvPWxbbl07cmV0dXJuIG8/ci51cGRhdGVJbnN0YW5jZShvLGUpOm89bFtuXT1uZXcgdChlKSxvfSxyLnVwZGF0ZUluc3RhbmNlPWZ1bmN0aW9uKGUsdCl7ZS5zZXRPcHRpb25zKHQpLGUuY29ubmVjdCgpfTt2YXIgcD1yLmZuPXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobmV3IG8pO3AuaW5pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2EudmVyaWZ5T3B0aW9ucyhlLFwiYWNjb3VudFwiKTt2YXIgbj10LmFjY291bnQ9ZS5hY2NvdW50PWUuYWNjb3VudCtcIlwiLG89ZS5jb25zdHJ1Y3RvcixpPW8uZ2VuSW5zdGFuY2VOYW1lKGUpLHM9bFtpXTtpZihlLl9kaXNhYmxlU2luZ2xldG9uJiYocz1udWxsKSxzKXJldHVybiByLnVwZGF0ZUluc3RhbmNlKHMsZSksczt0Lm5hbWU9aSxsW2ldPXQsdC5sb2dnZXI9ZS5sb2dnZXI9bmV3IGMoe2RlYnVnOmUuZGVidWcsbG9nRnVuYzplLmxvZ0Z1bmMscHJlZml4OnQuc3ViVHlwZX0pLGUuYXBpPXQ7dmFyIHA9dC5wcm90b2NvbD1uZXcgZS5Qcm90b2NvbChlKTtyZXR1cm4gcC5uYW1lPVwiUHJvdG9jb2wtXCIraSxwLmFjY291bnQ9bixwLmFwaT10LHAubWVzc2FnZT10Lm1lc3NhZ2U9bmV3IGUuTWVzc2FnZSh7YWNjb3VudDpufSksdC5vcHRpb25zPWEuY29weShlKSxlLnVwbG9hZFVybCYmZS5kb3dubG9hZFVybCYmKHUudXBsb2FkVXJsPWUudXBsb2FkVXJsLHUuZG93bmxvYWRVcmw9ZS5kb3dubG9hZFVybCksdC5yZXNldCgpLHR9LHAucmVzZXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS5vcHRpb25zO2EudmVyaWZ5Qm9vbGVhbldpdGhEZWZhdWx0KHQsXCJleGlmT3JpZW50YXRpb25cIiwhMCl9LHAuc2V0T3B0aW9ucz1mdW5jdGlvbihlKXt0aGlzLnJlc2V0KCksdGhpcy5wcm90b2NvbC5zZXRPcHRpb25zKGUpfSxwLnByb2Nlc3NDYWxsYmFjaz1mdW5jdGlvbihlLHQpe2YoZSx0KX0scC5wcm9jZXNzQ2FsbGJhY2tQcm9taXNlPWZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IGkoZnVuY3Rpb24obixyKXtmKGUsdCwhMCxuLHIpfSk7cmV0dXJuIG59O3ZhciBmPWZ1bmN0aW9uKGUsdCxuLHIsbyl7YS52ZXJpZnlDYWxsYmFjayhlLFwiZG9uZVwiKSxlLmNhbGxiYWNrPWZ1bmN0aW9uKGksYyl7dmFyIHU9ZS5jYWxsYmFjay5vcHRpb25zO2lmKGM9Y3x8dSx0JiYoYz11KSxhLmlzRnVuY3Rpb24oZS5jYmFvcCkpe3ZhciBsPWUuY2Jhb3AoaSxjKTtzKGwpJiYoYz1sKX12YXIgcD1lLmRvbmU7YS5pc09iamVjdChjKSYmKGRlbGV0ZSBjLmRvbmUsZGVsZXRlIGMuY2IsZGVsZXRlIGMuY2FsbGJhY2spLG4/aT9vKGkpOnIoYyk6cChpLGMpfSxlLmNhbGxiYWNrLm9wdGlvbnM9YS5jb3B5KGUpfTtwLnByb2Nlc3NQcz1mdW5jdGlvbihlKXthLm5vdGV4aXN0KGUucHMpJiYoZS5wcz1cIlwiKX0scC5wcm9jZXNzQ3VzdG9tPWZ1bmN0aW9uKGUpe2Eubm90ZXhpc3QoZS5jdXN0b20pJiYoZS5jdXN0b209XCJcIil9LHAuc2VuZENtZD1mdW5jdGlvbigpe3RoaXMucHJvdG9jb2wuc2VuZENtZC5hcHBseSh0aGlzLnByb3RvY29sLGFyZ3VtZW50cyl9LHAuc2VuZENtZFdpdGhSZXNwPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLnNlbmRDbWQoZSx0LGZ1bmN0aW9uKGUsdCxyKXthLmlzRnVuY3Rpb24obikmJihlP24oZSx0KTpuKG51bGwscikpfSl9LHAuY2JBbmRTZW5kQ21kPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5wcm9jZXNzQ2FsbGJhY2tQcm9taXNlKHQpO3JldHVybiB0aGlzLnNlbmRDbWQoZSx0KSxufSxyLnVzZT1mdW5jdGlvbihlLHQpe2UmJmUuaW5zdGFsbCYmYS5pc0Z1bmN0aW9uKGUuaW5zdGFsbCkmJmUuaW5zdGFsbCh0aGlzLHQpfSxlLmV4cG9ydHM9cixuKDUxKSxuKDUzKSxuKDU0KSxuKDU1KSxuKDUyKX0sLGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDEpLG89e307by5pbml0PWZ1bmN0aW9uKCl7by5kZXZpY2VJZD1yLmd1aWQoKX0sby5pbml0KCksby5jbGllbnRUeXBlTWFwPXsxOlwiQW5kcm9pZFwiLDI6XCJpT1NcIiw0OlwiUENcIiw4OlwiV2luZG93c1Bob25lXCIsMTY6XCJXZWJcIiwzMjpcIlNlcnZlclwifSxlLmV4cG9ydHM9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7dmFyIHQ9dGhpcztvLnVuZGVmKGUuc2VjdXJlKSYmKGUuc2VjdXJlPSEwKSx0Lm9wdGlvbnM9by5jb3B5KGUpLHQuaW5pdCgpLHQuY29ubmVjdCgpfXZhciBvPW4oMSksaT1uKDYpLGE9bigzKSxzPXIuZm49ci5wcm90b3R5cGU7cy5pbml0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmxvZ2dlcj1lLm9wdGlvbnMubG9nZ2VyLGUuY21kVGFza0FycmF5PVtdLGUudGltZXJNYXA9e30sZS5jbWRDYWxsYmFja01hcD17fSxlLmNtZENvbnRlbnRNYXA9e30sZS5pbml0Q29ubmVjdCgpLGUucmVzZXQoKX0scy5yZXNldD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5yZXNldENvbm5lY3QoKX0scy5zZXRPcHRpb25zPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10Lm9wdGlvbnMscj1PYmplY3Qua2V5cyhuKSxpPXIuaW5kZXhPZihcImFjY291bnRcIik7aSE9PS0xJiZyLnNwbGljZShpLDEpLGU9by5maWx0ZXJPYmooZSxyKSx0Lm9wdGlvbnM9by5tZXJnZShuLGUpLHQucmVzZXQoKX0scy5zZW5kQ21kPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIlwiLG49YXJndW1lbnRzWzJdLHI9dGhpcztyLmhlYXJ0YmVhdCgpLFwiaGVhcnRiZWF0XCIhPT1lJiZyLmxvZ2dlci5sb2coXCJQcm90b2NvbCBDb21tYW5kICAgIFwiK2UrXCJcXHRcIix0KTt2YXIgbz1lO2U9ci5wYXJzZXIuY3JlYXRlQ21kKGUsdCk7dmFyIGksYT1lLlNFUjt0PXR8fHt9LHIuY21kQ29udGVudE1hcFthXT10LHQuc2luZ2xlJiYoZGVsZXRlIHQuc2luZ2xlLGk9T2JqZWN0LmtleXModCksMT09PWkubGVuZ3RoJiYoci5jbWRDb250ZW50TWFwW2FdPXRbaVswXV0pKSx0Lk5PVFNUT1JFJiYoaT10Lk5PVFNUT1JFLnNwbGl0KFwiIFwiKSxpLmZvckVhY2goZnVuY3Rpb24oZSl7ZGVsZXRlIHRbZV19KSxkZWxldGUgdC5OT1RTVE9SRSksbj1ufHx0LmNhbGxiYWNrLG4mJihyLmNtZENhbGxiYWNrTWFwW2FdPW4pLHIuY21kVGFza0FycmF5LnB1c2goe2NtZE5hbWU6byxjbWQ6ZX0pLHIuc3RhcnRDbWRUYXNrVGltZXIoKX0scy5zdGFydENtZFRhc2tUaW1lcj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5jbWRUYXNrVGltZXJ8fChlLmNtZFRhc2tUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIHQ9ZS5jbWRUYXNrQXJyYXkuc2hpZnQoKTtlLmNtZFRhc2tUaW1lcj1udWxsLHQmJmUuZXhlY3V0ZUNtZFRhc2sodCksZS5jbWRUYXNrQXJyYXkubGVuZ3RoJiZlLnN0YXJ0Q21kVGFza1RpbWVyKCl9LDApKX0scy5leGVjdXRlQ21kVGFzaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5jbWROYW1lLHI9ZS5jbWQsbz1yLlNFUjt0LmlzRnJlcXVlbmN5Q29udHJvbGxlZChuKT8odC5sb2dnZXIud2FybihcImhpdCBmcmVxdWVuY3kgY29udHJvbCBcIituKSx0Lm1hcmtDYWxsYmFja0ludmFsaWQobyxhLm5ld0ZyZXF1ZW5jeUNvbnRyb2xFcnJvcigpKSk6dC5pc0Nvbm5lY3RlZCgpP3QuZG9TZW5kQ21kKHIpOnQubWFya0NhbGxiYWNrSW52YWxpZChvLGEubmV3U29ja2V0U3RhdGVFcnJvcigpKX0scy5pc0ZyZXF1ZW5jeUNvbnRyb2xsZWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5mcmVxdWVuY3lDb250cm9sTWFwJiZ0aGlzLmZyZXF1ZW5jeUNvbnRyb2xNYXBbZV07aWYodCl7aWYoRGF0ZS5ub3coKTx0LmZyb20rdC5kdXJhdGlvbilyZXR1cm4hMDtkZWxldGUgdGhpcy5mcmVxdWVuY3lDb250cm9sTWFwW2VdfX0scy5kb1NlbmRDbWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuU0VSO3QudGltZXJNYXBbbl09c2V0VGltZW91dChmdW5jdGlvbigpe3QubWFya0NhbGxiYWNrSW52YWxpZChuLGEubmV3VGltZW91dEVycm9yKCkpfSxpLmNtZFRpbWVvdXQpO3RyeXt0LnNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KGUpKX1jYXRjaChlKXt0Lm1hcmtDYWxsYmFja0ludmFsaWQobixhLm5ld1NvY2tldFN0YXRlRXJyb3IoKSksdC5vbkRpc2Nvbm5lY3QoITApfX0scy5nZXRPYmpXaXRoU2VyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10LmNtZENvbnRlbnRNYXBbZV07cmV0dXJuIGRlbGV0ZSB0LmNtZENvbnRlbnRNYXBbZV0sbiYmby5jb3B5KG4pfSxzLmdldENhbGxiYWNrV2l0aFNlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dC5jbWRDYWxsYmFja01hcFtlXTtyZXR1cm4gZGVsZXRlIHQuY21kQ2FsbGJhY2tNYXBbZV0sbn0scy5nZXRUaW1lcldpdGhTZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXQudGltZXJNYXBbZV07cmV0dXJuIGRlbGV0ZSB0LnRpbWVyTWFwW2VdLG59LHMuY2xlYXJUaW1lcldpdGhTZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXQuZ2V0VGltZXJXaXRoU2VyKGUpO24mJmNsZWFyVGltZW91dChuKX0scy5tYXJrQ2FsbGJhY2tJbnZhbGlkPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztuLmdldE9ialdpdGhTZXIoZSksbi5jbGVhclRpbWVyV2l0aFNlcihlKTt2YXIgcj1uLmdldENhbGxiYWNrV2l0aFNlcihlKTtpZihyKXt2YXIgbz1yLm9wdGlvbnM7c2V0VGltZW91dChmdW5jdGlvbigpe3IodHx8YS5uZXdVbmtub3duRXJyb3IoKSxvKX0sMCl9fSxzLm1hcmtBbGxDYWxsYmFja0ludmFsaWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztPYmplY3Qua2V5cyh0aGlzLmNtZENhbGxiYWNrTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3QubWFya0NhbGxiYWNrSW52YWxpZChuLGUpfSl9LHMuZ2V0UGFja2V0T2JqPWZ1bmN0aW9uKGUpe3ZhciB0PW51bGw7aWYoZSYmZS5yYXcpe3ZhciBuPWUucmF3LnNlcjtvLm5vdHVuZGVmKG4pJiYodD10aGlzLmdldE9ialdpdGhTZXIobikpfXJldHVybiB0fSxzLmNhbGxQYWNrZXRBY2tDYWxsYmFjaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKGUmJmUucmF3KXt2YXIgbj1lLnJhdy5zZXI7aWYoby5ub3R1bmRlZihuKSl7dC5jbGVhclRpbWVyV2l0aFNlcihuKTt2YXIgcj10LmdldENhbGxiYWNrV2l0aFNlcihuKTtyJiYoZS5wcm9taXNlP2UucHJvbWlzZS50aGVuKGZ1bmN0aW9uKCl7cihlLmVycm9yLGUub2JqKX0sZnVuY3Rpb24obil7dmFyIG89YS5uZXdEQkVycm9yKCk7by5ldmVudD1uLHQubG9nZ2VyLmVycm9yKFwicHJvbWlzZSBlcnJvclwiLG8sbikscihvLGUub2JqLGUuY29udGVudCl9KTpyKGUuZXJyb3IsZS5vYmosZS5jb250ZW50KSl9fX0scy5vbk1lc3NhZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LmhlYXJ0YmVhdCgpO3ZhciBuPXQucGFyc2VyLnBhcnNlUmVzcG9uc2UoZSk7bi5ub3RGb3VuZCYmdC5sb2dnZXIubG9nKFwibm8gY29uZmlnIGZvclwiLG4ubm90Rm91bmQpLG4uZnJlcXVlbmN5Q29udHJvbER1cmF0aW9uJiYodC5sb2dnZXIud2FybihcInNlcnZlciBmcmVxdWVuY3kgY29udHJvbCBcIituLmNtZCksdC5mcmVxdWVuY3lDb250cm9sTWFwPXQuZnJlcXVlbmN5Q29udHJvbE1hcHx8e30sdC5mcmVxdWVuY3lDb250cm9sTWFwW24uY21kXT17ZnJvbTorbmV3IERhdGUsZHVyYXRpb246bi5mcmVxdWVuY3lDb250cm9sRHVyYXRpb259KSxuLm9iaj10LmdldFBhY2tldE9iaihuKSxcImhlYXJ0YmVhdFwiIT09bi5jbWQmJnQubG9nZ2VyLmxvZyhcIlByb3RvY29sIFJlc3BvbnNlICAgXCIrbi5jbWQrXCJcXHRcIixuLG4uZXJyb3J8fChuLmNvbnRlbnQ/bi5jb250ZW50OlwiXCIpKTt2YXIgcj1cInByb2Nlc3NcIitvLmNhcEZpcnN0TGV0dGVyKG4uc2VydmljZSk7dFtyXSYmdFtyXShuKSx0LmNhbGxQYWNrZXRBY2tDYWxsYmFjayhuKX0scy5vbk1pc2NFcnJvcj1mdW5jdGlvbihlLHQsbil7ZSYmKGUuYXBwZW5kTWVzc2FnZShuKSx0aGlzLm5vdGlmeUVycm9yKGUsdCkpfSxzLm5vdGlmeUVycm9yPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZihuLmlzQ29ubmVjdGVkKCkpe3ZhciByPVtcIm9uRXJyb3IgXCIrbi5uYW1lLGVdO2UuZXZlbnQmJnIucHVzaChlLmV2ZW50KSx0JiZyLnB1c2godCksbi5sb2dnZXIuZXJyb3IuYXBwbHkobi5sb2dnZXIuZXJyb3Isciksbi5vcHRpb25zLm9uZXJyb3IoZSx0KX19LHMuZW1pdEFQST1mdW5jdGlvbihlKXt2YXIgdD1lLnR5cGUsbj1lLm9iajt0aGlzLmFwaS5lbWl0KHQsbil9LGUuZXhwb3J0cz1yLG4oNjApLG4oNTkpLG4oNjEpLG4oNjIpfSxmdW5jdGlvbihlLHQsbil7dmFyIHI7KGZ1bmN0aW9uKGUsbyl7KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaShlKXtyZXR1cm4gZT1TdHJpbmcoZSksZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpfWZ1bmN0aW9uIGEoZSx0LG4pe3ZhciByPXtcIjEwLjBcIjpcIjEwXCIsNi40OlwiMTAgVGVjaG5pY2FsIFByZXZpZXdcIiw2LjM6XCI4LjFcIiw2LjI6XCI4XCIsNi4xOlwiU2VydmVyIDIwMDggUjIgLyA3XCIsXCI2LjBcIjpcIlNlcnZlciAyMDA4IC8gVmlzdGFcIiw1LjI6XCJTZXJ2ZXIgMjAwMyAvIFhQIDY0LWJpdFwiLDUuMTpcIlhQXCIsNS4wMTpcIjIwMDAgU1AxXCIsXCI1LjBcIjpcIjIwMDBcIixcIjQuMFwiOlwiTlRcIixcIjQuOTBcIjpcIk1FXCJ9O3JldHVybiB0JiZuJiYvXldpbi9pLnRlc3QoZSkmJiEvXldpbmRvd3MgUGhvbmUgL2kudGVzdChlKSYmKHI9clsvW1xcZC5dKyQvLmV4ZWMoZSldKSYmKGU9XCJXaW5kb3dzIFwiK3IpLGU9U3RyaW5nKGUpLHQmJm4mJihlPWUucmVwbGFjZShSZWdFeHAodCxcImlcIiksbikpLGU9YyhlLnJlcGxhY2UoLyBjZSQvaSxcIiBDRVwiKS5yZXBsYWNlKC9cXGJocHcvaSxcIndlYlwiKS5yZXBsYWNlKC9cXGJNYWNpbnRvc2hcXGIvLFwiTWFjIE9TXCIpLnJlcGxhY2UoL19Qb3dlclBDXFxiL2ksXCIgT1NcIikucmVwbGFjZSgvXFxiKE9TIFgpIFteIFxcZF0rL2ksXCIkMVwiKS5yZXBsYWNlKC9cXGJNYWMgKE9TIFgpXFxiLyxcIiQxXCIpLnJlcGxhY2UoL1xcLyhcXGQpLyxcIiAkMVwiKS5yZXBsYWNlKC9fL2csXCIuXCIpLnJlcGxhY2UoLyg/OiBCZVBDfFsgLl0qZmNbIFxcZC5dKykkL2ksXCJcIikucmVwbGFjZSgvXFxieDg2XFwuNjRcXGIvZ2ksXCJ4ODZfNjRcIikucmVwbGFjZSgvXFxiKFdpbmRvd3MgUGhvbmUpIE9TXFxiLyxcIiQxXCIpLnJlcGxhY2UoL1xcYihDaHJvbWUgT1MgXFx3KykgW1xcZC5dK1xcYi8sXCIkMVwiKS5zcGxpdChcIiBvbiBcIilbMF0pfWZ1bmN0aW9uIHMoZSx0KXt2YXIgbj0tMSxyPWU/ZS5sZW5ndGg6MDtpZihcIm51bWJlclwiPT10eXBlb2YgciYmcj4tMSYmcjw9Uylmb3IoOysrbjxyOyl0KGVbbl0sbixlKTtlbHNlIHUoZSx0KX1mdW5jdGlvbiBjKGUpe3JldHVybiBlPW0oZSksL14oPzp3ZWJPU3xpKD86T1N8UCkpLy50ZXN0KGUpP2U6aShlKX1mdW5jdGlvbiB1KGUsdCl7Zm9yKHZhciBuIGluIGUpeC5jYWxsKGUsbikmJnQoZVtuXSxuLGUpfWZ1bmN0aW9uIGwoZSl7cmV0dXJuIG51bGw9PWU/aShlKTpDLmNhbGwoZSkuc2xpY2UoOCwtMSl9ZnVuY3Rpb24gcChlLHQpe3ZhciBuPW51bGwhPWU/dHlwZW9mIGVbdF06XCJudW1iZXJcIjtyZXR1cm4hKC9eKD86Ym9vbGVhbnxudW1iZXJ8c3RyaW5nfHVuZGVmaW5lZCkkLy50ZXN0KG4pfHxcIm9iamVjdFwiPT1uJiYhZVt0XSl9ZnVuY3Rpb24gZihlKXtyZXR1cm4gU3RyaW5nKGUpLnJlcGxhY2UoLyhbIC1dKSg/ISQpL2csXCIkMT9cIil9ZnVuY3Rpb24gZChlLHQpe3ZhciBuPW51bGw7cmV0dXJuIHMoZSxmdW5jdGlvbihyLG8pe249dChuLHIsbyxlKX0pLG59ZnVuY3Rpb24gbShlKXtyZXR1cm4gU3RyaW5nKGUpLnJlcGxhY2UoL14gK3wgKyQvZyxcIlwiKX1mdW5jdGlvbiB5KGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIGQodCxmdW5jdGlvbih0LG4pe3JldHVybiB0fHxSZWdFeHAoXCJcXFxcYlwiKyhuLnBhdHRlcm58fGYobikpK1wiXFxcXGJcIixcImlcIikuZXhlYyhlKSYmKG4ubGFiZWx8fG4pfSl9ZnVuY3Rpb24gbih0KXtyZXR1cm4gZCh0LGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gdHx8KG5bR118fG5bL15bYS16XSsoPzogK1thLXpdK1xcYikqL2kuZXhlYyhHKV18fFJlZ0V4cChcIlxcXFxiXCIrZihyKStcIig/OlxcXFxifFxcXFx3KlxcXFxkKVwiLFwiaVwiKS5leGVjKGUpKSYmcn0pfWZ1bmN0aW9uIHIodCl7cmV0dXJuIGQodCxmdW5jdGlvbih0LG4pe3JldHVybiB0fHxSZWdFeHAoXCJcXFxcYlwiKyhuLnBhdHRlcm58fGYobikpK1wiXFxcXGJcIixcImlcIikuZXhlYyhlKSYmKG4ubGFiZWx8fG4pfSl9ZnVuY3Rpb24gbyh0KXtyZXR1cm4gZCh0LGZ1bmN0aW9uKHQsbil7dmFyIHI9bi5wYXR0ZXJufHxmKG4pO3JldHVybiF0JiYodD1SZWdFeHAoXCJcXFxcYlwiK3IrXCIoPzovW1xcXFxkLl0rfFsgXFxcXHcuXSopXCIsXCJpXCIpLmV4ZWMoZSkpJiYodD1hKHQscixuLmxhYmVsfHxuKSksdH0pfWZ1bmN0aW9uIGkodCl7cmV0dXJuIGQodCxmdW5jdGlvbih0LG4pe3ZhciByPW4ucGF0dGVybnx8ZihuKTtyZXR1cm4hdCYmKHQ9UmVnRXhwKFwiXFxcXGJcIityK1wiICpcXFxcZCtbLlxcXFx3X10qXCIsXCJpXCIpLmV4ZWMoZSl8fFJlZ0V4cChcIlxcXFxiXCIrcitcIig/OjsgKig/OlthLXpdK1tfLV0pP1thLXpdK1xcXFxkK3xbXiAoKTstXSopXCIsXCJpXCIpLmV4ZWMoZSkpJiYoKHQ9U3RyaW5nKG4ubGFiZWwmJiFSZWdFeHAocixcImlcIikudGVzdChuLmxhYmVsKT9uLmxhYmVsOnQpLnNwbGl0KFwiL1wiKSlbMV0mJiEvW1xcZC5dKy8udGVzdCh0WzBdKSYmKHRbMF0rPVwiIFwiK3RbMV0pLG49bi5sYWJlbHx8bix0PWModFswXS5yZXBsYWNlKFJlZ0V4cChyLFwiaVwiKSxuKS5yZXBsYWNlKFJlZ0V4cChcIjsgKig/OlwiK24rXCJbXy1dKT9cIixcImlcIiksXCIgXCIpLnJlcGxhY2UoUmVnRXhwKFwiKFwiK24rXCIpWy1fLl0/KFxcXFx3KVwiLFwiaVwiKSxcIiQxICQyXCIpKSksdH0pfWZ1bmN0aW9uIHModCl7cmV0dXJuIGQodCxmdW5jdGlvbih0LG4pe3JldHVybiB0fHwoUmVnRXhwKG4rXCIoPzotW1xcXFxkLl0rL3woPzogZm9yIFtcXFxcdy1dKyk/WyAvLV0pKFtcXFxcZC5dK1teICgpOy9fLV0qKVwiLFwiaVwiKS5leGVjKGUpfHwwKVsxXXx8bnVsbH0pfWZ1bmN0aW9uIGgoKXtyZXR1cm4gdGhpcy5kZXNjcmlwdGlvbnx8XCJcIn12YXIgYj12LGs9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiU3RyaW5nXCIhPWwoZSk7ayYmKGI9ZSxlPW51bGwpO3ZhciB3PWIubmF2aWdhdG9yfHx7fSxTPXcudXNlckFnZW50fHxcIlwiO2V8fChlPVMpO3ZhciBfLHgsRT1rfHxNPT1nLE89az8hIXcubGlrZUNocm9tZTovXFxiQ2hyb21lXFxiLy50ZXN0KGUpJiYhL2ludGVybmFsfFxcbi9pLnRlc3QoQy50b1N0cmluZygpKSxQPVwiT2JqZWN0XCIsST1rP1A6XCJTY3JpcHRCcmlkZ2luZ1Byb3h5T2JqZWN0XCIsQT1rP1A6XCJFbnZpcm9ubWVudFwiLE49ayYmYi5qYXZhP1wiSmF2YVBhY2thZ2VcIjpsKGIuamF2YSksaj1rP1A6XCJSdW50aW1lT2JqZWN0XCIsRj0vXFxiSmF2YS8udGVzdChOKSYmYi5qYXZhLFI9RiYmbChiLmVudmlyb25tZW50KT09QSxEPUY/XCJhXCI6XCLOsVwiLEw9Rj9cImJcIjpcIs6yXCIsQj1iLmRvY3VtZW50fHx7fSxxPWIub3BlcmFtaW5pfHxiLm9wZXJhLFU9VC50ZXN0KFU9ayYmcT9xW1wiW1tDbGFzc11dXCJdOmwocSkpP1U6cT1udWxsLFc9ZSxIPVtdLCQ9bnVsbCxYPWU9PVMsSz1YJiZxJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBxLnZlcnNpb24mJnEudmVyc2lvbigpLFY9dChbe2xhYmVsOlwiRWRnZUhUTUxcIixwYXR0ZXJuOlwiRWRnZVwifSxcIlRyaWRlbnRcIix7bGFiZWw6XCJXZWJLaXRcIixwYXR0ZXJuOlwiQXBwbGVXZWJLaXRcIn0sXCJpQ2FiXCIsXCJQcmVzdG9cIixcIk5ldEZyb250XCIsXCJUYXNtYW5cIixcIktIVE1MXCIsXCJHZWNrb1wiXSksej1yKFtcIkFkb2JlIEFJUlwiLFwiQXJvcmFcIixcIkF2YW50IEJyb3dzZXJcIixcIkJyZWFjaFwiLFwiQ2FtaW5vXCIsXCJFcGlwaGFueVwiLFwiRmVubmVjXCIsXCJGbG9ja1wiLFwiR2FsZW9uXCIsXCJHcmVlbkJyb3dzZXJcIixcImlDYWJcIixcIkljZXdlYXNlbFwiLFwiSy1NZWxlb25cIixcIktvbnF1ZXJvclwiLFwiTHVuYXNjYXBlXCIsXCJNYXh0aG9uXCIse2xhYmVsOlwiTWljcm9zb2Z0IEVkZ2VcIixwYXR0ZXJuOlwiRWRnZVwifSxcIk1pZG9yaVwiLFwiTm9vayBCcm93c2VyXCIsXCJQYWxlTW9vblwiLFwiUGhhbnRvbUpTXCIsXCJSYXZlblwiLFwiUmVrb25xXCIsXCJSb2NrTWVsdFwiLFwiU2VhTW9ua2V5XCIse2xhYmVsOlwiU2lsa1wiLHBhdHRlcm46XCIoPzpDbG91ZDl8U2lsay1BY2NlbGVyYXRlZClcIn0sXCJTbGVpcG5pclwiLFwiU2xpbUJyb3dzZXJcIix7bGFiZWw6XCJTUldhcmUgSXJvblwiLHBhdHRlcm46XCJJcm9uXCJ9LFwiU3VucmlzZVwiLFwiU3dpZnRmb3hcIixcIldlYlBvc2l0aXZlXCIsXCJPcGVyYSBNaW5pXCIse2xhYmVsOlwiT3BlcmEgTWluaVwiLHBhdHRlcm46XCJPUGlPU1wifSxcIk9wZXJhXCIse2xhYmVsOlwiT3BlcmFcIixwYXR0ZXJuOlwiT1BSXCJ9LFwiQ2hyb21lXCIse2xhYmVsOlwiQ2hyb21lIE1vYmlsZVwiLHBhdHRlcm46XCIoPzpDcmlPU3xDck1vKVwifSx7bGFiZWw6XCJGaXJlZm94XCIscGF0dGVybjpcIig/OkZpcmVmb3h8TWluZWZpZWxkKVwifSx7bGFiZWw6XCJGaXJlZm94IGZvciBpT1NcIixwYXR0ZXJuOlwiRnhpT1NcIn0se2xhYmVsOlwiSUVcIixwYXR0ZXJuOlwiSUVNb2JpbGVcIn0se2xhYmVsOlwiSUVcIixwYXR0ZXJuOlwiTVNJRVwifSxcIlNhZmFyaVwiXSksRz1pKFt7bGFiZWw6XCJCbGFja0JlcnJ5XCIscGF0dGVybjpcIkJCMTBcIn0sXCJCbGFja0JlcnJ5XCIse2xhYmVsOlwiR2FsYXh5IFNcIixwYXR0ZXJuOlwiR1QtSTkwMDBcIn0se2xhYmVsOlwiR2FsYXh5IFMyXCIscGF0dGVybjpcIkdULUk5MTAwXCJ9LHtsYWJlbDpcIkdhbGF4eSBTM1wiLHBhdHRlcm46XCJHVC1JOTMwMFwifSx7bGFiZWw6XCJHYWxheHkgUzRcIixwYXR0ZXJuOlwiR1QtSTk1MDBcIn0sXCJHb29nbGUgVFZcIixcIkx1bWlhXCIsXCJpUGFkXCIsXCJpUG9kXCIsXCJpUGhvbmVcIixcIktpbmRsZVwiLHtsYWJlbDpcIktpbmRsZSBGaXJlXCIscGF0dGVybjpcIig/OkNsb3VkOXxTaWxrLUFjY2VsZXJhdGVkKVwifSxcIk5leHVzXCIsXCJOb29rXCIsXCJQbGF5Qm9va1wiLFwiUGxheVN0YXRpb24gM1wiLFwiUGxheVN0YXRpb24gNFwiLFwiUGxheVN0YXRpb24gVml0YVwiLFwiVG91Y2hQYWRcIixcIlRyYW5zZm9ybWVyXCIse2xhYmVsOlwiV2lpIFVcIixwYXR0ZXJuOlwiV2lpVVwifSxcIldpaVwiLFwiWGJveCBPbmVcIix7bGFiZWw6XCJYYm94IDM2MFwiLHBhdHRlcm46XCJYYm94XCJ9LFwiWG9vbVwiXSksSj1uKHtBcHBsZTp7aVBhZDoxLGlQaG9uZToxLGlQb2Q6MX0sQXJjaG9zOnt9LEFtYXpvbjp7S2luZGxlOjEsXCJLaW5kbGUgRmlyZVwiOjF9LEFzdXM6e1RyYW5zZm9ybWVyOjF9LFwiQmFybmVzICYgTm9ibGVcIjp7Tm9vazoxfSxCbGFja0JlcnJ5OntQbGF5Qm9vazoxfSxHb29nbGU6e1wiR29vZ2xlIFRWXCI6MSxOZXh1czoxfSxIUDp7VG91Y2hQYWQ6MX0sSFRDOnt9LExHOnt9LE1pY3Jvc29mdDp7WGJveDoxLFwiWGJveCBPbmVcIjoxfSxNb3Rvcm9sYTp7WG9vbToxfSxOaW50ZW5kbzp7XCJXaWkgVVwiOjEsV2lpOjF9LE5va2lhOntMdW1pYToxfSxTYW1zdW5nOntcIkdhbGF4eSBTXCI6MSxcIkdhbGF4eSBTMlwiOjEsXCJHYWxheHkgUzNcIjoxLFwiR2FsYXh5IFM0XCI6MX0sU29ueTp7XCJQbGF5U3RhdGlvbiA0XCI6MSxcIlBsYXlTdGF0aW9uIDNcIjoxLFwiUGxheVN0YXRpb24gVml0YVwiOjF9fSksWT1vKFtcIldpbmRvd3MgUGhvbmVcIixcIkFuZHJvaWRcIixcIkNlbnRPU1wiLHtsYWJlbDpcIkNocm9tZSBPU1wiLHBhdHRlcm46XCJDck9TXCJ9LFwiRGViaWFuXCIsXCJGZWRvcmFcIixcIkZyZWVCU0RcIixcIkdlbnRvb1wiLFwiSGFpa3VcIixcIkt1YnVudHVcIixcIkxpbnV4IE1pbnRcIixcIk9wZW5CU0RcIixcIlJlZCBIYXRcIixcIlN1U0VcIixcIlVidW50dVwiLFwiWHVidW50dVwiLFwiQ3lnd2luXCIsXCJTeW1iaWFuIE9TXCIsXCJocHdPU1wiLFwid2ViT1MgXCIsXCJ3ZWJPU1wiLFwiVGFibGV0IE9TXCIsXCJMaW51eFwiLFwiTWFjIE9TIFhcIixcIk1hY2ludG9zaFwiLFwiTWFjXCIsXCJXaW5kb3dzIDk4O1wiLFwiV2luZG93cyBcIl0pO2lmKFYmJihWPVtWXSksSiYmIUcmJihHPWkoW0pdKSksKF89L1xcYkdvb2dsZSBUVlxcYi8uZXhlYyhHKSkmJihHPV9bMF0pLC9cXGJTaW11bGF0b3JcXGIvaS50ZXN0KGUpJiYoRz0oRz9HK1wiIFwiOlwiXCIpK1wiU2ltdWxhdG9yXCIpLFwiT3BlcmEgTWluaVwiPT16JiYvXFxiT1BpT1NcXGIvLnRlc3QoZSkmJkgucHVzaChcInJ1bm5pbmcgaW4gVHVyYm8vVW5jb21wcmVzc2VkIG1vZGVcIiksXCJJRVwiPT16JiYvXFxibGlrZSBpUGhvbmUgT1NcXGIvLnRlc3QoZSk/KF89eShlLnJlcGxhY2UoL2xpa2UgaVBob25lIE9TLyxcIlwiKSksSj1fLm1hbnVmYWN0dXJlcixHPV8ucHJvZHVjdCk6L15pUC8udGVzdChHKT8oenx8KHo9XCJTYWZhcmlcIiksWT1cImlPU1wiKygoXz0vIE9TIChbXFxkX10rKS9pLmV4ZWMoZSkpP1wiIFwiK19bMV0ucmVwbGFjZSgvXy9nLFwiLlwiKTpcIlwiKSk6XCJLb25xdWVyb3JcIiE9enx8L2J1bnR1L2kudGVzdChZKT9KJiZcIkdvb2dsZVwiIT1KJiYoL0Nocm9tZS8udGVzdCh6KSYmIS9cXGJNb2JpbGUgU2FmYXJpXFxiL2kudGVzdChlKXx8L1xcYlZpdGFcXGIvLnRlc3QoRykpfHwvXFxiQW5kcm9pZFxcYi8udGVzdChZKSYmL15DaHJvbWUvLnRlc3QoeikmJi9cXGJWZXJzaW9uXFwvL2kudGVzdChlKT8oej1cIkFuZHJvaWQgQnJvd3NlclwiLFk9L1xcYkFuZHJvaWRcXGIvLnRlc3QoWSk/WTpcIkFuZHJvaWRcIik6XCJTaWxrXCI9PXo/KC9cXGJNb2JpL2kudGVzdChlKXx8KFk9XCJBbmRyb2lkXCIsSC51bnNoaWZ0KFwiZGVza3RvcCBtb2RlXCIpKSwvQWNjZWxlcmF0ZWQgKj0gKnRydWUvaS50ZXN0KGUpJiZILnVuc2hpZnQoXCJhY2NlbGVyYXRlZFwiKSk6XCJQYWxlTW9vblwiPT16JiYoXz0vXFxiRmlyZWZveFxcLyhbXFxkLl0rKVxcYi8uZXhlYyhlKSk/SC5wdXNoKFwiaWRlbnRpZnlpbmcgYXMgRmlyZWZveCBcIitfWzFdKTpcIkZpcmVmb3hcIj09eiYmKF89L1xcYihNb2JpbGV8VGFibGV0fFRWKVxcYi9pLmV4ZWMoZSkpPyhZfHwoWT1cIkZpcmVmb3ggT1NcIiksR3x8KEc9X1sxXSkpOnomJiEoXz0hL1xcYk1pbmVmaWVsZFxcYi9pLnRlc3QoZSkmJi9cXGIoPzpGaXJlZm94fFNhZmFyaSlcXGIvLmV4ZWMoeikpfHwoeiYmIUcmJi9bXFwvLF18XlteKF0rP1xcKS8udGVzdChlLnNsaWNlKGUuaW5kZXhPZihfK1wiL1wiKSs4KSkmJih6PW51bGwpLChfPUd8fEp8fFkpJiYoR3x8Snx8L1xcYig/OkFuZHJvaWR8U3ltYmlhbiBPU3xUYWJsZXQgT1N8d2ViT1MpXFxiLy50ZXN0KFkpKSYmKHo9L1thLXpdKyg/OiBIYXQpPy9pLmV4ZWMoL1xcYkFuZHJvaWRcXGIvLnRlc3QoWSk/WTpfKStcIiBCcm93c2VyXCIpKTpZPVwiS3VidW50dVwiLEt8fChLPXMoW1wiKD86Q2xvdWQ5fENyaU9TfENyTW98RWRnZXxGeGlPU3xJRU1vYmlsZXxJcm9ufE9wZXJhID9NaW5pfE9QaU9TfE9QUnxSYXZlbnxTaWxrKD8hL1tcXFxcZC5dKyQpKVwiLFwiVmVyc2lvblwiLGYoeiksXCIoPzpGaXJlZm94fE1pbmVmaWVsZHxOZXRGcm9udClcIl0pKSwoXz1cImlDYWJcIj09ViYmcGFyc2VGbG9hdChLKT4zJiZcIldlYktpdFwifHwvXFxiT3BlcmFcXGIvLnRlc3QoeikmJigvXFxiT1BSXFxiLy50ZXN0KGUpP1wiQmxpbmtcIjpcIlByZXN0b1wiKXx8L1xcYig/Ok1pZG9yaXxOb29rfFNhZmFyaSlcXGIvaS50ZXN0KGUpJiYhL14oPzpUcmlkZW50fEVkZ2VIVE1MKSQvLnRlc3QoVikmJlwiV2ViS2l0XCJ8fCFWJiYvXFxiTVNJRVxcYi9pLnRlc3QoZSkmJihcIk1hYyBPU1wiPT1ZP1wiVGFzbWFuXCI6XCJUcmlkZW50XCIpfHxcIldlYktpdFwiPT1WJiYvXFxiUGxheVN0YXRpb25cXGIoPyEgVml0YVxcYikvaS50ZXN0KHopJiZcIk5ldEZyb250XCIpJiYoVj1bX10pLFwiSUVcIj09eiYmKF89KC87ICooPzpYQkxXUHxadW5lV1ApKFxcZCspL2kuZXhlYyhlKXx8MClbMV0pPyh6Kz1cIiBNb2JpbGVcIixZPVwiV2luZG93cyBQaG9uZSBcIisoL1xcKyQvLnRlc3QoXyk/XzpfK1wiLnhcIiksSC51bnNoaWZ0KFwiZGVza3RvcCBtb2RlXCIpKTovXFxiV1BEZXNrdG9wXFxiL2kudGVzdChlKT8oej1cIklFIE1vYmlsZVwiLFk9XCJXaW5kb3dzIFBob25lIDgueFwiLEgudW5zaGlmdChcImRlc2t0b3AgbW9kZVwiKSxLfHwoSz0oL1xcYnJ2OihbXFxkLl0rKS8uZXhlYyhlKXx8MClbMV0pKTpcIklFXCIhPXomJlwiVHJpZGVudFwiPT1WJiYoXz0vXFxicnY6KFtcXGQuXSspLy5leGVjKGUpKSYmKHomJkgucHVzaChcImlkZW50aWZ5aW5nIGFzIFwiK3orKEs/XCIgXCIrSzpcIlwiKSksej1cIklFXCIsSz1fWzFdKSxYKXtpZihwKGIsXCJnbG9iYWxcIikpaWYoRiYmKF89Ri5sYW5nLlN5c3RlbSxXPV8uZ2V0UHJvcGVydHkoXCJvcy5hcmNoXCIpLFk9WXx8Xy5nZXRQcm9wZXJ0eShcIm9zLm5hbWVcIikrXCIgXCIrXy5nZXRQcm9wZXJ0eShcIm9zLnZlcnNpb25cIikpLEUmJnAoYixcInN5c3RlbVwiKSYmKF89W2Iuc3lzdGVtXSlbMF0pe1l8fChZPV9bMF0ub3N8fG51bGwpO31lbHNlXCJvYmplY3RcIj09dHlwZW9mIGIucHJvY2VzcyYmIWIucHJvY2Vzcy5icm93c2VyJiYoXz1iLnByb2Nlc3MpPyh6PVwiTm9kZS5qc1wiLFc9Xy5hcmNoLFk9Xy5wbGF0Zm9ybSxLPS9bXFxkLl0rLy5leGVjKF8udmVyc2lvbilbMF0pOlImJih6PVwiUmhpbm9cIik7ZWxzZSBsKF89Yi5ydW50aW1lKT09ST8oej1cIkFkb2JlIEFJUlwiLFk9Xy5mbGFzaC5zeXN0ZW0uQ2FwYWJpbGl0aWVzLm9zKTpsKF89Yi5waGFudG9tKT09aj8oej1cIlBoYW50b21KU1wiLEs9KF89Xy52ZXJzaW9ufHxudWxsKSYmXy5tYWpvcitcIi5cIitfLm1pbm9yK1wiLlwiK18ucGF0Y2gpOlwibnVtYmVyXCI9PXR5cGVvZiBCLmRvY3VtZW50TW9kZSYmKF89L1xcYlRyaWRlbnRcXC8oXFxkKykvaS5leGVjKGUpKSYmKEs9W0ssQi5kb2N1bWVudE1vZGVdLChfPStfWzFdKzQpIT1LWzFdJiYoSC5wdXNoKFwiSUUgXCIrS1sxXStcIiBtb2RlXCIpLFYmJihWWzFdPVwiXCIpLEtbMV09XyksSz1cIklFXCI9PXo/U3RyaW5nKEtbMV0udG9GaXhlZCgxKSk6S1swXSk7WT1ZJiZjKFkpfUsmJihfPS8oPzpbYWJdfGRwfHByZXxbYWJdXFxkK3ByZSkoPzpcXGQrXFwrPyk/JC9pLmV4ZWMoSyl8fC8oPzphbHBoYXxiZXRhKSg/OiA/XFxkKT8vaS5leGVjKGUrXCI7XCIrKFgmJncuYXBwTWlub3JWZXJzaW9uKSl8fC9cXGJNaW5lZmllbGRcXGIvaS50ZXN0KGUpJiZcImFcIikmJigkPS9iL2kudGVzdChfKT9cImJldGFcIjpcImFscGhhXCIsSz1LLnJlcGxhY2UoUmVnRXhwKF8rXCJcXFxcKz8kXCIpLFwiXCIpKyhcImJldGFcIj09JD9MOkQpKygvXFxkK1xcKz8vLmV4ZWMoXyl8fFwiXCIpKSxcIkZlbm5lY1wiPT16fHxcIkZpcmVmb3hcIj09eiYmL1xcYig/OkFuZHJvaWR8RmlyZWZveCBPUylcXGIvLnRlc3QoWSk/ej1cIkZpcmVmb3ggTW9iaWxlXCI6XCJNYXh0aG9uXCI9PXomJks/Sz1LLnJlcGxhY2UoL1xcLltcXGQuXSsvLFwiLnhcIik6L1xcYlhib3hcXGIvaS50ZXN0KEcpPyhZPW51bGwsXCJYYm94IDM2MFwiPT1HJiYvXFxiSUVNb2JpbGVcXGIvLnRlc3QoZSkmJkgudW5zaGlmdChcIm1vYmlsZSBtb2RlXCIpKTohL14oPzpDaHJvbWV8SUV8T3BlcmEpJC8udGVzdCh6KSYmKCF6fHxHfHwvQnJvd3NlcnxNb2JpLy50ZXN0KHopKXx8XCJXaW5kb3dzIENFXCIhPVkmJiEvTW9iaS9pLnRlc3QoZSk/XCJJRVwiPT16JiZYJiZudWxsPT09Yi5leHRlcm5hbD9ILnVuc2hpZnQoXCJwbGF0Zm9ybSBwcmV2aWV3XCIpOigvXFxiQmxhY2tCZXJyeVxcYi8udGVzdChHKXx8L1xcYkJCMTBcXGIvLnRlc3QoZSkpJiYoXz0oUmVnRXhwKEcucmVwbGFjZSgvICsvZyxcIiAqXCIpK1wiLyhbLlxcXFxkXSspXCIsXCJpXCIpLmV4ZWMoZSl8fDApWzFdfHxLKT8oXz1bXywvQkIxMC8udGVzdChlKV0sWT0oX1sxXT8oRz1udWxsLEo9XCJCbGFja0JlcnJ5XCIpOlwiRGV2aWNlIFNvZnR3YXJlXCIpK1wiIFwiK19bMF0sSz1udWxsKTp0aGlzIT11JiZcIldpaVwiIT1HJiYoWCYmcXx8L09wZXJhLy50ZXN0KHopJiYvXFxiKD86TVNJRXxGaXJlZm94KVxcYi9pLnRlc3QoZSl8fFwiRmlyZWZveFwiPT16JiYvXFxiT1MgWCAoPzpcXGQrXFwuKXsyLH0vLnRlc3QoWSl8fFwiSUVcIj09eiYmKFkmJiEvXldpbi8udGVzdChZKSYmSz41LjV8fC9cXGJXaW5kb3dzIFhQXFxiLy50ZXN0KFkpJiZLPjh8fDg9PUsmJiEvXFxiVHJpZGVudFxcYi8udGVzdChlKSkpJiYhVC50ZXN0KF89eS5jYWxsKHUsZS5yZXBsYWNlKFQsXCJcIikrXCI7XCIpKSYmXy5uYW1lJiYoXz1cImluZyBhcyBcIitfLm5hbWUrKChfPV8udmVyc2lvbik/XCIgXCIrXzpcIlwiKSxULnRlc3Qoeik/KC9cXGJJRVxcYi8udGVzdChfKSYmXCJNYWMgT1NcIj09WSYmKFk9bnVsbCksXz1cImlkZW50aWZ5XCIrXyk6KF89XCJtYXNrXCIrXyx6PVU/YyhVLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csXCIkMSAkMlwiKSk6XCJPcGVyYVwiLC9cXGJJRVxcYi8udGVzdChfKSYmKFk9bnVsbCksWHx8KEs9bnVsbCkpLFY9W1wiUHJlc3RvXCJdLEgucHVzaChfKSk6eis9XCIgTW9iaWxlXCIsKF89KC9cXGJBcHBsZVdlYktpdFxcLyhbXFxkLl0rXFwrPykvaS5leGVjKGUpfHwwKVsxXSkmJihfPVtwYXJzZUZsb2F0KF8ucmVwbGFjZSgvXFwuKFxcZCkkLyxcIi4wJDFcIikpLF9dLFwiU2FmYXJpXCI9PXomJlwiK1wiPT1fWzFdLnNsaWNlKC0xKT8oej1cIldlYktpdCBOaWdodGx5XCIsJD1cImFscGhhXCIsSz1fWzFdLnNsaWNlKDAsLTEpKTpLIT1fWzFdJiZLIT0oX1syXT0oL1xcYlNhZmFyaVxcLyhbXFxkLl0rXFwrPykvaS5leGVjKGUpfHwwKVsxXSl8fChLPW51bGwpLF9bMV09KC9cXGJDaHJvbWVcXC8oW1xcZC5dKykvaS5leGVjKGUpfHwwKVsxXSw1MzcuMzY9PV9bMF0mJjUzNy4zNj09X1syXSYmcGFyc2VGbG9hdChfWzFdKT49MjgmJlwiV2ViS2l0XCI9PVYmJihWPVtcIkJsaW5rXCJdKSxYJiYoT3x8X1sxXSk/KFYmJihWWzFdPVwibGlrZSBDaHJvbWVcIiksXz1fWzFdfHwoXz1fWzBdLF88NTMwPzE6Xzw1MzI/MjpfPDUzMi4wNT8zOl88NTMzPzQ6Xzw1MzQuMDM/NTpfPDUzNC4wNz82Ol88NTM0LjE/NzpfPDUzNC4xMz84Ol88NTM0LjE2Pzk6Xzw1MzQuMjQ/MTA6Xzw1MzQuMz8xMTpfPDUzNS4wMT8xMjpfPDUzNS4wMj9cIjEzK1wiOl88NTM1LjA3PzE1Ol88NTM1LjExPzE2Ol88NTM1LjE5PzE3Ol88NTM2LjA1PzE4Ol88NTM2LjE/MTk6Xzw1MzcuMDE/MjA6Xzw1MzcuMTE/XCIyMStcIjpfPDUzNy4xMz8yMzpfPDUzNy4xOD8yNDpfPDUzNy4yND8yNTpfPDUzNy4zNj8yNjpcIkJsaW5rXCIhPVY/XCIyN1wiOlwiMjhcIikpOihWJiYoVlsxXT1cImxpa2UgU2FmYXJpXCIpLF89X1swXSxfPV88NDAwPzE6Xzw1MDA/MjpfPDUyNj8zOl88NTMzPzQ6Xzw1MzQ/XCI0K1wiOl88NTM1PzU6Xzw1Mzc/NjpfPDUzOD83Ol88NjAxPzg6XCI4XCIpLFYmJihWWzFdKz1cIiBcIisoXys9XCJudW1iZXJcIj09dHlwZW9mIF8/XCIueFwiOi9bLitdLy50ZXN0KF8pP1wiXCI6XCIrXCIpKSxcIlNhZmFyaVwiPT16JiYoIUt8fHBhcnNlSW50KEspPjQ1KSYmKEs9XykpLFwiT3BlcmFcIj09eiYmKF89L1xcYnpib3Z8enZhdiQvLmV4ZWMoWSkpPyh6Kz1cIiBcIixILnVuc2hpZnQoXCJkZXNrdG9wIG1vZGVcIiksXCJ6dmF2XCI9PV8/KHorPVwiTWluaVwiLEs9bnVsbCk6eis9XCJNb2JpbGVcIixZPVkucmVwbGFjZShSZWdFeHAoXCIgKlwiK18rXCIkXCIpLFwiXCIpKTpcIlNhZmFyaVwiPT16JiYvXFxiQ2hyb21lXFxiLy5leGVjKFYmJlZbMV0pJiYoSC51bnNoaWZ0KFwiZGVza3RvcCBtb2RlXCIpLHo9XCJDaHJvbWUgTW9iaWxlXCIsSz1udWxsLC9cXGJPUyBYXFxiLy50ZXN0KFkpPyhKPVwiQXBwbGVcIixZPVwiaU9TIDQuMytcIik6WT1udWxsKSxLJiYwPT1LLmluZGV4T2YoXz0vW1xcZC5dKyQvLmV4ZWMoWSkpJiZlLmluZGV4T2YoXCIvXCIrXytcIi1cIik+LTEmJihZPW0oWS5yZXBsYWNlKF8sXCJcIikpKSxWJiYhL1xcYig/OkF2YW50fE5vb2spXFxiLy50ZXN0KHopJiYoL0Jyb3dzZXJ8THVuYXNjYXBlfE1heHRob24vLnRlc3Qoeil8fFwiU2FmYXJpXCIhPXomJi9eaU9TLy50ZXN0KFkpJiYvXFxiU2FmYXJpXFxiLy50ZXN0KFZbMV0pfHwvXig/OkFkb2JlfEFyb3JhfEJyZWFjaHxNaWRvcml8T3BlcmF8UGhhbnRvbXxSZWtvbnF8Um9ja3xTbGVpcG5pcnxXZWIpLy50ZXN0KHopJiZWWzFdKSYmKF89VltWLmxlbmd0aC0xXSkmJkgucHVzaChfKSxILmxlbmd0aCYmKEg9W1wiKFwiK0guam9pbihcIjsgXCIpK1wiKVwiXSksSiYmRyYmRy5pbmRleE9mKEopPDAmJkgucHVzaChcIm9uIFwiK0opLEcmJkgucHVzaCgoL15vbiAvLnRlc3QoSFtILmxlbmd0aC0xXSk/XCJcIjpcIm9uIFwiKStHKSxZJiYoXz0vIChbXFxkLitdKykkLy5leGVjKFkpLHg9XyYmXCIvXCI9PVkuY2hhckF0KFkubGVuZ3RoLV9bMF0ubGVuZ3RoLTEpLFk9e2FyY2hpdGVjdHVyZTozMixmYW1pbHk6XyYmIXg/WS5yZXBsYWNlKF9bMF0sXCJcIik6WSx2ZXJzaW9uOl8/X1sxXTpudWxsLHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy52ZXJzaW9uO3JldHVybiB0aGlzLmZhbWlseSsoZSYmIXg/XCIgXCIrZTpcIlwiKSsoNjQ9PXRoaXMuYXJjaGl0ZWN0dXJlP1wiIDY0LWJpdFwiOlwiXCIpfX0pLChfPS9cXGIoPzpBTUR8SUF8V2lufFdPV3x4ODZffHgpNjRcXGIvaS5leGVjKFcpKSYmIS9cXGJpNjg2XFxiL2kudGVzdChXKT8oWSYmKFkuYXJjaGl0ZWN0dXJlPTY0LFkuZmFtaWx5PVkuZmFtaWx5LnJlcGxhY2UoUmVnRXhwKFwiICpcIitfKSxcIlwiKSkseiYmKC9cXGJXT1c2NFxcYi9pLnRlc3QoZSl8fFgmJi9cXHcoPzo4NnwzMikkLy50ZXN0KHcuY3B1Q2xhc3N8fHcucGxhdGZvcm0pJiYhL1xcYldpbjY0OyB4NjRcXGIvaS50ZXN0KGUpKSYmSC51bnNoaWZ0KFwiMzItYml0XCIpKTpZJiYvXk9TIFgvLnRlc3QoWS5mYW1pbHkpJiZcIkNocm9tZVwiPT16JiZwYXJzZUZsb2F0KEspPj0zOSYmKFkuYXJjaGl0ZWN0dXJlPTY0KSxlfHwoZT1udWxsKTt2YXIgUT17fTtyZXR1cm4gUS5kZXNjcmlwdGlvbj1lLFEubGF5b3V0PVYmJlZbMF0sUS5tYW51ZmFjdHVyZXI9SixRLm5hbWU9eixRLnByZXJlbGVhc2U9JCxRLnByb2R1Y3Q9RyxRLnVhPWUsUS52ZXJzaW9uPXomJkssUS5vcz1ZfHx7YXJjaGl0ZWN0dXJlOm51bGwsZmFtaWx5Om51bGwsdmVyc2lvbjpudWxsLHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCJudWxsXCJ9fSxRLnBhcnNlPXksUS50b1N0cmluZz1oLFEudmVyc2lvbiYmSC51bnNoaWZ0KEspLFEubmFtZSYmSC51bnNoaWZ0KHopLFkmJnomJihZIT1TdHJpbmcoWSkuc3BsaXQoXCIgXCIpWzBdfHxZIT16LnNwbGl0KFwiIFwiKVswXSYmIUcpJiZILnB1c2goRz9cIihcIitZK1wiKVwiOlwib24gXCIrWSksSC5sZW5ndGgmJihRLmRlc2NyaXB0aW9uPUguam9pbihcIiBcIikpLFF9dmFyIGg9e1wiZnVuY3Rpb25cIjohMCxvYmplY3Q6ITB9LHY9aFt0eXBlb2Ygd2luZG93XSYmd2luZG93fHx0aGlzLGc9dixiPWhbdHlwZW9mIHRdJiZ0LGs9aFt0eXBlb2YgZV0mJmUmJiFlLm5vZGVUeXBlJiZlLHc9YiYmayYmXCJvYmplY3RcIj09dHlwZW9mIG8mJm87IXd8fHcuZ2xvYmFsIT09dyYmdy53aW5kb3chPT13JiZ3LnNlbGYhPT13fHwodj13KTt2YXIgUz1NYXRoLnBvdygyLDUzKS0xLFQ9L1xcYk9wZXJhLyxNPXRoaXMsXz1PYmplY3QucHJvdG90eXBlLHg9Xy5oYXNPd25Qcm9wZXJ0eSxDPV8udG9TdHJpbmcsRT15KCk7di5wbGF0Zm9ybT1FLHI9ZnVuY3Rpb24oKXtyZXR1cm4gRX0uY2FsbCh0LG4sdCxlKSwhKHZvaWQgMCE9PXImJihlLmV4cG9ydHM9cikpfSkuY2FsbCh0aGlzKX0pLmNhbGwodCxuKDQwKShlKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSgpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7dmFyIHQ9dGhpcztlLnJlc2VuZD8oby52ZXJpZnlPcHRpb25zKGUsXCJpZENsaWVudFwiKSx0LmlkQ2xpZW50PWUuaWRDbGllbnQpOnQuaWRDbGllbnQ9by5ndWlkKCksdC50eXBlPWNbZS50eXBlXSx0LnJlc2VuZD1lLnJlc2VuZD8xOjAsaShlLmN1c3RvbSkmJih0LmN1c3RvbT1cIlwiK2UuY3VzdG9tKSxpKGUueWlkdW5FbmFibGUpJiYodC55aWR1bkVuYWJsZT1lLnlpZHVuRW5hYmxlPzE6MCksaShlLmFudGlTcGFtQ29udGVudCkmJih0LmFudGlTcGFtQ29udGVudD1cIlwiK2UuYW50aVNwYW1Db250ZW50KX12YXIgbz1uKDEpLGk9by5ub3R1bmRlZixhPW4oMTgpLHM9big0OCksYz1zLnR5cGVNYXA7ci52YWxpZFR5cGVzPXMudmFsaWRUeXBlcyxyLmdldFR5cGU9cy5nZXRUeXBlLHIucmV2ZXJzZT1mdW5jdGlvbihlKXt2YXIgdD1vLmZpbHRlck9iaihlLFwiY2hhdHJvb21JZCBpZENsaWVudCBmcm9tIGZyb21OaWNrIGZyb21BdmF0YXIgZnJvbUN1c3RvbSB1c2VyVXBkYXRlVGltZSBjdXN0b20gc3RhdHVzXCIpO3JldHVybiB0PW8ubWVyZ2UodCx7ZnJvbUNsaWVudFR5cGU6YS5yZXZlcnNlVHlwZShlLmZyb21DbGllbnRUeXBlKSx0eXBlOnIuZ2V0VHlwZShlKSx0aW1lOitlLnRpbWUscmVzZW5kOjE9PT0rZS5yZXNlbmR9KSxpKHQudXNlclVwZGF0ZVRpbWUpJiYodC51c2VyVXBkYXRlVGltZT0rdC51c2VyVXBkYXRlVGltZSksdC5zdGF0dXM9dC5zdGF0dXN8fFwic3VjY2Vzc1wiLHR9LHIuc2V0RXh0cmE9ZnVuY3Rpb24oZSx0KXtzLnNldEZsb3coZSx0KX0sZS5leHBvcnRzPXJ9LCxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt0aGlzLm1peGluKGUpfXZhciBvPW4oMSksaT1vLnVuZGVmLGE9bigzKSxzPW4oNDYpLGM9big2NSksdT1uKDY3KSxsPW4oNjMpLHA9big2NCksZj1uKDY2KTtyLnByb3RvdHlwZS5taXhpbj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuY29uZmlnTWFwPXRoaXMuY29uZmlnTWFwfHx7fSxbXCJpZE1hcFwiLFwiY21kQ29uZmlnXCIsXCJwYWNrZXRDb25maWdcIl0uZm9yRWFjaChmdW5jdGlvbihuKXt0LmNvbmZpZ01hcFtuXT1vLm1lcmdlKHt9LHQuY29uZmlnTWFwW25dLGUuY29uZmlnTWFwJiZlLmNvbmZpZ01hcFtuXSl9KSxbXCJzZXJpYWxpemVNYXBcIixcInVuc2VyaWFsaXplTWFwXCJdLmZvckVhY2goZnVuY3Rpb24obil7dFtuXT1vLm1lcmdlKHt9LHRbbl0sZVtuXSl9KX07dmFyIGQ9bmV3IHIoe2NvbmZpZ01hcDpzLHNlcmlhbGl6ZU1hcDpjLHVuc2VyaWFsaXplTWFwOnV9KSxtPW5ldyByKHtjb25maWdNYXA6bCxzZXJpYWxpemVNYXA6cCx1bnNlcmlhbGl6ZU1hcDpmfSk7ci5nZXRJbnN0YW5jZT1mdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwiSU1cIjpyZXR1cm4gZDtjYXNlXCJDaGF0cm9vbVwiOnJldHVybiBtfX0sci5wcm90b3R5cGUuY3JlYXRlQ21kPWZ1bmN0aW9uKCl7dmFyIGU9MTtyZXR1cm4gZnVuY3Rpb24odCxuKXt2YXIgcj10aGlzLG89dGhpcy5jb25maWdNYXAuY21kQ29uZmlnW3RdO3JldHVybiB0PXtTSUQ6by5zaWQsQ0lEOm8uY2lkLFNFUjpcImhlYXJ0YmVhdFwiPT09dD8wOmUrK30sby5wYXJhbXMmJih0LlE9W10sby5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbz1lLnR5cGUsYT1lLm5hbWUscz1lLmVudGl0eSxjPW5bYV07aWYoIWkoYykpe3N3aXRjaChvKXtjYXNlXCJQcm9wZXJ0eUFycmF5XCI6bz1cIkFycmF5TWFibGVcIixjPWMubWFwKGZ1bmN0aW9uKGUpe3JldHVybnt0OlwiUHJvcGVydHlcIix2OnIuc2VyaWFsaXplKGUscyl9fSk7YnJlYWs7Y2FzZVwiUHJvcGVydHlcIjpjPXIuc2VyaWFsaXplKGMsYSk7YnJlYWs7Y2FzZVwiYm9vbFwiOmM9Yz9cInRydWVcIjpcImZhbHNlXCJ9dC5RLnB1c2goe3Q6byx2OmN9KX19KSksdH19KCksci5wcm90b3R5cGUucGFyc2VSZXNwb25zZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49SlNPTi5wYXJzZShlKSxyPXtyYXc6bixyYXdTdHI6ZSxlcnJvcjphLmdlbkVycm9yKG4uY29kZSl9LGk9dC5jb25maWdNYXAucGFja2V0Q29uZmlnW24uc2lkK1wiX1wiK24uY2lkXTtpZighaSlyZXR1cm4gci5ub3RGb3VuZD17c2lkOm4uc2lkLGNpZDpuLmNpZH0scjt2YXIgcz1uLnIsYz1cIm5vdGlmeVwiPT09aS5zZXJ2aWNlJiYhaS5jbWQ7aWYoci5pc05vdGlmeT1jLGMpe3ZhciB1PW4uclsxXS5oZWFkZXJQYWNrZXQ7aWYoaT10LmNvbmZpZ01hcC5wYWNrZXRDb25maWdbdS5zaWQrXCJfXCIrdS5jaWRdLHM9bi5yWzFdLmJvZHksIWkpcmV0dXJuIHIubm90Rm91bmQ9e3NpZDp1LnNpZCxjaWQ6dS5jaWR9LHJ9aWYoci5zZXJ2aWNlPWkuc2VydmljZSxyLmNtZD1pLmNtZCxyLmVycm9yJiY0MTY9PT1yLmVycm9yLmNvZGUpe3ZhciBsPXNbMF07bCYmKHIuZnJlcXVlbmN5Q29udHJvbER1cmF0aW9uPTFlMypsKX12YXIgcD0hMTtyZXR1cm4gci5lcnJvciYmaS50cml2aWFsRXJyb3JDb2RlcyYmKHA9aS50cml2aWFsRXJyb3JDb2Rlcy5pbmRleE9mKHIuZXJyb3IuY29kZSkhPT0tMSksci5lcnJvciYmIXB8fCFpLnJlc3BvbnNlfHwoci5jb250ZW50PXt9LGkucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbihlLGkpe1xyXG52YXIgYT1zW2ldO2lmKCFvLnVuZGVmKGEpKXt2YXIgdT1lLnR5cGUsbD1lLm5hbWUscD1lLmVudGl0eXx8bDtzd2l0Y2godSl7Y2FzZVwiUHJvcGVydHlcIjpyLmNvbnRlbnRbbF09dC51bnNlcmlhbGl6ZShhLHApO2JyZWFrO2Nhc2VcIlByb3BlcnR5QXJyYXlcIjpyLmNvbnRlbnRbbF09W10sYS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3IuY29udGVudFtsXS5wdXNoKHQudW5zZXJpYWxpemUoZSxwKSl9KTticmVhaztjYXNlXCJLVkFycmF5XCI6ci5jb250ZW50W2xdPWE7YnJlYWs7Y2FzZVwibG9uZ1wiOmNhc2VcIkxvbmdcIjpjYXNlXCJieXRlXCI6Y2FzZVwiQnl0ZVwiOmNhc2VcIk51bWJlclwiOnIuY29udGVudFtsXT0rYTticmVhaztkZWZhdWx0OnIuY29udGVudFtsXT1hfWlmKGMmJlwibXNnXCI9PT1sfHxcInN5c01zZ1wiPT09bCl7dmFyIGY9ci5jb250ZW50W2xdO28uaXNPYmplY3QoZikmJiFmLmlkU2VydmVyJiYoZi5pZFNlcnZlcj1cIlwiK24uclswXSxmLnR5cGUmJlwiOFwiPT09Zi50eXBlJiZmLmRlbGV0ZWRJZENsaWVudCYmKGYuaWRTZXJ2ZXI9Zi5kZWxldGVkSWRDbGllbnQpKX19fSkpLHJ9LHIucHJvdG90eXBlLnNlcmlhbGl6ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuc2VyaWFsaXplTWFwW3RdLHI9e307Zm9yKHZhciBvIGluIG4pZS5oYXNPd25Qcm9wZXJ0eShvKSYmKHJbbltvXV09ZVtvXSk7cmV0dXJuIHJ9LHIucHJvdG90eXBlLnVuc2VyaWFsaXplPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy51bnNlcmlhbGl6ZU1hcFt0XSxyPXt9O2lmKGUpZm9yKHZhciBvIGluIG4pZS5oYXNPd25Qcm9wZXJ0eShvKSYmKHJbbltvXV09ZVtvXSk7cmV0dXJuIHJ9LGUuZXhwb3J0cz1yfSwsZnVuY3Rpb24oZSx0LG4peyFmdW5jdGlvbih0LHIpe2UuZXhwb3J0cz1yKG4oNDEpKX0odGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChyKXtpZihuW3JdKXJldHVybiBuW3JdLmV4cG9ydHM7dmFyIG89bltyXT17ZXhwb3J0czp7fSxpZDpyLGxvYWRlZDohMX07cmV0dXJuIGVbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sb2FkZWQ9ITAsby5leHBvcnRzfXZhciBuPXt9O3JldHVybiB0Lm09ZSx0LmM9bix0LnA9XCJcIix0KDApfShbZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMSksbz1uKDExKSxpPW4oMTIpO3IuanNvbj1vLHIudXBsb2FkPWksZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3ZhciB0PWUubW9kZSxuPWQscj1mLmdldEdsb2JhbCgpO3JldHVybiByLkZvcm1EYXRhfHwodD1cImlmcmFtZVwiKSxcImlmcmFtZVwiPT09dCYmKG49ZS51cGxvYWQ/bTp5KSxuZXcgbihlKX1mdW5jdGlvbiBvKGUpe3ZhciB0PWUudXBsb2FkPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiPT09KGUuaGVhZGVyc3x8Zi5vKVtcIkNvbnRlbnQtVHlwZVwiXSxuPSExO3RyeXt2YXIgbz0obG9jYXRpb24ucHJvdG9jb2wrXCIvL1wiK2xvY2F0aW9uLmhvc3QpLnRvTG93ZXJDYXNlKCksaT1mLnVybDJvcmlnaW4oZS51cmwpO249byE9PWl9Y2F0Y2goZXJyb3Ipe31yZXR1cm4gZS5jb3JzPW4sdHx8bnx8ZS5tb2RlP3IoZSk6bmV3IGQoZSl9ZnVuY3Rpb24gaShlKXt2YXIgdD1oW2VdO3QmJih0LnJlcS5kZXN0cm95KCksZGVsZXRlIGhbZV0pfWZ1bmN0aW9uIGEoZSx0KXt0PXtkYXRhOnR9O3ZhciBuPWUucmVzdWx0LmhlYWRlcnM7cmV0dXJuIG4mJih0LmhlYWRlcnM9ZS5yZXEuaGVhZGVyKG4pKSx0fWZ1bmN0aW9uIHMoZSx0LG4pe3ZhciByPWhbZV07aWYocil7XCJvbmxvYWRcIj09PXQmJnIucmVzdWx0JiYobj1hKHIsbikpLGkoZSk7dmFyIG89e3R5cGU6dCxyZXN1bHQ6bn07dihvKSxvLnN0b3BwZWR8fHJbdF0oby5yZXN1bHQpfX1mdW5jdGlvbiBjKGUsdCl7cyhlLFwib25sb2FkXCIsdCl9ZnVuY3Rpb24gdShlLHQpe3MoZSxcIm9uZXJyb3JcIix0KX1mdW5jdGlvbiBsKGUsdCl7dmFyIG49Zi5nZW5VcmxTZXAoZSk7cmV0dXJuIHQ9dHx8XCJcIixmLmlzT2JqZWN0KHQpJiYodD1mLm9iamVjdDJxdWVyeSh0KSksdCYmKGUrPW4rdCksZX1mdW5jdGlvbiBwKGUsdCl7dD10fHx7fTt2YXIgbj1mLnVuaXF1ZUlEKCkscj17cmVzdWx0OnQucmVzdWx0LG9ubG9hZDp0Lm9ubG9hZHx8Zi5mLG9uZXJyb3I6dC5vbmVycm9yfHxmLmZ9O2hbbl09cix0Lm9ubG9hZD1jLmJpbmQobnVsbCxuKSx0Lm9uZXJyb3I9dS5iaW5kKG51bGwsbiksdC5xdWVyeSYmKGU9bChlLHQucXVlcnkpKTt2YXIgaT10Lm1ldGhvZHx8XCJcIjtyZXR1cm4gaSYmIS9nZXQvaS50ZXN0KGkpfHwhdC5kYXRhfHwoZT1sKGUsdC5kYXRhKSx0LmRhdGE9bnVsbCksdC51cmw9ZSxyLnJlcT1vKHQpLG59dmFyIGY9bigyKSxkPW4oMyksbT1uKDcpLHk9bigxMCksaD17fSx2PWYuZjtwLmZpbHRlcj1mdW5jdGlvbihlKXtmLmlzRnVuY3Rpb24oZSkmJih2PWUpfSxwLmFib3J0PWZ1bmN0aW9uKGUpe3ZhciB0PWhbZV07dCYmdC5yZXEuYWJvcnQoKX0sZS5leHBvcnRzPXB9LGZ1bmN0aW9uKHQsbil7dC5leHBvcnRzPWV9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3ZhciB0PXRoaXM7ZS5vbnVwbG9hZGluZyYmdC5vbihcInVwbG9hZGluZ1wiLGUub251cGxvYWRpbmcpLGEuY2FsbCh0LGUpfXZhciBvPW4oMiksaT1uKDQpLGE9big1KSxzPWEucHJvdG90eXBlLGM9ci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzKTtjLmRvU2VuZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLm9wdGlvbnMsbj10LmhlYWRlcnMscj1lLnhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7aWYoXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI9PT1uW1wiQ29udGVudC1UeXBlXCJdKXtkZWxldGUgbltcIkNvbnRlbnQtVHlwZVwiXSxyLnVwbG9hZC5vbnByb2dyZXNzPWUub25Qcm9ncmVzcy5iaW5kKGUpLHIudXBsb2FkLm9ubG9hZD1lLm9uUHJvZ3Jlc3MuYmluZChlKTt2YXIgYT10LmRhdGE7dC5kYXRhPW5ldyB3aW5kb3cuRm9ybURhdGEsYSYmaS5nZXRLZXlzKGEsdC5wdXRGaWxlQXRFbmQpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49YVtlXTtuLnRhZ05hbWUmJlwiSU5QVVRcIj09PW4udGFnTmFtZS50b1VwcGVyQ2FzZSgpP1wiZmlsZVwiPT09bi50eXBlJiZbXS5mb3JFYWNoLmNhbGwobi5maWxlcyxmdW5jdGlvbihlKXt0LmRhdGEuYXBwZW5kKG8uZGF0YXNldChuLFwibmFtZVwiKXx8bi5uYW1lfHxlLm5hbWV8fFwiZmlsZS1cIitvLnVuaXF1ZUlEKCksZSl9KTp0LmRhdGEuYXBwZW5kKGUsbil9KX1yLm9ucmVhZHlzdGF0ZWNoYW5nZT1lLm9uU3RhdGVDaGFuZ2UuYmluZChlKSwwIT09dC50aW1lb3V0JiYoZS50aW1lcj1zZXRUaW1lb3V0KGUub25UaW1lb3V0LmJpbmQoZSksdC50aW1lb3V0KSksci5vcGVuKHQubWV0aG9kLHQudXJsLCF0LnN5bmMpLE9iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24oZSl7ci5zZXRSZXF1ZXN0SGVhZGVyKGUsbltlXSl9KSx0LmNvb2tpZSYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIHImJihyLndpdGhDcmVkZW50aWFscz0hMCksci5zZW5kKHQuZGF0YSksZS5hZnRlclNlbmQoKX0sYy5vblByb2dyZXNzPWZ1bmN0aW9uKGUpe2UubGVuZ3RoQ29tcHV0YWJsZSYmZS5sb2FkZWQ8PWUudG90YWwmJnRoaXMuZW1pdChcInVwbG9hZGluZ1wiLGUpfSxjLm9uU3RhdGVDaGFuZ2U9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS54aHI7ND09PXQucmVhZHlTdGF0ZSYmZS5vbkxvYWQoe3N0YXR1czp0LnN0YXR1cyxyZXN1bHQ6dC5yZXNwb25zZVRleHR8fFwiXCJ9KX0sYy5nZXRSZXNwb25zZUhlYWRlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnhocjtyZXR1cm4gdD90LmdldFJlc3BvbnNlSGVhZGVyKGUpOlwiXCJ9LGMuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7Y2xlYXJUaW1lb3V0KGUudGltZXIpO3RyeXtlLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2U9by5mLGUueGhyLmFib3J0KCl9Y2F0Y2goZSl7fXMuZGVzdHJveS5jYWxsKGUpfSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMiksbz17fTtvLmlzRmlsZUlucHV0PWZ1bmN0aW9uKGUpe3ZhciB0PXIuZ2V0R2xvYmFsKCk7cmV0dXJuIGUudGFnTmFtZSYmXCJJTlBVVFwiPT09ZS50YWdOYW1lLnRvVXBwZXJDYXNlKCl8fHQuQmxvYiYmZSBpbnN0YW5jZW9mIHQuQmxvYn0sby5nZXRLZXlzPWZ1bmN0aW9uKGUsdCl7dmFyIG49T2JqZWN0LmtleXMoZSk7cmV0dXJuIHQmJm4uc29ydChmdW5jdGlvbih0LG4pe3ZhciByPW8uaXNGaWxlSW5wdXQoZVt0XSksaT1vLmlzRmlsZUlucHV0KGVbbl0pO3JldHVybiByPT09aT8wOnI/MTotMX0pLG59LGUuZXhwb3J0cz1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD10aGlzO2Uub25sb2FkJiZ0Lm9uY2UoXCJsb2FkXCIsZS5vbmxvYWQpLGUub25lcnJvciYmdC5vbmNlKFwiZXJyb3JcIixlLm9uZXJyb3IpLGUub25iZWZvcmVzZW5kJiZ0Lm9uY2UoXCJiZWZvcmVzZW5kXCIsZS5vbmJlZm9yZXNlbmQpLGUub25hZnRlcnNlbmQmJnQub25jZShcImFmdGVyc2VuZFwiLGUub25hZnRlcnNlbmQpLGU9dC5vcHRpb25zPW8uZmV0Y2goe21ldGhvZDpcIkdFVFwiLHVybDpcIlwiLHN5bmM6ITEsZGF0YTpudWxsLGhlYWRlcnM6e30sY29va2llOiExLHRpbWVvdXQ6NmU0LHR5cGU6XCJ0ZXh0XCIsZm9ybTpudWxsLGlucHV0Om51bGwscHV0RmlsZUF0RW5kOiExLHByb3h5VXJsOlwiXCJ9LGUpO3ZhciBuPWUuaGVhZGVycyxyPVwiQ29udGVudC1UeXBlXCI7by5ub3RleGlzdChuW3JdKSYmKG5bcl09XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiksdC5zZW5kKCl9dmFyIG89bigyKSxpPW8uZixhPW4oNikscz1yLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGEucHJvdG90eXBlKTtzLnNlbmQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS5vcHRpb25zO3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0cnl7dHJ5e2UuZW1pdChcImJlZm9yZXNlbmRcIix0KX1jYXRjaChlcnJvcil7fWUuZG9TZW5kKCl9Y2F0Y2goZXJyb3Ipe2Uub25FcnJvcihcInNlcnZlckVycm9yXCIsXCLor7fmsYLlpLHotKU6XCIrZXJyb3IubWVzc2FnZSl9fSwwKX0scy5kb1NlbmQ9aSxzLmFmdGVyU2VuZD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe2UuZW1pdChcImFmdGVyc2VuZFwiLGUub3B0aW9ucyl9LDApfSxzLm9uTG9hZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dC5vcHRpb25zLHI9ZS5zdGF0dXMsbz1lLnJlc3VsdDtpZigwIT09KFwiXCIrcikuaW5kZXhPZihcIjJcIikpcmV0dXJuIHZvaWQgdC5vbkVycm9yKFwic2VydmVyRXJyb3JcIixcIuacjeWKoeWZqOi/lOWbnuW8guW4uOeKtuaAgVwiLHtzdGF0dXM6cixyZXN1bHQ6b30pO2lmKFwianNvblwiPT09bi50eXBlKXRyeXtvPUpTT04ucGFyc2Uobyl9Y2F0Y2goZSl7cmV0dXJuIHZvaWQgdC5vbkVycm9yKFwicGFyc2VFcnJvclwiLG8pfXQuZW1pdChcImxvYWRcIixvKX0scy5vbkVycm9yPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1vLmlzT2JqZWN0KG4pP246e307ci5jb2RlPWV8fFwiZXJyb3JcIixyLm1lc3NhZ2U9dHx8XCLlj5HnlJ/plJnor69cIix0aGlzLmVtaXQoXCJlcnJvclwiLHIpfSxzLm9uVGltZW91dD1mdW5jdGlvbigpe3RoaXMub25FcnJvcihcInRpbWVvdXRcIixcIuivt+axgui2heaXtlwiKX0scy5hYm9ydD1mdW5jdGlvbigpe3RoaXMub25FcnJvcihcImFib3J0XCIsXCLlrqLmiLfnq6/kuK3mraJcIil9LHMuaGVhZGVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoIW8uaXNBcnJheShlKSlyZXR1cm4gdC5nZXRSZXNwb25zZUhlYWRlcihlfHxcIlwiKTt2YXIgbj17fTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe25bZV09dC5oZWFkZXIoZSl9KSxufSxzLmdldFJlc3BvbnNlSGVhZGVyPWkscy5kZXN0cm95PWksZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjshZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbygpe31mdW5jdGlvbiBpKGUsdCl7Zm9yKHZhciBuPWUubGVuZ3RoO24tLTspaWYoZVtuXS5saXN0ZW5lcj09PXQpcmV0dXJuIG47cmV0dXJuLTF9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tlXS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHMoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZXx8ZSBpbnN0YW5jZW9mIFJlZ0V4cHx8ISghZXx8XCJvYmplY3RcIiE9dHlwZW9mIGUpJiZzKGUubGlzdGVuZXIpfXZhciBjPW8ucHJvdG90eXBlLHU9dC5FdmVudEVtaXR0ZXI7Yy5nZXRMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQsbixyPXRoaXMuX2dldEV2ZW50cygpO2lmKGUgaW5zdGFuY2VvZiBSZWdFeHApe3Q9e307Zm9yKG4gaW4gcilyLmhhc093blByb3BlcnR5KG4pJiZlLnRlc3QobikmJih0W25dPXJbbl0pfWVsc2UgdD1yW2VdfHwocltlXT1bXSk7cmV0dXJuIHR9LGMuZmxhdHRlbkxpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdCxuPVtdO2Zvcih0PTA7dDxlLmxlbmd0aDt0Kz0xKW4ucHVzaChlW3RdLmxpc3RlbmVyKTtyZXR1cm4gbn0sYy5nZXRMaXN0ZW5lcnNBc09iamVjdD1mdW5jdGlvbihlKXt2YXIgdCxuPXRoaXMuZ2V0TGlzdGVuZXJzKGUpO3JldHVybiBuIGluc3RhbmNlb2YgQXJyYXkmJih0PXt9LHRbZV09biksdHx8bn0sYy5hZGRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe2lmKCFzKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7dmFyIG4scj10aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KGUpLG89XCJvYmplY3RcIj09dHlwZW9mIHQ7Zm9yKG4gaW4gcilyLmhhc093blByb3BlcnR5KG4pJiZpKHJbbl0sdCk9PT0tMSYmcltuXS5wdXNoKG8/dDp7bGlzdGVuZXI6dCxvbmNlOiExfSk7cmV0dXJuIHRoaXN9LGMub249YShcImFkZExpc3RlbmVyXCIpLGMuYWRkT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIoZSx7bGlzdGVuZXI6dCxvbmNlOiEwfSl9LGMub25jZT1hKFwiYWRkT25jZUxpc3RlbmVyXCIpLGMuZGVmaW5lRXZlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0TGlzdGVuZXJzKGUpLHRoaXN9LGMuZGVmaW5lRXZlbnRzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl0aGlzLmRlZmluZUV2ZW50KGVbdF0pO3JldHVybiB0aGlzfSxjLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixvPXRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QoZSk7Zm9yKHIgaW4gbylvLmhhc093blByb3BlcnR5KHIpJiYobj1pKG9bcl0sdCksbiE9PS0xJiZvW3JdLnNwbGljZShuLDEpKTtyZXR1cm4gdGhpc30sYy5vZmY9YShcInJlbW92ZUxpc3RlbmVyXCIpLGMuYWRkTGlzdGVuZXJzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyghMSxlLHQpfSxjLnJlbW92ZUxpc3RlbmVycz1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnMoITAsZSx0KX0sYy5tYW5pcHVsYXRlTGlzdGVuZXJzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixvLGk9ZT90aGlzLnJlbW92ZUxpc3RlbmVyOnRoaXMuYWRkTGlzdGVuZXIsYT1lP3RoaXMucmVtb3ZlTGlzdGVuZXJzOnRoaXMuYWRkTGlzdGVuZXJzO2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0fHx0IGluc3RhbmNlb2YgUmVnRXhwKWZvcihyPW4ubGVuZ3RoO3ItLTspaS5jYWxsKHRoaXMsdCxuW3JdKTtlbHNlIGZvcihyIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKG89dFtyXSkmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBvP2kuY2FsbCh0aGlzLHIsbyk6YS5jYWxsKHRoaXMscixvKSk7cmV0dXJuIHRoaXN9LGMucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj10eXBlb2YgZSxyPXRoaXMuX2dldEV2ZW50cygpO2lmKFwic3RyaW5nXCI9PT1uKWRlbGV0ZSByW2VdO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIFJlZ0V4cClmb3IodCBpbiByKXIuaGFzT3duUHJvcGVydHkodCkmJmUudGVzdCh0KSYmZGVsZXRlIHJbdF07ZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzO3JldHVybiB0aGlzfSxjLnJlbW92ZUFsbExpc3RlbmVycz1hKFwicmVtb3ZlRXZlbnRcIiksYy5lbWl0RXZlbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLG8saSxhLHM9dGhpcy5nZXRMaXN0ZW5lcnNBc09iamVjdChlKTtmb3IoaSBpbiBzKWlmKHMuaGFzT3duUHJvcGVydHkoaSkpZm9yKG49c1tpXS5zbGljZSgwKSxvPTA7bzxuLmxlbmd0aDtvKyspcj1uW29dLHIub25jZT09PSEwJiZ0aGlzLnJlbW92ZUxpc3RlbmVyKGUsci5saXN0ZW5lciksYT1yLmxpc3RlbmVyLmFwcGx5KHRoaXMsdHx8W10pLGE9PT10aGlzLl9nZXRPbmNlUmV0dXJuVmFsdWUoKSYmdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHIubGlzdGVuZXIpO3JldHVybiB0aGlzfSxjLnRyaWdnZXI9YShcImVtaXRFdmVudFwiKSxjLmVtaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiB0aGlzLmVtaXRFdmVudChlLHQpfSxjLnNldE9uY2VSZXR1cm5WYWx1ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fb25jZVJldHVyblZhbHVlPWUsdGhpc30sYy5fZ2V0T25jZVJldHVyblZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaGFzT3duUHJvcGVydHkoXCJfb25jZVJldHVyblZhbHVlXCIpfHx0aGlzLl9vbmNlUmV0dXJuVmFsdWV9LGMuX2dldEV2ZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9e30pfSxvLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdC5FdmVudEVtaXR0ZXI9dSxvfSxyPWZ1bmN0aW9uKCl7cmV0dXJuIG99LmNhbGwodCxuLHQsZSksISh2b2lkIDAhPT1yJiYoZS5leHBvcnRzPXIpKX0odGhpc3x8e30pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD10aGlzO3QuaW5pdCgpLGEuY2FsbCh0LGUpfXZhciBvPW4oMiksaT1uKDQpLGE9big1KSxzPW4oOCksYz1cIk5FSi1VUExPQUQtUkVTVUxUOlwiLHU9e30sbD1hLnByb3RvdHlwZSxwPXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobCk7cC5pbml0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD1lLmRhdGE7aWYoMD09PXQuaW5kZXhPZihjKSl7dD1KU09OLnBhcnNlKHQucmVwbGFjZShjLFwiXCIpKTt2YXIgbj10LmtleSxyPXVbbl07ciYmKGRlbGV0ZSB1W25dLHQucmVzdWx0PWRlY29kZVVSSUNvbXBvbmVudCh0LnJlc3VsdHx8XCJcIiksci5vbkxvYWQodC5yZXN1bHQpKX19ZnVuY3Rpb24gdCgpe2lmKCFuKXtuPSEwO3ZhciB0PW8uZ2V0R2xvYmFsKCk7dC5wb3N0TWVzc2FnZT9vLm9uKHQsXCJtZXNzYWdlXCIsZSk6KHMuYWRkTXNnTGlzdGVuZXIoZSkscy5zdGFydFRpbWVyKCkpfX12YXIgbj0hMTtyZXR1cm4gZnVuY3Rpb24oKXt0KCl9fSgpLHAuZG9TZW5kPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3AuZm9yRWFjaChmdW5jdGlvbihlLHQpe3ZhciBuPWZbdF07bi5wYXJlbnROb2RlJiYoZS5uYW1lPW4ubmFtZSxvLmlzRnVuY3Rpb24oZS5zZXRBdHRyaWJ1dGUpJiZlLnNldEF0dHJpYnV0ZShcImZvcm1cIixuLmdldEF0dHJpYnV0ZShcImZvcm1cIikpLG4ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZSxuKSl9KX12YXIgdD10aGlzLG49dC5vcHRpb25zLHI9dC5rZXk9XCJ6b3JvLWFqYXgtdXBsb2FkLWlmcmFtZS1cIitvLnVuaXF1ZUlEKCk7dVtyXT10O3ZhciBhPXQuZm9ybT1vLmh0bWwybm9kZSgnPGZvcm0gc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCI+PC9mb3JtPicpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSksYS50YXJnZXQ9cixhLm1ldGhvZD1cIlBPU1RcIixhLmVuY3R5cGU9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsYS5lbmNvZGluZz1cIm11bHRpcGFydC9mb3JtLWRhdGFcIjt2YXIgcz1uLnVybCxjPW8uZ2VuVXJsU2VwKHMpO2EuYWN0aW9uPXMrYytcIl9wcm94eV89Zm9ybVwiO3ZhciBsPW4uZGF0YSxwPVtdLGY9W107bCYmaS5nZXRLZXlzKGwsbi5wdXRGaWxlQXRFbmQpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9bFtlXTtpZih0LnRhZ05hbWUmJlwiSU5QVVRcIj09PXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpKXtpZihcImZpbGVcIj09PXQudHlwZSl7dmFyIG49dCxyPW4uY2xvbmVOb2RlKCEwKTtuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHIsbik7dmFyIGk9by5kYXRhc2V0KG4sXCJuYW1lXCIpO2kmJihuLm5hbWU9aSksYS5hcHBlbmRDaGlsZChuKSxvLmlzRnVuY3Rpb24obi5zZXRBdHRyaWJ1dGUpJiYobi5zZXRBdHRyaWJ1dGUoXCJmb3JtXCIsXCJcIiksbi5yZW1vdmVBdHRyaWJ1dGUoXCJmb3JtXCIpKSxwLnB1c2godCksZi5wdXNoKHIpfX1lbHNle3ZhciBzPW8uaHRtbDJub2RlKCc8aW5wdXQgdHlwZT1cImhpZGRlblwiLz4nKTtzLm5hbWU9ZSxzLnZhbHVlPXQsYS5hcHBlbmRDaGlsZChzKX19KTt2YXIgZD10LmlmcmFtZT1vLmNyZWF0ZUlmcmFtZSh7bmFtZTpyLG9ubG9hZDpmdW5jdGlvbigpe3JldHVybiB0LmFib3J0ZWQ/dm9pZCBlKCk6KG8ub24oZCxcImxvYWRcIix0LmNoZWNrUmVzdWx0LmJpbmQodCkpLGEuc3VibWl0KCksZSgpLHZvaWQgdC5hZnRlclNlbmQoKSl9fSl9LHAuY2hlY2tSZXN1bHQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG49dGhpczt0cnl7aWYoZT1uLmlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LmJvZHksdD0oZS5pbm5lclRleHR8fGUudGV4dENvbnRlbnR8fFwiXCIpLnRyaW0oKSx0LmluZGV4T2YoYyk+PTB8fGUuaW5uZXJIVE1MLmluZGV4T2YoYyk+PTApcmV0dXJufWNhdGNoKGVycm9yKXtyZXR1cm59bi5vbkxvYWQodCl9LHAub25Mb2FkPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7bC5vbkxvYWQuY2FsbCh0LHtzdGF0dXM6MjAwLHJlc3VsdDplfSksby5yZW1vdmUodC5mb3JtKSxvLnJlbW92ZSh0LmlmcmFtZSksbC5kZXN0cm95LmNhbGwodCl9LHAuZGVzdHJveT1mdW5jdGlvbigpe28ucmVtb3ZlKHRoaXMuaWZyYW1lKSxvLnJlbW92ZSh0aGlzLmZvcm0pfSxwLmFib3J0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmFib3J0ZWQ9ITAsZGVsZXRlIHVbZS5rZXldLGwuYWJvcnQuY2FsbChlKX0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19dmFyIG89big5KSxpPXIobyksYT1pW1wiZGVmYXVsdFwiXS5nZXRHbG9iYWwoKSxzPXt9LGM9YS5uYW1lfHxcIl9wYXJlbnRcIix1PVtdLGw9XCJNU0d8XCIscD1bXTtzLmFkZE1zZ0xpc3RlbmVyPWZ1bmN0aW9uKGUpe3UucHVzaChlKX07dmFyIGY9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj11Lmxlbmd0aDt0PG47dCsrKXRyeXt1W3RdLmNhbGwobnVsbCxlKX1jYXRjaChlKXt9fSxkPWZ1bmN0aW9uKCl7dmFyIGU9L14oW1xcd10rPzpcXC9cXC8uKj8oPz1cXC98JCkpL2k7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiB0PXR8fFwiXCIsZS50ZXN0KHQpP1JlZ0V4cC4kMTpcIipcIn19KCksbT1mdW5jdGlvbigpe3ZhciBlPXVuZXNjYXBlKGEubmFtZXx8XCJcIikudHJpbSgpO2lmKGUmJjA9PT1lLmluZGV4T2YobCkpe2EubmFtZT1cIlwiO3ZhciB0PWlbXCJkZWZhdWx0XCJdLnN0cmluZzJvYmplY3QoZS5yZXBsYWNlKGwsXCJcIiksXCJ8XCIpLG49KHQub3JpZ2lufHxcIlwiKS50b0xvd2VyQ2FzZSgpO24mJlwiKlwiIT09biYmMCE9PWxvY2F0aW9uLmhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKG4pfHxmKHtkYXRhOkpTT04ucGFyc2UodC5kYXRhfHxcIm51bGxcIiksc291cmNlOmEuZnJhbWVzW3Quc2VsZl18fHQuc2VsZixvcmlnaW46ZCh0LnJlZnx8ZG9jdW1lbnQucmVmZXJyZXIpfSl9fSx5PWZ1bmN0aW9uKCl7dmFyIGUsdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihlW25dPT09dClyZXR1cm4hMDtyZXR1cm4hMX07cmV0dXJuIGZ1bmN0aW9uKCl7aWYocC5sZW5ndGgpe2U9W107Zm9yKHZhciBuLHI9cC5sZW5ndGgtMTtyPj0wO3ItLSluPXBbcl0sdChlLG4udyl8fChlLnB1c2gobi53KSxwLnNwbGljZShyLDEpLG4udy5uYW1lPW4uZCk7ZT1udWxsfX19KCksaD1zLnN0YXJ0VGltZXI9ZnVuY3Rpb24oKXt2YXIgZT0hMTtyZXR1cm4gZnVuY3Rpb24oKXtlfHwoZT0hMCxhLnBvc3RNZXNzYWdlfHwoc2V0SW50ZXJ2YWwoeSwxMDApLHNldEludGVydmFsKG0sMjApKSl9fSgpO3MucG9zdE1lc3NhZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O2lmKGlbXCJkZWZhdWx0XCJdLmZpbGxVbmRlZih0LHtvcmlnaW46XCIqXCIsc291cmNlOmN9KSxhLnBvc3RNZXNzYWdlKXt2YXIgbj10LmRhdGE7YS5Gb3JtRGF0YXx8KG49SlNPTi5zdHJpbmdpZnkobikpLGUucG9zdE1lc3NhZ2Uobix0Lm9yaWdpbil9ZWxzZXtpZihoKCksaVtcImRlZmF1bHRcIl0uaXNPYmplY3QodCkpe3ZhciByPXt9O3Iub3JpZ2luPXQub3JpZ2lufHxcIlwiLHIucmVmPWxvY2F0aW9uLmhyZWYsci5zZWxmPXQuc291cmNlLHIuZGF0YT1KU09OLnN0cmluZ2lmeSh0LmRhdGEpLHQ9bCtpW1wiZGVmYXVsdFwiXS5vYmplY3Qyc3RyaW5nKHIsXCJ8XCIsITApfXAudW5zaGlmdCh7dzplLGQ6ZXNjYXBlKHQpfSl9fSxlLmV4cG9ydHM9c30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1uKDIpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD10aGlzO3QuaW5pdCgpLGEuY2FsbCh0LGUpfXZhciBvPW4oMiksaT1uKDgpLGE9big1KSxzPXt9LGM9YS5wcm90b3R5cGUsdT1yLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGMpO3UuaW5pdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9ZS5kYXRhO2lmKDA9PT10LmluZGV4T2Yobikpe3Q9SlNPTi5wYXJzZSh0LnJlcGxhY2UobixcIlwiKSk7dmFyIHI9dC5rZXksbz1zW3JdO28mJihkZWxldGUgc1tyXSx0LnJlc3VsdD1kZWNvZGVVUklDb21wb25lbnQodC5yZXN1bHR8fFwiXCIpLG8ub25Mb2FkKHQpKX19ZnVuY3Rpb24gdCgpe2lmKCFyKXtyPSEwO3ZhciB0PW8uZ2V0R2xvYmFsKCk7dC5wb3N0TWVzc2FnZT9vLm9uKHQsXCJtZXNzYWdlXCIsZSk6aS5hZGRNc2dMaXN0ZW5lcihlKX19dmFyIG49XCJORUotQUpBWC1EQVRBOlwiLHI9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7dCgpfX0oKSx1LmRvU2VuZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLm9wdGlvbnMsbj1vLnVybDJvcmlnaW4odC51cmwpLHI9dC5wcm94eVVybHx8bitcIi9yZXMvbmVqX3Byb3h5X2ZyYW1lLmh0bWxcIixhPXNbcl07aWYoby5pc0FycmF5KGEpKXJldHVybiB2b2lkIGEucHVzaChlLmRvU2VuZC5iaW5kKGUsdCkpO2lmKCFhKXJldHVybiBzW3JdPVtlLmRvU2VuZC5iaW5kKGUsdCldLHZvaWQgby5jcmVhdGVJZnJhbWUoe3NyYzpyLG9ubG9hZDpmdW5jdGlvbihlKXt2YXIgdD1zW3JdO3Nbcl09by50YXJnZXQoZSkuY29udGVudFdpbmRvdyx0LmZvckVhY2goZnVuY3Rpb24oZSl7dHJ5e2UoKX1jYXRjaChlKXt9fSl9fSk7aWYoIWUuYWJvcnRlZCl7dmFyIGM9ZS5rZXk9by51bmlxdWVJRCgpO3NbY109ZTt2YXIgdT1vLmZldGNoKHttZXRob2Q6XCJHRVRcIix1cmw6XCJcIixkYXRhOm51bGwsaGVhZGVyczp7fSx0aW1lb3V0OjB9LHQpO3Uua2V5PWMsaS5wb3N0TWVzc2FnZShhLHtkYXRhOnV9KSxlLmFmdGVyU2VuZCgpfX0sdS5hYm9ydD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5hYm9ydGVkPSEwLGRlbGV0ZSBzW2Uua2V5XSxjLmFib3J0LmNhbGwoZSl9LGUuZXhwb3J0cz1yfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyKSxvPW4oMSksaT1mdW5jdGlvbigpe3ZhciBlPS9qc29uL2ksdD0vcG9zdC9pO3JldHVybiBmdW5jdGlvbihuLGkpe2k9aXx8e307dmFyIGE9aS5kYXRhPWkuZGF0YXx8e30scz1pLmhlYWRlcnM9aS5oZWFkZXJzfHx7fSxjPXIuY2hlY2tXaXRoRGVmYXVsdChzLFwiQWNjZXB0XCIsXCJhcHBsaWNhdGlvbi9qc29uXCIpLHU9ci5jaGVja1dpdGhEZWZhdWx0KHMsXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL2pzb25cIik7cmV0dXJuIGUudGVzdChjKSYmKGkudHlwZT1cImpzb25cIiksdC50ZXN0KGkubWV0aG9kKSYmZS50ZXN0KHUpJiYoaS5kYXRhPUpTT04uc3RyaW5naWZ5KGEpKSxvKG4saSl9fSgpO2UuZXhwb3J0cz1pfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigxKSxvPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubWV0aG9kPVwiUE9TVFwiLHQuaGVhZGVycz10LmhlYWRlcnN8fHt9LHQuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIix0LnRpbWVvdXQ9MCx0LnR5cGU9dC50eXBlfHxcImpzb25cIixyKGUsdCl9O2UuZXhwb3J0cz1vfV0pfSl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe3ZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyhmdW5jdGlvbihtb2R1bGUpey8qISBTb2NrZXQuSU8uanMgYnVpbGQ6MC45LjExLCBkZXZlbG9wbWVudC4gQ29weXJpZ2h0KGMpIDIwMTEgTGVhcm5Cb29zdCA8ZGV2QGxlYXJuYm9vc3QuY29tPiBNSVQgTGljZW5zZWQgKi9cclxudmFyIGlvPW1vZHVsZS5leHBvcnRzO3dpbmRvdy5pbz9tb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1pbz13aW5kb3cuaW8pOndpbmRvdy5pbz1pbyxmdW5jdGlvbigpe2lmKGZ1bmN0aW9uKGUsdCl7dmFyIG49ZTtuLnZlcnNpb249XCIwLjkuMTFcIixuLnByb3RvY29sPTEsbi50cmFuc3BvcnRzPVtdLG4uaj1bXSxuLnNvY2tldHM9e30sbi5jb25uZWN0PWZ1bmN0aW9uKGUscil7dmFyIG8saSxhPW4udXRpbC5wYXJzZVVyaShlKTt0JiZ0LmxvY2F0aW9uJiYoYS5wcm90b2NvbD1hLnByb3RvY29sfHx0LmxvY2F0aW9uLnByb3RvY29sLnNsaWNlKDAsLTEpLGEuaG9zdD1hLmhvc3R8fCh0LmRvY3VtZW50P3QuZG9jdW1lbnQuZG9tYWluOnQubG9jYXRpb24uaG9zdG5hbWUpLGEucG9ydD1hLnBvcnR8fHQubG9jYXRpb24ucG9ydCksbz1uLnV0aWwudW5pcXVlVXJpKGEpO3ZhciBzPXtob3N0OmEuaG9zdCxzZWN1cmU6XCJodHRwc1wiPT1hLnByb3RvY29sLHBvcnQ6YS5wb3J0fHwoXCJodHRwc1wiPT1hLnByb3RvY29sPzQ0Mzo4MCkscXVlcnk6YS5xdWVyeXx8XCJcIn07cmV0dXJuIG4udXRpbC5tZXJnZShzLHIpLCFzW1wiZm9yY2UgbmV3IGNvbm5lY3Rpb25cIl0mJm4uc29ja2V0c1tvXXx8KGk9bmV3IG4uU29ja2V0KHMpKSwhc1tcImZvcmNlIG5ldyBjb25uZWN0aW9uXCJdJiZpJiYobi5zb2NrZXRzW29dPWkpLGk9aXx8bi5zb2NrZXRzW29dLGkub2YoYS5wYXRoLmxlbmd0aD4xP2EucGF0aDpcIlwiKX19KG1vZHVsZS5leHBvcnRzLHdpbmRvdyksZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnV0aWw9e30scj0vXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShbXjpcXC8/Iy5dKyk6KT8oPzpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS8sbz1bXCJzb3VyY2VcIixcInByb3RvY29sXCIsXCJhdXRob3JpdHlcIixcInVzZXJJbmZvXCIsXCJ1c2VyXCIsXCJwYXNzd29yZFwiLFwiaG9zdFwiLFwicG9ydFwiLFwicmVsYXRpdmVcIixcInBhdGhcIixcImRpcmVjdG9yeVwiLFwiZmlsZVwiLFwicXVlcnlcIixcImFuY2hvclwiXTtuLnBhcnNlVXJpPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1yLmV4ZWMoZXx8XCJcIiksbj17fSxpPTE0O2ktLTspbltvW2ldXT10W2ldfHxcIlwiO3JldHVybiBufSxuLnVuaXF1ZVVyaT1mdW5jdGlvbihlKXt2YXIgbj1lLnByb3RvY29sLHI9ZS5ob3N0LG89ZS5wb3J0O3JldHVyblwiZG9jdW1lbnRcImluIHQ/KHI9cnx8ZG9jdW1lbnQuZG9tYWluLG89b3x8KFwiaHR0cHNcIj09biYmXCJodHRwczpcIiE9PWRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sPzQ0Mzpkb2N1bWVudC5sb2NhdGlvbi5wb3J0KSk6KHI9cnx8XCJsb2NhbGhvc3RcIixvfHxcImh0dHBzXCIhPW58fChvPTQ0MykpLChufHxcImh0dHBcIikrXCI6Ly9cIityK1wiOlwiKyhvfHw4MCl9LG4ucXVlcnk9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uLmNodW5rUXVlcnkoZXx8XCJcIiksbz1bXTtuLm1lcmdlKHIsbi5jaHVua1F1ZXJ5KHR8fFwiXCIpKTtmb3IodmFyIGkgaW4gcilyLmhhc093blByb3BlcnR5KGkpJiZvLnB1c2goaStcIj1cIityW2ldKTtyZXR1cm4gby5sZW5ndGg/XCI/XCIrby5qb2luKFwiJlwiKTpcIlwifSxuLmNodW5rUXVlcnk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49e30scj1lLnNwbGl0KFwiJlwiKSxvPTAsaT1yLmxlbmd0aDtvPGk7KytvKXQ9cltvXS5zcGxpdChcIj1cIiksdFswXSYmKG5bdFswXV09dFsxXSk7cmV0dXJuIG59O3ZhciBpPSExO24ubG9hZD1mdW5jdGlvbihlKXtyZXR1cm5cImRvY3VtZW50XCJpbiB0JiZcImNvbXBsZXRlXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlfHxpP2UoKTp2b2lkIG4ub24odCxcImxvYWRcIixlLCExKX0sbi5vbj1mdW5jdGlvbihlLHQsbixyKXtlLmF0dGFjaEV2ZW50P2UuYXR0YWNoRXZlbnQoXCJvblwiK3Qsbik6ZS5hZGRFdmVudExpc3RlbmVyJiZlLmFkZEV2ZW50TGlzdGVuZXIodCxuLHIpfSxuLnJlcXVlc3Q9ZnVuY3Rpb24oZSl7aWYoZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhEb21haW5SZXF1ZXN0JiYhbi51YS5oYXNDT1JTKXJldHVybiBuZXcgWERvbWFpblJlcXVlc3Q7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiYoIWV8fG4udWEuaGFzQ09SUykpcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdDtpZighZSl0cnl7cmV0dXJuIG5ldyh3aW5kb3dbW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKV0pKFwiTWljcm9zb2Z0LlhNTEhUVFBcIil9Y2F0Y2goZSl7fXJldHVybiBudWxsfSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZuLmxvYWQoZnVuY3Rpb24oKXtpPSEwfSksbi5kZWZlcj1mdW5jdGlvbihlKXtyZXR1cm4gbi51YS53ZWJraXQmJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzP3ZvaWQgbi5sb2FkKGZ1bmN0aW9uKCl7c2V0VGltZW91dChlLDEwMCl9KTplKCl9LG4ubWVyZ2U9ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIGksYT1vfHxbXSxzPVwidW5kZWZpbmVkXCI9PXR5cGVvZiByPzI6cjtmb3IoaSBpbiB0KXQuaGFzT3duUHJvcGVydHkoaSkmJm4uaW5kZXhPZihhLGkpPDAmJihcIm9iamVjdFwiPT10eXBlb2YgZVtpXSYmcz9uLm1lcmdlKGVbaV0sdFtpXSxzLTEsYSk6KGVbaV09dFtpXSxhLnB1c2godFtpXSkpKTtyZXR1cm4gZX0sbi5taXhpbj1mdW5jdGlvbihlLHQpe24ubWVyZ2UoZS5wcm90b3R5cGUsdC5wcm90b3R5cGUpfSxuLmluaGVyaXQ9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7fW4ucHJvdG90eXBlPXQucHJvdG90eXBlLGUucHJvdG90eXBlPW5ldyBufSxuLmlzQXJyYXk9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSxuLmludGVyc2VjdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1bXSxvPWUubGVuZ3RoPnQubGVuZ3RoP2U6dCxpPWUubGVuZ3RoPnQubGVuZ3RoP3Q6ZSxhPTAscz1pLmxlbmd0aDthPHM7YSsrKX5uLmluZGV4T2YobyxpW2FdKSYmci5wdXNoKGlbYV0pO3JldHVybiByfSxuLmluZGV4T2Y9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1lLmxlbmd0aCxuPW48MD9uK3I8MD8wOm4rcjpufHwwO248ciYmZVtuXSE9PXQ7bisrKTtyZXR1cm4gcjw9bj8tMTpufSxuLnRvQXJyYXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MCxyPWUubGVuZ3RoO248cjtuKyspdC5wdXNoKGVbbl0pO3JldHVybiB0fSxuLnVhPXt9LG4udWEuaGFzQ09SUz1cInVuZGVmaW5lZFwiIT10eXBlb2YgWE1MSHR0cFJlcXVlc3QmJmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPW5ldyBYTUxIdHRwUmVxdWVzdH1jYXRjaChlKXtyZXR1cm4hMX1yZXR1cm4gdm9pZCAwIT1lLndpdGhDcmVkZW50aWFsc30oKSxuLnVhLndlYmtpdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiYvd2Via2l0L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxuLnVhLmlEZXZpY2U9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmL2lQYWR8aVBob25lfGlQb2QvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpfShcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW86bW9kdWxlLmV4cG9ydHMsd2luZG93KSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oKXt9ZS5FdmVudEVtaXR0ZXI9bixuLnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLG4pe3JldHVybiB0aGlzLiRldmVudHN8fCh0aGlzLiRldmVudHM9e30pLHRoaXMuJGV2ZW50c1tlXT90LnV0aWwuaXNBcnJheSh0aGlzLiRldmVudHNbZV0pP3RoaXMuJGV2ZW50c1tlXS5wdXNoKG4pOnRoaXMuJGV2ZW50c1tlXT1bdGhpcy4kZXZlbnRzW2VdLG5dOnRoaXMuJGV2ZW50c1tlXT1uLHRoaXN9LG4ucHJvdG90eXBlLmFkZExpc3RlbmVyPW4ucHJvdG90eXBlLm9uLG4ucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7ci5yZW1vdmVMaXN0ZW5lcihlLG4pLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciByPXRoaXM7cmV0dXJuIG4ubGlzdGVuZXI9dCx0aGlzLm9uKGUsbiksdGhpc30sbi5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oZSxuKXtpZih0aGlzLiRldmVudHMmJnRoaXMuJGV2ZW50c1tlXSl7dmFyIHI9dGhpcy4kZXZlbnRzW2VdO2lmKHQudXRpbC5pc0FycmF5KHIpKXtmb3IodmFyIG89LTEsaT0wLGE9ci5sZW5ndGg7aTxhO2krKylpZihyW2ldPT09bnx8cltpXS5saXN0ZW5lciYmcltpXS5saXN0ZW5lcj09PW4pe289aTticmVha31pZihvPDApcmV0dXJuIHRoaXM7ci5zcGxpY2UobywxKSxyLmxlbmd0aHx8ZGVsZXRlIHRoaXMuJGV2ZW50c1tlXX1lbHNlKHI9PT1ufHxyLmxpc3RlbmVyJiZyLmxpc3RlbmVyPT09bikmJmRlbGV0ZSB0aGlzLiRldmVudHNbZV19cmV0dXJuIHRoaXN9LG4ucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT8odGhpcy4kZXZlbnRzPXt9LHRoaXMpOih0aGlzLiRldmVudHMmJnRoaXMuJGV2ZW50c1tlXSYmKHRoaXMuJGV2ZW50c1tlXT1udWxsKSx0aGlzKX0sbi5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLiRldmVudHN8fCh0aGlzLiRldmVudHM9e30pLHRoaXMuJGV2ZW50c1tlXXx8KHRoaXMuJGV2ZW50c1tlXT1bXSksdC51dGlsLmlzQXJyYXkodGhpcy4kZXZlbnRzW2VdKXx8KHRoaXMuJGV2ZW50c1tlXT1bdGhpcy4kZXZlbnRzW2VdXSksdGhpcy4kZXZlbnRzW2VdfSxuLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe2lmKCF0aGlzLiRldmVudHMpcmV0dXJuITE7dmFyIG49dGhpcy4kZXZlbnRzW2VdO2lmKCFuKXJldHVybiExO3ZhciByPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKW4uYXBwbHkodGhpcyxyKTtlbHNle2lmKCF0LnV0aWwuaXNBcnJheShuKSlyZXR1cm4hMTtmb3IodmFyIG89bi5zbGljZSgpLGk9MCxhPW8ubGVuZ3RoO2k8YTtpKyspb1tpXS5hcHBseSh0aGlzLHIpfXJldHVybiEwfX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGlvP2lvOm1vZHVsZS5leHBvcnRzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUucGFyZW50LmV4cG9ydHMpLGZ1bmN0aW9uKGV4cG9ydHMsbmF0aXZlSlNPTil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZihlKXtyZXR1cm4gZTwxMD9cIjBcIitlOmV9ZnVuY3Rpb24gZGF0ZShlLHQpe3JldHVybiBpc0Zpbml0ZShlLnZhbHVlT2YoKSk/ZS5nZXRVVENGdWxsWWVhcigpK1wiLVwiK2YoZS5nZXRVVENNb250aCgpKzEpK1wiLVwiK2YoZS5nZXRVVENEYXRlKCkpK1wiVFwiK2YoZS5nZXRVVENIb3VycygpKStcIjpcIitmKGUuZ2V0VVRDTWludXRlcygpKStcIjpcIitmKGUuZ2V0VVRDU2Vjb25kcygpKStcIlpcIjpudWxsfWZ1bmN0aW9uIHF1b3RlKGUpe3JldHVybiBlc2NhcGFibGUubGFzdEluZGV4PTAsZXNjYXBhYmxlLnRlc3QoZSk/J1wiJytlLnJlcGxhY2UoZXNjYXBhYmxlLGZ1bmN0aW9uKGUpe3ZhciB0PW1ldGFbZV07cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDpcIlxcXFx1XCIrKFwiMDAwMFwiK2UuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KX0pKydcIic6J1wiJytlKydcIid9ZnVuY3Rpb24gc3RyKGUsdCl7dmFyIG4scixvLGksYSxzPWdhcCxjPXRbZV07c3dpdGNoKGMgaW5zdGFuY2VvZiBEYXRlJiYoYz1kYXRlKGUpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiByZXAmJihjPXJlcC5jYWxsKHQsZSxjKSksdHlwZW9mIGMpe2Nhc2VcInN0cmluZ1wiOnJldHVybiBxdW90ZShjKTtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoYyk/U3RyaW5nKGMpOlwibnVsbFwiO2Nhc2VcImJvb2xlYW5cIjpjYXNlXCJudWxsXCI6cmV0dXJuIFN0cmluZyhjKTtjYXNlXCJvYmplY3RcIjppZighYylyZXR1cm5cIm51bGxcIjtpZihnYXArPWluZGVudCxhPVtdLFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoYykpe2ZvcihpPWMubGVuZ3RoLG49MDtuPGk7bis9MSlhW25dPXN0cihuLGMpfHxcIm51bGxcIjtyZXR1cm4gbz0wPT09YS5sZW5ndGg/XCJbXVwiOmdhcD9cIltcXG5cIitnYXArYS5qb2luKFwiLFxcblwiK2dhcCkrXCJcXG5cIitzK1wiXVwiOlwiW1wiK2Euam9pbihcIixcIikrXCJdXCIsZ2FwPXMsb31pZihyZXAmJlwib2JqZWN0XCI9PXR5cGVvZiByZXApZm9yKGk9cmVwLmxlbmd0aCxuPTA7bjxpO24rPTEpXCJzdHJpbmdcIj09dHlwZW9mIHJlcFtuXSYmKHI9cmVwW25dLG89c3RyKHIsYyksbyYmYS5wdXNoKHF1b3RlKHIpKyhnYXA/XCI6IFwiOlwiOlwiKStvKSk7ZWxzZSBmb3IociBpbiBjKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLHIpJiYobz1zdHIocixjKSxvJiZhLnB1c2gocXVvdGUocikrKGdhcD9cIjogXCI6XCI6XCIpK28pKTtyZXR1cm4gbz0wPT09YS5sZW5ndGg/XCJ7fVwiOmdhcD9cIntcXG5cIitnYXArYS5qb2luKFwiLFxcblwiK2dhcCkrXCJcXG5cIitzK1wifVwiOlwie1wiK2Euam9pbihcIixcIikrXCJ9XCIsZ2FwPXMsb319aWYobmF0aXZlSlNPTiYmbmF0aXZlSlNPTi5wYXJzZSlyZXR1cm4gZXhwb3J0cy5KU09OPXtwYXJzZTpuYXRpdmVKU09OLnBhcnNlLHN0cmluZ2lmeTpuYXRpdmVKU09OLnN0cmluZ2lmeX07dmFyIEpTT049ZXhwb3J0cy5KU09OPXt9LGN4PS9bXFx1MDAwMFxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLGVzY2FwYWJsZT0vW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHg5ZlxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLGdhcCxpbmRlbnQsbWV0YT17XCJcXGJcIjpcIlxcXFxiXCIsXCJcXHRcIjpcIlxcXFx0XCIsXCJcXG5cIjpcIlxcXFxuXCIsXCJcXGZcIjpcIlxcXFxmXCIsXCJcXHJcIjpcIlxcXFxyXCIsJ1wiJzonXFxcXFwiJyxcIlxcXFxcIjpcIlxcXFxcXFxcXCJ9LHJlcDtKU09OLnN0cmluZ2lmeT1mdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoZ2FwPVwiXCIsaW5kZW50PVwiXCIsXCJudW1iZXJcIj09dHlwZW9mIG4pZm9yKHI9MDtyPG47cis9MSlpbmRlbnQrPVwiIFwiO2Vsc2VcInN0cmluZ1wiPT10eXBlb2YgbiYmKGluZGVudD1uKTtpZihyZXA9dCx0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiYoXCJvYmplY3RcIiE9dHlwZW9mIHR8fFwibnVtYmVyXCIhPXR5cGVvZiB0Lmxlbmd0aCkpdGhyb3cgbmV3IEVycm9yKFwiSlNPTi5zdHJpbmdpZnlcIik7cmV0dXJuIHN0cihcIlwiLHtcIlwiOmV9KX0sSlNPTi5wYXJzZT1mdW5jdGlvbih0ZXh0LHJldml2ZXIpe2Z1bmN0aW9uIHdhbGsoZSx0KXt2YXIgbixyLG89ZVt0XTtpZihvJiZcIm9iamVjdFwiPT10eXBlb2Ygbylmb3IobiBpbiBvKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLG4pJiYocj13YWxrKG8sbiksdm9pZCAwIT09cj9vW25dPXI6ZGVsZXRlIG9bbl0pO3JldHVybiByZXZpdmVyLmNhbGwoZSx0LG8pfXZhciBqO2lmKHRleHQ9U3RyaW5nKHRleHQpLGN4Lmxhc3RJbmRleD0wLGN4LnRlc3QodGV4dCkmJih0ZXh0PXRleHQucmVwbGFjZShjeCxmdW5jdGlvbihlKXtyZXR1cm5cIlxcXFx1XCIrKFwiMDAwMFwiK2UuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KX0pKSwvXltcXF0sOnt9XFxzXSokLy50ZXN0KHRleHQucmVwbGFjZSgvXFxcXCg/OltcIlxcXFxcXC9iZm5ydF18dVswLTlhLWZBLUZdezR9KS9nLFwiQFwiKS5yZXBsYWNlKC9cIlteXCJcXFxcXFxuXFxyXSpcInx0cnVlfGZhbHNlfG51bGx8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZyxcIl1cIikucmVwbGFjZSgvKD86Xnw6fCwpKD86XFxzKlxcWykrL2csXCJcIikpKXJldHVybiBqPWV2YWwoXCIoXCIrdGV4dCtcIilcIiksXCJmdW5jdGlvblwiPT10eXBlb2YgcmV2aXZlcj93YWxrKHtcIlwiOmp9LFwiXCIpOmo7dGhyb3cgbmV3IFN5bnRheEVycm9yKFwiSlNPTi5wYXJzZVwiKX19KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUuZXhwb3J0cyxcInVuZGVmaW5lZFwiIT10eXBlb2YgSlNPTj9KU09OOnZvaWQgMCksZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnBhcnNlcj17fSxyPW4ucGFja2V0cz1bXCJkaXNjb25uZWN0XCIsXCJjb25uZWN0XCIsXCJoZWFydGJlYXRcIixcIm1lc3NhZ2VcIixcImpzb25cIixcImV2ZW50XCIsXCJhY2tcIixcImVycm9yXCIsXCJub29wXCJdLG89bi5yZWFzb25zPVtcInRyYW5zcG9ydCBub3Qgc3VwcG9ydGVkXCIsXCJjbGllbnQgbm90IGhhbmRzaGFrZW5cIixcInVuYXV0aG9yaXplZFwiXSxpPW4uYWR2aWNlPVtcInJlY29ubmVjdFwiXSxhPXQuSlNPTixzPXQudXRpbC5pbmRleE9mO24uZW5jb2RlUGFja2V0PWZ1bmN0aW9uKGUpe3ZhciB0PXMocixlLnR5cGUpLG49ZS5pZHx8XCJcIixjPWUuZW5kcG9pbnR8fFwiXCIsdT1lLmFjayxsPW51bGw7c3dpdGNoKGUudHlwZSl7Y2FzZVwiZXJyb3JcIjp2YXIgcD1lLnJlYXNvbj9zKG8sZS5yZWFzb24pOlwiXCIsZj1lLmFkdmljZT9zKGksZS5hZHZpY2UpOlwiXCI7XCJcIj09PXAmJlwiXCI9PT1mfHwobD1wKyhcIlwiIT09Zj9cIitcIitmOlwiXCIpKTticmVhaztjYXNlXCJtZXNzYWdlXCI6XCJcIiE9PWUuZGF0YSYmKGw9ZS5kYXRhKTticmVhaztjYXNlXCJldmVudFwiOnZhciBkPXtuYW1lOmUubmFtZX07ZS5hcmdzJiZlLmFyZ3MubGVuZ3RoJiYoZC5hcmdzPWUuYXJncyksbD1hLnN0cmluZ2lmeShkKTticmVhaztjYXNlXCJqc29uXCI6bD1hLnN0cmluZ2lmeShlLmRhdGEpO2JyZWFrO2Nhc2VcImNvbm5lY3RcIjplLnFzJiYobD1lLnFzKTticmVhaztjYXNlXCJhY2tcIjpsPWUuYWNrSWQrKGUuYXJncyYmZS5hcmdzLmxlbmd0aD9cIitcIithLnN0cmluZ2lmeShlLmFyZ3MpOlwiXCIpfXZhciBtPVt0LG4rKFwiZGF0YVwiPT11P1wiK1wiOlwiXCIpLGNdO3JldHVybiBudWxsIT09bCYmdm9pZCAwIT09bCYmbS5wdXNoKGwpLG0uam9pbihcIjpcIil9LG4uZW5jb2RlUGF5bG9hZD1mdW5jdGlvbihlKXt2YXIgdD1cIlwiO2lmKDE9PWUubGVuZ3RoKXJldHVybiBlWzBdO2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKyl7dmFyIG89ZVtuXTt0Kz1cIu+/vVwiK28ubGVuZ3RoK1wi77+9XCIrZVtuXX1yZXR1cm4gdH07dmFyIGM9LyhbXjpdKyk6KFswLTldKyk/KFxcKyk/OihbXjpdKyk/Oj8oW1xcc1xcU10qKT8vO24uZGVjb2RlUGFja2V0PWZ1bmN0aW9uKGUpe3ZhciB0PWUubWF0Y2goYyk7aWYoIXQpcmV0dXJue307dmFyIG49dFsyXXx8XCJcIixlPXRbNV18fFwiXCIscz17dHlwZTpyW3RbMV1dLGVuZHBvaW50OnRbNF18fFwiXCJ9O3N3aXRjaChuJiYocy5pZD1uLHRbM10/cy5hY2s9XCJkYXRhXCI6cy5hY2s9ITApLHMudHlwZSl7Y2FzZVwiZXJyb3JcIjp2YXIgdD1lLnNwbGl0KFwiK1wiKTtzLnJlYXNvbj1vW3RbMF1dfHxcIlwiLHMuYWR2aWNlPWlbdFsxXV18fFwiXCI7YnJlYWs7Y2FzZVwibWVzc2FnZVwiOnMuZGF0YT1lfHxcIlwiO2JyZWFrO2Nhc2VcImV2ZW50XCI6dHJ5e3ZhciB1PWEucGFyc2UoZSk7cy5uYW1lPXUubmFtZSxzLmFyZ3M9dS5hcmdzfWNhdGNoKGUpe31zLmFyZ3M9cy5hcmdzfHxbXTticmVhaztjYXNlXCJqc29uXCI6dHJ5e3MuZGF0YT1hLnBhcnNlKGUpfWNhdGNoKGUpe31icmVhaztjYXNlXCJjb25uZWN0XCI6cy5xcz1lfHxcIlwiO2JyZWFrO2Nhc2VcImFja1wiOnZhciB0PWUubWF0Y2goL14oWzAtOV0rKShcXCspPyguKikvKTtpZih0JiYocy5hY2tJZD10WzFdLHMuYXJncz1bXSx0WzNdKSl0cnl7cy5hcmdzPXRbM10/YS5wYXJzZSh0WzNdKTpbXX1jYXRjaChlKXt9YnJlYWs7Y2FzZVwiZGlzY29ubmVjdFwiOmNhc2VcImhlYXJ0YmVhdFwiOn1yZXR1cm4gc30sbi5kZWNvZGVQYXlsb2FkPWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj1lO3I8dC5sZW5ndGg7cisrKXtpZihcIu+/vVwiPT10LmNoYXJBdChyKSlyZXR1cm4gbjtuKyt9cmV0dXJuIG59O2lmKFwi77+9XCI9PWUuY2hhckF0KDApKXtmb3IodmFyIHI9W10sbz0xLGk9XCJcIjtvPGUubGVuZ3RoO28rKylpZihcIu+/vVwiPT1lLmNoYXJBdChvKSl7dmFyIGE9ZS5zdWJzdHIobysxKS5zdWJzdHIoMCxpKTtpZihcIu+/vVwiIT1lLmNoYXJBdChvKzErTnVtYmVyKGkpKSYmbysxK051bWJlcihpKSE9ZS5sZW5ndGgpe3ZhciBzPU51bWJlcihpKTtsPXQobytzKzEsZSksYT1lLnN1YnN0cihvKzEpLnN1YnN0cigwLHMrbCksbys9bH1yLnB1c2gobi5kZWNvZGVQYWNrZXQoYSkpLG8rPU51bWJlcihpKSsxLGk9XCJcIn1lbHNlIGkrPWUuY2hhckF0KG8pO3JldHVybiByfXJldHVybltuLmRlY29kZVBhY2tldChlKV19fShcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW86bW9kdWxlLmV4cG9ydHMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGlvP2lvOm1vZHVsZS5wYXJlbnQuZXhwb3J0cyksZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCl7dGhpcy5zb2NrZXQ9ZSx0aGlzLnNlc3NpZD10fWUuVHJhbnNwb3J0PW4sdC51dGlsLm1peGluKG4sdC5FdmVudEVtaXR0ZXIpLG4ucHJvdG90eXBlLmhlYXJ0YmVhdHM9ZnVuY3Rpb24oKXtyZXR1cm4hMH0sbi5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKGUpe2lmKHRoaXMhPT10aGlzLnNvY2tldC50cmFuc3BvcnQpcmV0dXJuIHRoaXM7aWYodGhpcy5jbGVhckNsb3NlVGltZW91dCgpLCh0aGlzLnNvY2tldC5jb25uZWN0ZWR8fHRoaXMuc29ja2V0LmNvbm5lY3Rpbmd8fHRoaXMuc29ja2V0LnJlY29ubmVjdGluZykmJnRoaXMuc2V0Q2xvc2VUaW1lb3V0KCksXCJcIiE9PWUpe3ZhciBuPXQucGFyc2VyLmRlY29kZVBheWxvYWQoZSk7aWYobiYmbi5sZW5ndGgpZm9yKHZhciByPTAsbz1uLmxlbmd0aDtyPG87cisrKXRoaXMub25QYWNrZXQobltyXSl9cmV0dXJuIHRoaXN9LG4ucHJvdG90eXBlLm9uUGFja2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNvY2tldC5zZXRIZWFydGJlYXRUaW1lb3V0KCksXCJoZWFydGJlYXRcIj09ZS50eXBlP3RoaXMub25IZWFydGJlYXQoKTooXCJjb25uZWN0XCI9PWUudHlwZSYmXCJcIj09ZS5lbmRwb2ludCYmdGhpcy5vbkNvbm5lY3QoKSxcImVycm9yXCI9PWUudHlwZSYmXCJyZWNvbm5lY3RcIj09ZS5hZHZpY2UmJih0aGlzLmlzT3Blbj0hMSksdGhpcy5zb2NrZXQub25QYWNrZXQoZSksdGhpcyl9LG4ucHJvdG90eXBlLnNldENsb3NlVGltZW91dD1mdW5jdGlvbigpe2lmKCF0aGlzLmNsb3NlVGltZW91dCl7dmFyIGU9dGhpczt0aGlzLmNsb3NlVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5vbkRpc2Nvbm5lY3QoKX0sdGhpcy5zb2NrZXQuY2xvc2VUaW1lb3V0KX19LG4ucHJvdG90eXBlLm9uRGlzY29ubmVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzT3BlbiYmdGhpcy5jbG9zZSgpLHRoaXMuY2xlYXJUaW1lb3V0cygpLHRoaXMuc29ja2V0LnRyYW5zcG9ydD09PXRoaXM/dGhpcy5zb2NrZXQub25EaXNjb25uZWN0KCk6dGhpcy5zb2NrZXQuc2V0QnVmZmVyKCExKSx0aGlzfSxuLnByb3RvdHlwZS5vbkNvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb2NrZXQub25Db25uZWN0KCksdGhpc30sbi5wcm90b3R5cGUuY2xlYXJDbG9zZVRpbWVvdXQ9ZnVuY3Rpb24oKXt0aGlzLmNsb3NlVGltZW91dCYmKGNsZWFyVGltZW91dCh0aGlzLmNsb3NlVGltZW91dCksdGhpcy5jbG9zZVRpbWVvdXQ9bnVsbCl9LG4ucHJvdG90eXBlLmNsZWFyVGltZW91dHM9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCksdGhpcy5yZW9wZW5UaW1lb3V0JiZjbGVhclRpbWVvdXQodGhpcy5yZW9wZW5UaW1lb3V0KX0sbi5wcm90b3R5cGUucGFja2V0PWZ1bmN0aW9uKGUpe3RoaXMuc2VuZCh0LnBhcnNlci5lbmNvZGVQYWNrZXQoZSkpfSxuLnByb3RvdHlwZS5vbkhlYXJ0YmVhdD1mdW5jdGlvbihlKXt0aGlzLnBhY2tldCh7dHlwZTpcImhlYXJ0YmVhdFwifSl9LG4ucHJvdG90eXBlLm9uT3Blbj1mdW5jdGlvbigpe3RoaXMuaXNPcGVuPSEwLHRoaXMuY2xlYXJDbG9zZVRpbWVvdXQoKSx0aGlzLnNvY2tldC5vbk9wZW4oKX0sbi5wcm90b3R5cGUub25DbG9zZT1mdW5jdGlvbigpe3RoaXMuaXNPcGVuPSExLHRoaXMuc29ja2V0LnRyYW5zcG9ydD09PXRoaXM/dGhpcy5zb2NrZXQub25DbG9zZSgpOnRoaXMuc29ja2V0LnNldEJ1ZmZlcighMSksdGhpcy5vbkRpc2Nvbm5lY3QoKX0sbi5wcm90b3R5cGUucHJlcGFyZVVybD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuc29ja2V0Lm9wdGlvbnM7cmV0dXJuIHRoaXMuc2NoZW1lKCkrXCI6Ly9cIitlLmhvc3QrXCI6XCIrZS5wb3J0K1wiL1wiK2UucmVzb3VyY2UrXCIvXCIrdC5wcm90b2NvbCtcIi9cIit0aGlzLm5hbWUrXCIvXCIrdGhpcy5zZXNzaWR9LG4ucHJvdG90eXBlLnJlYWR5PWZ1bmN0aW9uKGUsdCl7dC5jYWxsKHRoaXMpfX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGlvP2lvOm1vZHVsZS5leHBvcnRzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUucGFyZW50LmV4cG9ydHMpLGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUpe2lmKHRoaXMub3B0aW9ucz17cG9ydDo4MCxzZWN1cmU6ITEsZG9jdW1lbnQ6XCJkb2N1bWVudFwiaW4gbiYmZG9jdW1lbnQscmVzb3VyY2U6XCJzb2NrZXQuaW9cIix0cmFuc3BvcnRzOmUudHJhbnNwb3J0c3x8dC50cmFuc3BvcnRzLFwiY29ubmVjdCB0aW1lb3V0XCI6MWU0LFwidHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIjohMCxyZWNvbm5lY3Q6ITAsXCJyZWNvbm5lY3Rpb24gZGVsYXlcIjo1MDAsXCJyZWNvbm5lY3Rpb24gbGltaXRcIjoxLzAsXCJyZW9wZW4gZGVsYXlcIjozZTMsXCJtYXggcmVjb25uZWN0aW9uIGF0dGVtcHRzXCI6MTAsXCJzeW5jIGRpc2Nvbm5lY3Qgb24gdW5sb2FkXCI6ITEsXCJhdXRvIGNvbm5lY3RcIjohMCxcImZsYXNoIHBvbGljeSBwb3J0XCI6MTA4NDMsbWFudWFsRmx1c2g6ITF9LHQudXRpbC5tZXJnZSh0aGlzLm9wdGlvbnMsZSksdGhpcy5jb25uZWN0ZWQ9ITEsdGhpcy5vcGVuPSExLHRoaXMuY29ubmVjdGluZz0hMSx0aGlzLnJlY29ubmVjdGluZz0hMSx0aGlzLm5hbWVzcGFjZXM9e30sdGhpcy5idWZmZXI9W10sdGhpcy5kb0J1ZmZlcj0hMSx0aGlzLm9wdGlvbnNbXCJzeW5jIGRpc2Nvbm5lY3Qgb24gdW5sb2FkXCJdJiYoIXRoaXMuaXNYRG9tYWluKCl8fHQudXRpbC51YS5oYXNDT1JTKSl7dmFyIHI9dGhpczt0LnV0aWwub24obixcImJlZm9yZXVubG9hZFwiLGZ1bmN0aW9uKCl7ci5kaXNjb25uZWN0U3luYygpfSwhMSl9dGhpcy5vcHRpb25zW1wiYXV0byBjb25uZWN0XCJdJiZ0aGlzLmNvbm5lY3QoKX1mdW5jdGlvbiBvKCl7fWUuU29ja2V0PXIsdC51dGlsLm1peGluKHIsdC5FdmVudEVtaXR0ZXIpLHIucHJvdG90eXBlLm9mPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm5hbWVzcGFjZXNbZV18fCh0aGlzLm5hbWVzcGFjZXNbZV09bmV3IHQuU29ja2V0TmFtZXNwYWNlKHRoaXMsZSksXCJcIiE9PWUmJnRoaXMubmFtZXNwYWNlc1tlXS5wYWNrZXQoe3R5cGU6XCJjb25uZWN0XCJ9KSksdGhpcy5uYW1lc3BhY2VzW2VdfSxyLnByb3RvdHlwZS5wdWJsaXNoPWZ1bmN0aW9uKCl7dGhpcy5lbWl0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgZTtmb3IodmFyIHQgaW4gdGhpcy5uYW1lc3BhY2VzKXRoaXMubmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eSh0KSYmKGU9dGhpcy5vZih0KSxlLiRlbWl0LmFwcGx5KGUsYXJndW1lbnRzKSl9LHIucHJvdG90eXBlLmhhbmRzaGFrZT1mdW5jdGlvbihlKXtmdW5jdGlvbiBuKHQpe3QgaW5zdGFuY2VvZiBFcnJvcj8oci5jb25uZWN0aW5nPSExLHIub25FcnJvcih0Lm1lc3NhZ2UpKTplLmFwcGx5KG51bGwsdC5zcGxpdChcIjpcIikpfXZhciByPXRoaXMsaT10aGlzLm9wdGlvbnMsYT1bXCJodHRwXCIrKGkuc2VjdXJlP1wic1wiOlwiXCIpK1wiOi9cIixpLmhvc3QrXCI6XCIraS5wb3J0LGkucmVzb3VyY2UsdC5wcm90b2NvbCx0LnV0aWwucXVlcnkodGhpcy5vcHRpb25zLnF1ZXJ5LFwidD1cIisgK25ldyBEYXRlKV0uam9pbihcIi9cIik7aWYodGhpcy5pc1hEb21haW4oKSYmIXQudXRpbC51YS5oYXNDT1JTKXt2YXIgcz1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXSxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7Yy5zcmM9YStcIiZqc29ucD1cIit0LmoubGVuZ3RoLGMub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7XCJsb2FkZWRcIj09dGhpcy5yZWFkeVN0YXRlJiZjLnBhcmVudE5vZGUmJihjLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyksci5jb25uZWN0aW5nPSExLCFyLnJlY29ubmVjdGluZyYmci5vbkVycm9yKFwiU2VydmVyIGRvd24gb3IgcG9ydCBub3Qgb3BlblwiKSxyLnB1Ymxpc2goXCJoYW5kc2hha2VfZmFpbGVkXCIpKX0scy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjLHMpLHQuai5wdXNoKGZ1bmN0aW9uKGUpe24oZSksYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpfSl9ZWxzZXt2YXIgdT10LnV0aWwucmVxdWVzdCgpO3Uub3BlbihcIkdFVFwiLGEsITApLHRoaXMuaXNYRG9tYWluKCkmJih1LndpdGhDcmVkZW50aWFscz0hMCksdS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXs0PT11LnJlYWR5U3RhdGUmJih1Lm9ucmVhZHlzdGF0ZWNoYW5nZT1vLDIwMD09dS5zdGF0dXM/bih1LnJlc3BvbnNlVGV4dCk6NDAzPT11LnN0YXR1cz8oci5vbkVycm9yKHUucmVzcG9uc2VUZXh0KSxyLnB1Ymxpc2goXCJoYW5kc2hha2VfZmFpbGVkXCIpKTooci5jb25uZWN0aW5nPSExLCFyLnJlY29ubmVjdGluZyYmci5vbkVycm9yKHUucmVzcG9uc2VUZXh0KSxyLnB1Ymxpc2goXCJoYW5kc2hha2VfZmFpbGVkXCIpKSl9LHUuc2VuZChudWxsKX19LHIucHJvdG90eXBlLmNvbm5lY3Q9ZnVuY3Rpb24oZSl7aWYodGhpcy5jb25uZWN0aW5nKXJldHVybiB0aGlzO3ZhciBuPXRoaXM7cmV0dXJuIG4uY29ubmVjdGluZz0hMCx0aGlzLmhhbmRzaGFrZShmdW5jdGlvbihyLG8saSxhKXtuLnNlc3Npb25pZD1yLG4uY2xvc2VUaW1lb3V0PTFlMyppLG4uaGVhcnRiZWF0VGltZW91dD0xZTMqbyxuLnRyYW5zcG9ydHN8fChuLnRyYW5zcG9ydHM9bi5vcmlnVHJhbnNwb3J0cz1hP3QudXRpbC5pbnRlcnNlY3QoYS5zcGxpdChcIixcIiksbi5vcHRpb25zLnRyYW5zcG9ydHMpOm4ub3B0aW9ucy50cmFuc3BvcnRzKSxuLnNldEhlYXJ0YmVhdFRpbWVvdXQoKSxuLm9uY2UoXCJjb25uZWN0XCIsZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQobi5jb25uZWN0VGltZW91dFRpbWVyKSxuLmNvbm5lY3RUaW1lb3V0VGltZXI9bnVsbCxlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlKCl9KSxuLmRvQ29ubmVjdCgpfSksdGhpc30sci5wcm90b3R5cGUuZG9Db25uZWN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gZS50cmFuc3BvcnQmJmUudHJhbnNwb3J0LmNsZWFyVGltZW91dHMoKSxlLnRyYW5zcG9ydD1lLmdldFRyYW5zcG9ydChlLnRyYW5zcG9ydHMpLGUudHJhbnNwb3J0P3ZvaWQgZS50cmFuc3BvcnQucmVhZHkoZSxmdW5jdGlvbigpe2UuY29ubmVjdGluZz0hMCxlLnB1Ymxpc2goXCJjb25uZWN0aW5nXCIsZS50cmFuc3BvcnQubmFtZSksZS50cmFuc3BvcnQub3BlbigpLGUub3B0aW9uc1tcImNvbm5lY3QgdGltZW91dFwiXSYmKGUuY29ubmVjdFRpbWVvdXRUaW1lciYmY2xlYXJUaW1lb3V0KGUuY29ubmVjdFRpbWVvdXRUaW1lciksZS5jb25uZWN0VGltZW91dFRpbWVyPXNldFRpbWVvdXQoZS50cnlOZXh0VHJhbnNwb3J0LmJpbmQoZSksZS5vcHRpb25zW1wiY29ubmVjdCB0aW1lb3V0XCJdKSl9KTplLnB1Ymxpc2goXCJjb25uZWN0X2ZhaWxlZFwiKX0sci5wcm90b3R5cGUuZ2V0VHJhbnNwb3J0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgbixyPWV8fHRoaXMudHJhbnNwb3J0cyxvPTA7bj1yW29dO28rKylpZih0LlRyYW5zcG9ydFtuXSYmdC5UcmFuc3BvcnRbbl0uY2hlY2sodGhpcykmJighdGhpcy5pc1hEb21haW4oKXx8dC5UcmFuc3BvcnRbbl0ueGRvbWFpbkNoZWNrKHRoaXMpKSl7dmFyIGk9bmV3IHQuVHJhbnNwb3J0W25dKHRoaXMsdGhpcy5zZXNzaW9uaWQpO3JldHVybiBpfXJldHVybiBudWxsfSxyLnByb3RvdHlwZS50cnlOZXh0VHJhbnNwb3J0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighZS5jb25uZWN0ZWQmJihlLmNvbm5lY3Rpbmc9ITEsZS5vcHRpb25zW1widHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIl0pKXtmb3IodmFyIHQ9ZS50cmFuc3BvcnRzO3QubGVuZ3RoPjAmJnQuc3BsaWNlKDAsMSlbMF0hPWUudHJhbnNwb3J0Lm5hbWU7KTt0Lmxlbmd0aD9lLmRvQ29ubmVjdCgpOmUucHVibGlzaChcImNvbm5lY3RfZmFpbGVkXCIpfX0sci5wcm90b3R5cGUuc2V0SGVhcnRiZWF0VGltZW91dD1mdW5jdGlvbigpe2lmKGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lciksIXRoaXMudHJhbnNwb3J0fHx0aGlzLnRyYW5zcG9ydC5oZWFydGJlYXRzKCkpe3ZhciBlPXRoaXM7dGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2UudHJhbnNwb3J0JiZlLnRyYW5zcG9ydC5vbkNsb3NlKCl9LHRoaXMuaGVhcnRiZWF0VGltZW91dCl9fSxyLnByb3RvdHlwZS5wYWNrZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY29ubmVjdGVkJiYhdGhpcy5kb0J1ZmZlcj90aGlzLnRyYW5zcG9ydC5wYWNrZXQoZSk6dGhpcy5idWZmZXIucHVzaChlKSx0aGlzfSxyLnByb3RvdHlwZS5zZXRCdWZmZXI9ZnVuY3Rpb24oZSl7dGhpcy5kb0J1ZmZlcj1lLCFlJiZ0aGlzLmNvbm5lY3RlZCYmdGhpcy5idWZmZXIubGVuZ3RoJiYodGhpcy5vcHRpb25zLm1hbnVhbEZsdXNofHx0aGlzLmZsdXNoQnVmZmVyKCkpfSxyLnByb3RvdHlwZS5mbHVzaEJ1ZmZlcj1mdW5jdGlvbigpe3RoaXMudHJhbnNwb3J0LnBheWxvYWQodGhpcy5idWZmZXIpLHRoaXMuYnVmZmVyPVtdfSxyLnByb3RvdHlwZS5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuY29ubmVjdGVkfHx0aGlzLmNvbm5lY3RpbmcpJiYodGhpcy5vcGVuJiZ0aGlzLm9mKFwiXCIpLnBhY2tldCh7dHlwZTpcImRpc2Nvbm5lY3RcIn0pLHRoaXMub25EaXNjb25uZWN0KFwiYm9vdGVkXCIpKSx0aGlzfSxyLnByb3RvdHlwZS5kaXNjb25uZWN0U3luYz1mdW5jdGlvbigpe3ZhciBlPXQudXRpbC5yZXF1ZXN0KCksbj1bXCJodHRwXCIrKHRoaXMub3B0aW9ucy5zZWN1cmU/XCJzXCI6XCJcIikrXCI6L1wiLHRoaXMub3B0aW9ucy5ob3N0K1wiOlwiK3RoaXMub3B0aW9ucy5wb3J0LHRoaXMub3B0aW9ucy5yZXNvdXJjZSx0LnByb3RvY29sLFwiXCIsdGhpcy5zZXNzaW9uaWRdLmpvaW4oXCIvXCIpK1wiLz9kaXNjb25uZWN0PTFcIjtlLm9wZW4oXCJHRVRcIixuLCExKSxlLnNlbmQobnVsbCksdGhpcy5vbkRpc2Nvbm5lY3QoXCJib290ZWRcIil9LHIucHJvdG90eXBlLmlzWERvbWFpbj1mdW5jdGlvbigpe3ZhciBlPW4ubG9jYXRpb24ucG9ydHx8KFwiaHR0cHM6XCI9PW4ubG9jYXRpb24ucHJvdG9jb2w/NDQzOjgwKTtyZXR1cm4gdGhpcy5vcHRpb25zLmhvc3QhPT1uLmxvY2F0aW9uLmhvc3RuYW1lfHx0aGlzLm9wdGlvbnMucG9ydCE9ZX0sci5wcm90b3R5cGUub25Db25uZWN0PWZ1bmN0aW9uKCl7dGhpcy5jb25uZWN0ZWR8fCh0aGlzLmNvbm5lY3RlZD0hMCx0aGlzLmNvbm5lY3Rpbmc9ITEsdGhpcy5kb0J1ZmZlcnx8dGhpcy5zZXRCdWZmZXIoITEpLHRoaXMuZW1pdChcImNvbm5lY3RcIikpfSxyLnByb3RvdHlwZS5vbk9wZW49ZnVuY3Rpb24oKXt0aGlzLm9wZW49ITB9LHIucHJvdG90eXBlLm9uQ2xvc2U9ZnVuY3Rpb24oKXt0aGlzLm9wZW49ITEsY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKX0sci5wcm90b3R5cGUub25QYWNrZXQ9ZnVuY3Rpb24oZSl7dGhpcy5vZihlLmVuZHBvaW50KS5vblBhY2tldChlKX0sci5wcm90b3R5cGUub25FcnJvcj1mdW5jdGlvbihlKXtlJiZlLmFkdmljZSYmXCJyZWNvbm5lY3RcIj09PWUuYWR2aWNlJiYodGhpcy5jb25uZWN0ZWR8fHRoaXMuY29ubmVjdGluZykmJih0aGlzLmRpc2Nvbm5lY3QoKSx0aGlzLm9wdGlvbnMucmVjb25uZWN0JiZ0aGlzLnJlY29ubmVjdCgpKSx0aGlzLnB1Ymxpc2goXCJlcnJvclwiLGUmJmUucmVhc29uP2UucmVhc29uOmUpfSxyLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jb25uZWN0ZWQsbj10aGlzLmNvbm5lY3Rpbmc7dGhpcy5jb25uZWN0ZWQ9ITEsdGhpcy5jb25uZWN0aW5nPSExLHRoaXMub3Blbj0hMSwodHx8bikmJih0aGlzLnRyYW5zcG9ydC5jbG9zZSgpLHRoaXMudHJhbnNwb3J0LmNsZWFyVGltZW91dHMoKSx0JiYodGhpcy5wdWJsaXNoKFwiZGlzY29ubmVjdFwiLGUpLFwiYm9vdGVkXCIhPWUmJnRoaXMub3B0aW9ucy5yZWNvbm5lY3QmJiF0aGlzLnJlY29ubmVjdGluZyYmdGhpcy5yZWNvbm5lY3QoKSksbiYmdGhpcy50cnlOZXh0VHJhbnNwb3J0KCkpfSxyLnByb3RvdHlwZS5yZWNvbm5lY3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7aWYobi5jb25uZWN0ZWQpe2Zvcih2YXIgZSBpbiBuLm5hbWVzcGFjZXMpbi5uYW1lc3BhY2VzLmhhc093blByb3BlcnR5KGUpJiZcIlwiIT09ZSYmbi5uYW1lc3BhY2VzW2VdLnBhY2tldCh7dHlwZTpcImNvbm5lY3RcIn0pO24ucHVibGlzaChcInJlY29ubmVjdFwiLG4udHJhbnNwb3J0Lm5hbWUsbi5yZWNvbm5lY3Rpb25BdHRlbXB0cyl9Y2xlYXJUaW1lb3V0KG4ucmVjb25uZWN0aW9uVGltZXIpLG4ucmVtb3ZlTGlzdGVuZXIoXCJjb25uZWN0X2ZhaWxlZFwiLHQpLG4ucmVtb3ZlTGlzdGVuZXIoXCJjb25uZWN0XCIsdCksbi5yZWNvbm5lY3Rpbmc9ITEsZGVsZXRlIG4ucmVjb25uZWN0aW9uQXR0ZW1wdHMsZGVsZXRlIG4ucmVjb25uZWN0aW9uRGVsYXksZGVsZXRlIG4ucmVjb25uZWN0aW9uVGltZXIsZGVsZXRlIG4ucmVkb1RyYW5zcG9ydHMsbi5vcHRpb25zW1widHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIl09b31mdW5jdGlvbiB0KCl7aWYobi5yZWNvbm5lY3RpbmcpcmV0dXJuIG4uY29ubmVjdGVkP2UoKTpuLmNvbm5lY3RpbmcmJm4ucmVjb25uZWN0aW5nP24ucmVjb25uZWN0aW9uVGltZXI9c2V0VGltZW91dCh0LDFlMyk6dm9pZChuLnJlY29ubmVjdGlvbkF0dGVtcHRzKys+PXI/bi5yZWRvVHJhbnNwb3J0cz8obi5wdWJsaXNoKFwicmVjb25uZWN0X2ZhaWxlZFwiKSxlKCkpOihuLm9uKFwiY29ubmVjdF9mYWlsZWRcIix0KSxuLm9wdGlvbnNbXCJ0cnkgbXVsdGlwbGUgdHJhbnNwb3J0c1wiXT0hMCxuLnRyYW5zcG9ydHM9bi5vcmlnVHJhbnNwb3J0cyxuLnRyYW5zcG9ydD1uLmdldFRyYW5zcG9ydCgpLG4ucmVkb1RyYW5zcG9ydHM9ITAsbi5jb25uZWN0KCkpOihuLnJlY29ubmVjdGlvbkRlbGF5PGkmJihuLnJlY29ubmVjdGlvbkRlbGF5Kj0yKSxuLmNvbm5lY3QoKSxuLnB1Ymxpc2goXCJyZWNvbm5lY3RpbmdcIixuLnJlY29ubmVjdGlvbkRlbGF5LG4ucmVjb25uZWN0aW9uQXR0ZW1wdHMpLG4ucmVjb25uZWN0aW9uVGltZXI9c2V0VGltZW91dCh0LG4ucmVjb25uZWN0aW9uRGVsYXkpKSl9dGhpcy5yZWNvbm5lY3Rpbmc9ITAsdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cz0wLHRoaXMucmVjb25uZWN0aW9uRGVsYXk9dGhpcy5vcHRpb25zW1wicmVjb25uZWN0aW9uIGRlbGF5XCJdO3ZhciBuPXRoaXMscj10aGlzLm9wdGlvbnNbXCJtYXggcmVjb25uZWN0aW9uIGF0dGVtcHRzXCJdLG89dGhpcy5vcHRpb25zW1widHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIl0saT10aGlzLm9wdGlvbnNbXCJyZWNvbm5lY3Rpb24gbGltaXRcIl07dGhpcy5vcHRpb25zW1widHJ5IG11bHRpcGxlIHRyYW5zcG9ydHNcIl09ITEsdGhpcy5yZWNvbm5lY3Rpb25UaW1lcj1zZXRUaW1lb3V0KHQsdGhpcy5yZWNvbm5lY3Rpb25EZWxheSksdGhpcy5vbihcImNvbm5lY3RcIix0KX19KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUuZXhwb3J0cyxcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW86bW9kdWxlLnBhcmVudC5leHBvcnRzLHdpbmRvdyksZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCl7dGhpcy5zb2NrZXQ9ZSx0aGlzLm5hbWU9dHx8XCJcIix0aGlzLmZsYWdzPXt9LHRoaXMuanNvbj1uZXcgcih0aGlzLFwianNvblwiKSx0aGlzLmFja1BhY2tldHM9MCx0aGlzLmFja3M9e319ZnVuY3Rpb24gcihlLHQpe3RoaXMubmFtZXNwYWNlPWUsdGhpcy5uYW1lPXR9ZS5Tb2NrZXROYW1lc3BhY2U9bix0LnV0aWwubWl4aW4obix0LkV2ZW50RW1pdHRlciksbi5wcm90b3R5cGUuJGVtaXQ9dC5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQsbi5wcm90b3R5cGUub2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb2NrZXQub2YuYXBwbHkodGhpcy5zb2NrZXQsYXJndW1lbnRzKX0sbi5wcm90b3R5cGUucGFja2V0PWZ1bmN0aW9uKGUpe3JldHVybiBlLmVuZHBvaW50PXRoaXMubmFtZSx0aGlzLnNvY2tldC5wYWNrZXQoZSksdGhpcy5mbGFncz17fSx0aGlzfSxuLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGUsdCl7dmFyIG49e3R5cGU6dGhpcy5mbGFncy5qc29uP1wianNvblwiOlwibWVzc2FnZVwiLGRhdGE6ZX07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG4uaWQ9Kyt0aGlzLmFja1BhY2tldHMsbi5hY2s9ITAsdGhpcy5hY2tzW24uaWRdPXQpLHRoaXMucGFja2V0KG4pfSxuLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxuPXRbdC5sZW5ndGgtMV0scj17dHlwZTpcImV2ZW50XCIsbmFtZTplfTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYoci5pZD0rK3RoaXMuYWNrUGFja2V0cyxyLmFjaz1cImRhdGFcIix0aGlzLmFja3Nbci5pZF09bix0PXQuc2xpY2UoMCx0Lmxlbmd0aC0xKSksci5hcmdzPXQsdGhpcy5wYWNrZXQocil9LG4ucHJvdG90eXBlLmRpc2Nvbm5lY3Q9ZnVuY3Rpb24oKXtyZXR1cm5cIlwiPT09dGhpcy5uYW1lP3RoaXMuc29ja2V0LmRpc2Nvbm5lY3QoKToodGhpcy5wYWNrZXQoe3R5cGU6XCJkaXNjb25uZWN0XCJ9KSx0aGlzLiRlbWl0KFwiZGlzY29ubmVjdFwiKSksdGhpc30sbi5wcm90b3R5cGUub25QYWNrZXQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe3IucGFja2V0KHt0eXBlOlwiYWNrXCIsYXJnczp0LnV0aWwudG9BcnJheShhcmd1bWVudHMpLGFja0lkOmUuaWR9KX12YXIgcj10aGlzO3N3aXRjaChlLnR5cGUpe2Nhc2VcImNvbm5lY3RcIjp0aGlzLiRlbWl0KFwiY29ubmVjdFwiKTticmVhaztjYXNlXCJkaXNjb25uZWN0XCI6XCJcIj09PXRoaXMubmFtZT90aGlzLnNvY2tldC5vbkRpc2Nvbm5lY3QoZS5yZWFzb258fFwiYm9vdGVkXCIpOnRoaXMuJGVtaXQoXCJkaXNjb25uZWN0XCIsZS5yZWFzb24pO2JyZWFrO2Nhc2VcIm1lc3NhZ2VcIjpjYXNlXCJqc29uXCI6dmFyIG89W1wibWVzc2FnZVwiLGUuZGF0YV07XCJkYXRhXCI9PWUuYWNrP28ucHVzaChuKTplLmFjayYmdGhpcy5wYWNrZXQoe3R5cGU6XCJhY2tcIixhY2tJZDplLmlkfSksdGhpcy4kZW1pdC5hcHBseSh0aGlzLG8pO2JyZWFrO2Nhc2VcImV2ZW50XCI6dmFyIG89W2UubmFtZV0uY29uY2F0KGUuYXJncyk7XCJkYXRhXCI9PWUuYWNrJiZvLnB1c2gobiksdGhpcy4kZW1pdC5hcHBseSh0aGlzLG8pO2JyZWFrO2Nhc2VcImFja1wiOnRoaXMuYWNrc1tlLmFja0lkXSYmKHRoaXMuYWNrc1tlLmFja0lkXS5hcHBseSh0aGlzLGUuYXJncyksZGVsZXRlIHRoaXMuYWNrc1tlLmFja0lkXSk7YnJlYWs7Y2FzZVwiZXJyb3JcIjplLmFkdmljZT90aGlzLnNvY2tldC5vbkVycm9yKGUpOlwidW5hdXRob3JpemVkXCI9PWUucmVhc29uP3RoaXMuJGVtaXQoXCJjb25uZWN0X2ZhaWxlZFwiLGUucmVhc29uKTp0aGlzLiRlbWl0KFwiZXJyb3JcIixlLnJlYXNvbil9fSxyLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKCl7dGhpcy5uYW1lc3BhY2UuZmxhZ3NbdGhpcy5uYW1lXT0hMCx0aGlzLm5hbWVzcGFjZS5zZW5kLmFwcGx5KHRoaXMubmFtZXNwYWNlLGFyZ3VtZW50cyl9LHIucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oKXt0aGlzLm5hbWVzcGFjZS5mbGFnc1t0aGlzLm5hbWVdPSEwLHRoaXMubmFtZXNwYWNlLmVtaXQuYXBwbHkodGhpcy5uYW1lc3BhY2UsYXJndW1lbnRzKX19KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUuZXhwb3J0cyxcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW86bW9kdWxlLnBhcmVudC5leHBvcnRzKSxmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlKXt0LlRyYW5zcG9ydC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZS53ZWJzb2NrZXQ9cix0LnV0aWwuaW5oZXJpdChyLHQuVHJhbnNwb3J0KSxyLnByb3RvdHlwZS5uYW1lPVwid2Vic29ja2V0XCIsci5wcm90b3R5cGUub3Blbj1mdW5jdGlvbigpe3ZhciBlLHI9dC51dGlsLnF1ZXJ5KHRoaXMuc29ja2V0Lm9wdGlvbnMucXVlcnkpLG89dGhpcztyZXR1cm4gZXx8KGU9bi5Nb3pXZWJTb2NrZXR8fG4uV2ViU29ja2V0KSx0aGlzLndlYnNvY2tldD1uZXcgZSh0aGlzLnByZXBhcmVVcmwoKStyKSx0aGlzLndlYnNvY2tldC5vbm9wZW49ZnVuY3Rpb24oKXtvLm9uT3BlbigpLG8uc29ja2V0LnNldEJ1ZmZlcighMSl9LHRoaXMud2Vic29ja2V0Lm9ubWVzc2FnZT1mdW5jdGlvbihlKXtvLm9uRGF0YShlLmRhdGEpfSx0aGlzLndlYnNvY2tldC5vbmNsb3NlPWZ1bmN0aW9uKCl7by5zb2NrZXQuc2V0QnVmZmVyKCEwKSxvLm9uQ2xvc2UoKX0sdGhpcy53ZWJzb2NrZXQub25lcnJvcj1mdW5jdGlvbihlKXtvLm9uRXJyb3IoZSl9LHRoaXN9LHQudXRpbC51YS5pRGV2aWNlP3IucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe3Qud2Vic29ja2V0LnNlbmQoZSl9LDApLHRoaXN9OnIucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMud2Vic29ja2V0LnNlbmQoZSksdGhpc30sci5wcm90b3R5cGUucGF5bG9hZD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoO3Q8bjt0KyspdGhpcy5wYWNrZXQoZVt0XSk7cmV0dXJuIHRoaXN9LHIucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMud2Vic29ja2V0LmNsb3NlKCksdGhpc30sci5wcm90b3R5cGUub25FcnJvcj1mdW5jdGlvbihlKXt0aGlzLnNvY2tldC5vbkVycm9yKGUpfSxyLnByb3RvdHlwZS5zY2hlbWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb2NrZXQub3B0aW9ucy5zZWN1cmU/XCJ3c3NcIjpcIndzXCJ9LHIuY2hlY2s9ZnVuY3Rpb24oKXtyZXR1cm5cIldlYlNvY2tldFwiaW4gbiYmIShcIl9fYWRkVGFza1wiaW4gV2ViU29ja2V0KXx8XCJNb3pXZWJTb2NrZXRcImluIG59LHIueGRvbWFpbkNoZWNrPWZ1bmN0aW9uKCl7cmV0dXJuITB9LHQudHJhbnNwb3J0cy5wdXNoKFwid2Vic29ja2V0XCIpfShcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW8uVHJhbnNwb3J0Om1vZHVsZS5leHBvcnRzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUucGFyZW50LmV4cG9ydHMsd2luZG93KSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oKXt0LlRyYW5zcG9ydC53ZWJzb2NrZXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfWUuZmxhc2hzb2NrZXQ9bix0LnV0aWwuaW5oZXJpdChuLHQuVHJhbnNwb3J0LndlYnNvY2tldCksbi5wcm90b3R5cGUubmFtZT1cImZsYXNoc29ja2V0XCIsbi5wcm90b3R5cGUub3Blbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1hcmd1bWVudHM7cmV0dXJuIFdlYlNvY2tldC5fX2FkZFRhc2soZnVuY3Rpb24oKXt0LlRyYW5zcG9ydC53ZWJzb2NrZXQucHJvdG90eXBlLm9wZW4uYXBwbHkoZSxuKX0pLHRoaXN9LG4ucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49YXJndW1lbnRzO3JldHVybiBXZWJTb2NrZXQuX19hZGRUYXNrKGZ1bmN0aW9uKCl7dC5UcmFuc3BvcnQud2Vic29ja2V0LnByb3RvdHlwZS5zZW5kLmFwcGx5KGUsbil9KSx0aGlzfSxuLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe3JldHVybiBXZWJTb2NrZXQuX190YXNrcy5sZW5ndGg9MCx0LlRyYW5zcG9ydC53ZWJzb2NrZXQucHJvdG90eXBlLmNsb3NlLmNhbGwodGhpcyksdGhpc30sbi5wcm90b3R5cGUucmVhZHk9ZnVuY3Rpb24oZSxyKXtmdW5jdGlvbiBvKCl7dmFyIHQ9ZS5vcHRpb25zLG89dFtcImZsYXNoIHBvbGljeSBwb3J0XCJdLGE9W1wiaHR0cFwiKyh0LnNlY3VyZT9cInNcIjpcIlwiKStcIjovXCIsdC5ob3N0K1wiOlwiK3QucG9ydCx0LnJlc291cmNlLFwic3RhdGljL2ZsYXNoc29ja2V0XCIsXCJXZWJTb2NrZXRNYWluXCIrKGUuaXNYRG9tYWluKCk/XCJJbnNlY3VyZVwiOlwiXCIpK1wiLnN3ZlwiXTtuLmxvYWRlZHx8KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBXRUJfU09DS0VUX1NXRl9MT0NBVElPTiYmKFdFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OPWEuam9pbihcIi9cIikpLDg0MyE9PW8mJldlYlNvY2tldC5sb2FkRmxhc2hQb2xpY3lGaWxlKFwieG1sc29ja2V0Oi8vXCIrdC5ob3N0K1wiOlwiK28pLFdlYlNvY2tldC5fX2luaXRpYWxpemUoKSxuLmxvYWRlZD0hMCksci5jYWxsKGkpfXZhciBpPXRoaXM7cmV0dXJuIGRvY3VtZW50LmJvZHk/bygpOnZvaWQgdC51dGlsLmxvYWQobyl9LG4uY2hlY2s9ZnVuY3Rpb24oKXtyZXR1cm4hIShcInVuZGVmaW5lZFwiIT10eXBlb2YgV2ViU29ja2V0JiZcIl9faW5pdGlhbGl6ZVwiaW4gV2ViU29ja2V0JiZzd2ZvYmplY3QpJiZzd2ZvYmplY3QuZ2V0Rmxhc2hQbGF5ZXJWZXJzaW9uKCkubWFqb3I+PTEwfSxuLnhkb21haW5DaGVjaz1mdW5jdGlvbigpe3JldHVybiEwfSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93LldFQl9TT0NLRVRfRElTQUJMRV9BVVRPX0lOSVRJQUxJWkFUSU9OPSEwKSx0LnRyYW5zcG9ydHMucHVzaChcImZsYXNoc29ja2V0XCIpfShcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW8uVHJhbnNwb3J0Om1vZHVsZS5leHBvcnRzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUucGFyZW50LmV4cG9ydHMpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQpdmFyIHN3Zm9iamVjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXtpZighSCl7dHJ5e3ZhciBlPVIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLmFwcGVuZENoaWxkKGgoXCJzcGFuXCIpKTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9Y2F0Y2goYWEpe3JldHVybn1IPSEwO2Zvcih2YXIgdD1CLmxlbmd0aCxuPTA7bjx0O24rKylCW25dKCl9fWZ1bmN0aW9uIHQoZSl7SD9lKCk6QltCLmxlbmd0aF09ZX1mdW5jdGlvbiBuKGUpe2lmKHR5cGVvZiBGLmFkZEV2ZW50TGlzdGVuZXIhPUUpRi5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGUsITEpO2Vsc2UgaWYodHlwZW9mIFIuYWRkRXZlbnRMaXN0ZW5lciE9RSlSLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsZSwhMSk7ZWxzZSBpZih0eXBlb2YgRi5hdHRhY2hFdmVudCE9RSl2KEYsXCJvbmxvYWRcIixlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIEYub25sb2FkKXt2YXIgdD1GLm9ubG9hZDtGLm9ubG9hZD1mdW5jdGlvbigpe3QoKSxlKCl9fWVsc2UgRi5vbmxvYWQ9ZX1mdW5jdGlvbiByKCl7TD9vKCk6aSgpfWZ1bmN0aW9uIG8oKXt2YXIgZT1SLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXSx0PWgoTyk7dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsQSk7dmFyIG49ZS5hcHBlbmRDaGlsZCh0KTtpZihuKXt2YXIgcj0wOyFmdW5jdGlvbigpe2lmKHR5cGVvZiBuLkdldFZhcmlhYmxlIT1FKXt2YXIgbz1uLkdldFZhcmlhYmxlKFwiJHZlcnNpb25cIik7byYmKG89by5zcGxpdChcIiBcIilbMV0uc3BsaXQoXCIsXCIpLEsucHY9W3BhcnNlSW50KG9bMF0sMTApLHBhcnNlSW50KG9bMV0sMTApLHBhcnNlSW50KG9bMl0sMTApXSl9ZWxzZSBpZihyPDEwKXJldHVybiByKyssdm9pZCBzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMTApO2UucmVtb3ZlQ2hpbGQodCksbj1udWxsLGkoKX0oKX1lbHNlIGkoKX1mdW5jdGlvbiBpKCl7dmFyIGU9cS5sZW5ndGg7aWYoZT4wKWZvcih2YXIgdD0wO3Q8ZTt0Kyspe3ZhciBuPXFbdF0uaWQscj1xW3RdLmNhbGxiYWNrRm4sbz17c3VjY2VzczohMSxpZDpufTtpZihLLnB2WzBdPjApe3ZhciBpPXkobik7aWYoaSlpZighZyhxW3RdLnN3ZlZlcnNpb24pfHxLLndrJiZLLndrPDMxMilpZihxW3RdLmV4cHJlc3NJbnN0YWxsJiZzKCkpe3ZhciBsPXt9O2wuZGF0YT1xW3RdLmV4cHJlc3NJbnN0YWxsLGwud2lkdGg9aS5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKXx8XCIwXCIsbC5oZWlnaHQ9aS5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIil8fFwiMFwiLGkuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikmJihsLnN0eWxlY2xhc3M9aS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSksaS5nZXRBdHRyaWJ1dGUoXCJhbGlnblwiKSYmKGwuYWxpZ249aS5nZXRBdHRyaWJ1dGUoXCJhbGlnblwiKSk7Zm9yKHZhciBwPXt9LGY9aS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcmFtXCIpLGQ9Zi5sZW5ndGgsbT0wO208ZDttKyspXCJtb3ZpZVwiIT1mW21dLmdldEF0dHJpYnV0ZShcIm5hbWVcIikudG9Mb3dlckNhc2UoKSYmKHBbZlttXS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpXT1mW21dLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpKTtjKGwscCxuLHIpfWVsc2UgdShpKSxyJiZyKG8pO2Vsc2UgayhuLCEwKSxyJiYoby5zdWNjZXNzPSEwLG8ucmVmPWEobikscihvKSl9ZWxzZSBpZihrKG4sITApLHIpe3ZhciBoPWEobik7aCYmdHlwZW9mIGguU2V0VmFyaWFibGUhPUUmJihvLnN1Y2Nlc3M9ITAsby5yZWY9aCkscihvKX19fWZ1bmN0aW9uIGEoZSl7dmFyIHQ9bnVsbCxuPXkoZSk7aWYobiYmXCJPQkpFQ1RcIj09bi5ub2RlTmFtZSlpZih0eXBlb2Ygbi5TZXRWYXJpYWJsZSE9RSl0PW47ZWxzZXt2YXIgcj1uLmdldEVsZW1lbnRzQnlUYWdOYW1lKE8pWzBdO3ImJih0PXIpfXJldHVybiB0fWZ1bmN0aW9uIHMoKXtyZXR1cm4hJCYmZyhcIjYuMC42NVwiKSYmKEsud2lufHxLLm1hYykmJiEoSy53ayYmSy53azwzMTIpfWZ1bmN0aW9uIGMoZSx0LG4scil7JD0hMCxNPXJ8fG51bGwsXz17c3VjY2VzczohMSxpZDpufTt2YXIgbz15KG4pO2lmKG8pe1wiT0JKRUNUXCI9PW8ubm9kZU5hbWU/KFM9bChvKSxUPW51bGwpOihTPW8sVD1uKSxlLmlkPU4sKHR5cGVvZiBlLndpZHRoPT1FfHwhLyUkLy50ZXN0KGUud2lkdGgpJiZwYXJzZUludChlLndpZHRoLDEwKTwzMTApJiYoZS53aWR0aD1cIjMxMFwiKSwodHlwZW9mIGUuaGVpZ2h0PT1FfHwhLyUkLy50ZXN0KGUuaGVpZ2h0KSYmcGFyc2VJbnQoZS5oZWlnaHQsMTApPDEzNykmJihlLmhlaWdodD1cIjEzN1wiKSxSLnRpdGxlPVIudGl0bGUuc2xpY2UoMCw0NykrXCIgLSBGbGFzaCBQbGF5ZXIgSW5zdGFsbGF0aW9uXCI7dmFyIGk9Sy5pZSYmSy53aW4/W1wiQWN0aXZlXCJdLmNvbmNhdChcIlwiKS5qb2luKFwiWFwiKTpcIlBsdWdJblwiLGE9XCJNTXJlZGlyZWN0VVJMPVwiK0YubG9jYXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC8mL2csXCIlMjZcIikrXCImTU1wbGF5ZXJUeXBlPVwiK2krXCImTU1kb2N0aXRsZT1cIitSLnRpdGxlO2lmKHR5cGVvZiB0LmZsYXNodmFycyE9RT90LmZsYXNodmFycys9XCImXCIrYTp0LmZsYXNodmFycz1hLEsuaWUmJksud2luJiY0IT1vLnJlYWR5U3RhdGUpe3ZhciBzPWgoXCJkaXZcIik7bis9XCJTV0ZPYmplY3ROZXdcIixzLnNldEF0dHJpYnV0ZShcImlkXCIsbiksby5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLG8pLG8uc3R5bGUuZGlzcGxheT1cIm5vbmVcIixmdW5jdGlvbigpezQ9PW8ucmVhZHlTdGF0ZT9vLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyk6c2V0VGltZW91dChhcmd1bWVudHMuY2FsbGVlLDEwKX0oKX1wKGUsdCxuKX19ZnVuY3Rpb24gdShlKXtpZihLLmllJiZLLndpbiYmNCE9ZS5yZWFkeVN0YXRlKXt2YXIgdD1oKFwiZGl2XCIpO2UucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxlKSx0LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGwoZSksdCksZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGZ1bmN0aW9uKCl7ND09ZS5yZWFkeVN0YXRlP2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTpzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMTApfSgpfWVsc2UgZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChsKGUpLGUpfWZ1bmN0aW9uIGwoZSl7dmFyIHQ9aChcImRpdlwiKTtpZihLLndpbiYmSy5pZSl0LmlubmVySFRNTD1lLmlubmVySFRNTDtlbHNle3ZhciBuPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoTylbMF07aWYobil7dmFyIHI9bi5jaGlsZE5vZGVzO2lmKHIpZm9yKHZhciBvPXIubGVuZ3RoLGk9MDtpPG87aSsrKTE9PXJbaV0ubm9kZVR5cGUmJlwiUEFSQU1cIj09cltpXS5ub2RlTmFtZXx8OD09cltpXS5ub2RlVHlwZXx8dC5hcHBlbmRDaGlsZChyW2ldLmNsb25lTm9kZSghMCkpfX1yZXR1cm4gdH1mdW5jdGlvbiBwKGUsdCxuKXt2YXIgcixvPXkobik7aWYoSy53ayYmSy53azwzMTIpcmV0dXJuIHI7aWYobylpZih0eXBlb2YgZS5pZD09RSYmKGUuaWQ9biksSy5pZSYmSy53aW4pe3ZhciBpPVwiXCI7Zm9yKHZhciBhIGluIGUpZVthXSE9T2JqZWN0LnByb3RvdHlwZVthXSYmKFwiZGF0YVwiPT1hLnRvTG93ZXJDYXNlKCk/dC5tb3ZpZT1lW2FdOlwic3R5bGVjbGFzc1wiPT1hLnRvTG93ZXJDYXNlKCk/aSs9JyBjbGFzcz1cIicrZVthXSsnXCInOlwiY2xhc3NpZFwiIT1hLnRvTG93ZXJDYXNlKCkmJihpKz1cIiBcIithKyc9XCInK2VbYV0rJ1wiJykpO3ZhciBzPVwiXCI7Zm9yKHZhciBjIGluIHQpdFtjXSE9T2JqZWN0LnByb3RvdHlwZVtjXSYmKHMrPSc8cGFyYW0gbmFtZT1cIicrYysnXCIgdmFsdWU9XCInK3RbY10rJ1wiIC8+Jyk7by5vdXRlckhUTUw9JzxvYmplY3QgY2xhc3NpZD1cImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMFwiJytpK1wiPlwiK3MrXCI8L29iamVjdD5cIixVW1UubGVuZ3RoXT1lLmlkLHI9eShlLmlkKX1lbHNle3ZhciB1PWgoTyk7dS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsQSk7Zm9yKHZhciBsIGluIGUpZVtsXSE9T2JqZWN0LnByb3RvdHlwZVtsXSYmKFwic3R5bGVjbGFzc1wiPT1sLnRvTG93ZXJDYXNlKCk/dS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGVbbF0pOlwiY2xhc3NpZFwiIT1sLnRvTG93ZXJDYXNlKCkmJnUuc2V0QXR0cmlidXRlKGwsZVtsXSkpO2Zvcih2YXIgcCBpbiB0KXRbcF0hPU9iamVjdC5wcm90b3R5cGVbcF0mJlwibW92aWVcIiE9cC50b0xvd2VyQ2FzZSgpJiZmKHUscCx0W3BdKTtvLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHUsbykscj11fXJldHVybiByfWZ1bmN0aW9uIGYoZSx0LG4pe3ZhciByPWgoXCJwYXJhbVwiKTtyLnNldEF0dHJpYnV0ZShcIm5hbWVcIix0KSxyLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsbiksZS5hcHBlbmRDaGlsZChyKX1mdW5jdGlvbiBkKGUpe3ZhciB0PXkoZSk7dCYmXCJPQkpFQ1RcIj09dC5ub2RlTmFtZSYmKEsuaWUmJksud2luPyh0LnN0eWxlLmRpc3BsYXk9XCJub25lXCIsZnVuY3Rpb24oKXs0PT10LnJlYWR5U3RhdGU/bShlKTpzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMTApfSgpKTp0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCkpfWZ1bmN0aW9uIG0oZSl7dmFyIHQ9eShlKTtpZih0KXtmb3IodmFyIG4gaW4gdClcImZ1bmN0aW9uXCI9PXR5cGVvZiB0W25dJiYodFtuXT1udWxsKTt0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCl9fWZ1bmN0aW9uIHkoZSl7dmFyIHQ9bnVsbDt0cnl7dD1SLmdldEVsZW1lbnRCeUlkKGUpfWNhdGNoKFkpe31yZXR1cm4gdH1mdW5jdGlvbiBoKGUpe3JldHVybiBSLmNyZWF0ZUVsZW1lbnQoZSl9ZnVuY3Rpb24gdihlLHQsbil7ZS5hdHRhY2hFdmVudCh0LG4pLFdbVy5sZW5ndGhdPVtlLHQsbl19ZnVuY3Rpb24gZyhlKXt2YXIgdD1LLnB2LG49ZS5zcGxpdChcIi5cIik7cmV0dXJuIG5bMF09cGFyc2VJbnQoblswXSwxMCksblsxXT1wYXJzZUludChuWzFdLDEwKXx8MCxuWzJdPXBhcnNlSW50KG5bMl0sMTApfHwwLHRbMF0+blswXXx8dFswXT09blswXSYmdFsxXT5uWzFdfHx0WzBdPT1uWzBdJiZ0WzFdPT1uWzFdJiZ0WzJdPj1uWzJdfWZ1bmN0aW9uIGIoZSx0LG4scil7aWYoIUsuaWV8fCFLLm1hYyl7dmFyIG89Ui5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07aWYobyl7dmFyIGk9biYmXCJzdHJpbmdcIj09dHlwZW9mIG4/bjpcInNjcmVlblwiO2lmKHImJih4PW51bGwsQz1udWxsKSwheHx8QyE9aSl7dmFyIGE9aChcInN0eWxlXCIpO2Euc2V0QXR0cmlidXRlKFwidHlwZVwiLFwidGV4dC9jc3NcIiksYS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLGkpLHg9by5hcHBlbmRDaGlsZChhKSxLLmllJiZLLndpbiYmdHlwZW9mIFIuc3R5bGVTaGVldHMhPUUmJlIuc3R5bGVTaGVldHMubGVuZ3RoPjAmJih4PVIuc3R5bGVTaGVldHNbUi5zdHlsZVNoZWV0cy5sZW5ndGgtMV0pLEM9aX1LLmllJiZLLndpbj94JiZ0eXBlb2YgeC5hZGRSdWxlPT1PJiZ4LmFkZFJ1bGUoZSx0KTp4JiZ0eXBlb2YgUi5jcmVhdGVUZXh0Tm9kZSE9RSYmeC5hcHBlbmRDaGlsZChSLmNyZWF0ZVRleHROb2RlKGUrXCIge1wiK3QrXCJ9XCIpKX19fWZ1bmN0aW9uIGsoZSx0KXtpZihYKXt2YXIgbj10P1widmlzaWJsZVwiOlwiaGlkZGVuXCI7SCYmeShlKT95KGUpLnN0eWxlLnZpc2liaWxpdHk9bjpiKFwiI1wiK2UsXCJ2aXNpYmlsaXR5OlwiK24pfX1mdW5jdGlvbiB3KGUpe3ZhciB0PS9bXFxcXFxcXCI8PlxcLjtdLyxuPW51bGwhPXQuZXhlYyhlKTtyZXR1cm4gbiYmdHlwZW9mIGVuY29kZVVSSUNvbXBvbmVudCE9RT9lbmNvZGVVUklDb21wb25lbnQoZSk6ZX12YXIgUyxULE0sXyx4LEMsRT1cInVuZGVmaW5lZFwiLE89XCJvYmplY3RcIixQPVwiU2hvY2t3YXZlIEZsYXNoXCIsST1cIlNob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoXCIsQT1cImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCIsTj1cIlNXRk9iamVjdEV4cHJJbnN0XCIsaj1cIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLEY9d2luZG93LFI9ZG9jdW1lbnQsRD1uYXZpZ2F0b3IsTD0hMSxCPVtyXSxxPVtdLFU9W10sVz1bXSxIPSExLCQ9ITEsWD0hMCxLPWZ1bmN0aW9uKCl7dmFyIGU9dHlwZW9mIFIuZ2V0RWxlbWVudEJ5SWQhPUUmJnR5cGVvZiBSLmdldEVsZW1lbnRzQnlUYWdOYW1lIT1FJiZ0eXBlb2YgUi5jcmVhdGVFbGVtZW50IT1FLHQ9RC51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxuPUQucGxhdGZvcm0udG9Mb3dlckNhc2UoKSxyPW4/L3dpbi8udGVzdChuKTovd2luLy50ZXN0KHQpLG89bj8vbWFjLy50ZXN0KG4pOi9tYWMvLnRlc3QodCksaT0hIS93ZWJraXQvLnRlc3QodCkmJnBhcnNlRmxvYXQodC5yZXBsYWNlKC9eLip3ZWJraXRcXC8oXFxkKyhcXC5cXGQrKT8pLiokLyxcIiQxXCIpKSxhPSExLHM9WzAsMCwwXSxjPW51bGw7aWYodHlwZW9mIEQucGx1Z2lucyE9RSYmdHlwZW9mIEQucGx1Z2luc1tQXT09TyljPUQucGx1Z2luc1tQXS5kZXNjcmlwdGlvbiwhY3x8dHlwZW9mIEQubWltZVR5cGVzIT1FJiZELm1pbWVUeXBlc1tBXSYmIUQubWltZVR5cGVzW0FdLmVuYWJsZWRQbHVnaW58fChMPSEwLGE9ITEsYz1jLnJlcGxhY2UoL14uKlxccysoXFxTK1xccytcXFMrJCkvLFwiJDFcIiksc1swXT1wYXJzZUludChjLnJlcGxhY2UoL14oLiopXFwuLiokLyxcIiQxXCIpLDEwKSxzWzFdPXBhcnNlSW50KGMucmVwbGFjZSgvXi4qXFwuKC4qKVxccy4qJC8sXCIkMVwiKSwxMCksc1syXT0vW2EtekEtWl0vLnRlc3QoYyk/cGFyc2VJbnQoYy5yZXBsYWNlKC9eLipbYS16QS1aXSsoLiopJC8sXCIkMVwiKSwxMCk6MCk7ZWxzZSBpZih0eXBlb2YgRltbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXSE9RSl0cnl7dmFyIHU9bmV3KHdpbmRvd1tbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXSkoSSk7dSYmKGM9dS5HZXRWYXJpYWJsZShcIiR2ZXJzaW9uXCIpLGMmJihhPSEwLGM9Yy5zcGxpdChcIiBcIilbMV0uc3BsaXQoXCIsXCIpLHM9W3BhcnNlSW50KGNbMF0sMTApLHBhcnNlSW50KGNbMV0sMTApLHBhcnNlSW50KGNbMl0sMTApXSkpfWNhdGNoKFope31yZXR1cm57dzM6ZSxwdjpzLHdrOmksaWU6YSx3aW46cixtYWM6b319KCk7KGZ1bmN0aW9uKCl7Sy53MyYmKCh0eXBlb2YgUi5yZWFkeVN0YXRlIT1FJiZcImNvbXBsZXRlXCI9PVIucmVhZHlTdGF0ZXx8dHlwZW9mIFIucmVhZHlTdGF0ZT09RSYmKFIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdfHxSLmJvZHkpKSYmZSgpLEh8fCh0eXBlb2YgUi5hZGRFdmVudExpc3RlbmVyIT1FJiZSLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZSwhMSksSy5pZSYmSy53aW4mJihSLmF0dGFjaEV2ZW50KGosZnVuY3Rpb24oKXtcImNvbXBsZXRlXCI9PVIucmVhZHlTdGF0ZSYmKFIuZGV0YWNoRXZlbnQoaixhcmd1bWVudHMuY2FsbGVlKSxlKCkpfSksRj09dG9wJiYhZnVuY3Rpb24oKXtpZighSCl7dHJ5e1IuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKFwibGVmdFwiKX1jYXRjaChYKXtyZXR1cm4gdm9pZCBzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMCl9ZSgpfX0oKSksSy53ayYmIWZ1bmN0aW9uKCl7aWYoIUgpcmV0dXJuL2xvYWRlZHxjb21wbGV0ZS8udGVzdChSLnJlYWR5U3RhdGUpP3ZvaWQgZSgpOnZvaWQgc2V0VGltZW91dChhcmd1bWVudHMuY2FsbGVlLDApfSgpLG4oZSkpKX0pKCksZnVuY3Rpb24oKXtLLmllJiZLLndpbiYmd2luZG93LmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixmdW5jdGlvbigpe1xyXG5mb3IodmFyIGU9Vy5sZW5ndGgsdD0wO3Q8ZTt0KyspV1t0XVswXS5kZXRhY2hFdmVudChXW3RdWzFdLFdbdF1bMl0pO2Zvcih2YXIgbj1VLmxlbmd0aCxyPTA7cjxuO3IrKylkKFVbcl0pO2Zvcih2YXIgbyBpbiBLKUtbb109bnVsbDtLPW51bGw7Zm9yKHZhciBpIGluIHN3Zm9iamVjdClzd2ZvYmplY3RbaV09bnVsbDtzd2ZvYmplY3Q9bnVsbH0pfSgpO3JldHVybntyZWdpc3Rlck9iamVjdDpmdW5jdGlvbihlLHQsbixyKXtpZihLLnczJiZlJiZ0KXt2YXIgbz17fTtvLmlkPWUsby5zd2ZWZXJzaW9uPXQsby5leHByZXNzSW5zdGFsbD1uLG8uY2FsbGJhY2tGbj1yLHFbcS5sZW5ndGhdPW8sayhlLCExKX1lbHNlIHImJnIoe3N1Y2Nlc3M6ITEsaWQ6ZX0pfSxnZXRPYmplY3RCeUlkOmZ1bmN0aW9uKGUpe2lmKEsudzMpcmV0dXJuIGEoZSl9LGVtYmVkU1dGOmZ1bmN0aW9uKGUsbixyLG8saSxhLHUsbCxmLGQpe3ZhciBtPXtzdWNjZXNzOiExLGlkOm59O0sudzMmJiEoSy53ayYmSy53azwzMTIpJiZlJiZuJiZyJiZvJiZpPyhrKG4sITEpLHQoZnVuY3Rpb24oKXtyKz1cIlwiLG8rPVwiXCI7dmFyIHQ9e307aWYoZiYmdHlwZW9mIGY9PT1PKWZvcih2YXIgeSBpbiBmKXRbeV09Zlt5XTt0LmRhdGE9ZSx0LndpZHRoPXIsdC5oZWlnaHQ9bzt2YXIgaD17fTtpZihsJiZ0eXBlb2YgbD09PU8pZm9yKHZhciB2IGluIGwpaFt2XT1sW3ZdO2lmKHUmJnR5cGVvZiB1PT09Tylmb3IodmFyIGIgaW4gdSl0eXBlb2YgaC5mbGFzaHZhcnMhPUU/aC5mbGFzaHZhcnMrPVwiJlwiK2IrXCI9XCIrdVtiXTpoLmZsYXNodmFycz1iK1wiPVwiK3VbYl07aWYoZyhpKSl7dmFyIHc9cCh0LGgsbik7dC5pZD09biYmayhuLCEwKSxtLnN1Y2Nlc3M9ITAsbS5yZWY9d31lbHNle2lmKGEmJnMoKSlyZXR1cm4gdC5kYXRhPWEsdm9pZCBjKHQsaCxuLGQpO2sobiwhMCl9ZCYmZChtKX0pKTpkJiZkKG0pfSxzd2l0Y2hPZmZBdXRvSGlkZVNob3c6ZnVuY3Rpb24oKXtYPSExfSx1YTpLLGdldEZsYXNoUGxheWVyVmVyc2lvbjpmdW5jdGlvbigpe3JldHVybnttYWpvcjpLLnB2WzBdLG1pbm9yOksucHZbMV0scmVsZWFzZTpLLnB2WzJdfX0saGFzRmxhc2hQbGF5ZXJWZXJzaW9uOmcsY3JlYXRlU1dGOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gSy53Mz9wKGUsdCxuKTp2b2lkIDB9LHNob3dFeHByZXNzSW5zdGFsbDpmdW5jdGlvbihlLHQsbixyKXtLLnczJiZzKCkmJmMoZSx0LG4scil9LHJlbW92ZVNXRjpmdW5jdGlvbihlKXtLLnczJiZkKGUpfSxjcmVhdGVDU1M6ZnVuY3Rpb24oZSx0LG4scil7Sy53MyYmYihlLHQsbixyKX0sYWRkRG9tTG9hZEV2ZW50OnQsYWRkTG9hZEV2ZW50Om4sZ2V0UXVlcnlQYXJhbVZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVIubG9jYXRpb24uc2VhcmNofHxSLmxvY2F0aW9uLmhhc2g7aWYodCl7aWYoL1xcPy8udGVzdCh0KSYmKHQ9dC5zcGxpdChcIj9cIilbMV0pLG51bGw9PWUpcmV0dXJuIHcodCk7Zm9yKHZhciBuPXQuc3BsaXQoXCImXCIpLHI9MDtyPG4ubGVuZ3RoO3IrKylpZihuW3JdLnN1YnN0cmluZygwLG5bcl0uaW5kZXhPZihcIj1cIikpPT1lKXJldHVybiB3KG5bcl0uc3Vic3RyaW5nKG5bcl0uaW5kZXhPZihcIj1cIikrMSkpfXJldHVyblwiXCJ9LGV4cHJlc3NJbnN0YWxsQ2FsbGJhY2s6ZnVuY3Rpb24oKXtpZigkKXt2YXIgZT15KE4pO2UmJlMmJihlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKFMsZSksVCYmKGsoVCwhMCksSy5pZSYmSy53aW4mJihTLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiKSksTSYmTShfKSksJD0hMX19fX0oKTshZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYhd2luZG93LldlYlNvY2tldCl7dmFyIGU9d2luZG93LmNvbnNvbGU7aWYoZSYmZS5sb2cmJmUuZXJyb3J8fChlPXtsb2c6ZnVuY3Rpb24oKXt9LGVycm9yOmZ1bmN0aW9uKCl7fX0pLCFzd2ZvYmplY3QuaGFzRmxhc2hQbGF5ZXJWZXJzaW9uKFwiMTAuMC4wXCIpKXJldHVybiB2b2lkIGUuZXJyb3IoXCJGbGFzaCBQbGF5ZXIgPj0gMTAuMC4wIGlzIHJlcXVpcmVkLlwiKTtcImZpbGU6XCI9PWxvY2F0aW9uLnByb3RvY29sJiZlLmVycm9yKFwiV0FSTklORzogd2ViLXNvY2tldC1qcyBkb2Vzbid0IHdvcmsgaW4gZmlsZTovLy8uLi4gVVJMIHVubGVzcyB5b3Ugc2V0IEZsYXNoIFNlY3VyaXR5IFNldHRpbmdzIHByb3Blcmx5LiBPcGVuIHRoZSBwYWdlIHZpYSBXZWIgc2VydmVyIGkuZS4gaHR0cDovLy4uLlwiKSxXZWJTb2NrZXQ9ZnVuY3Rpb24oZSx0LG4scixvKXt2YXIgaT10aGlzO2kuX19pZD1XZWJTb2NrZXQuX19uZXh0SWQrKyxXZWJTb2NrZXQuX19pbnN0YW5jZXNbaS5fX2lkXT1pLGkucmVhZHlTdGF0ZT1XZWJTb2NrZXQuQ09OTkVDVElORyxpLmJ1ZmZlcmVkQW1vdW50PTAsaS5fX2V2ZW50cz17fSx0P1wic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1bdF0pOnQ9W10sc2V0VGltZW91dChmdW5jdGlvbigpe1dlYlNvY2tldC5fX2FkZFRhc2soZnVuY3Rpb24oKXtXZWJTb2NrZXQuX19mbGFzaC5jcmVhdGUoaS5fX2lkLGUsdCxufHxudWxsLHJ8fDAsb3x8bnVsbCl9KX0sMCl9LFdlYlNvY2tldC5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihlKXtpZih0aGlzLnJlYWR5U3RhdGU9PVdlYlNvY2tldC5DT05ORUNUSU5HKXRocm93XCJJTlZBTElEX1NUQVRFX0VSUjogV2ViIFNvY2tldCBjb25uZWN0aW9uIGhhcyBub3QgYmVlbiBlc3RhYmxpc2hlZFwiO3ZhciB0PVdlYlNvY2tldC5fX2ZsYXNoLnNlbmQodGhpcy5fX2lkLGVuY29kZVVSSUNvbXBvbmVudChlKSk7cmV0dXJuIHQ8MHx8KHRoaXMuYnVmZmVyZWRBbW91bnQrPXQsITEpfSxXZWJTb2NrZXQucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7dGhpcy5yZWFkeVN0YXRlIT1XZWJTb2NrZXQuQ0xPU0VEJiZ0aGlzLnJlYWR5U3RhdGUhPVdlYlNvY2tldC5DTE9TSU5HJiYodGhpcy5yZWFkeVN0YXRlPVdlYlNvY2tldC5DTE9TSU5HLFdlYlNvY2tldC5fX2ZsYXNoLmNsb3NlKHRoaXMuX19pZCkpfSxXZWJTb2NrZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0LG4pe2UgaW4gdGhpcy5fX2V2ZW50c3x8KHRoaXMuX19ldmVudHNbZV09W10pLHRoaXMuX19ldmVudHNbZV0ucHVzaCh0KX0sV2ViU29ja2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCxuKXtpZihlIGluIHRoaXMuX19ldmVudHMpZm9yKHZhciByPXRoaXMuX19ldmVudHNbZV0sbz1yLmxlbmd0aC0xO28+PTA7LS1vKWlmKHJbb109PT10KXtyLnNwbGljZShvLDEpO2JyZWFrfX0sV2ViU29ja2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLl9fZXZlbnRzW2UudHlwZV18fFtdLG49MDtuPHQubGVuZ3RoOysrbil0W25dKGUpO3ZhciByPXRoaXNbXCJvblwiK2UudHlwZV07ciYmcihlKX0sV2ViU29ja2V0LnByb3RvdHlwZS5fX2hhbmRsZUV2ZW50PWZ1bmN0aW9uKGUpe1wicmVhZHlTdGF0ZVwiaW4gZSYmKHRoaXMucmVhZHlTdGF0ZT1lLnJlYWR5U3RhdGUpLFwicHJvdG9jb2xcImluIGUmJih0aGlzLnByb3RvY29sPWUucHJvdG9jb2wpO3ZhciB0O2lmKFwib3BlblwiPT1lLnR5cGV8fFwiZXJyb3JcIj09ZS50eXBlKXQ9dGhpcy5fX2NyZWF0ZVNpbXBsZUV2ZW50KGUudHlwZSk7ZWxzZSBpZihcImNsb3NlXCI9PWUudHlwZSl0PXRoaXMuX19jcmVhdGVTaW1wbGVFdmVudChcImNsb3NlXCIpO2Vsc2V7aWYoXCJtZXNzYWdlXCIhPWUudHlwZSl0aHJvd1widW5rbm93biBldmVudCB0eXBlOiBcIitlLnR5cGU7dmFyIG49ZGVjb2RlVVJJQ29tcG9uZW50KGUubWVzc2FnZSk7dD10aGlzLl9fY3JlYXRlTWVzc2FnZUV2ZW50KFwibWVzc2FnZVwiLG4pfXRoaXMuZGlzcGF0Y2hFdmVudCh0KX0sV2ViU29ja2V0LnByb3RvdHlwZS5fX2NyZWF0ZVNpbXBsZUV2ZW50PWZ1bmN0aW9uKGUpe2lmKGRvY3VtZW50LmNyZWF0ZUV2ZW50JiZ3aW5kb3cuRXZlbnQpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7cmV0dXJuIHQuaW5pdEV2ZW50KGUsITEsITEpLHR9cmV0dXJue3R5cGU6ZSxidWJibGVzOiExLGNhbmNlbGFibGU6ITF9fSxXZWJTb2NrZXQucHJvdG90eXBlLl9fY3JlYXRlTWVzc2FnZUV2ZW50PWZ1bmN0aW9uKGUsdCl7aWYoZG9jdW1lbnQuY3JlYXRlRXZlbnQmJndpbmRvdy5NZXNzYWdlRXZlbnQmJiF3aW5kb3cub3BlcmEpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTWVzc2FnZUV2ZW50XCIpO3JldHVybiBuLmluaXRNZXNzYWdlRXZlbnQoXCJtZXNzYWdlXCIsITEsITEsdCxudWxsLG51bGwsd2luZG93LG51bGwpLG59cmV0dXJue3R5cGU6ZSxkYXRhOnQsYnViYmxlczohMSxjYW5jZWxhYmxlOiExfX0sV2ViU29ja2V0LkNPTk5FQ1RJTkc9MCxXZWJTb2NrZXQuT1BFTj0xLFdlYlNvY2tldC5DTE9TSU5HPTIsV2ViU29ja2V0LkNMT1NFRD0zLFdlYlNvY2tldC5fX2ZsYXNoPW51bGwsV2ViU29ja2V0Ll9faW5zdGFuY2VzPXt9LFdlYlNvY2tldC5fX3Rhc2tzPVtdLFdlYlNvY2tldC5fX25leHRJZD0wLFdlYlNvY2tldC5sb2FkRmxhc2hQb2xpY3lGaWxlPWZ1bmN0aW9uKGUpe1dlYlNvY2tldC5fX2FkZFRhc2soZnVuY3Rpb24oKXtXZWJTb2NrZXQuX19mbGFzaC5sb2FkTWFudWFsUG9saWN5RmlsZShlKX0pfSxXZWJTb2NrZXQuX19pbml0aWFsaXplPWZ1bmN0aW9uKCl7aWYoIVdlYlNvY2tldC5fX2ZsYXNoKXtpZihXZWJTb2NrZXQuX19zd2ZMb2NhdGlvbiYmKHdpbmRvdy5XRUJfU09DS0VUX1NXRl9MT0NBVElPTj1XZWJTb2NrZXQuX19zd2ZMb2NhdGlvbiksIXdpbmRvdy5XRUJfU09DS0VUX1NXRl9MT0NBVElPTilyZXR1cm4gdm9pZCBlLmVycm9yKFwiW1dlYlNvY2tldF0gc2V0IFdFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OIHRvIGxvY2F0aW9uIG9mIFdlYlNvY2tldE1haW4uc3dmXCIpO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5pZD1cIndlYlNvY2tldENvbnRhaW5lclwiLHQuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLFdlYlNvY2tldC5fX2lzRmxhc2hMaXRlKCk/KHQuc3R5bGUubGVmdD1cIjBweFwiLHQuc3R5bGUudG9wPVwiMHB4XCIpOih0LnN0eWxlLmxlZnQ9XCItMTAwcHhcIix0LnN0eWxlLnRvcD1cIi0xMDBweFwiKTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO24uaWQ9XCJ3ZWJTb2NrZXRGbGFzaFwiLHQuYXBwZW5kQ2hpbGQobiksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0KSxzd2ZvYmplY3QuZW1iZWRTV0YoV0VCX1NPQ0tFVF9TV0ZfTE9DQVRJT04sXCJ3ZWJTb2NrZXRGbGFzaFwiLFwiMVwiLFwiMVwiLFwiMTAuMC4wXCIsbnVsbCxudWxsLHtoYXNQcmlvcml0eTohMCxzd2xpdmVjb25uZWN0OiEwLGFsbG93U2NyaXB0QWNjZXNzOlwiYWx3YXlzXCJ9LG51bGwsZnVuY3Rpb24odCl7dC5zdWNjZXNzfHxlLmVycm9yKFwiW1dlYlNvY2tldF0gc3dmb2JqZWN0LmVtYmVkU1dGIGZhaWxlZFwiKX0pfX0sV2ViU29ja2V0Ll9fb25GbGFzaEluaXRpYWxpemVkPWZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe1dlYlNvY2tldC5fX2ZsYXNoPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2ViU29ja2V0Rmxhc2hcIiksV2ViU29ja2V0Ll9fZmxhc2guc2V0Q2FsbGVyVXJsKGxvY2F0aW9uLmhyZWYpLFdlYlNvY2tldC5fX2ZsYXNoLnNldERlYnVnKCEhd2luZG93LldFQl9TT0NLRVRfREVCVUcpO2Zvcih2YXIgZT0wO2U8V2ViU29ja2V0Ll9fdGFza3MubGVuZ3RoOysrZSlXZWJTb2NrZXQuX190YXNrc1tlXSgpO1dlYlNvY2tldC5fX3Rhc2tzPVtdfSwwKX0sV2ViU29ja2V0Ll9fb25GbGFzaEV2ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0cnl7Zm9yKHZhciB0PVdlYlNvY2tldC5fX2ZsYXNoLnJlY2VpdmVFdmVudHMoKSxuPTA7bjx0Lmxlbmd0aDsrK24pV2ViU29ja2V0Ll9faW5zdGFuY2VzW3Rbbl0ud2ViU29ja2V0SWRdLl9faGFuZGxlRXZlbnQodFtuXSl9Y2F0Y2goZSl7ZS5lcnJvcihlKX19LDApLCEwfTt2YXIgdD1mdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKGUsdCl7dD10fHwyO2Zvcih2YXIgbj1cIlwiK2U7bi5sZW5ndGg8dDspbj1cIjBcIituO3JldHVybiBufSx0PW5ldyBEYXRlLG49dC5nZXRGdWxsWWVhcigpK1wiLVwiK2UodC5nZXRNb250aCgpKzEpK1wiLVwiK2UodC5nZXREYXRlKCkpK1wiIFwiK2UodC5nZXRIb3VycygpKStcIjpcIitlKHQuZ2V0TWludXRlcygpKStcIjpcIitlKHQuZ2V0U2Vjb25kcygpKStcIjpcIitlKHQuZ2V0TWlsbGlzZWNvbmRzKCksMyk7cmV0dXJuIG59O1dlYlNvY2tldC5fX2xvZz1mdW5jdGlvbihuKXtlLmxvZyh0KCksZGVjb2RlVVJJQ29tcG9uZW50KG4pKX0sV2ViU29ja2V0Ll9fZXJyb3I9ZnVuY3Rpb24obil7ZS5lcnJvcih0KCksZGVjb2RlVVJJQ29tcG9uZW50KG4pKX0sV2ViU29ja2V0Ll9fYWRkVGFzaz1mdW5jdGlvbihlKXtXZWJTb2NrZXQuX19mbGFzaD9lKCk6V2ViU29ja2V0Ll9fdGFza3MucHVzaChlKX0sV2ViU29ja2V0Ll9faXNGbGFzaExpdGU9ZnVuY3Rpb24oKXtpZighd2luZG93Lm5hdmlnYXRvcnx8IXdpbmRvdy5uYXZpZ2F0b3IubWltZVR5cGVzKXJldHVybiExO3ZhciBlPXdpbmRvdy5uYXZpZ2F0b3IubWltZVR5cGVzW1wiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIl07cmV0dXJuISEoZSYmZS5lbmFibGVkUGx1Z2luJiZlLmVuYWJsZWRQbHVnaW4uZmlsZW5hbWUpJiYhIWUuZW5hYmxlZFBsdWdpbi5maWxlbmFtZS5tYXRjaCgvZmxhc2hsaXRlL2kpfSx3aW5kb3cuV0VCX1NPQ0tFVF9ESVNBQkxFX0FVVE9fSU5JVElBTElaQVRJT058fCh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcj93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbigpe1dlYlNvY2tldC5fX2luaXRpYWxpemUoKX0sITEpOndpbmRvdy5hdHRhY2hFdmVudChcIm9ubG9hZFwiLGZ1bmN0aW9uKCl7V2ViU29ja2V0Ll9faW5pdGlhbGl6ZSgpfSkpfX0oKSxmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlKXtlJiYodC5UcmFuc3BvcnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuc2VuZEJ1ZmZlcj1bXSl9ZnVuY3Rpb24gbygpe31lLlhIUj1yLHQudXRpbC5pbmhlcml0KHIsdC5UcmFuc3BvcnQpLHIucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb2NrZXQuc2V0QnVmZmVyKCExKSx0aGlzLm9uT3BlbigpLHRoaXMuZ2V0KCksdGhpcy5zZXRDbG9zZVRpbWVvdXQoKSx0aGlzfSxyLnByb3RvdHlwZS5wYXlsb2FkPWZ1bmN0aW9uKGUpe2Zvcih2YXIgbj1bXSxyPTAsbz1lLmxlbmd0aDtyPG87cisrKW4ucHVzaCh0LnBhcnNlci5lbmNvZGVQYWNrZXQoZVtyXSkpO3RoaXMuc2VuZCh0LnBhcnNlci5lbmNvZGVQYXlsb2FkKG4pKX0sci5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wb3N0KGUpLHRoaXN9LHIucHJvdG90eXBlLnBvc3Q9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpezQ9PXRoaXMucmVhZHlTdGF0ZSYmKHRoaXMub25yZWFkeXN0YXRlY2hhbmdlPW8saS5wb3N0aW5nPSExLDIwMD09dGhpcy5zdGF0dXM/aS5zb2NrZXQuc2V0QnVmZmVyKCExKTppLm9uQ2xvc2UoKSl9ZnVuY3Rpb24gcigpe3RoaXMub25sb2FkPW8saS5zb2NrZXQuc2V0QnVmZmVyKCExKX12YXIgaT10aGlzO3RoaXMuc29ja2V0LnNldEJ1ZmZlcighMCksdGhpcy5zZW5kWEhSPXRoaXMucmVxdWVzdChcIlBPU1RcIiksbi5YRG9tYWluUmVxdWVzdCYmdGhpcy5zZW5kWEhSIGluc3RhbmNlb2YgWERvbWFpblJlcXVlc3Q/dGhpcy5zZW5kWEhSLm9ubG9hZD10aGlzLnNlbmRYSFIub25lcnJvcj1yOnRoaXMuc2VuZFhIUi5vbnJlYWR5c3RhdGVjaGFuZ2U9dCx0aGlzLnNlbmRYSFIuc2VuZChlKX0sci5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbkNsb3NlKCksdGhpc30sci5wcm90b3R5cGUucmVxdWVzdD1mdW5jdGlvbihlKXt2YXIgbj10LnV0aWwucmVxdWVzdCh0aGlzLnNvY2tldC5pc1hEb21haW4oKSkscj10LnV0aWwucXVlcnkodGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeSxcInQ9XCIrICtuZXcgRGF0ZSk7aWYobi5vcGVuKGV8fFwiR0VUXCIsdGhpcy5wcmVwYXJlVXJsKCkrciwhMCksXCJQT1NUXCI9PWUpdHJ5e24uc2V0UmVxdWVzdEhlYWRlcj9uLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIixcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiKTpuLmNvbnRlbnRUeXBlPVwidGV4dC9wbGFpblwifWNhdGNoKGUpe31yZXR1cm4gbn0sci5wcm90b3R5cGUuc2NoZW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc29ja2V0Lm9wdGlvbnMuc2VjdXJlP1wiaHR0cHNcIjpcImh0dHBcIn0sci5jaGVjaz1mdW5jdGlvbihlLHIpe3RyeXt2YXIgbz10LnV0aWwucmVxdWVzdChyKSxpPW4uWERvbWFpblJlcXVlc3QmJm8gaW5zdGFuY2VvZiBYRG9tYWluUmVxdWVzdCxhPWUmJmUub3B0aW9ucyYmZS5vcHRpb25zLnNlY3VyZT9cImh0dHBzOlwiOlwiaHR0cDpcIixzPW4ubG9jYXRpb24mJmEhPW4ubG9jYXRpb24ucHJvdG9jb2w7aWYobyYmKCFpfHwhcykpcmV0dXJuITB9Y2F0Y2goZSl7fXJldHVybiExfSxyLnhkb21haW5DaGVjaz1mdW5jdGlvbihlKXtyZXR1cm4gci5jaGVjayhlLCEwKX19KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pby5UcmFuc3BvcnQ6bW9kdWxlLmV4cG9ydHMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGlvP2lvOm1vZHVsZS5wYXJlbnQuZXhwb3J0cyx3aW5kb3cpLGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihlKXt0LlRyYW5zcG9ydC5YSFIuYXBwbHkodGhpcyxhcmd1bWVudHMpfWUuaHRtbGZpbGU9bix0LnV0aWwuaW5oZXJpdChuLHQuVHJhbnNwb3J0LlhIUiksbi5wcm90b3R5cGUubmFtZT1cImh0bWxmaWxlXCIsbi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKCl7dGhpcy5kb2M9bmV3KHdpbmRvd1tbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXSkoXCJodG1sZmlsZVwiKSx0aGlzLmRvYy5vcGVuKCksdGhpcy5kb2Mud3JpdGUoXCI8aHRtbD48L2h0bWw+XCIpLHRoaXMuZG9jLmNsb3NlKCksdGhpcy5kb2MucGFyZW50V2luZG93LnM9dGhpczt2YXIgZT10aGlzLmRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2UuY2xhc3NOYW1lPVwic29ja2V0aW9cIix0aGlzLmRvYy5ib2R5LmFwcGVuZENoaWxkKGUpLHRoaXMuaWZyYW1lPXRoaXMuZG9jLmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIiksZS5hcHBlbmRDaGlsZCh0aGlzLmlmcmFtZSk7dmFyIG49dGhpcyxyPXQudXRpbC5xdWVyeSh0aGlzLnNvY2tldC5vcHRpb25zLnF1ZXJ5LFwidD1cIisgK25ldyBEYXRlKTt0aGlzLmlmcmFtZS5zcmM9dGhpcy5wcmVwYXJlVXJsKCkrcix0LnV0aWwub24od2luZG93LFwidW5sb2FkXCIsZnVuY3Rpb24oKXtuLmRlc3Ryb3koKX0pfSxuLnByb3RvdHlwZS5fPWZ1bmN0aW9uKGUsdCl7dGhpcy5vbkRhdGEoZSk7dHJ5e3ZhciBuPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07bi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pfWNhdGNoKGUpe319LG4ucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXtpZih0aGlzLmlmcmFtZSl7dHJ5e3RoaXMuaWZyYW1lLnNyYz1cImFib3V0OmJsYW5rXCJ9Y2F0Y2goZSl7fXRoaXMuZG9jPW51bGwsdGhpcy5pZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZSksdGhpcy5pZnJhbWU9bnVsbCxDb2xsZWN0R2FyYmFnZSgpfX0sbi5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZXN0cm95KCksdC5UcmFuc3BvcnQuWEhSLnByb3RvdHlwZS5jbG9zZS5jYWxsKHRoaXMpfSxuLmNoZWNrPWZ1bmN0aW9uKGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJltcIkFjdGl2ZVwiXS5jb25jYXQoXCJPYmplY3RcIikuam9pbihcIlhcIilpbiB3aW5kb3cpdHJ5e3ZhciBuPW5ldyh3aW5kb3dbW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKV0pKFwiaHRtbGZpbGVcIik7cmV0dXJuIG4mJnQuVHJhbnNwb3J0LlhIUi5jaGVjayhlKX1jYXRjaChlKXt9cmV0dXJuITF9LG4ueGRvbWFpbkNoZWNrPWZ1bmN0aW9uKCl7cmV0dXJuITF9LHQudHJhbnNwb3J0cy5wdXNoKFwiaHRtbGZpbGVcIil9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pby5UcmFuc3BvcnQ6bW9kdWxlLmV4cG9ydHMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGlvP2lvOm1vZHVsZS5wYXJlbnQuZXhwb3J0cyksZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoKXt0LlRyYW5zcG9ydC5YSFIuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIG8oKXt9ZVtcInhoci1wb2xsaW5nXCJdPXIsdC51dGlsLmluaGVyaXQocix0LlRyYW5zcG9ydC5YSFIpLHQudXRpbC5tZXJnZShyLHQuVHJhbnNwb3J0LlhIUiksci5wcm90b3R5cGUubmFtZT1cInhoci1wb2xsaW5nXCIsci5wcm90b3R5cGUuaGVhcnRiZWF0cz1mdW5jdGlvbigpe3JldHVybiExfSxyLnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gdC5UcmFuc3BvcnQuWEhSLnByb3RvdHlwZS5vcGVuLmNhbGwoZSksITF9LHIucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXs0PT10aGlzLnJlYWR5U3RhdGUmJih0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZT1vLDIwMD09dGhpcy5zdGF0dXM/KGkub25EYXRhKHRoaXMucmVzcG9uc2VUZXh0KSxpLmdldCgpKTppLm9uQ2xvc2UoKSl9ZnVuY3Rpb24gdCgpe3RoaXMub25sb2FkPW8sdGhpcy5vbmVycm9yPW8saS5yZXRyeUNvdW50ZXI9MSxpLm9uRGF0YSh0aGlzLnJlc3BvbnNlVGV4dCksaS5nZXQoKX1mdW5jdGlvbiByKCl7aS5yZXRyeUNvdW50ZXIrKywhaS5yZXRyeUNvdW50ZXJ8fGkucmV0cnlDb3VudGVyPjM/aS5vbkNsb3NlKCk6aS5nZXQoKX1pZih0aGlzLmlzT3Blbil7dmFyIGk9dGhpczt0aGlzLnhocj10aGlzLnJlcXVlc3QoKSxuLlhEb21haW5SZXF1ZXN0JiZ0aGlzLnhociBpbnN0YW5jZW9mIFhEb21haW5SZXF1ZXN0Pyh0aGlzLnhoci5vbmxvYWQ9dCx0aGlzLnhoci5vbmVycm9yPXIpOnRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZT1lLHRoaXMueGhyLnNlbmQobnVsbCl9fSxyLnByb3RvdHlwZS5vbkNsb3NlPWZ1bmN0aW9uKCl7aWYodC5UcmFuc3BvcnQuWEhSLnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyksdGhpcy54aHIpe3RoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZT10aGlzLnhoci5vbmxvYWQ9dGhpcy54aHIub25lcnJvcj1vO3RyeXt0aGlzLnhoci5hYm9ydCgpfWNhdGNoKGUpe310aGlzLnhocj1udWxsfX0sci5wcm90b3R5cGUucmVhZHk9ZnVuY3Rpb24oZSxuKXt2YXIgcj10aGlzO3QudXRpbC5kZWZlcihmdW5jdGlvbigpe24uY2FsbChyKX0pfSx0LnRyYW5zcG9ydHMucHVzaChcInhoci1wb2xsaW5nXCIpfShcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW8uVHJhbnNwb3J0Om1vZHVsZS5leHBvcnRzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUucGFyZW50LmV4cG9ydHMsd2luZG93KSxmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlKXt0LlRyYW5zcG9ydFtcInhoci1wb2xsaW5nXCJdLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLmluZGV4PXQuai5sZW5ndGg7dmFyIG49dGhpczt0LmoucHVzaChmdW5jdGlvbihlKXtuLl8oZSl9KX12YXIgbz1uLmRvY3VtZW50JiZcIk1vekFwcGVhcmFuY2VcImluIG4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO2VbXCJqc29ucC1wb2xsaW5nXCJdPXIsdC51dGlsLmluaGVyaXQocix0LlRyYW5zcG9ydFtcInhoci1wb2xsaW5nXCJdKSxyLnByb3RvdHlwZS5uYW1lPVwianNvbnAtcG9sbGluZ1wiLHIucHJvdG90eXBlLnBvc3Q9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbigpe3IoKSxvLnNvY2tldC5zZXRCdWZmZXIoITEpfWZ1bmN0aW9uIHIoKXtvLmlmcmFtZSYmby5mb3JtLnJlbW92ZUNoaWxkKG8uaWZyYW1lKTt0cnl7YT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCc8aWZyYW1lIG5hbWU9XCInK28uaWZyYW1lSWQrJ1wiPicpfWNhdGNoKGUpe2E9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKSxhLm5hbWU9by5pZnJhbWVJZH1hLmlkPW8uaWZyYW1lSWQsby5mb3JtLmFwcGVuZENoaWxkKGEpLG8uaWZyYW1lPWF9dmFyIG89dGhpcyxpPXQudXRpbC5xdWVyeSh0aGlzLnNvY2tldC5vcHRpb25zLnF1ZXJ5LFwidD1cIisgK25ldyBEYXRlK1wiJmk9XCIrdGhpcy5pbmRleCk7aWYoIXRoaXMuZm9ybSl7dmFyIGEscz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKSx1PXRoaXMuaWZyYW1lSWQ9XCJzb2NrZXRpb19pZnJhbWVfXCIrdGhpcy5pbmRleDtzLmNsYXNzTmFtZT1cInNvY2tldGlvXCIscy5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIscy5zdHlsZS50b3A9XCIwcHhcIixzLnN0eWxlLmxlZnQ9XCIwcHhcIixzLnN0eWxlLmRpc3BsYXk9XCJub25lXCIscy50YXJnZXQ9dSxzLm1ldGhvZD1cIlBPU1RcIixzLnNldEF0dHJpYnV0ZShcImFjY2VwdC1jaGFyc2V0XCIsXCJ1dGYtOFwiKSxjLm5hbWU9XCJkXCIscy5hcHBlbmRDaGlsZChjKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHMpLHRoaXMuZm9ybT1zLHRoaXMuYXJlYT1jfXRoaXMuZm9ybS5hY3Rpb249dGhpcy5wcmVwYXJlVXJsKCkraSxyKCksdGhpcy5hcmVhLnZhbHVlPXQuSlNPTi5zdHJpbmdpZnkoZSk7dHJ5e3RoaXMuZm9ybS5zdWJtaXQoKX1jYXRjaChlKXt9dGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQ/YS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtcImNvbXBsZXRlXCI9PW8uaWZyYW1lLnJlYWR5U3RhdGUmJm4oKX06dGhpcy5pZnJhbWUub25sb2FkPW4sdGhpcy5zb2NrZXQuc2V0QnVmZmVyKCEwKX0sci5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikscj10LnV0aWwucXVlcnkodGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeSxcInQ9XCIrICtuZXcgRGF0ZStcIiZpPVwiK3RoaXMuaW5kZXgpO3RoaXMuc2NyaXB0JiYodGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCksdGhpcy5zY3JpcHQ9bnVsbCksbi5hc3luYz0hMCxuLnNyYz10aGlzLnByZXBhcmVVcmwoKStyLG4ub25lcnJvcj1mdW5jdGlvbigpe2Uub25DbG9zZSgpfTt2YXIgaT1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXTtpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG4saSksdGhpcy5zY3JpcHQ9bixvJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZSl9LDEwMCl9LHIucHJvdG90eXBlLl89ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub25EYXRhKGUpLHRoaXMuaXNPcGVuJiZ0aGlzLmdldCgpLHRoaXN9LHIucHJvdG90eXBlLnJlYWR5PWZ1bmN0aW9uKGUsbil7dmFyIHI9dGhpcztyZXR1cm4gbz92b2lkIHQudXRpbC5sb2FkKGZ1bmN0aW9uKCl7bi5jYWxsKHIpfSk6bi5jYWxsKHRoaXMpfSxyLmNoZWNrPWZ1bmN0aW9uKCl7cmV0dXJuXCJkb2N1bWVudFwiaW4gbn0sci54ZG9tYWluQ2hlY2s9ZnVuY3Rpb24oKXtyZXR1cm4hMH0sdC50cmFuc3BvcnRzLnB1c2goXCJqc29ucC1wb2xsaW5nXCIpfShcInVuZGVmaW5lZFwiIT10eXBlb2YgaW8/aW8uVHJhbnNwb3J0Om1vZHVsZS5leHBvcnRzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBpbz9pbzptb2R1bGUucGFyZW50LmV4cG9ydHMsd2luZG93KSxfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fPVtdLF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fPWZ1bmN0aW9uKCl7cmV0dXJuIGlvfS5hcHBseShleHBvcnRzLF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLCEodm9pZCAwIT09X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18mJihtb2R1bGUuZXhwb3J0cz1fX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpfSgpfSkuY2FsbChleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18oNDApKG1vZHVsZSkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fWZ1bmN0aW9uIG8oKXt9dmFyIGk9big5KSxhPXIoaSkscz1hW1wiZGVmYXVsdFwiXS5jbGllbnRUeXBlTWFwO28ucmV2ZXJzZT1mdW5jdGlvbihlKXt2YXIgdD1lO3JldHVybiB0LnR5cGU9c1t0LnR5cGVdLHR9LG8ucmV2ZXJzZVR5cGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHNbZV18fGV9LGUuZXhwb3J0cz1vfSwsLCxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD10aGlzO2kudmVyaWZ5T3B0aW9ucyhlLFwiYXBwS2V5IGFjY291bnQgdG9rZW4gY2hhdHJvb21JZCBjaGF0cm9vbUFkZHJlc3Nlc1wiKSxpLnZlcmlmeVBhcmFtVHlwZShcImNoYXRyb29tQWRkcmVzc2VzXCIsZS5jaGF0cm9vbUFkZHJlc3NlcyxcImFycmF5XCIpLGkudmVyaWZ5Q2FsbGJhY2soZSxcIm9uY29ubmVjdCBvbmVycm9yIG9ud2lsbHJlY29ubmVjdCBvbmRpc2Nvbm5lY3Qgb25tc2cgb25tc2dzXCIpLG8uY2FsbCh0LGUpfXZhciBvPW4oMTApLGk9bigxKSxhPWkudW5kZWYscz1pLm5vdHVuZGVmLGM9big2KSx1PW4oMTQpLmdldEluc3RhbmNlKFwiQ2hhdHJvb21cIiksbD1uKDU3KSxwPW4oNDQpLGY9by5mbixkPXIuZm49ci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShmKTtkLmluaXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2YuaW5pdC5jYWxsKGUpLGUucGFyc2VyPXUsZS5zeW5jUmVzdWx0PXt9LGUudGltZXRhZ3M9e30sZS5tc2dCdWZmZXI9W119LGQucmVzZXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2YucmVzZXQuY2FsbChlKTt2YXIgdD1lLm9wdGlvbnM7YSh0Lm1zZ0J1ZmZlckludGVydmFsKSYmKHQubXNnQnVmZmVySW50ZXJ2YWw9MzAwKSxpLnZlcmlmeVBhcmFtVHlwZShcIm1zZ0J1ZmZlckludGVydmFsXCIsdC5tc2dCdWZmZXJJbnRlcnZhbCxcIm51bWJlclwiKSxhKHQubXNnQnVmZmVyU2l6ZSkmJih0Lm1zZ0J1ZmZlclNpemU9NTAwKSxpLnZlcmlmeVBhcmFtVHlwZShcIm1zZ0J1ZmZlclNpemVcIix0Lm1zZ0J1ZmZlclNpemUsXCJudW1iZXJcIikscyh0LmNoYXRyb29tQWRkcmVzc2VzKSYmKGUuc29ja2V0VXJscz10LmNoYXRyb29tQWRkcmVzc2VzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gYy5mb3JtYXRTb2NrZXRVcmwoe3VybDp0LHNlY3VyZTplLm9wdGlvbnMuc2VjdXJlfSl9KSxlLnNvY2tldFVybHNCYWNrdXA9ZS5zb2NrZXRVcmxzLnNsaWNlKDApKX0sZC5wcm9jZXNzQ2hhdHJvb209ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztzd2l0Y2goZS5jbWQpe2Nhc2VcImxvZ2luXCI6ZS5lcnJvcnx8KGUub2JqPXtjaGF0cm9vbTpsLnJldmVyc2UoZS5jb250ZW50LmNoYXRyb29tKSxtZW1iZXI6cC5yZXZlcnNlKGUuY29udGVudC5jaGF0cm9vbU1lbWJlcil9KTticmVhaztjYXNlXCJraWNrZWRcIjp0Lm9uS2lja2VkKGUpO2JyZWFrO2Nhc2VcImxvZ291dFwiOmJyZWFrO2Nhc2VcInNlbmRNc2dcIjp0Lm9uU2VuZE1zZyhlKTticmVhaztjYXNlXCJtc2dcIjp0Lm9uTXNnKGUpO2JyZWFrO2Nhc2VcImdldENoYXRyb29tTWVtYmVyc1wiOnQub25DaGF0cm9vbU1lbWJlcnMoZSk7YnJlYWs7Y2FzZVwiZ2V0SGlzdG9yeU1zZ3NcIjp0Lm9uSGlzdG9yeU1zZ3MoZSk7YnJlYWs7Y2FzZVwibWFya0NoYXRyb29tTWVtYmVyXCI6dC5vbk1hcmtDaGF0cm9vbU1lbWJlcihlKTticmVhaztjYXNlXCJjbG9zZUNoYXRyb29tXCI6YnJlYWs7Y2FzZVwiZ2V0Q2hhdHJvb21cIjp0Lm9uQ2hhdHJvb20oZSk7YnJlYWs7Y2FzZVwidXBkYXRlQ2hhdHJvb21cIjpicmVhaztjYXNlXCJ1cGRhdGVNeUNoYXRyb29tTWVtYmVySW5mb1wiOmRlbGV0ZSBlLm9iai5jaGF0cm9vbU1lbWJlcjticmVhaztjYXNlXCJnZXRDaGF0cm9vbU1lbWJlcnNJbmZvXCI6dC5vbkNoYXRyb29tTWVtYmVyc0luZm8oZSk7YnJlYWs7Y2FzZVwia2lja0NoYXRyb29tTWVtYmVyXCI6YnJlYWs7Y2FzZVwidXBkYXRlQ2hhdHJvb21NZW1iZXJUZW1wTXV0ZVwiOmJyZWFrO2Nhc2VcInF1ZXVlTGlzdFwiOmUuZXJyb3J8fChlLm9iaj1lLmNvbnRlbnQpfX0sZC5vbkNoYXRyb29tPWZ1bmN0aW9uKGUpe2UuZXJyb3J8fChlLm9iai5jaGF0cm9vbT1sLnJldmVyc2UoZS5jb250ZW50LmNoYXRyb29tKSl9LGUuZXhwb3J0cz1yLG4oMTM4KSxuKDEzNyksbigxNDApLG4oMTM5KX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj10LmNyZWF0ZVVuaXF1ZUtleT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sP1N5bWJvbDpmdW5jdGlvbihlKXtyZXR1cm5cIltbXCIrZStcIl9cIitNYXRoLnJhbmRvbSgpLnRvRml4ZWQoOCkuc2xpY2UoMikrXCJdXVwifTt0LkxJU1RFTkVSUz1uKFwibGlzdGVuZXJzXCIpLHQuQ0FQVFVSRT0xLHQuQlVCQkxFPTIsdC5BVFRSSUJVVEU9Myx0Lm5ld05vZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm57bGlzdGVuZXI6ZSxraW5kOnQsbmV4dDpudWxsfX19LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWRcIik7cmV0dXJuIE9iamVjdChlKX1mdW5jdGlvbiByKCl7dHJ5e2lmKCFPYmplY3QuYXNzaWduKXJldHVybiExO3ZhciBlPW5ldyBTdHJpbmcoXCJhYmNcIik7aWYoZVs1XT1cImRlXCIsXCI1XCI9PT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKVswXSlyZXR1cm4hMTtmb3IodmFyIHQ9e30sbj0wO248MTA7bisrKXRbXCJfXCIrU3RyaW5nLmZyb21DaGFyQ29kZShuKV09bjt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KTtpZihcIjAxMjM0NTY3ODlcIiE9PXIuam9pbihcIlwiKSlyZXR1cm4hMTt2YXIgbz17fTtyZXR1cm5cImFiY2RlZmdoaWprbG1ub3BxcnN0XCIuc3BsaXQoXCJcIikuZm9yRWFjaChmdW5jdGlvbihlKXtvW2VdPWV9KSxcImFiY2RlZmdoaWprbG1ub3BxcnN0XCI9PT1PYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LG8pKS5qb2luKFwiXCIpfWNhdGNoKGUpe3JldHVybiExfX12YXIgbz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGk9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtlLmV4cG9ydHM9cigpP09iamVjdC5hc3NpZ246ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsYSxzPW4oZSksYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspe3I9T2JqZWN0KGFyZ3VtZW50c1tjXSk7Zm9yKHZhciB1IGluIHIpby5jYWxsKHIsdSkmJihzW3VdPXJbdV0pO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe2E9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhyKTtmb3IodmFyIGw9MDtsPGEubGVuZ3RoO2wrKylpLmNhbGwocixhW2xdKSYmKHNbYVtsXV09clthW2xdXSl9fXJldHVybiBzfX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCl7Zm9yKHZhciBuPXQuc3BsaXQoXCIuXCIpO24ubGVuZ3RoOyl7dmFyIHI9bi5zaGlmdCgpLG89ITE7aWYoXCI/XCI9PXJbci5sZW5ndGgtMV0mJihyPXIuc2xpY2UoMCwtMSksbz0hMCksZT1lW3JdLCFlJiZvKXJldHVybiBlfXJldHVybiBlfWUuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD10aGlzO3JldHVybiB0LnN1YlR5cGU9XCJjaGF0cm9vbVwiLGUuUHJvdG9jb2w9aSxlLk1lc3NhZ2U9YyxlLmNvbnN0cnVjdG9yPXIsdC5pbml0KGUpfXZhciBvPW4oNyksaT1uKDIyKSxhPW4oNikscz1uKDU3KSxjPW4oMTIwKSx1PW4oMSksbD11LnZlcmlmeU9wdGlvbnMscD11LnZlcmlmeVBhcmFtVHlwZSxmPW4oMTQpLmdldEluc3RhbmNlKFwiQ2hhdHJvb21cIik7ci5Qcm90b2NvbD1pLHIucGFyc2VyPWYsci51c2U9by51c2Usci5nZXRJbnN0YW5jZT1vLmdldEluc3RhbmNlLHIuZ2VuSW5zdGFuY2VOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiB1LnZlcmlmeU9wdGlvbnMoZSxcImNoYXRyb29tSWRcIiksXCJDaGF0cm9vbS1hY2NvdW50LVwiK2UuYWNjb3VudCtcIi1jaGF0cm9vbUlkLVwiK2UuY2hhdHJvb21JZH07dmFyIGQ9ci5mbj1yLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKTtyLmluZm89ZC5pbmZvPWEuaW5mbyxkLmdldENoYXRyb29tPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5wcm9jZXNzQ2FsbGJhY2soZSksdC5zZW5kQ21kKFwiZ2V0Q2hhdHJvb21cIixlKX0sZC51cGRhdGVDaGF0cm9vbT1mdW5jdGlvbihlKXtsKGUsXCJjaGF0cm9vbSBuZWVkTm90aWZ5XCIpLHAoXCJuZWVkTm90aWZ5XCIsZS5uZWVkTm90aWZ5LFwiYm9vbGVhblwiKSx0aGlzLnByb2Nlc3NDdXN0b20oZSksdGhpcy5wcm9jZXNzQ2FsbGJhY2soZSksZS5jaGF0cm9vbT1uZXcgcyhlLmNoYXRyb29tKSx0aGlzLnNlbmRDbWQoXCJ1cGRhdGVDaGF0cm9vbVwiLGUpfSxkLmNsb3NlQ2hhdHJvb209ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LnByb2Nlc3NDdXN0b20oZSksdC5wcm9jZXNzQ2FsbGJhY2soZSksdC5zZW5kQ21kKFwiY2xvc2VDaGF0cm9vbVwiLGUpfSxlLmV4cG9ydHM9cixuKDg2KSxuKDg1KSxuKDg3KX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7c3dpdGNoKGkubm90dW5kZWYoZS50eXBlKT9pLnZlcmlmeUZpbGVUeXBlKGUudHlwZSk6ZS50eXBlPVwiZmlsZVwiLGkudmVyaWZ5T3B0aW9ucyhlLFwiZmlsZVwiKSxpLnZlcmlmeU9wdGlvbnMoZS5maWxlLFwidXJsIGV4dCBzaXplIG1kNVwiLCEwLFwiZmlsZS5cIiksZS50eXBlKXtjYXNlXCJpbWFnZVwiOmEudmVyaWZ5RmlsZShlLmZpbGUpO2JyZWFrO2Nhc2VcImF1ZGlvXCI6cy52ZXJpZnlGaWxlKGUuZmlsZSk7YnJlYWs7Y2FzZVwidmlkZW9cIjpjLnZlcmlmeUZpbGUoZS5maWxlKX1vLmNhbGwodGhpcyxlKSx0aGlzLmF0dGFjaD1KU09OLnN0cmluZ2lmeShlLmZpbGUpfXZhciBvPW4oMTIpLGk9bigxKTtyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKSxyLnJldmVyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9by5yZXZlcnNlKGUpO3JldHVybiBlLmF0dGFjaD1lLmF0dGFjaD9cIlwiK2UuYXR0YWNoOlwiXCIsdC5maWxlPWUuYXR0YWNoP0pTT04ucGFyc2UoZS5hdHRhY2gpOnt9LFwiYXVkaW9cIj09PXQudHlwZSYmKHQuZmlsZS5tcDNVcmw9dC5maWxlLnVybCtcIj9hdWRpb1RyYW5zJnR5cGU9bXAzXCIpLHR9LGUuZXhwb3J0cz1yO3ZhciBhPW4oMTE5KSxzPW4oMTE2KSxjPW4oMTI0KX0sLCxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7bih0aGlzLGUpLHRoaXMuX2VudHJpZXM9W119cmV0dXJuIGUucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJGb3JtRGF0YSBuYW1lIG11c3QgYmUgYSBzdHJpbmdcIik7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQmJihcIm9iamVjdFwiIT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6cih0KSl8fFwic3RyaW5nXCIhPXR5cGVvZiB0LnVyaSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZvcm1EYXRhIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgb3IgeyB1cmk6IHRlbXBGaWxlUGF0aCB9XCIpO3RoaXMuX2VudHJpZXMucHVzaChbZSx0XSl9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZ2V0KGUpO24/blsxXT10OnRoaXMuYXBwZW5kKGUsdCl9LGUucHJvdG90eXBlW1wiZGVsZXRlXCJdPWZ1bmN0aW9uKGUpe3RoaXMuX2VudHJpZXM9dGhpcy5fZW50cmllcy5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF0hPT1lfSl9LGUucHJvdG90eXBlLmVudHJpZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW50cmllc30sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9lbnRyaWVzLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF09PT1lfSl9LGUucHJvdG90eXBlLmdldEFsbD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fZW50cmllcy5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF09PT1lfSl9LGUucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fZW50cmllcy5zb21lKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdPT09ZX0pfSxlLnByb3RvdHlwZS5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VudHJpZXMubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlWzBdfSl9LGUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbnRyaWVzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZVsxXX0pfSxlfSgpO2UuZXhwb3J0cz1vfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciByPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe24odGhpcyxlKX1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0SXRlbT1mdW5jdGlvbihlKXtyZXR1cm4gd3guZ2V0U3RvcmFnZVN5bmMoZSl9LGUucHJvdG90eXBlLnNldEl0ZW09ZnVuY3Rpb24oZSx0KXtyZXR1cm4gd3guc2V0U3RvcmFnZVN5bmMoZSx0KX0sZS5wcm90b3R5cGUucmVtb3ZlSXRlbT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZXRJdGVtKGUsXCJcIil9LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7cmV0dXJuIHd4LmNsZWFyU3RvcmFnZVN5bmMoKX0sZX0oKTtlLmV4cG9ydHM9bmV3IHJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBvKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gaShlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfXZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxyJiZlKHQsciksdH19KCkscz1uKDM3KSxjPW4oMjQpLHU9MCxsPTEscD0yLGY9MyxkPVtcIm9wZW5cIixcImVycm9yXCIsXCJtZXNzYWdlXCIsXCJjbG9zZVwiXSxtPXZvaWQgMDt3eC5vblNvY2tldE9wZW4oZnVuY3Rpb24oZSl7bSYmKG0uX3JlYWR5U3RhdGU9bCxtLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJvcGVuXCJ9KSl9KSx3eC5vblNvY2tldEVycm9yKGZ1bmN0aW9uKGUpe20mJihtLl9yZWFkeVN0YXRlPWYsbS5kaXNwYXRjaEV2ZW50KGUpKX0pLHd4Lm9uU29ja2V0TWVzc2FnZShmdW5jdGlvbihlKXtpZihtKXt2YXIgdD1lLmRhdGEsbj1lLm9yaWdpbixyPWUucG9ydHMsbz1lLnNvdXJjZTttLmRpc3BhdGNoRXZlbnQoe2RhdGE6dCxvcmlnaW46bixwb3J0czpyLHNvdXJjZTpvLHR5cGU6XCJtZXNzYWdlXCJ9KX19KSx3eC5vblNvY2tldENsb3NlKGZ1bmN0aW9uKGUpe2lmKG0pe20uX3JlYWR5U3RhdGU9Zjt2YXIgdD1lLmNvZGUsbj1lLnJlYXNvbixyPWUud2FzQ2xlYW47Y29uc29sZSYmdm9pZCAwLGNvbnNvbGUmJnZvaWQgMCxjb25zb2xlJiZ2b2lkIDAsbS5kaXNwYXRjaEV2ZW50KHtjb2RlOnQscmVhc29uOm4sd2FzQ2xlYW46cix0eXBlOlwiY2xvc2VcIn0pLG09bnVsbH19KTt2YXIgeT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KG4saSl7aWYocih0aGlzLHQpLCFuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdXZWJTb2NrZXQnOiB1cmwgcmVxdWlyZWRcIik7aWYoaSl0aHJvdyBuZXcgRXJyb3IoXCJzdWJwcm90b2NhbCBub3Qgc3VwcG9ydGVkIGluIHdlYXBwXCIpO3ZhciBhPW8odGhpcyxlLmNhbGwodGhpcykpO3JldHVybiBuPW4ucmVwbGFjZSgvOlxcZCsvLFwiXCIpLGEuX3VybD1uLGEuX3Byb3RvY2FsPVwiXCIsYS5fcmVhZHlTdGF0ZT11LG0mJm0uZGlzcGF0Y2hFdmVudCh7dHlwZTpcImNsb3NlXCJ9KSxtPWEsd3guY29ubmVjdFNvY2tldCh7dXJsOm59KSxhfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLnJlYWR5U3RhdGU9PT11LHd4LmNsb3NlU29ja2V0KCl9LHQucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oZSl7aWYodGhpcy5yZWFkeVN0YXRlIT09bCl0aHJvdyBuZXcgRXJyb3IoXCJJTlZBTElEX1NUQVRFX0VSUlwiKTtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwib25seSBzdHJpbmcgdHlwZWQgZGF0YSBhcmUgc3VwcG9ydGVkXCIpO3d4LnNlbmRTb2NrZXRNZXNzYWdlKHtkYXRhOmV9KX0sYSh0LFt7a2V5OlwidXJsXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3VybH19LHtrZXk6XCJwcm90b2NhbFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm90b2NhbH19LHtrZXk6XCJyZWFkeVN0YXRlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWR5U3RhdGV9fV0pLHR9KHMoZCkpO2MoeSx7Q09OTkVDVElORzp1LE9QRU46bCxDTE9TSU5HOnAsQ0xPU0VEOmZ9KSxlLmV4cG9ydHM9eX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIG8oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH1mdW5jdGlvbiBpKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9ZnVuY3Rpb24gYShlKXt0aGlzLnN0YXR1cz1lLnN0YXR1c0NvZGUsdGhpcy5zdGF0dXNUZXh0PWUuc3RhdHVzQ29kZTt2YXIgdD1lLmRhdGE7XCJzdHJpbmdcIiE9dHlwZW9mIHQmJih0PUpTT04uc3RyaW5naWZ5KHQpKSx0aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPXQsdGhpcy5yZWFkeVN0YXRlPW0sdGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwicmVhZHlzdGF0ZWNoYW5nZVwifSl9dmFyIHM9bigzNyksYz1uKDMwKSx1PW4oMjQpLGw9MCxwPTEsZj0yLGQ9MyxtPTQseT1bXCJhYm9ydFwiLFwiZXJyb3JcIixcImxvYWRcIixcImxvYWRzdGFydFwiLFwicHJvZ3Jlc3NcIixcInRpbWVvdXRcIixcImxvYWRlbmRcIixcInJlYWR5c3RhdGVjaGFuZ2VcIl0saD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cih0aGlzLHQpO3ZhciBuPW8odGhpcyxlLmNhbGwodGhpcykpO3JldHVybiBuLndpdGhDcmVkZW50aWFscz0hMCxuLnJlYWR5U3RhdGU9bCxuLl9oZWFkZXJzPXt9LG59cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5hYm9ydD1mdW5jdGlvbigpe30sdC5wcm90b3R5cGUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sdC5wcm90b3R5cGUuZ2V0UmVzcG9uc2VIZWFkZXI9ZnVuY3Rpb24oZSl7cmV0dXJuXCJjb250ZW50LXR5cGVcIj09PWU/XCJhcHBsaWNhdGlvbi9qc29uXCI6XCJcIn0sdC5wcm90b3R5cGUub3ZlcnJpZGVNaW1lVHlwZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIm5vdCBzdXBwb3J0ZWQgaW4gd2VhcHBcIil9LHQucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oZSx0KXt2YXIgbj0hKGFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdKXx8YXJndW1lbnRzWzJdO2lmKHRoaXMucmVhZHlTdGF0ZSE9PWwpdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBpcyBhbHJlYWR5IG9wZW5lZFwiKTtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJzeW5jIHJlcXVlc3QgaXMgbm90IHN1cHBvcnRlZFwiKTt0aGlzLl9tZXRob2Q9ZSx0PXQucmVwbGFjZSgvOlxcZCsvLFwiXCIpLHRoaXMuX3VybD10LHRoaXMucmVhZHlTdGF0ZT1wLHRoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcInJlYWR5c3RhdGVjaGFuZ2VcIn0pfSx0LnByb3RvdHlwZS5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5yZWFkeVN0YXRlIT09cCl0aHJvdyBuZXcgRXJyb3IoXCJyZXF1ZXN0IGlzIG5vdCBvcGVuZWRcIik7dGhpcy5faGVhZGVyc1tlLnRvTG93ZXJDYXNlKCldPXR9LHQucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLnJlYWR5U3RhdGUhPT1wKXRocm93IG5ldyBFcnJvcihcInJlcXVlc3QgaXMgbm90IG9wZW5lZFwiKTtpZihlIGluc3RhbmNlb2YgYyl7dmFyIG49ZS5lbnRyaWVzKCkscj1uLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZVsxXX0pO2lmKDA9PT1yLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHNwZWNpZnkgYSBCbG9iIGZpZWxkIGluIEZvcm1EYXRhXCIpO3IubGVuZ3RoPjE7dmFyIG89bi5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGVbMV19KS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gdShlLChuPXt9LG5bdFswXV09dFsxXSxuKSl9LHt9KTt3eC51cGxvYWRGaWxlKHt1cmw6dGhpcy5fdXJsLG5hbWU6clswXVswXSxmaWxlUGF0aDpyWzBdWzFdLnVyaSxmb3JtRGF0YTpvLGhlYWRlcjp0aGlzLl9oZWFkZXJzLHN1Y2Nlc3M6YS5iaW5kKHRoaXMpLGZhaWw6ZnVuY3Rpb24oZSl7dC5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZXJyb3JcIn0pfX0pfWVsc2Ugd3gucmVxdWVzdCh7dXJsOnRoaXMuX3VybCxkYXRhOmV8fFwiXCIsbWV0aG9kOnRoaXMuX21ldGhvZCxoZWFkZXI6dGhpcy5faGVhZGVycyxzdWNjZXNzOmEuYmluZCh0aGlzKSxmYWlsOmZ1bmN0aW9uKGUpe2UuZXJyTXNnJiZlLmVyck1zZy5pbmRleE9mKFwidXJsIG5vdCBpbiBkb21haW4gbGlzdFwiKSE9PS0xJiZ3eC5zaG93TW9kYWwoe3RpdGxlOlwiZG9tYWluIGVycm9yXCIsY29udGVudDplLmVyck1zZytcIiBcIit0Ll91cmx9KSx0LmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJlcnJvclwifSl9fSl9LHR9KHMoeSkpO3UoaCx7VU5TRU5UOmwsT1BFTkVEOnAsSEVBREVSU19SRUNFSVZFRDpmLExPQURJTkc6ZCxET05FOm19KSxlLmV4cG9ydHM9aH0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7by52ZXJpZnlPcHRpb25zKGUsXCJ0eXBlXCIpLG8udmVyaWZ5UGFyYW1WYWxpZChcInR5cGVcIixlLnR5cGUsci52YWxpZFR5cGVzKSxvLm1lcmdlKHRoaXMsZSksdGhpcy50eXBlPWlbZS50eXBlXX12YXIgbz1uKDEpLGk9e3N0cmlwbWV0YTowLGJsdXI6MixxdWFsaXR5OjMsY3JvcDo0LHJvdGF0ZTo1LHRodW1ibmFpbDo3LGludGVybGFjZTo5fSxhPXswOlwic3RyaXBtZXRhXCIsMTpcInR5cGVcIiwyOlwiYmx1clwiLDM6XCJxdWFsaXR5XCIsNDpcImNyb3BcIiw1Olwicm90YXRlXCIsNjpcInBpeGVsXCIsNzpcInRodW1ibmFpbFwiLDg6XCJ3YXRlcm1hcmtcIiw5OlwiaW50ZXJsYWNlXCIsMTA6XCJ0bXBcIn07ci52YWxpZFR5cGVzPU9iamVjdC5rZXlzKGkpLHIucmV2ZXJzZT1mdW5jdGlvbihlKXt2YXIgdD1vLmNvcHkoZSk7cmV0dXJuIHQudHlwZT1hW3QudHlwZV0sdH0sci5yZXZlcnNlSW1hZ2VPcHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiByLnJldmVyc2UoZSl9KX0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49e2xpbms6e2lkOjEsaGVhcnRiZWF0OjJ9LG1pc2M6e2lkOjYsZ2V0U2ltcGxlTm9zVG9rZW46MSxnZXROb3NUb2tlbjoyLG5vdGlmeVVwbG9hZExvZzozLHVwbG9hZFNka0xvZ1VybDo0LGF1ZGlvVG9UZXh0OjUscHJvY2Vzc0ltYWdlOjZ9fSxyPXtoZWFydGJlYXQ6e3NpZDpuLmxpbmsuaWQsY2lkOm4ubGluay5oZWFydGJlYXR9LGdldFNpbXBsZU5vc1Rva2VuOntzaWQ6bi5taXNjLmlkLGNpZDpuLm1pc2MuZ2V0U2ltcGxlTm9zVG9rZW4scGFyYW1zOlt7dHlwZTpcImludFwiLG5hbWU6XCJudW1cIn1dfSxnZXROb3NUb2tlbjp7c2lkOm4ubWlzYy5pZCxjaWQ6bi5taXNjLmdldE5vc1Rva2VuLHBhcmFtczpbe3R5cGU6XCJTdHJpbmdcIixuYW1lOlwicmVzcG9uc2VCb2R5XCJ9XX0sdXBsb2FkU2RrTG9nVXJsOntzaWQ6bi5taXNjLmlkLGNpZDpuLm1pc2MudXBsb2FkU2RrTG9nVXJsLHBhcmFtczpbe3R5cGU6XCJzdHJpbmdcIixuYW1lOlwidXJsXCJ9XX0sYXVkaW9Ub1RleHQ6e3NpZDpuLm1pc2MuaWQsY2lkOm4ubWlzYy5hdWRpb1RvVGV4dCxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwiYXVkaW9Ub1RleHRcIn1dfSxwcm9jZXNzSW1hZ2U6e3NpZDpuLm1pc2MuaWQsY2lkOm4ubWlzYy5wcm9jZXNzSW1hZ2UscGFyYW1zOlt7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJ1cmxcIn0se3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcImltYWdlT3BzXCIsZW50aXR5OlwiaW1hZ2VPcFwifV19fSxvPXtcIjFfMlwiOntzZXJ2aWNlOlwibGlua1wiLGNtZDpcImhlYXJ0YmVhdFwifSxcIjZfMVwiOntzZXJ2aWNlOlwibWlzY1wiLGNtZDpcImdldFNpbXBsZU5vc1Rva2VuXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJub3NUb2tlbnNcIixlbnRpdHk6XCJub3NUb2tlblwifV19LFwiNl8yXCI6e3NlcnZpY2U6XCJtaXNjXCIsY21kOlwiZ2V0Tm9zVG9rZW5cIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJub3NUb2tlblwifV19LFwiNl8zXCI6e3NlcnZpY2U6XCJtaXNjXCIsY21kOlwibm90aWZ5VXBsb2FkTG9nXCJ9LFwiNl81XCI6e3NlcnZpY2U6XCJtaXNjXCIsY21kOlwiYXVkaW9Ub1RleHRcIixyZXNwb25zZTpbe3R5cGU6XCJTdHJpbmdcIixuYW1lOlwidGV4dFwifV19LFwiNl82XCI6e3NlcnZpY2U6XCJtaXNjXCIsY21kOlwicHJvY2Vzc0ltYWdlXCIscmVzcG9uc2U6W3t0eXBlOlwiU3RyaW5nXCIsbmFtZTpcInVybFwifV19fTtlLmV4cG9ydHM9e2lkTWFwOm4sY21kQ29uZmlnOnIscGFja2V0Q29uZmlnOm99fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigxKSxvPXt9O28uZnJvbURhdGFVUkw9ci5ibG9iRnJvbURhdGFVUkwsZS5leHBvcnRzPW99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDIzKSxvPW4oNzQpLGk9big3NSksYT1yLkxJU1RFTkVSUyxzPXIuQ0FQVFVSRSxjPXIuQlVCQkxFLHU9ci5BVFRSSUJVVEUsbD1yLm5ld05vZGUscD1vLmRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0LGY9aS5jcmVhdGVFdmVudFdyYXBwZXIsZD1pLlNUT1BfSU1NRURJQVRFX1BST1BBR0FUSU9OX0ZMQUcsbT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93LkV2ZW50VGFyZ2V0LHk9ZS5leHBvcnRzPWZ1bmN0aW9uIGgoKXtpZighKHRoaXMgaW5zdGFuY2VvZiBoKSl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgmJkFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzBdKSlyZXR1cm4gcChoLGFyZ3VtZW50c1swXSk7aWYoYXJndW1lbnRzLmxlbmd0aD4wKXtmb3IodmFyIGU9QXJyYXkoYXJndW1lbnRzLmxlbmd0aCksdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDsrK3QpZVt0XT1hcmd1bWVudHNbdF07cmV0dXJuIHAoaCxlKX10aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGEse3ZhbHVlOk9iamVjdC5jcmVhdGUobnVsbCl9KX07eS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSgobT93aW5kb3cuRXZlbnRUYXJnZXQ6T2JqZWN0KS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp5LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0sYWRkRXZlbnRMaXN0ZW5lcjp7dmFsdWU6ZnVuY3Rpb24oZSx0LG4pe2lmKG51bGw9PXQpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmXCJvYmplY3RcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGlzIG5vdCBhbiBvYmplY3QuJyk7dmFyIHI9bj9zOmMsbz10aGlzW2FdW2VdO2lmKG51bGw9PW8pcmV0dXJuIHRoaXNbYV1bZV09bCh0LHIpLCEwO2Zvcih2YXIgaT1udWxsO251bGwhPW87KXtpZihvLmxpc3RlbmVyPT09dCYmby5raW5kPT09cilyZXR1cm4hMTtpPW8sbz1vLm5leHR9cmV0dXJuIGkubmV4dD1sKHQsciksITB9LGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0scmVtb3ZlRXZlbnRMaXN0ZW5lcjp7dmFsdWU6ZnVuY3Rpb24oZSx0LG4pe2lmKG51bGw9PXQpcmV0dXJuITE7Zm9yKHZhciByPW4/czpjLG89bnVsbCxpPXRoaXNbYV1bZV07bnVsbCE9aTspe2lmKGkubGlzdGVuZXI9PT10JiZpLmtpbmQ9PT1yKXJldHVybiBudWxsPT1vP3RoaXNbYV1bZV09aS5uZXh0Om8ubmV4dD1pLm5leHQsITA7bz1pLGk9aS5uZXh0fXJldHVybiExfSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9LGRpc3BhdGNoRXZlbnQ6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbYV1bZS50eXBlXTtpZihudWxsPT10KXJldHVybiEwO2Zvcih2YXIgbj1mKGUsdGhpcyk7bnVsbCE9dCYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQubGlzdGVuZXI/dC5saXN0ZW5lci5jYWxsKHRoaXMsbik6dC5raW5kIT09dSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5saXN0ZW5lci5oYW5kbGVFdmVudCYmdC5saXN0ZW5lci5oYW5kbGVFdmVudChuKSwhbltkXSk7KXQ9dC5uZXh0O3JldHVybiFuLmRlZmF1bHRQcmV2ZW50ZWR9LGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH19KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUpe3ZhciB0PXIuY2FsbChlKTtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PT10fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZcIltvYmplY3QgUmVnRXhwXVwiIT09dHx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKGU9PT13aW5kb3cuc2V0VGltZW91dHx8ZT09PXdpbmRvdy5hbGVydHx8ZT09PXdpbmRvdy5jb25maXJtfHxlPT09d2luZG93LnByb21wdCl9ZS5leHBvcnRzPW47dmFyIHI9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ30sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24gbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciByLG8saT0vKF4oWytcXC1dPyg/OjB8WzEtOV1cXGQqKSg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/KT8kfF4weFswLTlhLWZdKyR8XFxkKykvZ2ksYT0vKF5bIF0qfFsgXSokKS9nLHM9LyheKFtcXHcgXSssP1tcXHcgXSspP1tcXHcgXSssP1tcXHcgXStcXGQrOlxcZCsoOlxcZCspP1tcXHcgXT98XlxcZHsxLDR9W1xcL1xcLV1cXGR7MSw0fVtcXC9cXC1dXFxkezEsNH18XlxcdyssIFxcdysgXFxkKywgXFxkezR9KS8sYz0vXjB4WzAtOWEtZl0rJC9pLHU9L14wLyxsPWZ1bmN0aW9uKGUpe3JldHVybiBuLmluc2Vuc2l0aXZlJiYoXCJcIitlKS50b0xvd2VyQ2FzZSgpfHxcIlwiK2V9LHA9bChlKS5yZXBsYWNlKGEsXCJcIil8fFwiXCIsZj1sKHQpLnJlcGxhY2UoYSxcIlwiKXx8XCJcIixkPXAucmVwbGFjZShpLFwiXFwwJDFcXDBcIikucmVwbGFjZSgvXFwwJC8sXCJcIikucmVwbGFjZSgvXlxcMC8sXCJcIikuc3BsaXQoXCJcXDBcIiksbT1mLnJlcGxhY2UoaSxcIlxcMCQxXFwwXCIpLnJlcGxhY2UoL1xcMCQvLFwiXCIpLnJlcGxhY2UoL15cXDAvLFwiXCIpLnNwbGl0KFwiXFwwXCIpLHk9cGFyc2VJbnQocC5tYXRjaChjKSwxNil8fDEhPT1kLmxlbmd0aCYmcC5tYXRjaChzKSYmRGF0ZS5wYXJzZShwKSxoPXBhcnNlSW50KGYubWF0Y2goYyksMTYpfHx5JiZmLm1hdGNoKHMpJiZEYXRlLnBhcnNlKGYpfHxudWxsO2lmKGgpe2lmKHk8aClyZXR1cm4tMTtpZih5PmgpcmV0dXJuIDF9Zm9yKHZhciB2PTAsZz1NYXRoLm1heChkLmxlbmd0aCxtLmxlbmd0aCk7djxnO3YrKyl7aWYocj0hKGRbdl18fFwiXCIpLm1hdGNoKHUpJiZwYXJzZUZsb2F0KGRbdl0pfHxkW3ZdfHwwLG89IShtW3ZdfHxcIlwiKS5tYXRjaCh1KSYmcGFyc2VGbG9hdChtW3ZdKXx8bVt2XXx8MCxpc05hTihyKSE9PWlzTmFOKG8pKXJldHVybiBpc05hTihyKT8xOi0xO2lmKHR5cGVvZiByIT10eXBlb2YgbyYmKHIrPVwiXCIsbys9XCJcIikscjxvKXJldHVybi0xO2lmKHI+bylyZXR1cm4gMX1yZXR1cm4gMH19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlLndlYnBhY2tQb2x5ZmlsbHx8KGUuZGVwcmVjYXRlPWZ1bmN0aW9uKCl7fSxlLnBhdGhzPVtdLGUuY2hpbGRyZW49W10sZS53ZWJwYWNrUG9seWZpbGw9MSksZX19LGZ1bmN0aW9uKGUsdCxuKXshZnVuY3Rpb24odCxuKXtlLmV4cG9ydHM9bigpfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQocil7aWYobltyXSlyZXR1cm4gbltyXS5leHBvcnRzO3ZhciBvPW5bcl09e2V4cG9ydHM6e30saWQ6cixsb2FkZWQ6ITF9O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubG9hZGVkPSEwLG8uZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5wPVwiXCIsdCgwKX0oW2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ZnVuY3Rpb24gbyhlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG4gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmKHRbbl09ZVtuXSk7cmV0dXJuIHRbXCJkZWZhdWx0XCJdPWUsdH10Ll9fZXNNb2R1bGU9ITA7dmFyIGk9bigxKSxhPW8oaSkscz1uKDMpLGM9byhzKSx1PW4oNCksbD1vKHUpLHA9big1KSxmPW8ocCksZD1uKDYpLG09byhkKSx5PW4oOCksaD1yKHkpLHY9bigyKSxnPXIodiksYj1uKDkpLGs9byhiKSx3PW4oMTApLFM9byh3KSxUPW4oMTEpLE09cihUKSxfPW4oMTIpLHg9byhfKSxDPW4oNyksRT1vKEMpLE89bigxMyksUD1vKE8pLEk9eC5tZXJnZSh7fSxhLGMsbCxmLG0se2Zvck93bjpoW1wiZGVmYXVsdFwiXSxnZXRHbG9iYWw6Z1tcImRlZmF1bHRcIl19LGssUyx7bWl4aW46TVtcImRlZmF1bHRcIl19LHgsRSxQKTtkZWxldGUgSS5fX2VzTW9kdWxlLHRbXCJkZWZhdWx0XCJdPUksZS5leHBvcnRzPXRbXCJkZWZhdWx0XCJdfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fWZ1bmN0aW9uIG8oZSl7dmFyIHQ9KDAsc1tcImRlZmF1bHRcIl0pKCksbj12b2lkIDA7bj1lLnNwbGl0KFwiLFwiKVswXS5pbmRleE9mKFwiYmFzZTY0XCIpPj0wP3QuYXRvYihlLnNwbGl0KFwiLFwiKVsxXSk6dC5kZWNvZGVVUklDb21wb25lbnQoZS5zcGxpdChcIixcIilbMV0pO2Zvcih2YXIgcj1lLnNwbGl0KFwiLFwiKVswXS5zcGxpdChcIjpcIilbMV0uc3BsaXQoXCI7XCIpWzBdLG89bmV3IFVpbnQ4QXJyYXkobi5sZW5ndGgpLGk9MDtpPG4ubGVuZ3RoO2krKylvW2ldPW4uY2hhckNvZGVBdChpKTtcclxucmV0dXJuIG5ldyB0LkJsb2IoW29dLHt0eXBlOnJ9KX1mdW5jdGlvbiBpKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlwiaW1hZ2UvanBlZ1wiLHI9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOjE7aWYoZS50b0Jsb2IpZS50b0Jsb2IodCxuLHIpO2Vsc2V7dmFyIGk9ZS50b0RhdGFVUkwobixyKTt0KG8oaSkpfX10Ll9fZXNNb2R1bGU9ITAsdC5ibG9iRnJvbURhdGFVUkw9byx0LmJsb2JGcm9tQ2FudmFzPWk7dmFyIGE9bigyKSxzPXIoYSl9LGZ1bmN0aW9uKGUsdCl7KGZ1bmN0aW9uKG4pe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0W1wiZGVmYXVsdFwiXT1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG4/bjp7fX0sZS5leHBvcnRzPXRbXCJkZWZhdWx0XCJdfSkuY2FsbCh0LGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dmFyIHQ9ITEsbj1cIldlYmtpdCBNb3ogbXMgT1wiLnNwbGl0KFwiIFwiKSxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbz1udWxsO2lmKGU9ZS50b0xvd2VyQ2FzZSgpLHZvaWQgMCE9PXIuc3R5bGVbZV0mJih0PSEwKSx0PT09ITEpe289ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnN1YnN0cigxKTtmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKylpZih2b2lkIDAhPT1yLnN0eWxlW25baV0rb10pe3Q9ITA7YnJlYWt9fXJldHVybiB0fXQuX19lc01vZHVsZT0hMCx0LmRldGVjdENTU0ZlYXR1cmU9bn0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt0Ll9fZXNNb2R1bGU9ITA7dC5vPXt9LHQuZW1wdHlPYmo9e30sdC5mPWZ1bmN0aW9uKCl7fSx0LmVtcHR5RnVuYz1mdW5jdGlvbigpe30sdC5yZWdCbGFuaz0vXFxzKy9naSx0LnJlZ1doaXRlU3BhY2U9L1xccysvZ2l9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe3Q9dHx8Mjtmb3IodmFyIG49XCJcIitlO24ubGVuZ3RoPHQ7KW49XCIwXCIrbjtyZXR1cm4gbn1mdW5jdGlvbiByKGUpe3JldHVyblwiXCIrZS5nZXRGdWxsWWVhcigpfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIG4oZS5nZXRNb250aCgpKzEpfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIG4oZS5nZXREYXRlKCkpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIG4oZS5nZXRIb3VycygpKX1mdW5jdGlvbiBzKGUpe3JldHVybiBuKGUuZ2V0TWludXRlcygpKX1mdW5jdGlvbiBjKGUpe3JldHVybiBuKGUuZ2V0U2Vjb25kcygpKX1mdW5jdGlvbiB1KGUpe3JldHVybiBuKGUuZ2V0TWlsbGlzZWNvbmRzKCksMyl9ZnVuY3Rpb24gbChlKXtyZXR1cm4gZT1cIlwiK2UsbmV3IERhdGUoZS5yZXBsYWNlKC8tL2csXCIvXCIpLnJlcGxhY2UoXCJUXCIsXCIgXCIpKX10Ll9fZXNNb2R1bGU9ITAsdC5maXg9bix0LmdldFllYXJTdHI9cix0LmdldE1vbnRoU3RyPW8sdC5nZXREYXlTdHI9aSx0LmdldEhvdXJTdHI9YSx0LmdldE1pbnV0ZVN0cj1zLHQuZ2V0U2Vjb25kU3RyPWMsdC5nZXRNaWxsaXNlY29uZFN0cj11LHQuZGF0ZUZyb21EYXRlVGltZUxvY2FsPWw7dC5mb3JtYXQ9ZnVuY3Rpb24oKXt2YXIgZT0veXl5eXxNTXxkZHxoaHxtbXxzc3xTU1MvZyx0PXt5eXl5OnIsTU06byxkZDppLGhoOmEsbW06cyxzczpjLFNTUzp1fTtyZXR1cm4gZnVuY3Rpb24obixyKXtyZXR1cm4gbj1uZXcgRGF0ZShuKSxpc05hTigrbik/XCJpbnZhbGlkIGRhdGVcIjoocj1yfHxcInl5eXktTU0tZGRcIixyLnJlcGxhY2UoZSxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXShuKX0pKX19KCl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7Zm9yKDt0LnBhcmVudE5vZGU7KXtpZih0LnBhcmVudE5vZGU9PT1lKXJldHVybiEwO3Q9dC5wYXJlbnROb2RlfXJldHVybiExfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlfHxkb2N1bWVudC5ib2R5O2U9ZS5jbG9uZU5vZGUoITApLGUuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsZS5zdHlsZS5vcGFjaXR5PTAsZS5zdHlsZS5oZWlnaHQ9XCJhdXRvXCIsdC5hcHBlbmRDaGlsZChlKTt2YXIgbj1lLm9mZnNldEhlaWdodDtyZXR1cm4gdC5yZW1vdmVDaGlsZChlKSxufWZ1bmN0aW9uIGkoZSl7ZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9ZnVuY3Rpb24gYShlLHQsbil7cmV0dXJuKDAsbC5leGlzdCkobik/dm9pZCBlLnNldEF0dHJpYnV0ZShcImRhdGEtXCIrdCxuKTplLmdldEF0dHJpYnV0ZShcImRhdGEtXCIrdCl9ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZS50YXJnZXR8fGUuc3JjRWxlbWVudH1mdW5jdGlvbiBjKGUpe2Z1bmN0aW9uIHQocil7bi5zcmMmJihlLm11bHRpfHxtKG4sXCJsb2FkXCIsdCksZS5vbmxvYWQocikpfWU9ZXx8e307dmFyIG47aWYoZS5uYW1lKXRyeXtuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJzxpZnJhbWUgbmFtZT1cIicrZS5uYW1lKydcIj48L2lmcmFtZT4nKSxuLmZyYW1lQm9yZGVyPTB9Y2F0Y2goZXJyb3Ipe249ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKSxuLm5hbWU9ZS5uYW1lfWVsc2Ugbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO2UudmlzaWJsZXx8KG4uc3R5bGUuZGlzcGxheT1cIm5vbmVcIiksKDAsbC5pc0Z1bmN0aW9uKShlLm9ubG9hZCkmJmYobixcImxvYWRcIix0KTt2YXIgcj1lLnBhcmVudDsocnx8ZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQobik7dmFyIG89ZS5zcmN8fFwiYWJvdXQ6YmxhbmtcIjtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe24uc3JjPW99LDApLG59ZnVuY3Rpb24gdShlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuaW5uZXJIVE1MPWU7dmFyIG49W10scj12b2lkIDAsbz12b2lkIDA7aWYodC5jaGlsZHJlbilmb3Iocj0wLG89dC5jaGlsZHJlbi5sZW5ndGg7cjxvO3IrKyluLnB1c2godC5jaGlsZHJlbltyXSk7ZWxzZSBmb3Iocj0wLG89dC5jaGlsZE5vZGVzLmxlbmd0aDtyPG87cisrKXt2YXIgaT10LmNoaWxkTm9kZXNbcl07MT09PWkubm9kZVR5cGUmJm4ucHVzaChpKX1yZXR1cm4gbi5sZW5ndGg+MT90Om5bMF19dC5fX2VzTW9kdWxlPSEwLHQub2ZmPXQucmVtb3ZlRXZlbnRMaXN0ZW5lcj10Lm9uPXQuYWRkRXZlbnRMaXN0ZW5lcj12b2lkIDAsdC5jb250YWluc05vZGU9cix0LmNhbGNIZWlnaHQ9byx0LnJlbW92ZT1pLHQuZGF0YXNldD1hLHQudGFyZ2V0PXMsdC5jcmVhdGVJZnJhbWU9Yyx0Lmh0bWwybm9kZT11O3ZhciBsPW4oNykscD10LmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0LG4pe2UuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIodCxuLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KFwib25cIit0LG4pfSxmPXQub249cCxkPXQucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQsbil7ZS5yZW1vdmVFdmVudExpc3RlbmVyP2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4sITEpOmUuZGV0YWNoRXZlbnQmJmUuZGV0YWNoRXZlbnQoXCJvblwiK3Qsbil9LG09dC5vZmY9ZH0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9ZnVuY3Rpb24gcihlKXtyZXR1cm4gbihlKS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIG8oZSl7cmV0dXJuXCJzdHJpbmdcIj09PXIoZSl9ZnVuY3Rpb24gaShlKXtyZXR1cm5cIm51bWJlclwiPT09cihlKX1mdW5jdGlvbiBhKGUpe3JldHVyblwiYm9vbGVhblwiPT09cihlKX1mdW5jdGlvbiBzKGUpe3JldHVyblwiYXJyYXlcIj09PXIoZSl9ZnVuY3Rpb24gYyhlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT1yKGUpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuXCJkYXRlXCI9PT1yKGUpfWZ1bmN0aW9uIGwoZSl7cmV0dXJuXCJyZWdleHBcIj09PXIoZSl9ZnVuY3Rpb24gcChlKXtyZXR1cm5cImVycm9yXCI9PT1yKGUpfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIG51bGw9PT1lfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIG51bGwhPT1lfWZ1bmN0aW9uIG0oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGV9ZnVuY3Rpb24geShlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgZX1mdW5jdGlvbiBoKGUpe3JldHVybiB5KGUpJiZkKGUpfWZ1bmN0aW9uIHYoZSl7cmV0dXJuIG0oZSl8fGYoZSl9ZnVuY3Rpb24gZyhlKXtyZXR1cm4gaChlKSYmXCJvYmplY3RcIj09PXIoZSl9ZnVuY3Rpb24gYihlKXtyZXR1cm4gdihlKXx8KG8oZSl8fHMoZSkpJiYwPT09ZS5sZW5ndGh9dC5fX2VzTW9kdWxlPSEwLHQuZ2V0Q2xhc3M9bix0LnR5cGVPZj1yLHQuaXNTdHJpbmc9byx0LmlzTnVtYmVyPWksdC5pc0Jvb2xlYW49YSx0LmlzQXJyYXk9cyx0LmlzRnVuY3Rpb249Yyx0LmlzRGF0ZT11LHQuaXNSZWdFeHA9bCx0LmlzRXJyb3I9cCx0LmlzbnVsbD1mLHQubm90bnVsbD1kLHQudW5kZWY9bSx0Lm5vdHVuZGVmPXksdC5leGlzdD1oLHQubm90ZXhpc3Q9dix0LmlzT2JqZWN0PWcsdC5pc0VtcHR5PWJ9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dC5fX2VzTW9kdWxlPSEwLHRbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmZ1bmN0aW9uKCl7fSxuPWFyZ3VtZW50c1syXTtmb3IodmFyIHIgaW4gZSllLmhhc093blByb3BlcnR5KHIpJiZ0LmNhbGwobixyLGVbcl0pfSxlLmV4cG9ydHM9dFtcImRlZmF1bHRcIl19LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dC5fX2VzTW9kdWxlPSEwO3QudW5pcXVlSUQ9ZnVuY3Rpb24oKXt2YXIgZT0wO3JldHVybiBmdW5jdGlvbigpe3JldHVyblwiXCIrZSsrfX0oKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1mdW5jdGlvbiBvKGUpe3JldHVybigwLGMuaXNTdHJpbmcpKGUpJiYwPT09ZS5pbmRleE9mKFwie1wiKSYmZS5sYXN0SW5kZXhPZihcIn1cIik9PT1lLmxlbmd0aC0xfWZ1bmN0aW9uIGkoZSl7dHJ5e28oZSkmJihlPUpTT04ucGFyc2UoZSkpLCgwLGMuaXNPYmplY3QpKGUpJiYoMCxzW1wiZGVmYXVsdFwiXSkoZSxmdW5jdGlvbih0LG4pe3N3aXRjaCgoMCxjLnR5cGVPZikobikpe2Nhc2VcInN0cmluZ1wiOmNhc2VcIm9iamVjdFwiOmVbdF09aShuKX19KX1jYXRjaChlcnJvcil7fXJldHVybiBlfXQuX19lc01vZHVsZT0hMCx0LmlzSlNPTj1vLHQucGFyc2VKU09OPWk7dmFyIGE9big4KSxzPXIoYSksYz1uKDcpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXQuX19lc01vZHVsZT0hMDt2YXIgbz1uKDgpLGk9cihvKTt0W1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlLHQpeygwLGlbXCJkZWZhdWx0XCJdKSh0LGZ1bmN0aW9uKHQsbil7ZVt0XT1ufSl9LGUuZXhwb3J0cz10W1wiZGVmYXVsdFwiXX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1mdW5jdGlvbiBvKGUpe3JldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGUpKX1mdW5jdGlvbiBpKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSx0PWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbih0KXsoMCxmW1wiZGVmYXVsdFwiXSkoZSx0KX0pLGV9ZnVuY3Rpb24gYShlLHQpe3JldHVybigwLG1bXCJkZWZhdWx0XCJdKSh0LGZ1bmN0aW9uKHQsbil7KDAseS51bmRlZikoZVt0XSkmJihlW3RdPW4pfSksZX1mdW5jdGlvbiBzKGUsdCxuKXt2YXIgcj1lW3RdfHxlW3QudG9Mb3dlckNhc2UoKV07cmV0dXJuKDAseS5ub3RleGlzdCkocikmJihyPW4sZVt0XT1yKSxyfWZ1bmN0aW9uIGMoZSx0KXtyZXR1cm4oMCxtW1wiZGVmYXVsdFwiXSkoZSxmdW5jdGlvbihuLHIpeygwLHkuZXhpc3QpKHRbbl0pJiYoZVtuXT10W25dKX0pLGV9ZnVuY3Rpb24gdSgpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcIlwiLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiLFwiLG49e307cmV0dXJuIGUuc3BsaXQodCkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLnNwbGl0KFwiPVwiKSxyPXQuc2hpZnQoKTtyJiYobltkZWNvZGVVUklDb21wb25lbnQocildPWRlY29kZVVSSUNvbXBvbmVudCh0LmpvaW4oXCI9XCIpKSl9KSxufWZ1bmN0aW9uIGwoZSx0LG4pe2lmKCFlKXJldHVyblwiXCI7dmFyIHI9W107cmV0dXJuKDAsbVtcImRlZmF1bHRcIl0pKGUsZnVuY3Rpb24oZSx0KXsoMCx5LmlzRnVuY3Rpb24pKHQpfHwoKDAseS5pc0RhdGUpKHQpP3Q9dC5nZXRUaW1lKCk6KDAseS5pc0FycmF5KSh0KT90PXQuam9pbihcIixcIik6KDAseS5pc09iamVjdCkodCkmJih0PUpTT04uc3RyaW5naWZ5KHQpKSxuJiYodD1lbmNvZGVVUklDb21wb25lbnQodCkpLHIucHVzaChlbmNvZGVVUklDb21wb25lbnQoZSkrXCI9XCIrdCkpfSksci5qb2luKHR8fFwiLFwiKX10Ll9fZXNNb2R1bGU9ITAsdC5zaW1wbGVDbG9uZT1vLHQubWVyZ2U9aSx0LmZpbGxVbmRlZj1hLHQuY2hlY2tXaXRoRGVmYXVsdD1zLHQuZmV0Y2g9Yyx0LnN0cmluZzJvYmplY3Q9dSx0Lm9iamVjdDJzdHJpbmc9bDt2YXIgcD1uKDExKSxmPXIocCksZD1uKDgpLG09cihkKSx5PW4oNyl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlLmluZGV4T2YoXCI/XCIpPDA/XCI/XCI6XCImXCJ9ZnVuY3Rpb24gbyhlKXtyZXR1cm4oMCxpLm9iamVjdDJzdHJpbmcpKGUsXCImXCIsITApfXQuX19lc01vZHVsZT0hMCx0LnVybDJvcmlnaW49dm9pZCAwLHQuZ2VuVXJsU2VwPXIsdC5vYmplY3QycXVlcnk9bzt2YXIgaT1uKDEyKTt0LnVybDJvcmlnaW49ZnVuY3Rpb24oKXt2YXIgZT0vXihbXFx3XSs/OlxcL1xcLy4qPyg/PVxcL3wkKSkvaTtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUudGVzdCh0fHxcIlwiKT9SZWdFeHAuJDEudG9Mb3dlckNhc2UoKTpcIlwifX0oKX1dKX0pfSxmdW5jdGlvbihlLHQsbil7dmFyIHI7KGZ1bmN0aW9uKG8peyFmdW5jdGlvbihpLGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHMoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgaT9pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG8/bzp7fX1pPXMoKTt2YXIgYyx1PWkuSURCS2V5UmFuZ2V8fGkud2Via2l0SURCS2V5UmFuZ2UsbD17cmVhZG9ubHk6XCJyZWFkb25seVwiLHJlYWR3cml0ZTpcInJlYWR3cml0ZVwifSxwPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksZj1mdW5jdGlvbigpe2lmKCFjJiYoYz1pLmluZGV4ZWREQnx8aS53ZWJraXRJbmRleGVkREJ8fGkubW96SW5kZXhlZERCfHxpLm9JbmRleGVkREJ8fGkubXNJbmRleGVkREJ8fChudWxsPT09aS5pbmRleGVkREImJmkuc2hpbUluZGV4ZWREQj9pLnNoaW1JbmRleGVkREI6YSksIWMpKXRocm93XCJJbmRleGVkREIgcmVxdWlyZWRcIjtyZXR1cm4gY30sZD1mdW5jdGlvbihlKXtyZXR1cm4gZX0sbT1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpLnRvTG93ZXJDYXNlKCl9LHk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX0saD1mdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT09bShlKX0sdj1mdW5jdGlvbihlKXtyZXR1cm5cImFycmF5XCI9PT1tKGUpfSxnPWZ1bmN0aW9uKGUpe3JldHVybiBlPT09YX0sYj1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj0hMTt0aGlzLm5hbWU9dCx0aGlzLmdldEluZGV4ZWREQj1mdW5jdGlvbigpe3JldHVybiBlfSx0aGlzLmFkZD1mdW5jdGlvbih0KXtpZihyKXRocm93XCJEYXRhYmFzZSBoYXMgYmVlbiBjbG9zZWRcIjtmb3IodmFyIG89W10saT0wLGE9MDthPGFyZ3VtZW50cy5sZW5ndGgtMTthKyspaWYoQXJyYXkuaXNBcnJheShhcmd1bWVudHNbYSsxXSkpZm9yKHZhciBzPTA7czxhcmd1bWVudHNbYSsxXS5sZW5ndGg7cysrKW9baV09YXJndW1lbnRzW2ErMV1bc10saSsrO2Vsc2Ugb1tpXT1hcmd1bWVudHNbYSsxXSxpKys7dmFyIGM9ZS50cmFuc2FjdGlvbih0LGwucmVhZHdyaXRlKSx1PWMub2JqZWN0U3RvcmUodCk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsdCl7by5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUuaXRlbSYmZS5rZXkpe3ZhciBuPWUua2V5O2U9ZS5pdGVtLHQ9dS5hZGQoZSxuKX1lbHNlIHQ9dS5hZGQoZSk7dC5vbnN1Y2Nlc3M9ZnVuY3Rpb24odCl7dmFyIG49dC50YXJnZXQscj1uLnNvdXJjZS5rZXlQYXRoO251bGw9PT1yJiYocj1cIl9faWRfX1wiKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHt2YWx1ZTpuLnJlc3VsdCxlbnVtZXJhYmxlOiEwfSl9fSksYy5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7ZShvLG4pfSxjLm9uZXJyb3I9ZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLHQoZSl9LGMub25hYm9ydD1mdW5jdGlvbihlKXt0KGUpfX0pfSx0aGlzLnVwZGF0ZUFuZERlbGV0ZT1mdW5jdGlvbih0LG4sbyl7aWYocil0aHJvd1wiRGF0YWJhc2UgaGFzIGJlZW4gY2xvc2VkXCI7dmFyIGk9ZS50cmFuc2FjdGlvbih0LGwucmVhZHdyaXRlKSxhPWkub2JqZWN0U3RvcmUodCkscz1hLmtleVBhdGg7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsdCl7bi5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGUuaXRlbSYmZS5rZXkpe3ZhciB0PWUua2V5O2U9ZS5pdGVtLGEucHV0KGUsdCl9ZWxzZSBhLnB1dChlKX0pLG8uZm9yRWFjaChmdW5jdGlvbihlKXthW1wiZGVsZXRlXCJdKGVbc10pfSksaS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7ZShbbixvXSl9LGkub25lcnJvcj1mdW5jdGlvbihlKXt0KGUpfX0pfSx0aGlzLnVwZGF0ZT1mdW5jdGlvbih0KXtpZihyKXRocm93XCJEYXRhYmFzZSBoYXMgYmVlbiBjbG9zZWRcIjtmb3IodmFyIG8saT1bXSxhPTE7YTxhcmd1bWVudHMubGVuZ3RoO2ErKylvPWFyZ3VtZW50c1thXSxBcnJheS5pc0FycmF5KG8pP2k9aS5jb25jYXQobyk6aS5wdXNoKG8pO3ZhciBzPWUudHJhbnNhY3Rpb24odCxsLnJlYWR3cml0ZSksYz1zLm9iamVjdFN0b3JlKHQpO2Mua2V5UGF0aDtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXtpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ7aWYoZS5pdGVtJiZlLmtleSl7dmFyIG49ZS5rZXk7ZT1lLml0ZW0sdD1jLnB1dChlLG4pfWVsc2UgdD1jLnB1dChlKTt0Lm9uc3VjY2Vzcz1mdW5jdGlvbihlKXt9LHQub25lcnJvcj1mdW5jdGlvbihlKXt9fSkscy5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7ZShpLG4pfSxzLm9uZXJyb3I9ZnVuY3Rpb24oZSl7dChlKX0scy5vbmFib3J0PWZ1bmN0aW9uKGUpe3QoZSl9fSl9LHRoaXMucmVtb3ZlPWZ1bmN0aW9uKHQsbil7aWYocil0aHJvd1wiRGF0YWJhc2UgaGFzIGJlZW4gY2xvc2VkXCI7dmFyIG89ZS50cmFuc2FjdGlvbih0LGwucmVhZHdyaXRlKSxpPW8ub2JqZWN0U3RvcmUodCk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsdCl7QXJyYXkuaXNBcnJheShuKXx8KG49W25dKSxuLmZvckVhY2goZnVuY3Rpb24oZSl7aVtcImRlbGV0ZVwiXShlKX0pLG8ub25jb21wbGV0ZT1mdW5jdGlvbigpe2Uobil9LG8ub25lcnJvcj1mdW5jdGlvbihlKXt0KGUpfSxvLm9uYWJvcnQ9ZnVuY3Rpb24oZSl7dChlKX19KX0sdGhpcy5jbGVhcj1mdW5jdGlvbih0KXtpZihyKXRocm93XCJEYXRhYmFzZSBoYXMgYmVlbiBjbG9zZWRcIjt2YXIgbj1lLnRyYW5zYWN0aW9uKHQsbC5yZWFkd3JpdGUpLG89bi5vYmplY3RTdG9yZSh0KTtvLmNsZWFyKCk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsdCl7bi5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7ZSgpfSxuLm9uZXJyb3I9ZnVuY3Rpb24oZSl7dChlKX19KX0sdGhpcy5jbG9zZT1mdW5jdGlvbigpe3J8fChlLmNsb3NlKCkscj0hMCxkZWxldGUgVFt0XSl9LHRoaXMuZ2V0PWZ1bmN0aW9uKHQsbil7aWYocil0aHJvd1wiRGF0YWJhc2UgaGFzIGJlZW4gY2xvc2VkXCI7dmFyIG89ZS50cmFuc2FjdGlvbih0KSxpPW8ub2JqZWN0U3RvcmUodCksYT1pLmdldChuKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXthLm9uc3VjY2Vzcz1mdW5jdGlvbih0KXtlKHQudGFyZ2V0LnJlc3VsdCl9LG8ub25lcnJvcj1mdW5jdGlvbihlKXt0KGUpfX0pfSx0aGlzLnF1ZXJ5PWZ1bmN0aW9uKHQsbil7aWYocil0aHJvd1wiRGF0YWJhc2UgaGFzIGJlZW4gY2xvc2VkXCI7cmV0dXJuIG5ldyBrKHQsZSxuKX0sdGhpcy5jb3VudD1mdW5jdGlvbih0LG4pe2lmKHIpdGhyb3dcIkRhdGFiYXNlIGhhcyBiZWVuIGNsb3NlZFwiO3ZhciBvPWUudHJhbnNhY3Rpb24odCk7by5vYmplY3RTdG9yZSh0KX07Zm9yKHZhciBvPTAsaT1lLm9iamVjdFN0b3JlTmFtZXMubGVuZ3RoO288aTtvKyspIWZ1bmN0aW9uKGUpe25bZV09e307Zm9yKHZhciB0IGluIG4pcC5jYWxsKG4sdCkmJlwiY2xvc2VcIiE9PXQmJihuW2VdW3RdPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciByPVtlXS5jb25jYXQoW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMCkpO3JldHVybiBuW3RdLmFwcGx5KG4scil9fSh0KSl9KGUub2JqZWN0U3RvcmVOYW1lc1tvXSl9LGs9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMsbz0hMSxpPSExLHM9ZnVuY3Rpb24ocixzLGMscCxmLGQsbSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGgsdil7dmFyIGc9b3x8aT9sLnJlYWR3cml0ZTpsLnJlYWRvbmx5LGI9dC50cmFuc2FjdGlvbihlLGcpLGs9Yi5vYmplY3RTdG9yZShlKSx3PW4/ay5pbmRleChuKTprLFM9cj91W3JdLmFwcGx5KG51bGwscyk6bnVsbCxUPVtdLE09W1NdLF89MDtmPWY/ZjpudWxsLGQ9ZD9kOltdLFwiY291bnRcIiE9PWMmJk0ucHVzaChwfHxcIm5leHRcIik7dmFyIHg9ISFvJiZPYmplY3Qua2V5cyhvKSxDPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8eC5sZW5ndGg7dCsrKXt2YXIgbj14W3RdLHI9b1tuXTtyIGluc3RhbmNlb2YgRnVuY3Rpb24mJihyPXIoZSkpLGVbbl09cn1yZXR1cm4gZX07d1tjXS5hcHBseSh3LE0pLm9uc3VjY2Vzcz1mdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldC5yZXN1bHQ7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpVD10O2Vsc2UgaWYodClpZihudWxsIT09ZiYmZlswXT5fKV89ZlswXSx0LmFkdmFuY2UoZlswXSk7ZWxzZSBpZihudWxsIT09ZiYmXz49ZlswXStmWzFdKTtlbHNle3ZhciBuPSEwLHI9XCJ2YWx1ZVwiaW4gdD90LnZhbHVlOnQua2V5O2QuZm9yRWFjaChmdW5jdGlvbihlKXtlJiZlLmxlbmd0aCYmKDI9PT1lLmxlbmd0aD9uPW4mJnJbZVswXV09PT1lWzFdOnkoZVswXSkmJihuPW4mJmVbMF0uYXBwbHkoYSxbcl0pKSl9KSxuJiYoXysrLFQucHVzaChtKHIpKSxpP3RbXCJkZWxldGVcIl0oKTpvJiYocj1DKHIpLHQudXBkYXRlKHIpKSksdFtcImNvbnRpbnVlXCJdKCl9fSxiLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtoKFQpfSxiLm9uZXJyb3I9ZnVuY3Rpb24oZSl7dihlKX0sYi5vbmFib3J0PWZ1bmN0aW9uKGUpe3YoZSl9fSl9LGM9ZnVuY3Rpb24oZSx0KXt2YXIgbj1cIm5leHRcIixyPVwib3BlbkN1cnNvclwiLGE9W10sYz1udWxsLHU9ZCxsPSExLHA9ZnVuY3Rpb24oKXtyZXR1cm4gcyhlLHQscixsP24rXCJ1bmlxdWVcIjpuLGMsYSx1KX0sZj1mdW5jdGlvbigpe3JldHVybiBuPW51bGwscj1cImNvdW50XCIse2V4ZWN1dGU6cH19LG09ZnVuY3Rpb24oKXtyZXR1cm4gYz12KGFyZ3VtZW50c1swXSk/YXJndW1lbnRzWzBdOkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwLDIpLDE9PWMubGVuZ3RoJiZjLnVuc2hpZnQoMCksaChjWzFdKXx8KGM9bnVsbCkse2V4ZWN1dGU6cCxjb3VudDpmLGtleXM6YixmaWx0ZXI6ayxhc2M6dyxkZXNjOlMsZGlzdGluY3Q6VCxtb2RpZnk6TSxsaW1pdDptLG1hcDpfLHJlbW92ZTp4fX0sYj1mdW5jdGlvbihlKXtyZXR1cm4gZT0hIWcoZSl8fCEhZSxlJiYocj1cIm9wZW5LZXlDdXJzb3JcIikse2V4ZWN1dGU6cCxrZXlzOmIsZmlsdGVyOmssYXNjOncsZGVzYzpTLGRpc3RpbmN0OlQsbW9kaWZ5Ok0sbGltaXQ6bSxtYXA6XyxyZW1vdmU6eH19LGs9ZnVuY3Rpb24oKXtyZXR1cm4gYS5wdXNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwLDIpKSx7ZXhlY3V0ZTpwLGNvdW50OmYsa2V5czpiLGZpbHRlcjprLGFzYzp3LGRlc2M6UyxkaXN0aW5jdDpULG1vZGlmeTpNLGxpbWl0Om0sbWFwOl8scmVtb3ZlOnh9fSx3PWZ1bmN0aW9uKGUpe3JldHVybiBlPSEhZyhlKXx8ISFlLG49ZT9cIm5leHRcIjpcInByZXZcIix7ZXhlY3V0ZTpwLGNvdW50OmYsa2V5czpiLGZpbHRlcjprLGFzYzp3LGRlc2M6UyxkaXN0aW5jdDpULG1vZGlmeTpNLGxpbWl0Om0sbWFwOl8scmVtb3ZlOnh9fSxTPWZ1bmN0aW9uKGUpe3JldHVybiBlPSEhZyhlKXx8ISFlLG49ZT9cInByZXZcIjpcIm5leHRcIix7ZXhlY3V0ZTpwLGNvdW50OmYsa2V5czpiLGZpbHRlcjprLGFzYzp3LGRlc2M6UyxkaXN0aW5jdDpULG1vZGlmeTpNLGxpbWl0Om0sbWFwOl8scmVtb3ZlOnh9fSxUPWZ1bmN0aW9uKGUpe3JldHVybiBlPSEhZyhlKXx8ISFlLGw9ZSx7ZXhlY3V0ZTpwLGNvdW50OmYsa2V5czpiLGZpbHRlcjprLGFzYzp3LGRlc2M6UyxkaXN0aW5jdDpULG1vZGlmeTpNLGxpbWl0Om0sbWFwOl8scmVtb3ZlOnh9fSxNPWZ1bmN0aW9uKGUpe3JldHVybiBvPWUse2V4ZWN1dGU6cCxjb3VudDpmLGtleXM6YixmaWx0ZXI6ayxhc2M6dyxkZXNjOlMsZGlzdGluY3Q6VCxtb2RpZnk6TSxsaW1pdDptLG1hcDpfLHJlbW92ZTp4fX0sXz1mdW5jdGlvbihlKXtyZXR1cm4geShlKSYmKHU9ZSkse2V4ZWN1dGU6cCxjb3VudDpmLGtleXM6YixmaWx0ZXI6ayxhc2M6dyxkZXNjOlMsZGlzdGluY3Q6VCxtb2RpZnk6TSxsaW1pdDptLG1hcDpfLHJlbW92ZTp4fX0seD1mdW5jdGlvbihlKXtyZXR1cm4gZT0hIWcoZSl8fCEhZSxpPWUse2V4ZWN1dGU6cCxjb3VudDpmLGtleXM6YixmaWx0ZXI6ayxhc2M6dyxkZXNjOlMsZGlzdGluY3Q6VCxtb2RpZnk6TSxsaW1pdDptLG1hcDpfLHJlbW92ZTp4fX07cmV0dXJue2V4ZWN1dGU6cCxjb3VudDpmLGtleXM6YixmaWx0ZXI6ayxhc2M6dyxkZXNjOlMsZGlzdGluY3Q6VCxtb2RpZnk6TSxsaW1pdDptLG1hcDpfLHJlbW92ZTp4fX07XCJvbmx5IGJvdW5kIHVwcGVyQm91bmQgbG93ZXJCb3VuZFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JbZV09ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGMoZSxhcmd1bWVudHMpfX0pLHRoaXMuZmlsdGVyPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IGMobnVsbCxudWxsKTtyZXR1cm4gZS5maWx0ZXIuYXBwbHkoZSxhcmd1bWVudHMpfSx0aGlzLmFsbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbHRlcigpfX0sdz1mdW5jdGlvbihlLHQsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHQ9dCgpKTtmb3IodmFyIHIgaW4gdCl7dmFyIG8saT10W3JdO289IXAuY2FsbCh0LHIpfHxuLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMocik/ZS5jdXJyZW50VGFyZ2V0LnRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHIpOm4uY3JlYXRlT2JqZWN0U3RvcmUocixpLmtleSk7Zm9yKHZhciBhIGluIGkuaW5kZXhlcyl7dmFyIHM9aS5pbmRleGVzW2FdO3RyeXtvLmluZGV4KGEpfWNhdGNoKGUpe28uY3JlYXRlSW5kZXgoYSxzLmtleXx8YSxPYmplY3Qua2V5cyhzKS5sZW5ndGg/czp7dW5pcXVlOiExfSl9fX19LFM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89ZS50YXJnZXQucmVzdWx0LGk9bmV3IGIobyx0KTtyZXR1cm4gVFt0XT1vLFByb21pc2UucmVzb2x2ZShpKX0sVD17fSxNPXt2ZXJzaW9uOlwiMC4xMC4yXCIsb3BlbjpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixyKXtpZihUW2Uuc2VydmVyXSlTKHt0YXJnZXQ6e3Jlc3VsdDpUW2Uuc2VydmVyXX19LGUuc2VydmVyLGUudmVyc2lvbixlLnNjaGVtYSkudGhlbihuLHIpO2Vsc2V7dHJ5e3Q9ZigpLm9wZW4oZS5zZXJ2ZXIsZS52ZXJzaW9uKX1jYXRjaChlKXtyKGUpfXQub25zdWNjZXNzPWZ1bmN0aW9uKHQpe1ModCxlLnNlcnZlcixlLnZlcnNpb24sZS5zY2hlbWEpLnRoZW4obixyKX0sdC5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24odCl7dyh0LGUuc2NoZW1hLHQudGFyZ2V0LnJlc3VsdCl9LHQub25lcnJvcj1mdW5jdGlvbihlKXtyKGUpfX19KX0scmVtb3ZlOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LG4pe2lmKCFlKXJldHVybiB0KCk7dHlwZW9mIGU9PT1iJiYoZT1lLm5hbWUpO3ZhciByO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYocj1UW2VdKSxyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmNsb3NlJiZyLmNsb3NlKCk7dmFyIG87dHJ5e289ZigpLmRlbGV0ZURhdGFiYXNlKGUpfWNhdGNoKGUpe24oZSl9by5vbnN1Y2Nlc3M9ZnVuY3Rpb24obil7ZGVsZXRlIFRbZV0sdChlKX0sby5vbmVycm9yPWZ1bmN0aW9uKGUpe24oZSl9LG8ub25ibG9ja2VkPWZ1bmN0aW9uKGUpe24oZSl9fSl9fTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZXhwb3J0cz9lLmV4cG9ydHM9TToocj1mdW5jdGlvbigpe3JldHVybiBNfS5jYWxsKHQsbix0LGUpLCEociE9PWEmJihlLmV4cG9ydHM9cikpKX0od2luZG93KX0pLmNhbGwodCxmdW5jdGlvbigpe3JldHVybiB0aGlzfSgpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0W1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlKXt1Lm1lcmdlKGUse3BsYXRmb3JtOnIseGhyOm8saW86aSxuYXR1cmFsU29ydDphLGRlZXBBY2Nlc3M6cyxkYjpjLHV0aWw6dSxzdXBwb3J0OmwsYmxvYjpwLGFqYXg6ZixQcm9taXNlOmR9KX07dmFyIHI9bigxMSksbz1uKDgyKSxpPW4oMTcpLGE9bigzOSkscz1uKDI1KSxjPW4oNDIpLHU9bigxKSxsPW4oNDcpLHA9bigzNiksZj1uKDE2KSxkPW4oMikuUHJvbWlzZTtlLmV4cG9ydHM9dFtcImRlZmF1bHRcIl19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3ZhciB0PXRoaXM7aShlLm5pY2spJiYodC5uaWNrPVwiXCIrZS5uaWNrKSxpKGUuYXZhdGFyKSYmKHQuYXZhdGFyPVwiXCIrZS5hdmF0YXIpLGkoZS5jdXN0b20pJiYodC5jdXN0b209XCJcIitlLmN1c3RvbSl9dmFyIG89bigxKSxpPW8ubm90dW5kZWYsYT17XCItMVwiOlwicmVzdHJpY3RlZFwiLDA6XCJjb21tb25cIiwxOlwib3duZXJcIiwyOlwibWFuYWdlclwifTtyLnJldmVyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9by5jb3B5KGUpO3JldHVybiBpKHQuY2hhdHJvb21JZCkmJih0LmNoYXRyb29tSWQ9XCJcIit0LmNoYXRyb29tSWQpLGkodC50eXBlKSYmKHQudHlwZT1hW3QudHlwZV0pLGkodC5sZXZlbCkmJih0LmxldmVsPSt0LmxldmVsKSxpKHQub25saW5lKSYmKHQub25saW5lPTE9PT0rdC5vbmxpbmUpLGkodC5lbnRlclRpbWUpJiYodC5lbnRlclRpbWU9K3QuZW50ZXJUaW1lKSxpKHQuZ3Vlc3QpJiYodC5ndWVzdD0xPT09K3QuZ3Vlc3QpLGkodC5ibGFja2VkKSYmKHQuYmxhY2tlZD0xPT09K3QuYmxhY2tlZCksaSh0LmdhZ2VkKSYmKHQuZ2FnZWQ9MT09PSt0LmdhZ2VkKSxpKHQudmFsaWQpJiYodC52YWxpZD0xPT09K3QudmFsaWQpLGkodC51cGRhdGVUaW1lKSYmKHQudXBkYXRlVGltZT0rdC51cGRhdGVUaW1lKSxpKHQudGVtcE11dGVkKT90LnRlbXBNdXRlZD0xPT09K3QudGVtcE11dGVkOnQudGVtcE11dGVkPSExLGkodC50ZW1wTXV0ZUR1cmF0aW9uKT90LnRlbXBNdXRlRHVyYXRpb249K3QudGVtcE11dGVEdXJhdGlvbjp0LnRlbXBNdXRlRHVyYXRpb249MCx0Lm9ubGluZXx8ZGVsZXRlIHQuZW50ZXJUaW1lLHQuZ3Vlc3QmJih0LnR5cGU9XCJndWVzdFwiLGRlbGV0ZSB0LnZhbGlkKSxcImNvbW1vblwiIT09dC50eXBlJiZkZWxldGUgdC5sZXZlbCxkZWxldGUgdC5ndWVzdCx0fSxyLnJldmVyc2VNZW1iZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gci5yZXZlcnNlKGUpfSl9LHIudmFsaWRUeXBlcz1PYmplY3Qua2V5cyhhKSxlLmV4cG9ydHM9cn0sLGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDEpLG89bigzNSksaT1yLm1lcmdlKHt9LG8uaWRNYXAse2F1dGg6e2lkOjIsbG9naW46MyxraWNrZWQ6NSxsb2dvdXQ6NixtdWx0aVBvcnRMb2dpbjo3LGtpY2s6OH0sdXNlcjp7aWQ6MyxtYXJrSW5CbGFja2xpc3Q6MyxnZXRCbGFja2xpc3Q6NCxtYXJrSW5NdXRlbGlzdDo1LGdldE11dGVsaXN0OjYsZ2V0UmVsYXRpb25zOjgsZ2V0VXNlcnM6Nyx1cGRhdGVNeUluZm86MTAsdXBkYXRlRG9ubm9wOjE1LHN5bmNNeUluZm86MTA5LHN5bmNVcGRhdGVNeUluZm86MTEwfSxub3RpZnk6e2lkOjQsbWFya1JlYWQ6MyxzeW5jT2ZmbGluZU1zZ3M6NCxiYXRjaE1hcmtSZWFkOjUsc3luY09mZmxpbmVTeXNNc2dzOjYsc3luY1JvYW1pbmdNc2dzOjksc3luY01zZ1JlY2VpcHRzOjEyfSxzeW5jOntpZDo1LHN5bmM6MSxzeW5jVGVhbU1lbWJlcnM6Mn0sbXNnOntpZDo3LHNlbmRNc2c6MSxtc2c6MixzeXNNc2c6MyxnZXRIaXN0b3J5TXNnczo2LHNlbmRDdXN0b21TeXNNc2c6NyxzZWFyY2hIaXN0b3J5TXNnczo4LGRlbGV0ZVNlc3Npb25zOjksZ2V0U2Vzc2lvbnM6MTAsc3luY1NlbmRNc2c6MTAxLHNlbmRNc2dSZWNlaXB0OjExLG1zZ1JlY2VpcHQ6MTIsZGVsZXRlTXNnOjEzLG1zZ0RlbGV0ZWQ6MTQsbWFya1Nlc3Npb25BY2s6MTZ9LHRlYW06e2lkOjgsY3JlYXRlVGVhbToxLHNlbmRUZWFtTXNnOjIsdGVhbU1zZzozLHRlYW1Nc2dzOjQsYWRkVGVhbU1lbWJlcnM6NSxyZW1vdmVUZWFtTWVtYmVyczo2LHVwZGF0ZVRlYW06NyxsZWF2ZVRlYW06OCxnZXRUZWFtOjksZ2V0VGVhbXM6MTAsZ2V0VGVhbU1lbWJlcnM6MTEsZGlzbWlzc1RlYW06MTIsYXBwbHlUZWFtOjEzLHBhc3NUZWFtQXBwbHk6MTQscmVqZWN0VGVhbUFwcGx5OjE1LGFkZFRlYW1NYW5hZ2VyczoxNixyZW1vdmVUZWFtTWFuYWdlcnM6MTcsdHJhbnNmZXJUZWFtOjE4LHVwZGF0ZUluZm9JblRlYW06MTksdXBkYXRlTmlja0luVGVhbToyMCxhY2NlcHRUZWFtSW52aXRlOjIxLHJlamVjdFRlYW1JbnZpdGU6MjIsZ2V0VGVhbUhpc3RvcnlNc2dzOjIzLHNlYXJjaFRlYW1IaXN0b3J5TXNnczoyNCx1cGRhdGVNdXRlU3RhdGVJblRlYW06MjUsZ2V0TXlUZWFtTWVtYmVyczoyNixnZXRNdXRlZFRlYW1NZW1iZXJzOjI3LHN5bmNNeVRlYW1NZW1iZXJzOjEyNixzeW5jVGVhbXM6MTA5LHN5bmNUZWFtTWVtYmVyczoxMTEsc3luY0NyZWF0ZVRlYW06MTAxLHN5bmNTZW5kVGVhbU1zZzoxMDIsc3luY1VwZGF0ZVRlYW1NZW1iZXI6MTE5fSxmcmllbmQ6e2lkOjEyLGZyaWVuZFJlcXVlc3Q6MSxzeW5jRnJpZW5kUmVxdWVzdDoxMDEsZGVsZXRlRnJpZW5kOjIsc3luY0RlbGV0ZUZyaWVuZDoxMDIsdXBkYXRlRnJpZW5kOjMsc3luY1VwZGF0ZUZyaWVuZDoxMDMsZ2V0RnJpZW5kczo0fSxjaGF0cm9vbTp7aWQ6MTMsZ2V0Q2hhdHJvb21BZGRyZXNzOjF9LGZpbHRlcjp7aWQ6MTAxLHNlbmRGaWx0ZXJNc2c6MSxmaWx0ZXJNc2c6MixmaWx0ZXJTeXNNc2c6MyxzZW5kRmlsdGVyQ3VzdG9tU3lzTXNnOjd9LGV2ZW50U2VydmljZTp7aWQ6MTQscHVibGlzaEV2ZW50OjEscHVzaEV2ZW50OjIsc3Vic2NyaWJlRXZlbnQ6Myx1blN1YnNjcmliZUV2ZW50c0J5QWNjb3VudHM6NCx1blN1YnNjcmliZUV2ZW50c0J5VHlwZTo1LHF1ZXJ5U3Vic2NyaWJlRXZlbnRzQnlBY2NvdW50czo2LHF1ZXJ5U3Vic2NyaWJlRXZlbnRzQnlUeXBlOjcscHVzaEV2ZW50czo5fX0pLGE9ci5tZXJnZSh7fSxvLmNtZENvbmZpZyx7bG9naW46e3NpZDppLmF1dGguaWQsY2lkOmkuYXV0aC5sb2dpbixwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibG9naW5cIn1dfSxsb2dvdXQ6e3NpZDppLmF1dGguaWQsY2lkOmkuYXV0aC5sb2dvdXR9LGtpY2s6e3NpZDppLmF1dGguaWQsY2lkOmkuYXV0aC5raWNrLHBhcmFtczpbe3R5cGU6XCJTdHJBcnJheVwiLG5hbWU6XCJkZXZpY2VJZHNcIn1dfSxtYXJrSW5CbGFja2xpc3Q6e3NpZDppLnVzZXIuaWQsY2lkOmkudXNlci5tYXJrSW5CbGFja2xpc3QscGFyYW1zOlt7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJhY2NvdW50XCJ9LHt0eXBlOlwiYm9vbFwiLG5hbWU6XCJpc0FkZFwifV19LGdldEJsYWNrbGlzdDp7c2lkOmkudXNlci5pZCxjaWQ6aS51c2VyLmdldEJsYWNrbGlzdCxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0aW1lXCJ9XX0sbWFya0luTXV0ZWxpc3Q6e3NpZDppLnVzZXIuaWQsY2lkOmkudXNlci5tYXJrSW5NdXRlbGlzdCxwYXJhbXM6W3t0eXBlOlwiU3RyaW5nXCIsbmFtZTpcImFjY291bnRcIn0se3R5cGU6XCJib29sXCIsbmFtZTpcImlzQWRkXCJ9XX0sZ2V0TXV0ZWxpc3Q6e3NpZDppLnVzZXIuaWQsY2lkOmkudXNlci5nZXRNdXRlbGlzdCxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0aW1lXCJ9XX0sZ2V0UmVsYXRpb25zOntzaWQ6aS51c2VyLmlkLGNpZDppLnVzZXIuZ2V0UmVsYXRpb25zLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxnZXRVc2Vyczp7c2lkOmkudXNlci5pZCxjaWQ6aS51c2VyLmdldFVzZXJzLHBhcmFtczpbe3R5cGU6XCJTdHJBcnJheVwiLG5hbWU6XCJhY2NvdW50c1wifV19LHVwZGF0ZU15SW5mbzp7c2lkOmkudXNlci5pZCxjaWQ6aS51c2VyLnVwZGF0ZU15SW5mbyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwidXNlclwifV19LHVwZGF0ZURvbm5vcDp7c2lkOmkudXNlci5pZCxjaWQ6aS51c2VyLnVwZGF0ZURvbm5vcCxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwiZG9ubm9wXCJ9XX0sbWFya1JlYWQ6e3NpZDppLm5vdGlmeS5pZCxjaWQ6aS5ub3RpZnkubWFya1JlYWQscGFyYW1zOlt7dHlwZTpcImxvbmdcIixuYW1lOlwiaWRcIn0se3R5cGU6XCJwaFwiLG5hbWU6XCJwaFwifV19LGJhdGNoTWFya1JlYWQ6e3NpZDppLm5vdGlmeS5pZCxjaWQ6aS5ub3RpZnkuYmF0Y2hNYXJrUmVhZCxwYXJhbXM6W3t0eXBlOlwiYnl0ZVwiLG5hbWU6XCJzaWRcIn0se3R5cGU6XCJieXRlXCIsbmFtZTpcImNpZFwifSx7dHlwZTpcIkxvbmdBcnJheVwiLG5hbWU6XCJpZHNcIn1dfSxzeW5jOntzaWQ6aS5zeW5jLmlkLGNpZDppLnN5bmMuc3luYyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwic3luY1wifV19LHN5bmNUZWFtTWVtYmVyczp7c2lkOmkuc3luYy5pZCxjaWQ6aS5zeW5jLnN5bmNUZWFtTWVtYmVycyxwYXJhbXM6W3t0eXBlOlwiTG9uZ0xvbmdNYXBcIixuYW1lOlwic3luY1wifV19LHNlbmRNc2c6e3NpZDppLm1zZy5pZCxjaWQ6aS5tc2cuc2VuZE1zZyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sZ2V0SGlzdG9yeU1zZ3M6e3NpZDppLm1zZy5pZCxjaWQ6aS5tc2cuZ2V0SGlzdG9yeU1zZ3MscGFyYW1zOlt7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJ0b1wifSx7dHlwZTpcImxvbmdcIixuYW1lOlwiYmVnaW5UaW1lXCJ9LHt0eXBlOlwibG9uZ1wiLG5hbWU6XCJlbmRUaW1lXCJ9LHt0eXBlOlwibG9uZ1wiLG5hbWU6XCJsYXN0TXNnSWRcIn0se3R5cGU6XCJpbnRcIixuYW1lOlwibGltaXRcIn0se3R5cGU6XCJib29sXCIsbmFtZTpcInJldmVyc2VcIn1dfSxzZW5kQ3VzdG9tU3lzTXNnOntzaWQ6aS5tc2cuaWQsY2lkOmkubXNnLnNlbmRDdXN0b21TeXNNc2cscGFyYW1zOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInN5c01zZ1wifV19LHNlYXJjaEhpc3RvcnlNc2dzOntzaWQ6aS5tc2cuaWQsY2lkOmkubXNnLnNlYXJjaEhpc3RvcnlNc2dzLHBhcmFtczpbe3R5cGU6XCJTdHJpbmdcIixuYW1lOlwidG9cIn0se3R5cGU6XCJsb25nXCIsbmFtZTpcImJlZ2luVGltZVwifSx7dHlwZTpcImxvbmdcIixuYW1lOlwiZW5kVGltZVwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJrZXl3b3JkXCJ9LHt0eXBlOlwiaW50XCIsbmFtZTpcImxpbWl0XCJ9LHt0eXBlOlwiYm9vbFwiLG5hbWU6XCJyZXZlcnNlXCJ9XX0sZ2V0U2Vzc2lvbnM6e3NpZDppLm1zZy5pZCxjaWQ6aS5tc2cuZ2V0U2Vzc2lvbnMscGFyYW1zOlt7dHlwZTpcImxvbmdcIixuYW1lOlwidGltZVwifV19LGRlbGV0ZVNlc3Npb25zOntzaWQ6aS5tc2cuaWQsY2lkOmkubXNnLmRlbGV0ZVNlc3Npb25zLHBhcmFtczpbe3R5cGU6XCJTdHJBcnJheVwiLG5hbWU6XCJzZXNzaW9uc1wifV19LHNlbmRNc2dSZWNlaXB0OntzaWQ6aS5tc2cuaWQsY2lkOmkubXNnLnNlbmRNc2dSZWNlaXB0LHBhcmFtczpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJtc2dSZWNlaXB0XCJ9XX0sZGVsZXRlTXNnOntzaWQ6aS5tc2cuaWQsY2lkOmkubXNnLmRlbGV0ZU1zZyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwic3lzTXNnXCJ9XX0sbWFya1Nlc3Npb25BY2s6e3NpZDppLm1zZy5pZCxjaWQ6aS5tc2cubWFya1Nlc3Npb25BY2sscGFyYW1zOlt7dHlwZTpcImJ5dGVcIixuYW1lOlwic2NlbmVcIn0se3R5cGU6XCJTdHJpbmdcIixuYW1lOlwidG9cIn0se3R5cGU6XCJsb25nXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxjcmVhdGVUZWFtOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0uY3JlYXRlVGVhbSxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwidGVhbVwifSx7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcImFjY291bnRzXCJ9LHt0eXBlOlwiU3RyaW5nXCIsbmFtZTpcInBzXCJ9XX0sc2VuZFRlYW1Nc2c6e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS5zZW5kVGVhbU1zZyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sYWRkVGVhbU1lbWJlcnM6e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS5hZGRUZWFtTWVtYmVycyxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0ZWFtSWRcIn0se3R5cGU6XCJTdHJBcnJheVwiLG5hbWU6XCJhY2NvdW50c1wifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJwc1wifV19LHJlbW92ZVRlYW1NZW1iZXJzOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0ucmVtb3ZlVGVhbU1lbWJlcnMscGFyYW1zOlt7dHlwZTpcImxvbmdcIixuYW1lOlwidGVhbUlkXCJ9LHt0eXBlOlwiU3RyQXJyYXlcIixuYW1lOlwiYWNjb3VudHNcIn1dfSx1cGRhdGVUZWFtOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0udXBkYXRlVGVhbSxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwidGVhbVwifV19LGxlYXZlVGVhbTp7c2lkOmkudGVhbS5pZCxjaWQ6aS50ZWFtLmxlYXZlVGVhbSxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0ZWFtSWRcIn1dfSxnZXRUZWFtOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0uZ2V0VGVhbSxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0ZWFtSWRcIn1dfSxnZXRUZWFtczp7c2lkOmkudGVhbS5pZCxjaWQ6aS50ZWFtLmdldFRlYW1zLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxnZXRUZWFtTWVtYmVyczp7c2lkOmkudGVhbS5pZCxjaWQ6aS50ZWFtLmdldFRlYW1NZW1iZXJzLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcImxvbmdcIixuYW1lOlwidGltZXRhZ1wifV19LGRpc21pc3NUZWFtOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0uZGlzbWlzc1RlYW0scGFyYW1zOlt7dHlwZTpcImxvbmdcIixuYW1lOlwidGVhbUlkXCJ9XX0sYXBwbHlUZWFtOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0uYXBwbHlUZWFtLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJwc1wifV19LHBhc3NUZWFtQXBwbHk6e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS5wYXNzVGVhbUFwcGx5LHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJmcm9tXCJ9XX0scmVqZWN0VGVhbUFwcGx5OntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0ucmVqZWN0VGVhbUFwcGx5LHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJmcm9tXCJ9LHt0eXBlOlwiU3RyaW5nXCIsbmFtZTpcInBzXCJ9XX0sYWRkVGVhbU1hbmFnZXJzOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0uYWRkVGVhbU1hbmFnZXJzLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcImFjY291bnRzXCJ9XX0scmVtb3ZlVGVhbU1hbmFnZXJzOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0ucmVtb3ZlVGVhbU1hbmFnZXJzLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcImFjY291bnRzXCJ9XX0sdHJhbnNmZXJUZWFtOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0udHJhbnNmZXJUZWFtLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJhY2NvdW50XCJ9LHt0eXBlOlwiYm9vbFwiLG5hbWU6XCJsZWF2ZVwifV19LHVwZGF0ZUluZm9JblRlYW06e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS51cGRhdGVJbmZvSW5UZWFtLHBhcmFtczpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJ0ZWFtTWVtYmVyXCJ9XX0sdXBkYXRlTmlja0luVGVhbTp7c2lkOmkudGVhbS5pZCxjaWQ6aS50ZWFtLnVwZGF0ZU5pY2tJblRlYW0scGFyYW1zOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInRlYW1NZW1iZXJcIn1dfSxhY2NlcHRUZWFtSW52aXRlOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0uYWNjZXB0VGVhbUludml0ZSxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0ZWFtSWRcIn0se3R5cGU6XCJTdHJpbmdcIixuYW1lOlwiZnJvbVwifV19LHJlamVjdFRlYW1JbnZpdGU6e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS5yZWplY3RUZWFtSW52aXRlLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJmcm9tXCJ9LHt0eXBlOlwiU3RyaW5nXCIsbmFtZTpcInBzXCJ9XX0sZ2V0VGVhbUhpc3RvcnlNc2dzOntzaWQ6aS50ZWFtLmlkLGNpZDppLnRlYW0uZ2V0VGVhbUhpc3RvcnlNc2dzLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRvXCJ9LHt0eXBlOlwibG9uZ1wiLG5hbWU6XCJiZWdpblRpbWVcIn0se3R5cGU6XCJsb25nXCIsbmFtZTpcImVuZFRpbWVcIn0se3R5cGU6XCJsb25nXCIsbmFtZTpcImxhc3RNc2dJZFwifSx7dHlwZTpcImludFwiLG5hbWU6XCJsaW1pdFwifSx7dHlwZTpcImJvb2xcIixuYW1lOlwicmV2ZXJzZVwifV19LHNlYXJjaFRlYW1IaXN0b3J5TXNnczp7c2lkOmkudGVhbS5pZCxjaWQ6aS50ZWFtLnNlYXJjaFRlYW1IaXN0b3J5TXNncyxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0b1wifSx7dHlwZTpcImxvbmdcIixuYW1lOlwiYmVnaW5UaW1lXCJ9LHt0eXBlOlwibG9uZ1wiLG5hbWU6XCJlbmRUaW1lXCJ9LHt0eXBlOlwiU3RyaW5nXCIsbmFtZTpcImtleXdvcmRcIn0se3R5cGU6XCJpbnRcIixuYW1lOlwibGltaXRcIn0se3R5cGU6XCJib29sXCIsbmFtZTpcInJldmVyc2VcIn1dfSx1cGRhdGVNdXRlU3RhdGVJblRlYW06e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS51cGRhdGVNdXRlU3RhdGVJblRlYW0scGFyYW1zOlt7dHlwZTpcImxvbmdcIixuYW1lOlwidGVhbUlkXCJ9LHt0eXBlOlwiU3RyaW5nXCIsbmFtZTpcImFjY291bnRcIn0se3R5cGU6XCJpbnRcIixuYW1lOlwibXV0ZVwifV19LGdldE15VGVhbU1lbWJlcnM6e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS5nZXRNeVRlYW1NZW1iZXJzLHBhcmFtczpbe3R5cGU6XCJMb25nQXJyYXlcIixuYW1lOlwidGVhbUlkc1wifV19LGdldE11dGVkVGVhbU1lbWJlcnM6e3NpZDppLnRlYW0uaWQsY2lkOmkudGVhbS5nZXRNdXRlZFRlYW1NZW1iZXJzLHBhcmFtczpbe3R5cGU6XCJsb25nXCIsbmFtZTpcInRlYW1JZFwifV19LGZyaWVuZFJlcXVlc3Q6e3NpZDppLmZyaWVuZC5pZCxjaWQ6aS5mcmllbmQuZnJpZW5kUmVxdWVzdCxwYXJhbXM6W3t0eXBlOlwiU3RyaW5nXCIsbmFtZTpcImFjY291bnRcIn0se3R5cGU6XCJieXRlXCIsbmFtZTpcInR5cGVcIn0se3R5cGU6XCJTdHJpbmdcIixuYW1lOlwicHNcIn1dfSxkZWxldGVGcmllbmQ6e3NpZDppLmZyaWVuZC5pZCxjaWQ6aS5mcmllbmQuZGVsZXRlRnJpZW5kLHBhcmFtczpbe3R5cGU6XCJTdHJpbmdcIixuYW1lOlwiYWNjb3VudFwifV19LHVwZGF0ZUZyaWVuZDp7c2lkOmkuZnJpZW5kLmlkLGNpZDppLmZyaWVuZC51cGRhdGVGcmllbmQscGFyYW1zOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcImZyaWVuZFwifV19LGdldEZyaWVuZHM6e3NpZDppLmZyaWVuZC5pZCxjaWQ6aS5mcmllbmQuZ2V0RnJpZW5kcyxwYXJhbXM6W3t0eXBlOlwibG9uZ1wiLG5hbWU6XCJ0aW1ldGFnXCJ9XX0sZ2V0Q2hhdHJvb21BZGRyZXNzOntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS5nZXRDaGF0cm9vbUFkZHJlc3MscGFyYW1zOlt7dHlwZTpcImxvbmdcIixuYW1lOlwiY2hhdHJvb21JZFwifV19LHNlbmRGaWx0ZXJNc2c6e3NpZDppLmZpbHRlci5pZCxjaWQ6aS5maWx0ZXIuc2VuZEZpbHRlck1zZyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sc2VuZEZpbHRlckN1c3RvbVN5c01zZzp7c2lkOmkuZmlsdGVyLmlkLGNpZDppLmZpbHRlci5zZW5kRmlsdGVyQ3VzdG9tU3lzTXNnLHBhcmFtczpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJzeXNNc2dcIn1dfSxwdWJsaXNoRXZlbnQ6e3NpZDppLmV2ZW50U2VydmljZS5pZCxjaWQ6aS5ldmVudFNlcnZpY2UucHVibGlzaEV2ZW50LHBhcmFtczpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJtc2dFdmVudFwifV19LHB1c2hFdmVudDp7c2lkOmkuZXZlbnRTZXJ2aWNlLmlkLGNpZDppLmV2ZW50U2VydmljZS5wdXNoRXZlbnR9LHN1YnNjcmliZUV2ZW50OntzaWQ6aS5ldmVudFNlcnZpY2UuaWQsY2lkOmkuZXZlbnRTZXJ2aWNlLnN1YnNjcmliZUV2ZW50LHBhcmFtczpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJtc2dFdmVudFN1YnNjcmliZVwifSx7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcImFjY291bnRzXCJ9XX0sdW5TdWJzY3JpYmVFdmVudHNCeUFjY291bnRzOntzaWQ6aS5ldmVudFNlcnZpY2UuaWQsY2lkOmkuZXZlbnRTZXJ2aWNlLnVuU3Vic2NyaWJlRXZlbnRzQnlBY2NvdW50cyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnRXZlbnRTdWJzY3JpYmVcIn0se3R5cGU6XCJTdHJBcnJheVwiLG5hbWU6XCJhY2NvdW50c1wifV19LHVuU3Vic2NyaWJlRXZlbnRzQnlUeXBlOntzaWQ6aS5ldmVudFNlcnZpY2UuaWQsY2lkOmkuZXZlbnRTZXJ2aWNlLnVuU3Vic2NyaWJlRXZlbnRzQnlUeXBlLHBhcmFtczpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJtc2dFdmVudFN1YnNjcmliZVwifV19LHF1ZXJ5U3Vic2NyaWJlRXZlbnRzQnlBY2NvdW50czp7c2lkOmkuZXZlbnRTZXJ2aWNlLmlkLGNpZDppLmV2ZW50U2VydmljZS5xdWVyeVN1YnNjcmliZUV2ZW50c0J5QWNjb3VudHMscGFyYW1zOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcIm1zZ0V2ZW50U3Vic2NyaWJlXCJ9LHt0eXBlOlwiU3RyQXJyYXlcIixuYW1lOlwiYWNjb3VudHNcIn1dfSxxdWVyeVN1YnNjcmliZUV2ZW50c0J5VHlwZTp7c2lkOmkuZXZlbnRTZXJ2aWNlLmlkLGNpZDppLmV2ZW50U2VydmljZS5xdWVyeVN1YnNjcmliZUV2ZW50c0J5VHlwZSxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnRXZlbnRTdWJzY3JpYmVcIn1dfSxwdXNoRXZlbnRzOntzaWQ6aS5ldmVudFNlcnZpY2UuaWQsY2lkOmkuZXZlbnRTZXJ2aWNlLnB1c2hFdmVudHN9fSkscz1yLm1lcmdlKHt9LG8ucGFja2V0Q29uZmlnLHtcIjJfM1wiOntzZXJ2aWNlOlwiYXV0aFwiLGNtZDpcImxvZ2luXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibG9naW5SZXNcIn0se3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcImxvZ2luUG9ydHNcIixlbnRpdHk6XCJsb2dpblBvcnRcIn1dfSxcIjJfNVwiOntzZXJ2aWNlOlwiYXV0aFwiLGNtZDpcImtpY2tlZFwiLHJlc3BvbnNlOlt7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJmcm9tXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInJlYXNvblwifV19LFwiMl82XCI6e3NlcnZpY2U6XCJhdXRoXCIsY21kOlwibG9nb3V0XCJ9LFwiMl83XCI6e3NlcnZpY2U6XCJhdXRoXCIsY21kOlwibXVsdGlQb3J0TG9naW5cIixyZXNwb25zZTpbe3R5cGU6XCJOdW1iZXJcIixuYW1lOlwic3RhdGVcIn0se3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcImxvZ2luUG9ydHNcIixlbnRpdHk6XCJsb2dpblBvcnRcIn1dfSxcIjJfOFwiOntzZXJ2aWNlOlwiYXV0aFwiLGNtZDpcImtpY2tcIixyZXNwb25zZTpbe3R5cGU6XCJTdHJBcnJheVwiLG5hbWU6XCJkZXZpY2VJZHNcIn1dfSxcIjNfM1wiOntzZXJ2aWNlOlwidXNlclwiLGNtZDpcIm1hcmtJbkJsYWNrbGlzdFwifSxcIjNfMTAzXCI6e3NlcnZpY2U6XCJ1c2VyXCIsY21kOlwic3luY01hcmtJbkJsYWNrbGlzdFwiLHJlc3BvbnNlOlt7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJhY2NvdW50XCJ9LHt0eXBlOlwiQm9vbGVhblwiLG5hbWU6XCJpc0FkZFwifV19LFwiM180XCI6e3NlcnZpY2U6XCJ1c2VyXCIsY21kOlwiZ2V0QmxhY2tsaXN0XCIscmVzcG9uc2U6W3t0eXBlOlwiU3RyQXJyYXlcIixuYW1lOlwiYmxhY2tsaXN0XCJ9XX0sXCIzXzVcIjp7c2VydmljZTpcInVzZXJcIixjbWQ6XCJtYXJrSW5NdXRlbGlzdFwifSxcIjNfMTA1XCI6e3NlcnZpY2U6XCJ1c2VyXCIsY21kOlwic3luY01hcmtJbk11dGVsaXN0XCIscmVzcG9uc2U6W3t0eXBlOlwiU3RyaW5nXCIsbmFtZTpcImFjY291bnRcIn0se3R5cGU6XCJCb29sZWFuXCIsbmFtZTpcImlzQWRkXCJ9XX0sXCIzXzZcIjp7c2VydmljZTpcInVzZXJcIixjbWQ6XCJnZXRNdXRlbGlzdFwiLHJlc3BvbnNlOlt7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcIm11dGVsaXN0XCJ9XX0sXCIzXzhcIjp7c2VydmljZTpcInVzZXJcIixjbWQ6XCJnZXRSZWxhdGlvbnNcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcInNwZWNpYWxSZWxhdGlvbnNcIixlbnRpdHk6XCJzcGVjaWFsUmVsYXRpb25cIn0se3R5cGU6XCJOdW1iZXJcIixuYW1lOlwidGltZXRhZ1wifV19LFwiM183XCI6e3NlcnZpY2U6XCJ1c2VyXCIsY21kOlwiZ2V0VXNlcnNcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcInVzZXJzXCIsZW50aXR5OlwidXNlclwifV19LFwiM18xMFwiOntzZXJ2aWNlOlwidXNlclwiLGNtZDpcInVwZGF0ZU15SW5mb1wiLHJlc3BvbnNlOlt7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0aW1ldGFnXCJ9XX0sXCIzXzE1XCI6e3NlcnZpY2U6XCJ1c2VyXCIsY21kOlwidXBkYXRlRG9ubm9wXCIscmVzcG9uc2U6W3t0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjNfMTE1XCI6e3NlcnZpY2U6XCJ1c2VyXCIsY21kOlwic3luY1VwZGF0ZURvbm5vcFwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcImRvbm5vcFwifSx7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0aW1ldGFnXCJ9XX0sXCIzXzEwOVwiOntzZXJ2aWNlOlwidXNlclwiLGNtZDpcInN5bmNNeUluZm9cIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJ1c2VyXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjNfMTEwXCI6e3NlcnZpY2U6XCJ1c2VyXCIsY21kOlwic3luY1VwZGF0ZU15SW5mb1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInVzZXJcIn1dfSxcIjRfMVwiOntzZXJ2aWNlOlwibm90aWZ5XCJ9LFwiNF8yXCI6e3NlcnZpY2U6XCJub3RpZnlcIn0sXCI0XzNcIjp7c2VydmljZTpcIm5vdGlmeVwiLGNtZDpcIm1hcmtSZWFkXCJ9LFwiNF80XCI6e3NlcnZpY2U6XCJub3RpZnlcIixjbWQ6XCJzeW5jT2ZmbGluZU1zZ3NcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcIm1zZ3NcIixlbnRpdHk6XCJtc2dcIn1dfSxcIjRfNVwiOntzZXJ2aWNlOlwibm90aWZ5XCIsY21kOlwiYmF0Y2hNYXJrUmVhZFwifSxcIjRfNlwiOntzZXJ2aWNlOlwibm90aWZ5XCIsY21kOlwic3luY09mZmxpbmVTeXNNc2dzXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJzeXNNc2dzXCIsZW50aXR5Olwic3lzTXNnXCJ9XX0sXCI0XzlcIjp7c2VydmljZTpcIm5vdGlmeVwiLGNtZDpcInN5bmNSb2FtaW5nTXNnc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibXNnc1wiLGVudGl0eTpcIm1zZ1wifV19LFwiNF8xMlwiOntzZXJ2aWNlOlwibm90aWZ5XCIsY21kOlwic3luY01zZ1JlY2VpcHRzXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJtc2dSZWNlaXB0c1wiLGVudGl0eTpcIm1zZ1JlY2VpcHRcIn0se3R5cGU6XCJOdW1iZXJcIixuYW1lOlwidGltZXRhZ1wifV19LFwiNF8xM1wiOntzZXJ2aWNlOlwibm90aWZ5XCIsY21kOlwic3luY0Rvbm5vcFwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcImRvbm5vcFwifSx7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0aW1ldGFnXCJ9XX0sXCI0XzE0XCI6e3NlcnZpY2U6XCJub3RpZnlcIixjbWQ6XCJzeW5jU2Vzc2lvbkFja1wiLHJlc3BvbnNlOlt7dHlwZTpcIlN0ckxvbmdNYXBcIixuYW1lOlwicDJwXCJ9LHt0eXBlOlwiTG9uZ0xvbmdNYXBcIixuYW1lOlwidGVhbVwifSx7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0aW1ldGFnXCJ9XX0sXCI0XzEwMFwiOntzZXJ2aWNlOlwibm90aWZ5XCIsY21kOlwic3luY09mZmxpbmVGaWx0ZXJNc2dzXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJtc2dzXCIsZW50aXR5OlwibXNnXCJ9XX0sXCI0XzEwMVwiOntzZXJ2aWNlOlwibm90aWZ5XCIsY21kOlwic3luY09mZmxpbmVGaWx0ZXJTeXNNc2dzXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJzeXNNc2dzXCIsZW50aXR5Olwic3lzTXNnXCJ9XX0sXCI1XzFcIjp7c2VydmljZTpcInN5bmNcIixjbWQ6XCJzeW5jRG9uZVwiLHJlc3BvbnNlOlt7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0aW1ldGFnXCJ9XX0sXCI1XzJcIjp7c2VydmljZTpcInN5bmNcIixjbWQ6XCJzeW5jVGVhbU1lbWJlcnNEb25lXCIscmVzcG9uc2U6W3t0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjdfMVwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwic2VuZE1zZ1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcIm1zZ1wifV0sdHJpdmlhbEVycm9yQ29kZXM6WzcxMDFdfSxcIjdfMlwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwibXNnXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sXCI3XzNcIjp7c2VydmljZTpcIm1zZ1wiLGNtZDpcInN5c01zZ1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInN5c01zZ1wifV19LFwiN182XCI6e3NlcnZpY2U6XCJtc2dcIixjbWQ6XCJnZXRIaXN0b3J5TXNnc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibXNnc1wiLGVudGl0eTpcIm1zZ1wifV19LFwiN183XCI6e3NlcnZpY2U6XCJtc2dcIixjbWQ6XCJzZW5kQ3VzdG9tU3lzTXNnXCIsdHJpdmlhbEVycm9yQ29kZXM6WzcxMDFdfSxcIjdfOFwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwic2VhcmNoSGlzdG9yeU1zZ3NcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcIm1zZ3NcIixlbnRpdHk6XCJtc2dcIn1dfSxcIjdfOVwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwiZGVsZXRlU2Vzc2lvbnNcIn0sXCI3XzEwXCI6e3NlcnZpY2U6XCJtc2dcIixjbWQ6XCJnZXRTZXNzaW9uc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcInNlc3Npb25zXCJ9XX0sXCI3XzEwMVwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwic3luY1NlbmRNc2dcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJtc2dcIn1dfSxcIjdfMTFcIjp7c2VydmljZTpcIm1zZ1wiLGNtZDpcInNlbmRNc2dSZWNlaXB0XCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnUmVjZWlwdFwifV19LFwiN18xMlwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwibXNnUmVjZWlwdFwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcIm1zZ1JlY2VpcHRcIn1dfSxcIjdfMTNcIjp7c2VydmljZTpcIm1zZ1wiLGNtZDpcIm9uRGVsZXRlTXNnXCJ9LFwiN18xNFwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwib25Nc2dEZWxldGVkXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwic3lzTXNnXCJ9XX0sXCI3XzE1XCI6e3NlcnZpY2U6XCJtc2dcIixjbWQ6XCJvbkRlbGV0ZU1zZ09mZmxpbmVSb2FtaW5nXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJzeXNNc2dzXCIsZW50aXR5Olwic3lzTXNnXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn0se3R5cGU6XCJOdW1iZXJcIixuYW1lOlwidHlwZVwifV19LFwiN18xNlwiOntzZXJ2aWNlOlwibXNnXCIsY21kOlwib25NYXJrU2Vzc2lvbkFja1wifSxcIjdfMTE2XCI6e3NlcnZpY2U6XCJtc2dcIixjbWQ6XCJzeW5jTWFya1Nlc3Npb25BY2tcIixyZXNwb25zZTpbe3R5cGU6XCJOdW1iZXJcIixuYW1lOlwic2NlbmVcIn0se3R5cGU6XCJTdHJpbmdcIixuYW1lOlwidG9cIn0se3R5cGU6XCJOdW1iZXJcIixuYW1lOlwidGltZXRhZ1wifV19LFwiOF8xXCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwiY3JlYXRlVGVhbVwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInRlYW1cIn1dfSxcIjhfMlwiOntzZXJ2aWNlOlwidGVhbVwiLGNtZDpcInNlbmRUZWFtTXNnXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sXCI4XzNcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJ0ZWFtTXNnXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sXCI4XzRcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJ0ZWFtTXNnc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibXNnc1wiLGVudGl0eTpcIm1zZ1wifV19LFwiOF81XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwiYWRkVGVhbU1lbWJlcnNcIn0sXCI4XzZcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJyZW1vdmVUZWFtTWVtYmVyc1wifSxcIjhfN1wiOntzZXJ2aWNlOlwidGVhbVwiLGNtZDpcInVwZGF0ZVRlYW1cIixyZXNwb25zZTpbe3R5cGU6XCJOdW1iZXJcIixuYW1lOlwiaWRcIn0se3R5cGU6XCJOdW1iZXJcIixuYW1lOlwidGltZVwifV19LFwiOF84XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwibGVhdmVUZWFtXCJ9LFwiOF85XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwiZ2V0VGVhbVwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInRlYW1cIn1dfSxcIjhfMTBcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJnZXRUZWFtc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwidGVhbXNcIixlbnRpdHk6XCJ0ZWFtXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjhfMTFcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJnZXRUZWFtTWVtYmVyc1wiLHJlc3BvbnNlOlt7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0ZWFtSWRcIn0se3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcIm1lbWJlcnNcIixlbnRpdHk6XCJ0ZWFtTWVtYmVyXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjhfMTJcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJkaXNtaXNzVGVhbVwifSxcIjhfMTNcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJhcHBseVRlYW1cIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJ0ZWFtXCJ9XX0sXCI4XzE0XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwicGFzc1RlYW1BcHBseVwifSxcIjhfMTVcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJyZWplY3RUZWFtQXBwbHlcIn0sXCI4XzE2XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwiYWRkVGVhbU1hbmFnZXJzXCJ9LFwiOF8xN1wiOntzZXJ2aWNlOlwidGVhbVwiLGNtZDpcInJlbW92ZVRlYW1NYW5hZ2Vyc1wifSxcIjhfMThcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJ0cmFuc2ZlclRlYW1cIn0sXCI4XzE5XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwidXBkYXRlSW5mb0luVGVhbVwifSxcIjhfMjBcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJ1cGRhdGVOaWNrSW5UZWFtXCJ9LFwiOF8yMVwiOntzZXJ2aWNlOlwidGVhbVwiLGNtZDpcImFjY2VwdFRlYW1JbnZpdGVcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJ0ZWFtXCJ9XX0sXCI4XzIyXCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwicmVqZWN0VGVhbUludml0ZVwifSxcIjhfMjNcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJnZXRUZWFtSGlzdG9yeU1zZ3NcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcIm1zZ3NcIixlbnRpdHk6XCJtc2dcIn1dfSxcIjhfMjRcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJzZWFyY2hUZWFtSGlzdG9yeU1zZ3NcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcIm1zZ3NcIixlbnRpdHk6XCJtc2dcIn1dfSxcIjhfMjVcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJ1cGRhdGVNdXRlU3RhdGVJblRlYW1cIn0sXCI4XzI2XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwiZ2V0TXlUZWFtTWVtYmVyc1wiLFxyXG5yZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcInRlYW1NZW1iZXJzXCIsZW50aXR5OlwidGVhbU1lbWJlclwifV19LFwiOF8yN1wiOntzZXJ2aWNlOlwidGVhbVwiLGNtZDpcImdldE11dGVkVGVhbU1lbWJlcnNcIixyZXNwb25zZTpbe3R5cGU6XCJOdW1iZXJcIixuYW1lOlwidGVhbUlkXCJ9LHt0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJ0ZWFtTWVtYmVyc1wiLGVudGl0eTpcInRlYW1NZW1iZXJcIn1dfSxcIjhfMTI2XCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwic3luY015VGVhbU1lbWJlcnNcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcInRlYW1NZW1iZXJzXCIsZW50aXR5OlwidGVhbU1lbWJlclwifSx7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0aW1ldGFnXCJ9XX0sXCI4XzEwOVwiOntzZXJ2aWNlOlwidGVhbVwiLGNtZDpcInN5bmNUZWFtc1wiLHJlc3BvbnNlOlt7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0aW1ldGFnXCJ9LHt0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJ0ZWFtc1wiLGVudGl0eTpcInRlYW1cIn1dfSxcIjhfMTExXCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwic3luY1RlYW1NZW1iZXJzXCIscmVzcG9uc2U6W3t0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRlYW1JZFwifSx7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibWVtYmVyc1wiLGVudGl0eTpcInRlYW1NZW1iZXJcIn0se3R5cGU6XCJOdW1iZXJcIixuYW1lOlwidGltZXRhZ1wifV19LFwiOF8xMDFcIjp7c2VydmljZTpcInRlYW1cIixjbWQ6XCJzeW5jQ3JlYXRlVGVhbVwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInRlYW1cIn1dfSxcIjhfMTAyXCI6e3NlcnZpY2U6XCJ0ZWFtXCIsY21kOlwic3luY1NlbmRUZWFtTXNnXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sXCI4XzExOVwiOntzZXJ2aWNlOlwidGVhbVwiLGNtZDpcInN5bmNVcGRhdGVUZWFtTWVtYmVyXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwidGVhbU1lbWJlclwifV19LFwiMTJfMVwiOntzZXJ2aWNlOlwiZnJpZW5kXCIsY21kOlwiZnJpZW5kUmVxdWVzdFwifSxcIjEyXzEwMVwiOntzZXJ2aWNlOlwiZnJpZW5kXCIsY21kOlwic3luY0ZyaWVuZFJlcXVlc3RcIixyZXNwb25zZTpbe3R5cGU6XCJTdHJpbmdcIixuYW1lOlwiYWNjb3VudFwifSx7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJ0eXBlXCJ9LHt0eXBlOlwiU3RyaW5nXCIsbmFtZTpcInBzXCJ9XX0sXCIxMl8yXCI6e3NlcnZpY2U6XCJmcmllbmRcIixjbWQ6XCJkZWxldGVGcmllbmRcIn0sXCIxMl8xMDJcIjp7c2VydmljZTpcImZyaWVuZFwiLGNtZDpcInN5bmNEZWxldGVGcmllbmRcIixyZXNwb25zZTpbe3R5cGU6XCJTdHJpbmdcIixuYW1lOlwiYWNjb3VudFwifV19LFwiMTJfM1wiOntzZXJ2aWNlOlwiZnJpZW5kXCIsY21kOlwidXBkYXRlRnJpZW5kXCJ9LFwiMTJfMTAzXCI6e3NlcnZpY2U6XCJmcmllbmRcIixjbWQ6XCJzeW5jVXBkYXRlRnJpZW5kXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwiZnJpZW5kXCJ9XX0sXCIxMl80XCI6e3NlcnZpY2U6XCJmcmllbmRcIixjbWQ6XCJnZXRGcmllbmRzXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJmcmllbmRzXCIsZW50aXR5OlwiZnJpZW5kXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjEyXzVcIjp7c2VydmljZTpcImZyaWVuZFwiLGNtZDpcInN5bmNGcmllbmRzXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlBcnJheVwiLG5hbWU6XCJmcmllbmRzXCIsZW50aXR5OlwiZnJpZW5kXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjEyXzZcIjp7c2VydmljZTpcImZyaWVuZFwiLGNtZDpcInN5bmNGcmllbmRVc2Vyc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwidXNlcnNcIixlbnRpdHk6XCJ1c2VyXCJ9LHt0eXBlOlwiTnVtYmVyXCIsbmFtZTpcInRpbWV0YWdcIn1dfSxcIjEzXzFcIjp7c2VydmljZTpcImNoYXRyb29tXCIsY21kOlwiZ2V0Q2hhdHJvb21BZGRyZXNzXCIscmVzcG9uc2U6W3t0eXBlOlwiU3RyQXJyYXlcIixuYW1lOlwiYWRkcmVzc1wifV19LFwiMTRfMVwiOntzZXJ2aWNlOlwiZXZlbnRTZXJ2aWNlXCIsY21kOlwicHVibGlzaEV2ZW50XCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnRXZlbnRcIn1dfSxcIjE0XzJcIjp7c2VydmljZTpcImV2ZW50U2VydmljZVwiLGNtZDpcInB1c2hFdmVudFwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcIm1zZ0V2ZW50XCJ9XX0sXCIxNF8zXCI6e3NlcnZpY2U6XCJldmVudFNlcnZpY2VcIixjbWQ6XCJzdWJzY3JpYmVFdmVudFwiLHJlc3BvbnNlOlt7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcImFjY291bnRzXCJ9XX0sXCIxNF80XCI6e3NlcnZpY2U6XCJldmVudFNlcnZpY2VcIixjbWQ6XCJ1blN1YnNjcmliZUV2ZW50c0J5QWNjb3VudHNcIixyZXNwb25zZTpbe3R5cGU6XCJTdHJBcnJheVwiLG5hbWU6XCJhY2NvdW50c1wifV19LFwiMTRfNVwiOntzZXJ2aWNlOlwiZXZlbnRTZXJ2aWNlXCIsY21kOlwidW5TdWJzY3JpYmVFdmVudHNCeVR5cGVcIn0sXCIxNF82XCI6e3NlcnZpY2U6XCJldmVudFNlcnZpY2VcIixjbWQ6XCJxdWVyeVN1YnNjcmliZUV2ZW50c0J5QWNjb3VudHNcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcIm1zZ0V2ZW50U3Vic2NyaWJlc1wiLGVudGl0eTpcIm1zZ0V2ZW50U3Vic2NyaWJlXCJ9XX0sXCIxNF83XCI6e3NlcnZpY2U6XCJldmVudFNlcnZpY2VcIixjbWQ6XCJxdWVyeVN1YnNjcmliZUV2ZW50c0J5VHlwZVwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibXNnRXZlbnRTdWJzY3JpYmVzXCIsZW50aXR5OlwibXNnRXZlbnRTdWJzY3JpYmVcIn1dfSxcIjE0XzlcIjp7c2VydmljZTpcImV2ZW50U2VydmljZVwiLGNtZDpcInB1c2hFdmVudHNcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eUFycmF5XCIsbmFtZTpcIm1zZ0V2ZW50c1wiLGVudGl0eTpcIm1zZ0V2ZW50XCJ9XX0sXCIxMDFfMVwiOntzZXJ2aWNlOlwiZmlsdGVyXCIsY21kOlwic2VuZEZpbHRlck1zZ1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcIm1zZ1wifV19LFwiMTAxXzJcIjp7c2VydmljZTpcImZpbHRlclwiLGNtZDpcImZpbHRlck1zZ1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcIm1zZ1wifV19LFwiMTAxXzNcIjp7c2VydmljZTpcImZpbHRlclwiLGNtZDpcImZpbHRlclN5c01zZ1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcInN5c01zZ1wifV19LFwiMTAxXzdcIjp7c2VydmljZTpcImZpbHRlclwiLGNtZDpcInNlbmRGaWx0ZXJDdXN0b21TeXNNc2dcIn19KTtlLmV4cG9ydHM9e2lkTWFwOmksY21kQ29uZmlnOmEscGFja2V0Q29uZmlnOnN9fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPXt9O24uc2V0PWZ1bmN0aW9uKGUsdCxyKXtuW2VdPXQsciYmKHIuc3VwcG9ydD10KX0sZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKCl7fXZhciBvPW4oOSk7ci50eXBlTWFwPXt0ZXh0OjAsaW1hZ2U6MSxhdWRpbzoyLHZpZGVvOjMsZ2VvOjQsbm90aWZpY2F0aW9uOjUsZmlsZTo2LHRpcDoxMCxjdXN0b206MTAwfTt2YXIgaT1yLnR5cGVSZXZlcnNlTWFwPXswOlwidGV4dFwiLDE6XCJpbWFnZVwiLDI6XCJhdWRpb1wiLDM6XCJ2aWRlb1wiLDQ6XCJnZW9cIiw1Olwibm90aWZpY2F0aW9uXCIsNjpcImZpbGVcIiwxMDpcInRpcFwiLDEwMDpcImN1c3RvbVwifTtyLnZhbGlkVHlwZXM9T2JqZWN0LmtleXMoci50eXBlTWFwKSxyLnNldEZsb3c9ZnVuY3Rpb24oZSx0KXt2YXIgbj10PT09ZS5mcm9tO24mJnQ9PT1lLnRvJiYobj1vLmRldmljZUlkPT09ZS5mcm9tRGV2aWNlSWQpLGUuZmxvdz1uP1wib3V0XCI6XCJpblwifSxyLmdldFR5cGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50eXBlO3JldHVybiBpW3RdfHx0fSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oNTApLnBvbHlmaWxsO3dpbmRvdz13aW5kb3d8fHt9LHIoKSxyKHdpbmRvdyksbG9jYWxTdG9yYWdlPWxvY2FsU3RvcmFnZXx8bigzMSksWE1MSHR0cFJlcXVlc3Q9WE1MSHR0cFJlcXVlc3R8fG4oMzMpLFdlYlNvY2tldD1XZWJTb2NrZXR8fG4oMzIpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LG89bigzMSksaT1uKDMzKSxhPW4oMzApLHM9bigzMiksYz1uKDI0KTtlLmV4cG9ydHM9e3BvbHlmaWxsOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnR8fHdpbmRvdztpZihcIm9iamVjdFwiIT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6cihlKSkpdGhyb3cgbmV3IEVycm9yKFwicG9seWZpbGwgdGFyZ2V0IGlzIG5vdCBhbiBPYmplY3RcIik7YyhlLHtsb2NhbFN0b3JhZ2U6byxYTUxIdHRwUmVxdWVzdDppLEZvcm1EYXRhOmEsV2ViU29ja2V0OnMsT2JqZWN0Ok9iamVjdCxwb3N0TWVzc2FnZTpmdW5jdGlvbigpe319KSxlLmxvY2FsU3RvcmFnZSE9PW8mJihlLnd4U3RvcmFnZT1vKX0sbG9jYWxTdG9yYWdlOm8sWE1MSHR0cFJlcXVlc3Q6aSxGb3JtRGF0YTphLFdlYlNvY2tldDpzfX0pLmNhbGwodCxmdW5jdGlvbigpe3JldHVybiB0aGlzfSgpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oNykuZm47ci5pc0Nvbm5lY3RlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3RvY29sLmlzQ29ubmVjdGVkKCl9LHIuY29ubmVjdD1mdW5jdGlvbigpe3RoaXMucHJvdG9jb2wuY29ubmVjdCgpfSxyLmRpc2Nvbm5lY3Q9ZnVuY3Rpb24oKXt0aGlzLnByb3RvY29sLmRpc2Nvbm5lY3QoKX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDEpLG89big3KS5mbjtvLnVwbG9hZFNka0xvZ1VybD1mdW5jdGlvbihlKXtyZXR1cm4gci52ZXJpZnlPcHRpb25zKGUsXCJ1cmxcIiksdGhpcy5jYkFuZFNlbmRDbWQoXCJ1cGxvYWRTZGtMb2dVcmxcIixlKX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDcpLmZuLG89bigxKSxpPW4oMyksYT1uKDYpLHM9big3MCksYz0obig3MiksbigzNikpO3Iuc2VuZFRleHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gdC5wcm9jZXNzQ2FsbGJhY2soZSksZS5tc2c9bmV3IHQubWVzc2FnZS5UZXh0TWVzc2FnZShlKSx0LnNlbmRNc2coZSl9LHIucHJldmlld0ZpbGU9ZnVuY3Rpb24oZSl7aWYoby52ZXJpZnlPcHRpb25zKGUsXCJkb25lXCIpLGUudHlwZXx8KGUudHlwZT1cImZpbGVcIiksby52ZXJpZnlQYXJhbVByZXNlbnRKdXN0T25lKGUsXCJkYXRhVVJMIGJsb2IgZmlsZUlucHV0IHd4RmlsZVBhdGhcIiksZS5kYXRhVVJMKWUuYmxvYj1jLmZyb21EYXRhVVJMKGUuZGF0YVVSTCk7ZWxzZSBpZihlLmJsb2IpO2Vsc2UgaWYoZS5maWxlSW5wdXQpe2lmKGUuZmlsZUlucHV0PW8udmVyaWZ5RmlsZUlucHV0KGUuZmlsZUlucHV0KSxlLmZpbGVJbnB1dC5maWxlcyYmIWUuZmlsZUlucHV0LmZpbGVzLmxlbmd0aClyZXR1cm4gdm9pZCBlLmRvbmUoaS5uZXdOb0ZpbGVFcnJvcihcIuivt+mAieaLqVwiK2UudHlwZStcIuaWh+S7tlwiKSxlKTtlLmZpbGVJbnB1dE5hbWU9by5nZXRGaWxlTmFtZShlLmZpbGVJbnB1dCl9dGhpcy5wcm9jZXNzQ2FsbGJhY2soZSk7dmFyIHQ9cy5nZW5SZXNwb25zZUJvZHkoZS50eXBlKXx8e307dGhpcy5nZXROb3NUb2tlbih7cmVzcG9uc2VCb2R5OkpTT04uc3RyaW5naWZ5KHQpLnJlcGxhY2UoL1wiL2dpLCdcXFxcXCInKSxjYWxsYmFjazpmdW5jdGlvbih0LG4pe3JldHVybiB0P3ZvaWQgZS5kb25lKHQsZS5jYWxsYmFjay5vcHRpb25zKTooZS5ub3NUb2tlbj1uLHZvaWQgdGhpcy5fZG9QcmV2aWV3RmlsZShlKSl9LmJpbmQodGhpcyl9KX0sci5fZG9QcmV2aWV3RmlsZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsaSl7aWYoZS51cGxvYWRkb25lPXIsdClyZXR1cm4gdC5hcHBlbmRNZXNzYWdlKFwi5LiK5Lyg5paH5Lu25aSx6LSlXCIpLHZvaWQgZS5kb25lKHQsZS5jYWxsYmFjay5vcHRpb25zKTtpZihpPXMucGFyc2VSZXNwb25zZShpLG4ub3B0aW9ucy5leGlmT3JpZW50YXRpb24pLGkudXJsPWEuZ2VuRG93bmxvYWRVcmwoZS5ub3NUb2tlbi5idWNrZXQsYy5PYmplY3QpLG8uZXhpc3QoZS5maWxlSW5wdXROYW1lKSlpLm5hbWU9ZS5maWxlSW5wdXROYW1lO2Vsc2UgaWYoZS5ibG9iKXt2YXIgdT1lLmJsb2IubmFtZTtpZihpLm5hbWU9dXx8XCJibG9iLVwiK2kubWQ1LCF1KXt2YXIgbD1lLmJsb2IudHlwZTtpLmV4dD1sLnNsaWNlKGwubGFzdEluZGV4T2YoXCIvXCIpKzEpfX1pZihpLm5hbWU9ZS53eEZpbGVQYXRoLCFpLmV4dCl7dmFyIHA9aS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKTtwPT09LTE/aS5leHQ9XCJ1bmtub3duXCI6aS5leHQ9aS5uYW1lLnNsaWNlKHArMSl9cmV0dXJuIHZvaWQgZS5kb25lKG51bGwsby5jb3B5KGkpKX12YXIgbj10aGlzLHI9ZS51cGxvYWRkb25lLGk9YS5nZW5VcGxvYWRVcmwoZS5ub3NUb2tlbi5idWNrZXQpLGM9dGhpcy5hc3NlbWJsZVVwbG9hZFBhcmFtcyhlLm5vc1Rva2VuKSx1PVwiZmlsZVwiO28udmVyaWZ5T3B0aW9ucyhlLFwid3hGaWxlUGF0aFwiKSx3eC51cGxvYWRGaWxlKHt1cmw6aSxmaWxlUGF0aDplLnd4RmlsZVBhdGgsbmFtZTp1LGZvcm1EYXRhOmMsZmFpbDpmdW5jdGlvbihlKXt9LHN1Y2Nlc3M6ZnVuY3Rpb24oZSl7aWYoMjAwPT09ZS5zdGF0dXNDb2RlKXRyeXt0KG51bGwsSlNPTi5wYXJzZShlLmRhdGEpKX1jYXRjaChlKXt0KHtjb2RlOlwiUEFSU0VfV1hfVVBMT0FEX0ZJTEVfUkVTX0VSUk9SXCIsc3RyOmUuZGF0YSxtc2c6ZS5lcnJNc2d9KX1lbHNlIHQoe2NvZGU6ZS5zdGF0dXNDb2RlLG1zZzplLmVyck1zZ30pfX0pfSxyLnNlbmRGaWxlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoZS50eXBlfHwoZS50eXBlPVwiZmlsZVwiKSxvLnZlcmlmeVBhcmFtUHJlc2VudEp1c3RPbmUoZSxcImRhdGFVUkwgYmxvYiBmaWxlSW5wdXQgZmlsZSB3eEZpbGVQYXRoXCIpLHQucHJvY2Vzc0NhbGxiYWNrKGUpLGUuZGF0YVVSTCl0Ll9wcmV2aWV3QW5kU2VuZEZpbGUoZSk7ZWxzZSBpZihlLmJsb2IpdC5fcHJldmlld0FuZFNlbmRGaWxlKGUpO2Vsc2UgaWYoZS5maWxlSW5wdXQpe2lmKGUuZmlsZUlucHV0PW8udmVyaWZ5RmlsZUlucHV0KGUuZmlsZUlucHV0KSxlLmZpbGVJbnB1dC5maWxlcyYmIWUuZmlsZUlucHV0LmZpbGVzLmxlbmd0aClyZXR1cm4gdm9pZCBlLmRvbmUoaS5uZXdOb0ZpbGVFcnJvcihcIuivt+mAieaLqVwiK2UudHlwZStcIuaWh+S7tlwiKSxlLmNhbGxiYWNrLm9wdGlvbnMpO3QuX3ByZXZpZXdBbmRTZW5kRmlsZShlKX1lbHNlIGlmKGUud3hGaWxlUGF0aCl0Ll9wcmV2aWV3QW5kU2VuZEZpbGUoZSk7ZWxzZSBpZihlLmZpbGUpcmV0dXJuIGUubXNnPW5ldyB0Lm1lc3NhZ2UuRmlsZU1lc3NhZ2UoZSksdC5zZW5kTXNnKGUpfSxyLl9wcmV2aWV3QW5kU2VuZEZpbGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztvLnZlcmlmeUNhbGxiYWNrKGUsXCJ1cGxvYWRkb25lIGJlZm9yZXNlbmRcIik7dmFyIG49ZS5kb25lO2UuZG9uZT1mdW5jdGlvbihyLGkpe2UuZG9uZT1uLHI/ZS51cGxvYWRkb25lKHIsZS5jYWxsYmFjay5vcHRpb25zKTooZS51cGxvYWRkb25lKG51bGwsby5jb3B5KGkpKSxlLmZpbGU9aSxlLm1zZz1uZXcgdC5tZXNzYWdlLkZpbGVNZXNzYWdlKGUpLGUuYmVmb3Jlc2VuZCh0LnNlbmRNc2coZSkpKX0sdC5wcmV2aWV3RmlsZShlKX0sci5hc3NlbWJsZVVwbG9hZFBhcmFtcz1mdW5jdGlvbihlKXtyZXR1cm4gZT97T2JqZWN0OmRlY29kZVVSSUNvbXBvbmVudChlLm9iamVjdE5hbWUpLFwieC1ub3MtdG9rZW5cIjplLnRva2VuLFwieC1ub3MtZW50aXR5LXR5cGVcIjpcImpzb25cIn06bnVsbH0sci5zZW5kR2VvPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIHQucHJvY2Vzc0NhbGxiYWNrKGUpLGUubXNnPW5ldyB0Lm1lc3NhZ2UuR2VvTWVzc2FnZShlKSx0LnNlbmRNc2coZSl9LHIuc2VuZFRpcE1zZz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB0LnByb2Nlc3NDYWxsYmFjayhlKSxlLm1zZz1uZXcgdC5tZXNzYWdlLlRpcE1lc3NhZ2UoZSksdC5zZW5kTXNnKGUpfSxyLnNlbmRDdXN0b21Nc2c9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gdC5wcm9jZXNzQ2FsbGJhY2soZSksZS5tc2c9bmV3IHQubWVzc2FnZS5DdXN0b21NZXNzYWdlKGUpLHQuc2VuZE1zZyhlKX0sci5zZW5kTXNnPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10LnByb3RvY29sLHI9ZS5tc2csaT17fSxhPSEhZS5pc0xvY2FsO2lmKGEmJmUudGltZSYmKHIudGltZT1lLnRpbWUpLGUucmVzZW5kJiYoXCJvdXRcIiE9PWUuZmxvd3x8XCJmYWlsXCIhPT1lLnN0YXR1cykpcmV0dXJuIG8ub25FcnJvcihcIuWPquiDvemHjeWPkeWPkemAgeWksei0peeahOa2iOaBr1wiKTtlLmNhbGxiYWNrLm9wdGlvbnMuaWRDbGllbnQ9ci5pZENsaWVudCx0LmJlZm9yZVNlbmRNc2coZSxpKTt2YXIgcz1lLnJ0bk1zZz10LmZvcm1hdFJldHVybk1zZyhyKTtyZXR1cm4gYSYmKHMuc3RhdHVzPVwic3VjY2Vzc1wiLHMuaXNMb2NhbD0hMCksbi5zdG9yZVNlbmRNc2cmJihpLnByb21pc2U9bi5zdG9yZVNlbmRNc2cocykpLGUuY2Jhb3A9ZnVuY3Rpb24oZSl7aWYoZSYmXCJzZXJ2ZXJcIiE9PWUuZnJvbSlyZXR1cm4gcy5zdGF0dXM9XCJmYWlsXCIsbi51cGRhdGVTZW5kTXNnRXJyb3ImJm4udXBkYXRlU2VuZE1zZ0Vycm9yKHMpLHN9LGF8fChpLm1zZz1yLHQuc2VuZENtZChlLmNtZCxpLGUuY2FsbGJhY2spKSx0LmFmdGVyU2VuZE1zZyhlKSxhJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cz1vLnNpbXBsZUNsb25lKHMpLGUuZG9uZShudWxsLHMpfSwwKSxvLmNvcHkocyl9LHIuYmVmb3JlU2VuZE1zZz1mdW5jdGlvbigpe30sci5hZnRlclNlbmRNc2c9ZnVuY3Rpb24oKXt9LHIuZm9ybWF0UmV0dXJuTXNnPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIGU9by5jb3B5KGUpLHQucHJvdG9jb2wuY29tcGxldGVNc2coZSksZS5zdGF0dXM9XCJzZW5kaW5nXCIsZT10Lm1lc3NhZ2UucmV2ZXJzZShlKX0sci5yZXNlbmRNc2c9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gby52ZXJpZnlPcHRpb25zKGUsXCJtc2dcIiksdC50cmltTXNnRmxhZyhlKSxlLnJlc2VuZD0hMCx0Ll9zZW5kTXNnQnlUeXBlKGUpfSxyLmZvcndhcmRNc2c9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gby52ZXJpZnlPcHRpb25zKGUsXCJtc2dcIiksdC5iZWZvcmVGb3J3YXJkTXNnKGUpLHQudHJpbU1zZ0ZsYWcoZSksZS5mb3J3YXJkPSEwLHQuX3NlbmRNc2dCeVR5cGUoZSl9LHIudHJpbU1zZ0ZsYWc9ZnVuY3Rpb24oZSl7ZSYmZS5tc2cmJihlLm1ncz1vLmNvcHkoZS5tc2cpLGRlbGV0ZSBlLm1zZy5yZXNlbmQsZGVsZXRlIGUubXNnLmZvcndhcmQpfSxyLmJlZm9yZUZvcndhcmRNc2c9ZnVuY3Rpb24oKXt9LHIuX3NlbmRNc2dCeVR5cGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztzd2l0Y2goby52ZXJpZnlPcHRpb25zKGUsXCJtc2dcIiksby52ZXJpZnlQYXJhbVZhbGlkKFwibXNnLnR5cGVcIixlLm1zZy50eXBlLHQubWVzc2FnZS52YWxpZFR5cGVzKSxvLm1lcmdlKGUsZS5tc2cpLGUudHlwZSl7Y2FzZVwidGV4dFwiOnJldHVybiB0LnNlbmRUZXh0KGUpO2Nhc2VcImltYWdlXCI6Y2FzZVwiYXVkaW9cIjpjYXNlXCJ2aWRlb1wiOmNhc2VcImZpbGVcIjpyZXR1cm4gdC5zZW5kRmlsZShlKTtjYXNlXCJnZW9cIjpyZXR1cm4gdC5zZW5kR2VvKGUpO2Nhc2VcImN1c3RvbVwiOnJldHVybiB0LnNlbmRDdXN0b21Nc2coZSk7Y2FzZVwidGlwXCI6cmV0dXJuIHQuc2VuZFRpcE1zZyhlKTtkZWZhdWx0OnRocm93IG5ldyBpKFwi5LiN6IO95Y+R6YCB57G75Z6L5Li6IFwiK2UudHlwZStcIiDnmoTmtojmga9cIil9fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMSksbz1uKDcpLmZuLGk9bigzNCk7by5nZXRTaW1wbGVOb3NUb2tlbj1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtyZXR1cm4gZS5udW09MSxyLnZlcmlmeU9wdGlvbnMoZSksdGhpcy5jYkFuZFNlbmRDbWQoXCJnZXRTaW1wbGVOb3NUb2tlblwiLGUpfSxvLmdldE5vc1Rva2VuPWZ1bmN0aW9uKGUpe3RoaXMuc2VuZENtZChcImdldE5vc1Rva2VuXCIse3Jlc3BvbnNlQm9keTplLnJlc3BvbnNlQm9keX0sZS5jYWxsYmFjayl9LG8ucGFja0ZpbGVEb3dubG9hZE5hbWU9ZnVuY3Rpb24oZSl7ci52ZXJpZnlPcHRpb25zKGUsXCJ1cmwgbmFtZVwiKTt2YXIgdD1lLnVybDtyZXR1cm4gdCtyLmdlblVybFNlcCh0KStcImRvd25sb2FkPVwiK2VuY29kZVVSSUNvbXBvbmVudChlLm5hbWUpfSxvLmF1ZGlvVG9NcDM9ZnVuY3Rpb24oZSl7ci52ZXJpZnlPcHRpb25zKGUsXCJ1cmxcIik7dmFyIHQ9ZS51cmw7cmV0dXJuIHQrci5nZW5VcmxTZXAodCkrXCJhdWRpb1RyYW5zJnR5cGU9bXAzXCJ9LG8uc3RyaXBJbWFnZU1ldGE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYmVmb3JlUHJvY2Vzc0ltYWdlKGUsXCJzdHJpcG1ldGFcIil9LG8ucXVhbGl0eUltYWdlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmJlZm9yZVByb2Nlc3NJbWFnZShlLFwicXVhbGl0eVwiKX0sby5pbnRlcmxhY2VJbWFnZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5iZWZvcmVQcm9jZXNzSW1hZ2UoZSxcImludGVybGFjZVwiKX0sby5yb3RhdGVJbWFnZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5iZWZvcmVQcm9jZXNzSW1hZ2UoZSxcInJvdGF0ZVwiKX0sby5ibHVySW1hZ2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYmVmb3JlUHJvY2Vzc0ltYWdlKGUsXCJibHVyXCIpfSxvLmNyb3BJbWFnZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5iZWZvcmVQcm9jZXNzSW1hZ2UoZSxcImNyb3BcIil9LG8udGh1bWJuYWlsSW1hZ2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYmVmb3JlUHJvY2Vzc0ltYWdlKGUsXCJ0aHVtYm5haWxcIil9LG8uYmVmb3JlUHJvY2Vzc0ltYWdlPWZ1bmN0aW9uKGUsdCl7dmFyIG49ci5jb3B5KGUpO3JldHVybiBuLnR5cGU9dCxlLm9wcz1bbl0sdGhpcy5wcm9jZXNzSW1hZ2UoZSl9LG8ucHJvY2Vzc0ltYWdlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ci52ZXJpZnlPcHRpb25zKGUsXCJ1cmwgb3BzXCIpLHIudmVyaWZ5UGFyYW1UeXBlKFwib3BzXCIsZS5vcHMsXCJhcnJheVwiKTt2YXIgbj1lLm9wcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHIudmVyaWZ5T3B0aW9ucyhlLFwidHlwZVwiKSxyLnZlcmlmeVBhcmFtVmFsaWQoXCJ0eXBlXCIsZS50eXBlLGkudmFsaWRUeXBlcyksdFtcImdlblwiK2UudHlwZS5zbGljZSgwLDEpLnRvVXBwZXJDYXNlKCkrZS50eXBlLnNsaWNlKDEpK1wiT3BcIl0oZSl9KTt0LnByb2Nlc3NDYWxsYmFjayhlKSx0LnNlbmRDbWQoXCJwcm9jZXNzSW1hZ2VcIix7dXJsOmUudXJsLGltYWdlT3BzOm59LGUuY2FsbGJhY2spfSxvLmdlblN0cmlwbWV0YU9wPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaSh7dHlwZTplLnR5cGUsc3RyaXBtZXRhOmUuc3RyaXA/MTowfSl9LG8uZ2VuUXVhbGl0eU9wPWZ1bmN0aW9uKGUpe3IudmVyaWZ5T3B0aW9ucyhlLFwicXVhbGl0eVwiKSxyLnZlcmlmeVBhcmFtVHlwZShcInF1YWxpdHlcIixlLnF1YWxpdHksXCJudW1iZXJcIiksci52ZXJpZnlQYXJhbU1pbihcInF1YWxpdHlcIixlLnF1YWxpdHksMCksci52ZXJpZnlQYXJhbU1heChcInF1YWxpdHlcIixlLnF1YWxpdHksMTAwKTt2YXIgdD1NYXRoLnJvdW5kKGUucXVhbGl0eSk7cmV0dXJuIG5ldyBpKHt0eXBlOmUudHlwZSxxdWFsaXR5UXVhbGl0eTp0fSl9LG8uZ2VuSW50ZXJsYWNlT3A9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBpKHt0eXBlOmUudHlwZX0pfSxvLmdlblJvdGF0ZU9wPWZ1bmN0aW9uKGUpe2ZvcihyLnZlcmlmeU9wdGlvbnMoZSxcImFuZ2xlXCIpLHIudmVyaWZ5UGFyYW1UeXBlKFwiYW5nbGVcIixlLmFuZ2xlLFwibnVtYmVyXCIpO2UuYW5nbGU8MDspZS5hbmdsZT1lLmFuZ2xlKzM2MDtlLmFuZ2xlPWUuYW5nbGUlMzYwO3ZhciB0PU1hdGgucm91bmQoZS5hbmdsZSk7cmV0dXJuIG5ldyBpKHt0eXBlOmUudHlwZSxyb3RhdGVBbmdsZTp0fSl9LG8uZ2VuQmx1ck9wPWZ1bmN0aW9uKGUpe3IudmVyaWZ5T3B0aW9ucyhlLFwicmFkaXVzIHNpZ21hXCIpLHIudmVyaWZ5UGFyYW1UeXBlKFwicmFkaXVzXCIsZS5yYWRpdXMsXCJudW1iZXJcIiksci52ZXJpZnlQYXJhbU1pbihcInJhZGl1c1wiLGUucmFkaXVzLDEpLHIudmVyaWZ5UGFyYW1NYXgoXCJyYWRpdXNcIixlLnJhZGl1cyw1MCksci52ZXJpZnlQYXJhbVR5cGUoXCJzaWdtYVwiLGUuc2lnbWEsXCJudW1iZXJcIiksci52ZXJpZnlQYXJhbU1pbihcInNpZ21hXCIsZS5zaWdtYSwwKTt2YXIgdD1NYXRoLnJvdW5kKGUucmFkaXVzKSxuPU1hdGgucm91bmQoZS5zaWdtYSk7cmV0dXJuIG5ldyBpKHt0eXBlOmUudHlwZSxibHVyUmFkaXVzOnQsYmx1clNpZ21hOm59KX0sby5nZW5Dcm9wT3A9ZnVuY3Rpb24oZSl7ci52ZXJpZnlPcHRpb25zKGUsXCJ4IHkgd2lkdGggaGVpZ2h0XCIpLHIudmVyaWZ5UGFyYW1UeXBlKFwieFwiLGUueCxcIm51bWJlclwiKSxyLnZlcmlmeVBhcmFtTWluKFwieFwiLGUueCwwKSxyLnZlcmlmeVBhcmFtVHlwZShcInlcIixlLnksXCJudW1iZXJcIiksci52ZXJpZnlQYXJhbU1pbihcInlcIixlLnksMCksci52ZXJpZnlQYXJhbVR5cGUoXCJ3aWR0aFwiLGUud2lkdGgsXCJudW1iZXJcIiksci52ZXJpZnlQYXJhbU1pbihcIndpZHRoXCIsZS53aWR0aCwwKSxyLnZlcmlmeVBhcmFtVHlwZShcImhlaWdodFwiLGUuaGVpZ2h0LFwibnVtYmVyXCIpLHIudmVyaWZ5UGFyYW1NaW4oXCJoZWlnaHRcIixlLmhlaWdodCwwKTt2YXIgdD1NYXRoLnJvdW5kKGUueCksbj1NYXRoLnJvdW5kKGUueSksbz1NYXRoLnJvdW5kKGUud2lkdGgpLGE9TWF0aC5yb3VuZChlLmhlaWdodCk7cmV0dXJuIG5ldyBpKHt0eXBlOmUudHlwZSxjcm9wWDp0LGNyb3BZOm4sY3JvcFdpZHRoOm8sY3JvcEhlaWdodDphfSl9LG8uZ2VuVGh1bWJuYWlsT3A9ZnVuY3Rpb24oKXt2YXIgZT17Y292ZXI6XCJ6XCIsY29udGFpbjpcInhcIixjcm9wOlwieVwifTtyZXR1cm4gZnVuY3Rpb24odCl7ci52ZXJpZnlPcHRpb25zKHQsXCJtb2RlXCIpLHIudmVyaWZ5UGFyYW1WYWxpZChcIm1vZGVcIix0Lm1vZGUsT2JqZWN0LmtleXMoZSkpLFwiY29udGFpblwiPT09dC5tb2RlP3IudmVyaWZ5UGFyYW1BdExlYXN0UHJlc2VudE9uZSh0LFwid2lkdGggaGVpZ2h0XCIpOnIudmVyaWZ5T3B0aW9ucyh0LFwid2lkdGggaGVpZ2h0XCIpLHIudW5kZWYodC53aWR0aCkmJih0LndpZHRoPTApLHIudW5kZWYodC5oZWlnaHQpJiYodC5oZWlnaHQ9MCksci52ZXJpZnlQYXJhbVR5cGUoXCJ3aWR0aFwiLHQud2lkdGgsXCJudW1iZXJcIiksci52ZXJpZnlQYXJhbU1pbihcIndpZHRoXCIsdC53aWR0aCwwKSxyLnZlcmlmeVBhcmFtVHlwZShcImhlaWdodFwiLHQuaGVpZ2h0LFwibnVtYmVyXCIpLHIudmVyaWZ5UGFyYW1NaW4oXCJoZWlnaHRcIix0LmhlaWdodCwwKTt2YXIgbj1NYXRoLnJvdW5kKHQud2lkdGgpLG89TWF0aC5yb3VuZCh0LmhlaWdodCksYT1uZXcgaSh7dHlwZTp0LnR5cGUsdGh1bWJuYWlsTW9kZTplW3QubW9kZV0sdGh1bWJuYWlsV2lkdGg6bix0aHVtYm5haWxIZWlnaHQ6b30pO2lmKFwiY3JvcFwiPT09dC5tb2RlJiZyLm5vdHVuZGVmKHQuYXhpcykpe3IudW5kZWYodC5heGlzLngpJiYodC5heGlzLng9NSksci51bmRlZih0LmF4aXMueSkmJih0LmF4aXMueT01KSxyLnZlcmlmeVBhcmFtTWluKFwiYXhpcy54XCIsdC5heGlzLngsMCksci52ZXJpZnlQYXJhbU1heChcImF4aXMueFwiLHQuYXhpcy54LDEwKSxyLnZlcmlmeVBhcmFtTWluKFwiYXhpcy55XCIsdC5heGlzLnksMCksci52ZXJpZnlQYXJhbU1heChcImF4aXMueVwiLHQuYXhpcy55LDEwKTt2YXIgcz1NYXRoLnJvdW5kKHQuYXhpcy54KSxjPU1hdGgucm91bmQodC5heGlzLnkpO2EudGh1bWJuYWlsQXhpc1g9cyxhLnRodW1ibmFpbEF4aXNZPWN9cmV0dXJuIHIubm90dW5kZWYodC5lbmxhcmdlKSYmKHIudmVyaWZ5UGFyYW1UeXBlKFwiZW5sYXJnZVwiLHQuZW5sYXJnZSxcImJvb2xlYW5cIiksdC5lbmxhcmdlJiYoYS50aHVtYm5haWxFbmxhcmdlPTEpKSxhfX0oKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7ZT1cIlwiK2U7dmFyIHQ9ZS5pbmRleE9mKFwiP1wiKT09PS0xP1wiP2ltYWdlVmlldyZcIjpcIiZcIjtyZXR1cm4gdH1mdW5jdGlvbiBvKGUpe2U9ZXx8XCJcIjt2YXIgdD1lLmluZGV4T2YoXCJodHRwc1wiKT49MD9cImh0dHBzOi8vXCI6XCJodHRwOi8vXCIsbj1lLnJlcGxhY2UodCxcIlwiKTtuLmluZGV4T2YoXCI/XCIpPj0wJiYobj1uLnN1YnN0cmluZygwLG4uaW5kZXhPZihcIj9cIikpKTt2YXIgcj1uLnNwbGl0KFwiL1wiKTtuPXJbMF07dmFyIG89XCJcIjtpZihyLmxlbmd0aD4wJiYobz1yLnNsaWNlKDEpLmpvaW4oXCIvXCIpKSxlLmluZGV4T2YoXCI/XCIpPT09LTEpcmV0dXJue3Byb3RvY29sOnQsaG9zdG5hbWU6bixwYXRoOm8scXVlcnk6e319O3ZhciBpPWZ1bmN0aW9uKCl7dmFyIHI9ZS5zdWJzdHIoZS5pbmRleE9mKFwiP1wiKSsxKSxpPXIuc3BsaXQoXCImXCIpLGE9e307cmV0dXJuIGkuZm9yRWFjaChmdW5jdGlvbihlKXtpZihlLmluZGV4T2YoXCI9XCIpPjApe3ZhciB0PWUuc3BsaXQoXCI9XCIpO2FbdFswXV09ZGVjb2RlVVJJQ29tcG9uZW50KHRbMV0pfWVsc2UgYVtlXT1cIlwifSkse3Y6e3Byb3RvY29sOnQsaG9zdG5hbWU6bixwYXRoOm8scXVlcnk6YX19fSgpO3JldHVyblwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGk/XCJ1bmRlZmluZWRcIjphKGkpKT9pLnY6dm9pZCAwfWZ1bmN0aW9uIGkoZSl7dmFyIHQ9ZS5wcm90b2NvbCxuPWUuaG9zdG5hbWUscj1lLnBhdGgsbz1lLnF1ZXJ5O3Q9dHx8XCJodHRwOi8vXCIsbj1ufHxcIlwiLHImJihuPW4rXCIvXCIrciksbz1vfHx7fTt2YXIgaT1bXTtmb3IodmFyIGEgaW4gbylcImltYWdlVmlld1wiIT09YSYmaS5wdXNoKGErXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG9bYV0pKTtyZXR1cm4gaS5sZW5ndGg+MD9cIlwiK3QrbitcIj9pbWFnZVZpZXcmXCIraS5qb2luKFwiJlwiKTpcIlwiK3Qrbn12YXIgYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxzPW4oMSksYz1uKDcpLmZuO2Mudmlld0ltYWdlU3luYz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm9wdGlvbnM7cy52ZXJpZnlPcHRpb25zKGUsXCJ1cmxcIik7dmFyIG49ZS51cmwscj1vKG4pLGM9ci5wcm90b2NvbCx1PXIuaG9zdG5hbWUsbD1yLnBhdGgscD1yLnF1ZXJ5O2lmKFwiYm9vbGVhblwiPT10eXBlb2YgZS5zdHJpcCYmKHAuc3RyaXBtZXRhPWUuc3RyaXA/MTowKSxcIm51bWJlclwiPT10eXBlb2YgZS5xdWFsaXR5JiYocy52ZXJpZnlQYXJhbU1pbihcInF1YWxpdHlcIixlLnF1YWxpdHksMCkscy52ZXJpZnlQYXJhbU1heChcInF1YWxpdHlcIixlLnF1YWxpdHksMTAwKSxwLnF1YWxpdHk9TWF0aC5yb3VuZChlLnF1YWxpdHkpKSxcImJvb2xlYW5cIj09dHlwZW9mIGUuaW50ZXJsYWNlJiYocC5pbnRlcmxhY2U9ZS5pbnRlcmxhY2U/MTowKSxcIm51bWJlclwiPT10eXBlb2YgZS5yb3RhdGUmJihwLnJvdGF0ZT1NYXRoLnJvdW5kKGUucm90YXRlKSksXCJvYmplY3RcIj09PWEoZS50aHVtYm5haWwpKXt2YXIgZj1lLnRodW1ibmFpbC5tb2RlfHxcImNyb3BcIixkPWUudGh1bWJuYWlsLndpZHRoLG09ZS50aHVtYm5haWwuaGVpZ2h0O2lmKGQ+PTAmJm0+PTAmJmQ8NDA5NiYmbTw0MDk2JiYoZD4wfHxtPjApKXtzd2l0Y2goZil7Y2FzZVwiY3JvcFwiOmY9XCJ5XCI7YnJlYWs7Y2FzZVwiY29udGFpblwiOmY9XCJ4XCI7YnJlYWs7Y2FzZVwiY292ZXJcIjpmPVwielwiO2JyZWFrO2RlZmF1bHQ6Zj1cInhcIn1wLnRodW1ibmFpbD1cIlwiK2QrZittfX1pZih0LmRvd25sb2FkVXJsKXt2YXIgeT1vKHQuZG93bmxvYWRVcmwpO3JldHVybiBpKHtwcm90b2NvbDp5LnByb3RvY29sLGhvc3RuYW1lOnkuaG9zdG5hbWUscGF0aDpsLHF1ZXJ5Ok9iamVjdC5hc3NpZ24oeS5xdWVyeSxwKX0pfXJldHVybiBpKHtwcm90b2NvbDpjLGhvc3RuYW1lOnUscGF0aDpsLHF1ZXJ5OnB9KX0sYy52aWV3SW1hZ2VTdHJpcE1ldGE9ZnVuY3Rpb24oZSl7cy52ZXJpZnlPcHRpb25zKGUsXCJ1cmwgc3RyaXBcIikscy52ZXJpZnlQYXJhbVR5cGUoXCJzdHJpcFwiLGUuc3RyaXAsXCJib29sZWFuXCIpO3ZhciB0PVwic3RyaXBtZXRhPVwiKyhlLnN0cmlwPzE6MCksbj1yKGUudXJsKTtyZXR1cm4gZS51cmwrbit0fSxjLnZpZXdJbWFnZVF1YWxpdHk9ZnVuY3Rpb24oZSl7cy52ZXJpZnlPcHRpb25zKGUsXCJ1cmwgcXVhbGl0eVwiKSxzLnZlcmlmeVBhcmFtVHlwZShcInF1YWxpdHlcIixlLnF1YWxpdHksXCJudW1iZXJcIikscy52ZXJpZnlQYXJhbU1pbihcInF1YWxpdHlcIixlLnF1YWxpdHksMCkscy52ZXJpZnlQYXJhbU1heChcInF1YWxpdHlcIixlLnF1YWxpdHksMTAwKTt2YXIgdD1NYXRoLnJvdW5kKGUucXVhbGl0eSksbj1cInF1YWxpdHk9XCIrdCxvPXIoZS51cmwpO3JldHVybiBlLnVybCtvK259LGMudmlld0ltYWdlSW50ZXJsYWNlPWZ1bmN0aW9uKGUpe3MudmVyaWZ5T3B0aW9ucyhlLFwidXJsXCIpO3ZhciB0PVwiaW50ZXJsYWNlPTFcIixuPXIoZS51cmwpO3JldHVybiBlLnVybCtuK3R9LGMudmlld0ltYWdlUm90YXRlPWZ1bmN0aW9uKGUpe2ZvcihzLnZlcmlmeU9wdGlvbnMoZSxcInVybCBhbmdsZVwiKSxzLnZlcmlmeVBhcmFtVHlwZShcImFuZ2xlXCIsZS5hbmdsZSxcIm51bWJlclwiKTtlLmFuZ2xlPDA7KWUuYW5nbGU9ZS5hbmdsZSszNjA7ZS5hbmdsZT1lLmFuZ2xlJTM2MDt2YXIgdD1NYXRoLnJvdW5kKGUuYW5nbGUpLG49XCJyb3RhdGU9XCIrdCxvPXIoZS51cmwpO3JldHVybiBlLnVybCtvK259LGMudmlld0ltYWdlQmx1cj1mdW5jdGlvbihlKXtzLnZlcmlmeU9wdGlvbnMoZSxcInVybCByYWRpdXMgc2lnbWFcIikscy52ZXJpZnlQYXJhbVR5cGUoXCJyYWRpdXNcIixlLnJhZGl1cyxcIm51bWJlclwiKSxzLnZlcmlmeVBhcmFtTWluKFwicmFkaXVzXCIsZS5yYWRpdXMsMSkscy52ZXJpZnlQYXJhbU1heChcInJhZGl1c1wiLGUucmFkaXVzLDUwKSxzLnZlcmlmeVBhcmFtVHlwZShcInNpZ21hXCIsZS5zaWdtYSxcIm51bWJlclwiKSxzLnZlcmlmeVBhcmFtTWluKFwic2lnbWFcIixlLnNpZ21hLDApO3ZhciB0PU1hdGgucm91bmQoZS5yYWRpdXMpLG49TWF0aC5yb3VuZChlLnNpZ21hKSxvPVwiYmx1cj1cIit0K1wieFwiK24saT1yKGUudXJsKTtyZXR1cm4gZS51cmwraStvfSxjLnZpZXdJbWFnZUNyb3A9ZnVuY3Rpb24oZSl7cy52ZXJpZnlPcHRpb25zKGUsXCJ1cmwgeCB5IHdpZHRoIGhlaWdodFwiKSxzLnZlcmlmeVBhcmFtVHlwZShcInhcIixlLngsXCJudW1iZXJcIikscy52ZXJpZnlQYXJhbU1pbihcInhcIixlLngsMCkscy52ZXJpZnlQYXJhbVR5cGUoXCJ5XCIsZS55LFwibnVtYmVyXCIpLHMudmVyaWZ5UGFyYW1NaW4oXCJ5XCIsZS55LDApLHMudmVyaWZ5UGFyYW1UeXBlKFwid2lkdGhcIixlLndpZHRoLFwibnVtYmVyXCIpLHMudmVyaWZ5UGFyYW1NaW4oXCJ3aWR0aFwiLGUud2lkdGgsMCkscy52ZXJpZnlQYXJhbVR5cGUoXCJoZWlnaHRcIixlLmhlaWdodCxcIm51bWJlclwiKSxzLnZlcmlmeVBhcmFtTWluKFwiaGVpZ2h0XCIsZS5oZWlnaHQsMCk7dmFyIHQ9TWF0aC5yb3VuZChlLngpLG49TWF0aC5yb3VuZChlLnkpLG89TWF0aC5yb3VuZChlLndpZHRoKSxpPU1hdGgucm91bmQoZS5oZWlnaHQpLGE9XCJjcm9wPVwiK3QrXCJfXCIrbitcIl9cIitvK1wiX1wiK2ksYz1yKGUudXJsKTtyZXR1cm4gZS51cmwrYythfSxjLnZpZXdJbWFnZVRodW1ibmFpbD1mdW5jdGlvbigpe3ZhciBlPXtjb3ZlcjpcInpcIixjb250YWluOlwieFwiLGNyb3A6XCJ5XCJ9O3JldHVybiBmdW5jdGlvbih0KXtzLnZlcmlmeU9wdGlvbnModCxcInVybCBtb2RlXCIpLHMudmVyaWZ5UGFyYW1WYWxpZChcIm1vZGVcIix0Lm1vZGUsT2JqZWN0LmtleXMoZSkpLFwiY29udGFpblwiPT09dC5tb2RlP3MudmVyaWZ5UGFyYW1BdExlYXN0UHJlc2VudE9uZSh0LFwid2lkdGggaGVpZ2h0XCIpOnMudmVyaWZ5T3B0aW9ucyh0LFwid2lkdGggaGVpZ2h0XCIpLHMudW5kZWYodC53aWR0aCkmJih0LndpZHRoPTApLHMudW5kZWYodC5oZWlnaHQpJiYodC5oZWlnaHQ9MCkscy52ZXJpZnlQYXJhbVR5cGUoXCJ3aWR0aFwiLHQud2lkdGgsXCJudW1iZXJcIikscy52ZXJpZnlQYXJhbU1pbihcIndpZHRoXCIsdC53aWR0aCwwKSxzLnZlcmlmeVBhcmFtVHlwZShcImhlaWdodFwiLHQuaGVpZ2h0LFwibnVtYmVyXCIpLHMudmVyaWZ5UGFyYW1NaW4oXCJoZWlnaHRcIix0LmhlaWdodCwwKTt2YXIgbj1NYXRoLnJvdW5kKHQud2lkdGgpLG89TWF0aC5yb3VuZCh0LmhlaWdodCksaT1cInRodW1ibmFpbD1cIituK2VbdC5tb2RlXStvO2lmKFwiY3JvcFwiPT09dC5tb2RlJiZzLm5vdHVuZGVmKHQuYXhpcykpe3MudW5kZWYodC5heGlzLngpJiYodC5heGlzLng9NSkscy51bmRlZih0LmF4aXMueSkmJih0LmF4aXMueT01KSxzLnZlcmlmeVBhcmFtTWluKFwiYXhpcy54XCIsdC5heGlzLngsMCkscy52ZXJpZnlQYXJhbU1heChcImF4aXMueFwiLHQuYXhpcy54LDEwKSxzLnZlcmlmeVBhcmFtTWluKFwiYXhpcy55XCIsdC5heGlzLnksMCkscy52ZXJpZnlQYXJhbU1heChcImF4aXMueVwiLHQuYXhpcy55LDEwKTt2YXIgYT1NYXRoLnJvdW5kKHQuYXhpcy54KSxjPU1hdGgucm91bmQodC5heGlzLnkpO2k9aStcIiZheGlzPVwiK2ErXCJfXCIrY31zLm5vdHVuZGVmKHQuZW5sYXJnZSkmJihzLnZlcmlmeVBhcmFtVHlwZShcImVubGFyZ2VcIix0LmVubGFyZ2UsXCJib29sZWFuXCIpLHQuZW5sYXJnZSYmKGkrPVwiJmVubGFyZ2U9MVwiKSk7dmFyIHU9cih0LnVybCk7cmV0dXJuIHQudXJsK3UraX19KCl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtuKDQ5KX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7dmFyIHQ9dGhpcztpKGUubmFtZSkmJih0Lm5hbWU9XCJcIitlLm5hbWUpLGkoZS5hbm5vdW5jZW1lbnQpJiYodC5hbm5vdW5jZW1lbnQ9XCJcIitlLmFubm91bmNlbWVudCksaShlLmJyb2FkY2FzdFVybCkmJih0LmJyb2FkY2FzdFVybD1cIlwiK2UuYnJvYWRjYXN0VXJsKSxpKGUuY3VzdG9tKSYmKHQuY3VzdG9tPVwiXCIrZS5jdXN0b20pfXZhciBvPW4oMSksaT1vLm5vdHVuZGVmLGE9by51bmRlZjtyLnJldmVyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9by5jb3B5KGUpO3JldHVybiBhKHQuYW5ub3VuY2VtZW50KSYmKHQuYW5ub3VuY2VtZW50PVwiXCIpLGEodC5icm9hZGNhc3RVcmwpJiYodC5icm9hZGNhc3RVcmw9XCJcIiksYSh0LmN1c3RvbSkmJih0LmN1c3RvbT1cIlwiKSxpKHQuY3JlYXRlVGltZSkmJih0LmNyZWF0ZVRpbWU9K3QuY3JlYXRlVGltZSksaSh0LnVwZGF0ZVRpbWUpJiYodC51cGRhdGVUaW1lPSt0LnVwZGF0ZVRpbWUpLGkodC5vbmxpbmVNZW1iZXJOdW0pJiYodC5vbmxpbmVNZW1iZXJOdW09K3Qub25saW5lTWVtYmVyTnVtKSxpKHQubXV0ZSkmJih0Lm11dGU9XCIxXCI9PT10Lm11dGUpLHR9LGUuZXhwb3J0cz1yfSwsZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMTApLmZuLG89bigzKSxpPW4oMTEpLGE9bigxOCkscz1uKDkpLGM9big2KSx1PW4oMSksbD11Lm5vdHVuZGVmO3IubG9naW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uuc2VuZENtZChcImxvZ2luXCIsZS5hc3NlbWJsZUxvZ2luKCksZS5vbkxvZ2luLmJpbmQoZSkpLGUuYXV0b2Nvbm5lY3Q9ITF9LHIuZ2VuU2Vzc2lvbktleT1mdW5jdGlvbigpe3ZhciBlPXt9O3JldHVybiBmdW5jdGlvbigpe3ZhciB0PXRoaXMsbj10Lm5hbWUscj1lW25dPWVbbl18fHUuZ3VpZCgpO3JldHVybiByfX0oKSxyLmFzc2VtYmxlSU1Mb2dpbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLm9wdGlvbnMsbj10LmFjY291bnQscj1lLmF1dG9jb25uZWN0PzA6MTtyZXR1cm57YXBwTG9naW46cixhcHBLZXk6dC5hcHBLZXksYWNjb3VudDpuLHRva2VuOnQudG9rZW4sc2RrVmVyc2lvbjpjLmluZm8uc2RrVmVyc2lvbixwcm90b2NvbFZlcnNpb246Yy5pbmZvLnByb3RvY29sVmVyc2lvbixvczppLm9zLnRvU3RyaW5nKCksYnJvd3NlcjppLm5hbWUrXCIgXCIraS52ZXJzaW9uLHNlc3Npb246ZS5nZW5TZXNzaW9uS2V5KCksZGV2aWNlSWQ6cy5kZXZpY2VJZH19LHIub25Mb2dpbj1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7bi5sb2dpblJlc3VsdD10LGU/bi5vbkF1dGhFcnJvcihlKToobi5zdGFydEhlYXJ0YmVhdCgpLG4uYWZ0ZXJMb2dpbih0KSl9LHIuYWZ0ZXJMb2dpbj11LmVtcHR5RnVuYyxyLm5vdGlmeUxvZ2luPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUubG9naW5SZXN1bHQ7ZS5sb2dnZXIuaW5mbyhcIm9uQ29ubmVjdFwiLHQpLGUub3B0aW9ucy5vbmNvbm5lY3QodCl9LHIubG9nb3V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihlLmlzQ29ubmVjdGVkKCkpe3ZhciB0PW5ldyBvKFwi5Li75Yqo6YCA5Ye6XCIsXCJsb2dvdXRcIik7ZS5vbkF1dGhFcnJvcih0KX19LHIub25LaWNrZWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuY29udGVudCxyPW4uZnJvbSxpPW4ucmVhc29uLHM9bi5jdXN0b20sYz17cmVhc29uOnQua2lja2VkUmVhc29uc1tpXXx8XCJ1bmtub3duXCIsbWVzc2FnZTp0LmtpY2tlZE1lc3NhZ2VzW2ldfHxcIuacquefpeWOn+WboFwifTtpZihsKHIpJiYoYy5mcm9tPWEucmV2ZXJzZVR5cGUocikpLGwocykmJihjLmN1c3RvbT1zKSx0LnNob3VsZE5vdGlmeUtpY2tlZChjKSl7dmFyIHA9bmV3IG8oXCLooqvouKLkuoZcIixcImtpY2tlZFwiKTt1Lm1lcmdlKHAsYyksdC5vbkF1dGhFcnJvcihwKX1lbHNlIHQubG9nZ2VyLndhcm4oXCJzaWxlbnRseUtpY2tcIiksdC5zaG91bGRSZWNvbm5lY3Q9ITEsdC5oYXNOb3RpZnlEaXNjb25uZWN0ZWQ9ITAsdC5kaXNjb25uZWN0U29ja2V0KCl9LHIuc2hvdWxkTm90aWZ5S2lja2VkPWZ1bmN0aW9uKGUpe3JldHVyblwic2lsZW50bHlLaWNrXCIhPT1lLnJlYXNvbn0sci5vbkF1dGhFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3Quc2hvdWxkUmVjb25uZWN0PSExLHQubWFya0FsbENhbGxiYWNrSW52YWxpZChlfHxvLm5ld0Nvbm5lY3Rpb25FcnJvcigpKSx0Lm5vdGlmeURpc2Nvbm5lY3QoZSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigxMCkuZm4sbz1uKDMpLGk9big3MyksYT1uKDE3KSxzPW4oNiksYz1uKDEpO3IuaW5pdENvbm5lY3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uuc29ja2V0PW51bGwsZS5yZXRyeUNvdW50PTAsZS5jb25uZWN0aW5nPSExLGUuc2hvdWxkUmVjb25uZWN0PSEwLGUuaGFzTm90aWZ5RGlzY29ubmVjdGVkPSExfSxyLnJlc2V0Q29ubmVjdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLm9wdGlvbnM7Yy5ub3R1bmRlZih0Lm5lZWRSZWNvbm5lY3QpPyhjLnZlcmlmeVBhcmFtVHlwZShcIm5lZWRSZWNvbm5lY3RcIix0Lm5lZWRSZWNvbm5lY3QsXCJib29sZWFuXCIpLGUubmVlZFJlY29ubmVjdD10Lm5lZWRSZWNvbm5lY3QpOmUubmVlZFJlY29ubmVjdD0hMCxjLm5vdHVuZGVmKHQucmVjb25uZWN0aW9uQXR0ZW1wdHMpJiZjLnZlcmlmeVBhcmFtVHlwZShcInJlY29ubmVjdGlvbkF0dGVtcHRzXCIsdC5yZWNvbm5lY3Rpb25BdHRlbXB0cyxcIm51bWJlclwiKSxlLnJlY29ubmVjdGlvbkF0dGVtcHRzPXQucmVjb25uZWN0aW9uQXR0ZW1wdHN8fDEvMCxlLmJhY2tvZmY9bmV3IGkoe21pbjpzLnJlY29ubmVjdGlvbkRlbGF5LG1heDpzLnJlY29ubmVjdGlvbkRlbGF5TWF4LGppdHRlcjpzLnJlY29ubmVjdGlvbkppdHRlcn0pfSxyLmNvbm5lY3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCFlLmlzQ29ubmVjdGVkKCkmJiFlLmNvbm5lY3RpbmcpaWYoZS5jb25uZWN0aW5nPSEwLGUuaGFzTm90aWZ5RGlzY29ubmVjdGVkPSExLGUuc29ja2V0KWUubG9nZ2VyLmluZm8oXCJjb25uZWN0aW5nXCIpLGUuc29ja2V0LnNvY2tldC5jb25uZWN0KCk7ZWxzZXt2YXIgdD1lLmdldE5leHRTb2NrZXRVcmwoKTt0P2UuY29ubmVjdFRvVXJsKHQpOmUucmVmcmVzaFNvY2tldFVybCgpfX0sci5nZXROZXh0U29ja2V0VXJsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc29ja2V0VXJscy5zaGlmdCgpfSxyLmlzQ29ubmVjdGVkPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4hIWUuc29ja2V0JiYhIWUuc29ja2V0LnNvY2tldCYmZS5zb2NrZXQuc29ja2V0LmNvbm5lY3RlZH0sci5jb25uZWN0VG9Vcmw9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0LmxvZ2dlci5sb2coXCJ0cnkgY29ubmVjdCB0byBcIixlKSwhd2luZG93LmxvY2F0aW9uKXt2YXIgbj1lLnNwbGl0KFwiOlwiKTt3aW5kb3cubG9jYXRpb249e3Byb3RvY29sOm5bMF0saG9zdG5hbWU6blsxXS5zbGljZSgyKSxwb3J0Om5bMl19fXRoaXMub3B0aW9ucy50cmFuc3BvcnRzPVtcIndlYnNvY2tldFwiXTt2YXIgcj10aGlzLm9wdGlvbnMudHJhbnNwb3J0c3x8W1wid2Vic29ja2V0XCIsXCJ4aHItcG9sbGluZ1wiXTt0LnNvY2tldD1hLmNvbm5lY3QoZSx7dHJhbnNwb3J0czpyLHJlY29ubmVjdDohMSxcImZvcmNlIG5ldyBjb25uZWN0aW9uXCI6ITAsXCJjb25uZWN0IHRpbWVvdXRcIjpzLmNvbm5lY3RUaW1lb3V0fSksdC5zb2NrZXQub24oXCJjb25uZWN0XCIsdC5vbkNvbm5lY3QuYmluZCh0KSksdC5zb2NrZXQub24oXCJoYW5kc2hha2VfZmFpbGVkXCIsdC5vbkhhbmRzaGFrZUZhaWxlZC5iaW5kKHQpKSx0LnNvY2tldC5vbihcImNvbm5lY3RfZmFpbGVkXCIsdC5vbkNvbm5lY3RGYWlsZWQuYmluZCh0KSksdC5zb2NrZXQub24oXCJlcnJvclwiLHQub25FcnJvci5iaW5kKHQpKSx0LnNvY2tldC5vbihcIm1lc3NhZ2VcIix0Lm9uTWVzc2FnZS5iaW5kKHQpKSx0LnNvY2tldC5vbihcImRpc2Nvbm5lY3RcIixmdW5jdGlvbigpe3QubG9nZ2VyLmluZm8oXCJzb2NrZXQgZGlzY29ubmVjdFwiKSx0Lm9uRGlzY29ubmVjdCghMCl9KX0sci5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmlzQ29ubmVjdGVkKCkmJihlLmxvZ2dlci5pbmZvKFwiZGlzY29ubmVjdGluZ1wiKSxlLmxvZ291dCgpKX0sci5vbkNvbm5lY3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuYmFja29mZiYmZS5iYWNrb2ZmLnJlc2V0KCksZS5yZXRyeUNvdW50PTAsZS5jb25uZWN0aW5nPSExLGUuc2hvdWxkUmVjb25uZWN0PSEwLGUuaGFzTm90aWZ5RGlzY29ubmVjdGVkPSExLGUubG9naW4oKX0sci5vbkhhbmRzaGFrZUZhaWxlZD1mdW5jdGlvbigpe3RoaXMub25EaXNjb25uZWN0KCl9LHIub25Db25uZWN0RmFpbGVkPWZ1bmN0aW9uKCl7dGhpcy5vbkRpc2Nvbm5lY3QoKX0sci5vbkVycm9yPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzWzBdO2UmJnRoaXMubm90aWZ5RXJyb3IobmV3IG8oZSkpfSxyLm9uRGlzY29ubmVjdD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF0sdD10aGlzO3QuY29ubmVjdGVkPWUsdC5jb25uZWN0aW5nPSExLHQubWFya0FsbENhbGxiYWNrSW52YWxpZChvLm5ld05ldHdvcmtFcnJvcigpKSx0LnN0b3BIZWFydGJlYXQoKSx0LnJlY29ubmVjdCgpfSxyLndpbGxSZWNvbm5lY3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBlLnNob3VsZFJlY29ubmVjdCYmZS5uZWVkUmVjb25uZWN0JiZlLnJldHJ5Q291bnQ8ZS5yZWNvbm5lY3Rpb25BdHRlbXB0c30sci5yZWNvbm5lY3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKGUud2lsbFJlY29ubmVjdCgpKXtlLnNvY2tldD1udWxsLGUuY29ubmVjdGVkJiYoZS5hdXRvY29ubmVjdD0hMCksZS5yZXRyeUNvdW50Kys7dmFyIHQ9ZS5iYWNrb2ZmLmR1cmF0aW9uKCk7ZS5sb2dnZXIubG9nKFwid2lsbCByZXRyeSBhZnRlclwiLHQrXCJtc1wiLFwiLCByZXRyeUNvdW50XCIsZS5yZXRyeUNvdW50KSxlLm9wdGlvbnMub253aWxscmVjb25uZWN0KHtyZXRyeUNvdW50OmUucmV0cnlDb3VudCxkdXJhdGlvbjp0fSksc2V0VGltZW91dChmdW5jdGlvbigpe2UuY29ubmVjdCgpfSx0KX1lbHNlIGUubm90aWZ5RGlzY29ubmVjdCgpfSxyLm5vdGlmeUNvbm5lY3RFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49by5uZXdDb25uZWN0RXJyb3IoZSk7dC5sb2dnZXIuZXJyb3IobiksdC5vcHRpb25zLm9uZXJyb3Iobil9LHIubm90aWZ5RGlzY29ubmVjdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuaGFzTm90aWZ5RGlzY29ubmVjdGVkfHwodC5oYXNOb3RpZnlEaXNjb25uZWN0ZWQ9ITAsdC5kaXNjb25uZWN0U29ja2V0KCksZT1lfHxuZXcgbyxlLnJldHJ5Q291bnQ9dC5yZXRyeUNvdW50LGUud2lsbFJlY29ubmVjdD10LndpbGxSZWNvbm5lY3QoKSx0LmJhY2tvZmYmJnQuYmFja29mZi5yZXNldCgpLHQucmV0cnlDb3VudD0wLHQuY29ubmVjdGluZz0hMSx0LmxvZ2dlci5pbmZvKFwib25EaXNjb25uZWN0XCIsZSksdC5vcHRpb25zLm9uZGlzY29ubmVjdChlKSl9LHIuZGlzY29ubmVjdFNvY2tldD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoZS5pc0Nvbm5lY3RlZCgpKXRyeXtlLnNvY2tldC5kaXNjb25uZWN0KCksZS5zb2NrZXQ9bnVsbH1jYXRjaChlKXt9fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMTApLmZuLG89big2KTtyLnByb2Nlc3NMaW5rPWZ1bmN0aW9uKGUpe3N3aXRjaChlLmNtZCl7Y2FzZVwiaGVhcnRiZWF0XCI6fX0sci5zdGFydEhlYXJ0YmVhdD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5zdG9wSGVhcnRiZWF0KCksZS5oZWFydGJlYXRUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5zZW5kQ21kKFwiaGVhcnRiZWF0XCIsbnVsbCxlLm9uSGVhcnRiZWF0LmJpbmQoZSkpfSxvLmhlYXJ0YmVhdEludGVydmFsKX0sci5zdG9wSGVhcnRiZWF0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmhlYXJ0YmVhdFRpbWVyJiYoY2xlYXJUaW1lb3V0KGUuaGVhcnRiZWF0VGltZXIpLGUuaGVhcnRiZWF0VGltZXI9bnVsbCl9LHIub25IZWFydGJlYXQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2V8fG4uc3RhcnRIZWFydGJlYXQoKSxuLm9uTWlzY0Vycm9yKGUsdCxcImhlYXJ0YmVhdFwiKX0sci5oZWFydGJlYXQ9ZnVuY3Rpb24oKXt9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigxMCkuZm4sbz1uKDM0KTtyLnByb2Nlc3NNaXNjPWZ1bmN0aW9uKGUpe3N3aXRjaChlLmNtZCl7Y2FzZVwiZ2V0U2ltcGxlTm9zVG9rZW5cIjplLmVycm9yfHwoZS5vYmo9ZS5jb250ZW50Lm5vc1Rva2Vuc1swXSk7YnJlYWs7Y2FzZVwiZ2V0Tm9zVG9rZW5cIjplLmVycm9yfHwoZS5vYmo9ZS5jb250ZW50Lm5vc1Rva2VuKTticmVhaztjYXNlXCJub3RpZnlVcGxvYWRMb2dcIjplLmVycm9yfHx0aGlzLmVtaXRBUEkoe3R5cGU6XCJub3RpZnlVcGxvYWRMb2dcIn0pO2JyZWFrO2Nhc2VcImF1ZGlvVG9UZXh0XCI6ZS5lcnJvcnx8KGUub2JqLnRleHQ9ZS5jb250ZW50LnRleHQpO2JyZWFrO2Nhc2VcInByb2Nlc3NJbWFnZVwiOmUub2JqLmltYWdlT3BzPW8ucmV2ZXJzZUltYWdlT3BzKGUub2JqLmltYWdlT3BzKSxlLmVycm9yfHwoZS5vYmo9e3VybDplLmNvbnRlbnQudXJsfSl9fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMSksbz1uKDM1KSxpPXIubWVyZ2Uoe30sby5pZE1hcCx7Y2hhdHJvb206e2lkOjEzLGxvZ2luOjIsa2lja2VkOjMsbG9nb3V0OjQsc2VuZE1zZzo2LG1zZzo3LGdldENoYXRyb29tTWVtYmVyczo4LGdldEhpc3RvcnlNc2dzOjksbWFya0NoYXRyb29tTWVtYmVyOjExLGNsb3NlQ2hhdHJvb206MTIsZ2V0Q2hhdHJvb206MTMsdXBkYXRlQ2hhdHJvb206MTQsdXBkYXRlTXlDaGF0cm9vbU1lbWJlckluZm86MTUsZ2V0Q2hhdHJvb21NZW1iZXJzSW5mbzoxNixraWNrQ2hhdHJvb21NZW1iZXI6MTcsdXBkYXRlQ2hhdHJvb21NZW1iZXJUZW1wTXV0ZToxOSxxdWV1ZU9mZmVyOjIwLHF1ZXVlUG9sbDoyMSxxdWV1ZUxpc3Q6MjIscXVldWVEcm9wOjI0LHF1ZXVlSW5pdDoyNX19KSxhPXIubWVyZ2Uoe30sby5jbWRDb25maWcse2xvZ2luOntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS5sb2dpbixwYXJhbXM6W3t0eXBlOlwiYnl0ZVwiLG5hbWU6XCJ0eXBlXCJ9LHt0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibG9naW5cIn0se3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJpbUxvZ2luXCJ9XX0sbG9nb3V0OntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS5sb2dvdXR9LHNlbmRNc2c6e3NpZDppLmNoYXRyb29tLmlkLGNpZDppLmNoYXRyb29tLnNlbmRNc2cscGFyYW1zOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcIm1zZ1wifV19LGdldENoYXRyb29tTWVtYmVyczp7c2lkOmkuY2hhdHJvb20uaWQsY2lkOmkuY2hhdHJvb20uZ2V0Q2hhdHJvb21NZW1iZXJzLHBhcmFtczpbe3R5cGU6XCJieXRlXCIsbmFtZTpcInR5cGVcIn0se3R5cGU6XCJsb25nXCIsbmFtZTpcInRpbWVcIn0se3R5cGU6XCJpbnRcIixuYW1lOlwibGltaXRcIn1dfSxnZXRIaXN0b3J5TXNnczp7c2lkOmkuY2hhdHJvb20uaWQsY2lkOmkuY2hhdHJvb20uZ2V0SGlzdG9yeU1zZ3MscGFyYW1zOlt7dHlwZTpcImxvbmdcIixuYW1lOlwidGltZXRhZ1wifSx7dHlwZTpcImludFwiLG5hbWU6XCJsaW1pdFwifSx7dHlwZTpcImJvb2xcIixuYW1lOlwicmV2ZXJzZVwifV19LG1hcmtDaGF0cm9vbU1lbWJlcjp7c2lkOmkuY2hhdHJvb20uaWQsY2lkOmkuY2hhdHJvb20ubWFya0NoYXRyb29tTWVtYmVyLHBhcmFtczpbe3R5cGU6XCJzdHJpbmdcIixuYW1lOlwiYWNjb3VudFwifSx7dHlwZTpcImludFwiLG5hbWU6XCJ0eXBlXCJ9LHt0eXBlOlwiYm9vbFwiLG5hbWU6XCJpc0FkZFwifSx7dHlwZTpcImludFwiLG5hbWU6XCJsZXZlbFwifSx7dHlwZTpcInN0cmluZ1wiLG5hbWU6XCJjdXN0b21cIn1dfSxjbG9zZUNoYXRyb29tOntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS5jbG9zZUNoYXRyb29tLHBhcmFtczpbe3R5cGU6XCJzdHJpbmdcIixuYW1lOlwiY3VzdG9tXCJ9XX0sZ2V0Q2hhdHJvb206e3NpZDppLmNoYXRyb29tLmlkLGNpZDppLmNoYXRyb29tLmdldENoYXRyb29tfSx1cGRhdGVDaGF0cm9vbTp7c2lkOmkuY2hhdHJvb20uaWQsY2lkOmkuY2hhdHJvb20udXBkYXRlQ2hhdHJvb20scGFyYW1zOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcImNoYXRyb29tXCJ9LHt0eXBlOlwiYm9vbGVhblwiLG5hbWU6XCJuZWVkTm90aWZ5XCJ9LHt0eXBlOlwiU3RyaW5nXCIsbmFtZTpcImN1c3RvbVwifV19LHVwZGF0ZU15Q2hhdHJvb21NZW1iZXJJbmZvOntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS51cGRhdGVNeUNoYXRyb29tTWVtYmVySW5mbyxwYXJhbXM6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwiY2hhdHJvb21NZW1iZXJcIn0se3R5cGU6XCJib29sZWFuXCIsbmFtZTpcIm5lZWROb3RpZnlcIn0se3R5cGU6XCJTdHJpbmdcIixuYW1lOlwiY3VzdG9tXCJ9LHt0eXBlOlwiYm9vbGVhblwiLG5hbWU6XCJuZWVkU2F2ZVwifV19LGdldENoYXRyb29tTWVtYmVyc0luZm86e3NpZDppLmNoYXRyb29tLmlkLGNpZDppLmNoYXRyb29tLmdldENoYXRyb29tTWVtYmVyc0luZm8scGFyYW1zOlt7dHlwZTpcIlN0ckFycmF5XCIsbmFtZTpcImFjY291bnRzXCJ9XX0sa2lja0NoYXRyb29tTWVtYmVyOntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS5raWNrQ2hhdHJvb21NZW1iZXIscGFyYW1zOlt7dHlwZTpcInN0cmluZ1wiLG5hbWU6XCJhY2NvdW50XCJ9LHt0eXBlOlwic3RyaW5nXCIsbmFtZTpcImN1c3RvbVwifV19LHVwZGF0ZUNoYXRyb29tTWVtYmVyVGVtcE11dGU6e3NpZDppLmNoYXRyb29tLmlkLGNpZDppLmNoYXRyb29tLnVwZGF0ZUNoYXRyb29tTWVtYmVyVGVtcE11dGUscGFyYW1zOlt7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJhY2NvdW50XCJ9LHt0eXBlOlwibG9uZ1wiLG5hbWU6XCJkdXJhdGlvblwifSx7dHlwZTpcImJvb2xlYW5cIixuYW1lOlwibmVlZE5vdGlmeVwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJjdXN0b21cIn1dfSxxdWV1ZU9mZmVyOntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS5xdWV1ZU9mZmVyLHBhcmFtczpbe3R5cGU6XCJzdHJpbmdcIixuYW1lOlwiZWxlbWVudEtleVwifSx7dHlwZTpcInN0cmluZ1wiLG5hbWU6XCJlbGVtZW50VmFsdWVcIn1dfSxxdWV1ZVBvbGw6e3NpZDppLmNoYXRyb29tLmlkLGNpZDppLmNoYXRyb29tLnF1ZXVlUG9sbCxwYXJhbXM6W3t0eXBlOlwic3RyaW5nXCIsbmFtZTpcImVsZW1lbnRLZXlcIn1dfSxxdWV1ZUxpc3Q6e3NpZDppLmNoYXRyb29tLmlkLGNpZDppLmNoYXRyb29tLnF1ZXVlTGlzdH0scXVldWVEcm9wOntzaWQ6aS5jaGF0cm9vbS5pZCxjaWQ6aS5jaGF0cm9vbS5xdWV1ZURyb3B9LHF1ZXVlSW5pdDp7c2lkOmkuY2hhdHJvb20uaWQsY2lkOmkuY2hhdHJvb20ucXVldWVJbml0LHBhcmFtczpbe3R5cGU6XCJpbnRcIixuYW1lOlwibGltaXRcIn1dfX0pLHM9XCJjaGF0cm9vbVwiLGM9ci5tZXJnZSh7fSxvLnBhY2tldENvbmZpZyx7XCI0XzEwXCI6e3NlcnZpY2U6XCJub3RpZnlcIn0sXCI0XzExXCI6e3NlcnZpY2U6XCJub3RpZnlcIn0sXCIxM18yXCI6e3NlcnZpY2U6cyxjbWQ6XCJsb2dpblwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcImNoYXRyb29tXCJ9LHt0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwiY2hhdHJvb21NZW1iZXJcIn1dfSxcIjEzXzNcIjp7c2VydmljZTpzLGNtZDpcImtpY2tlZFwiLHJlc3BvbnNlOlt7dHlwZTpcIk51bWJlclwiLG5hbWU6XCJyZWFzb25cIn0se3R5cGU6XCJTdHJpbmdcIixuYW1lOlwiY3VzdG9tXCJ9XX0sXCIxM180XCI6e3NlcnZpY2U6cyxjbWQ6XCJsb2dvdXRcIn0sXCIxM182XCI6e3NlcnZpY2U6cyxjbWQ6XCJzZW5kTXNnXCIscmVzcG9uc2U6W3t0eXBlOlwiUHJvcGVydHlcIixuYW1lOlwibXNnXCJ9XX0sXCIxM183XCI6e3NlcnZpY2U6cyxjbWQ6XCJtc2dcIixyZXNwb25zZTpbe3R5cGU6XCJQcm9wZXJ0eVwiLG5hbWU6XCJtc2dcIn1dfSxcIjEzXzhcIjp7c2VydmljZTpzLGNtZDpcImdldENoYXRyb29tTWVtYmVyc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibWVtYmVyc1wiLGVudGl0eTpcImNoYXRyb29tTWVtYmVyXCJ9XX0sXCIxM185XCI6e3NlcnZpY2U6cyxjbWQ6XCJnZXRIaXN0b3J5TXNnc1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibXNnc1wiLGVudGl0eTpcIm1zZ1wifV19LFwiMTNfMTFcIjp7c2VydmljZTpzLGNtZDpcIm1hcmtDaGF0cm9vbU1lbWJlclwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcImNoYXRyb29tTWVtYmVyXCJ9XX0sXCIxM18xMlwiOntzZXJ2aWNlOnMsY21kOlwiY2xvc2VDaGF0cm9vbVwifSxcIjEzXzEzXCI6e3NlcnZpY2U6cyxjbWQ6XCJnZXRDaGF0cm9vbVwiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5XCIsbmFtZTpcImNoYXRyb29tXCJ9XX0sXCIxM18xNFwiOntzZXJ2aWNlOnMsY21kOlwidXBkYXRlQ2hhdHJvb21cIn0sXCIxM18xNVwiOntzZXJ2aWNlOnMsY21kOlwidXBkYXRlTXlDaGF0cm9vbU1lbWJlckluZm9cIn0sXCIxM18xNlwiOntzZXJ2aWNlOnMsY21kOlwiZ2V0Q2hhdHJvb21NZW1iZXJzSW5mb1wiLHJlc3BvbnNlOlt7dHlwZTpcIlByb3BlcnR5QXJyYXlcIixuYW1lOlwibWVtYmVyc1wiLGVudGl0eTpcImNoYXRyb29tTWVtYmVyXCJ9XX0sXCIxM18xN1wiOntzZXJ2aWNlOnMsY21kOlwia2lja0NoYXRyb29tTWVtYmVyXCJ9LFwiMTNfMTlcIjp7c2VydmljZTpzLGNtZDpcInVwZGF0ZUNoYXRyb29tTWVtYmVyVGVtcE11dGVcIn0sXCIxM18yMFwiOntzZXJ2aWNlOnMsY21kOlwicXVldWVPZmZlclwifSxcIjEzXzIxXCI6e3NlcnZpY2U6cyxjbWQ6XCJxdWV1ZVBvbGxcIixyZXNwb25zZTpbe3R5cGU6XCJTdHJpbmdcIixuYW1lOlwiZWxlbWVudEtleVwifSx7dHlwZTpcIlN0cmluZ1wiLG5hbWU6XCJlbGVtZW50VmFsdWVcIn1dfSxcIjEzXzIyXCI6e3NlcnZpY2U6cyxjbWQ6XCJxdWV1ZUxpc3RcIixyZXNwb25zZTpbe3R5cGU6XCJLVkFycmF5XCIsbmFtZTpcInF1ZXVlTGlzdFwifV19LFwiMTNfMjRcIjp7c2VydmljZTpzLGNtZDpcInF1ZXVlRHJvcFwifSxcIjEzXzI1XCI6e3NlcnZpY2U6cyxjbWQ6XCJxdWV1ZUluaXRcIn19KTtlLmV4cG9ydHM9e2lkTWFwOmksY21kQ29uZmlnOmEscGFja2V0Q29uZmlnOmN9fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17aW1Mb2dpbjp7b3M6NCxzZGtWZXJzaW9uOjYsYXBwTG9naW46OCxwcm90b2NvbFZlcnNpb246OSxkZXZpY2VJZDoxMyxhcHBLZXk6MTgsYWNjb3VudDoxOSxicm93c2VyOjI0LHNlc3Npb246MjYsdG9rZW46MWUzfSxub3NUb2tlbjp7b2JqZWN0TmFtZToxLHRva2VuOjIsYnVja2V0OjMsZXhwaXJlVGltZTo0fSxhdWRpb1RvVGV4dDp7dXJsOjJ9LGltYWdlT3A6e3R5cGU6MCxzdHJpcG1ldGE6MSx0eXBlVHlwZToyLGJsdXJSYWRpdXM6MyxibHVyU2lnbWE6NCxxdWFsaXR5UXVhbGl0eTo1LGNyb3BYOjYsY3JvcFk6Nyxjcm9wV2lkdGg6OCxjcm9wSGVpZ2h0Ojkscm90YXRlQW5nbGU6MTAscGl4ZWxQaXhlbDoxMSx0aHVtYm5haWxNb2RlOjEyLHRodW1ibmFpbFdpZHRoOjEzLHRodW1ibmFpbEhlaWdodDoxNCx0aHVtYm5haWxBeGlzWDoxNSx0aHVtYm5haWxBeGlzWToxNix0aHVtYm5haWxDZW50ZXJYOjE3LHRodW1ibmFpbENlbnRlclk6MTgsdGh1bWJuYWlsRW5sYXJnZToxOSx0aHVtYm5haWxUb1N0YXRpYzoyMCx3YXRlcm1hcmtUeXBlOjIxLHdhdGVybWFya0dyYXZpdHk6MjIsd2F0ZXJtYXJrRGlzc29sdmU6MjMsd2F0ZXJtYXJrRHg6MjQsd2F0ZXJtYXJrRHk6MjUsd2F0ZXJtYXJrSW1hZ2U6MjYsd2F0ZXJtYXJrVGV4dDoyNyx3YXRlcm1hcmtGb250OjI4LHdhdGVybWFya0ZvbnRTaXplOjI5LHdhdGVybWFya0ZvbnRDb2xvcjozMCxpbnRlcmxhY2U6MzF9LGxvZ2luOnthcHBLZXk6MSxhY2NvdW50OjIsZGV2aWNlSWQ6MyxjaGF0cm9vbUlkOjUsY2hhdHJvb21OaWNrOjIwLGNoYXRyb29tQXZhdGFyOjIxLGNoYXRyb29tQ3VzdG9tOjIyLGNoYXRyb29tRW50ZXJDdXN0b206MjMsc2Vzc2lvbjoyNn0sY2hhdHJvb206e2lkOjEsbmFtZTozLGFubm91bmNlbWVudDo0LGJyb2FkY2FzdFVybDo1LGN1c3RvbToxMixjcmVhdGVUaW1lOjE0LHVwZGF0ZVRpbWU6MTUsY3JlYXRvcjoxMDAsb25saW5lTWVtYmVyTnVtOjEwMSxtdXRlOjEwMn0sbXNnOntpZENsaWVudDoxLHR5cGU6MixhdHRhY2g6MyxjdXN0b206NCxyZXNlbmQ6NSx1c2VyVXBkYXRlVGltZTo2LGZyb21OaWNrOjcsZnJvbUF2YXRhcjo4LGZyb21DdXN0b206OSx5aWR1bkVuYWJsZToxMCxhbnRpU3BhbUNvbnRlbnQ6MTEsdGltZToyMCxmcm9tOjIxLGNoYXRyb29tSWQ6MjIsZnJvbUNsaWVudFR5cGU6MjN9LGNoYXRyb29tTWVtYmVyOntjaGF0cm9vbUlkOjEsYWNjb3VudDoyLHR5cGU6MyxsZXZlbDo0LG5pY2s6NSxhdmF0YXI6NixjdXN0b206NyxvbmxpbmU6OCxndWVzdDo5LGVudGVyVGltZToxMCxibGFja2VkOjEyLGdhZ2VkOjEzLHZhbGlkOjE0LHVwZGF0ZVRpbWU6MTUsdGVtcE11dGVkOjE2LHRlbXBNdXRlRHVyYXRpb246MTd9fX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e25vc1Rva2VuOntvYmplY3ROYW1lOjEsdG9rZW46MixidWNrZXQ6MyxleHBpcmVUaW1lOjR9LGF1ZGlvVG9UZXh0Ont1cmw6Mn0saW1hZ2VPcDp7dHlwZTowLHN0cmlwbWV0YToxLHR5cGVUeXBlOjIsYmx1clJhZGl1czozLGJsdXJTaWdtYTo0LHF1YWxpdHlRdWFsaXR5OjUsY3JvcFg6Nixjcm9wWTo3LGNyb3BXaWR0aDo4LGNyb3BIZWlnaHQ6OSxyb3RhdGVBbmdsZToxMCxwaXhlbFBpeGVsOjExLHRodW1ibmFpbE1vZGU6MTIsdGh1bWJuYWlsV2lkdGg6MTMsdGh1bWJuYWlsSGVpZ2h0OjE0LHRodW1ibmFpbEF4aXNYOjE1LHRodW1ibmFpbEF4aXNZOjE2LHRodW1ibmFpbENlbnRlclg6MTcsdGh1bWJuYWlsQ2VudGVyWToxOCx0aHVtYm5haWxFbmxhcmdlOjE5LHRodW1ibmFpbFRvU3RhdGljOjIwLHdhdGVybWFya1R5cGU6MjEsd2F0ZXJtYXJrR3Jhdml0eToyMix3YXRlcm1hcmtEaXNzb2x2ZToyMyx3YXRlcm1hcmtEeDoyNCx3YXRlcm1hcmtEeToyNSx3YXRlcm1hcmtJbWFnZToyNix3YXRlcm1hcmtUZXh0OjI3LHdhdGVybWFya0ZvbnQ6Mjgsd2F0ZXJtYXJrRm9udFNpemU6Mjksd2F0ZXJtYXJrRm9udENvbG9yOjMwLGludGVybGFjZTozMX0sbG9naW46e29zOjQsc2RrVmVyc2lvbjo2LGFwcExvZ2luOjgscHJvdG9jb2xWZXJzaW9uOjksZGV2aWNlSWQ6MTMsYXBwS2V5OjE4LGFjY291bnQ6MTksYnJvd3NlcjoyNCxzZXNzaW9uOjI2LHRva2VuOjFlM30sbG9naW5SZXM6e2xhc3RMb2dpbkRldmljZUlkOjE3LGNvbm5lY3Rpb25JZDoxMDIsaXA6MTAzLHBvcnQ6MTA0LGNvdW50cnk6MTA2fSxsb2dpblBvcnQ6e3R5cGU6Myxvczo0LG1hYzo1LGRldmljZUlkOjEzLGFjY291bnQ6MTksY29ubmVjdGlvbklkOjEwMixpcDoxMDMsdGltZToxMDl9LHN5bmM6e215SW5mbzoxLG9mZmxpbmVNc2dzOjIsdGVhbXM6Myxyb2FtaW5nTXNnczo3LHJlbGF0aW9uczo5LGZyaWVuZHM6MTEsc2Vzc2lvbnM6MTIsXHJcbmZyaWVuZFVzZXJzOjEzLG1zZ1JlY2VpcHRzOjE0LG15VGVhbU1lbWJlcnM6MTUsZG9ubm9wOjE2LGRlbGV0ZU1zZzoxNyxzZXNzaW9uQWNrOjE4LGZpbHRlck1zZ3M6MTAwfSxkb25ub3A6e29wZW46MX0sdGVhbTp7dGVhbUlkOjEsbmFtZTozLHR5cGU6NCxvd25lcjo1LGxldmVsOjYsc2VsZkN1c3RvbTo3LHZhbGlkOjgsbWVtYmVyTnVtOjksbWVtYmVyVXBkYXRlVGltZToxMCxjcmVhdGVUaW1lOjExLHVwZGF0ZVRpbWU6MTIsdmFsaWRUb0N1cnJlbnRVc2VyOjEzLGludHJvOjE0LGFubm91bmNlbWVudDoxNSxqb2luTW9kZToxNixiaXRzOjE3LGN1c3RvbToxOCxzZXJ2ZXJDdXN0b206MTksYXZhdGFyOjIwLGJlSW52aXRlTW9kZToyMSxpbnZpdGVNb2RlOjIyLHVwZGF0ZVRlYW1Nb2RlOjIzLHVwZGF0ZUN1c3RvbU1vZGU6MjQsbXV0ZToxMDB9LHRlYW1NZW1iZXI6e3RlYW1JZDoxLGFjY291bnQ6Myx0eXBlOjQsbmlja0luVGVhbTo1LGJpdHM6NyxhY3RpdmU6OCx2YWxpZDo5LGpvaW5UaW1lOjEwLHVwZGF0ZVRpbWU6MTEsY3VzdG9tOjEyLG11dGU6MTN9LG1zZzp7c2NlbmU6MCx0bzoxLGZyb206Mixmcm9tQ2xpZW50VHlwZTo0LGZyb21EZXZpY2VJZDo1LGZyb21OaWNrOjYsdGltZTo3LHR5cGU6OCxib2R5OjksYXR0YWNoOjEwLGlkQ2xpZW50OjExLGlkU2VydmVyOjEyLHJlc2VuZDoxMyx1c2VyVXBkYXRlVGltZToxNCxjdXN0b206MTUscHVzaFBheWxvYWQ6MTYscHVzaENvbnRlbnQ6MTcsYXBuc0FjY291bnRzOjE4LGFwbnNDb250ZW50OjE5LGFwbnNGb3JjZVB1c2g6MjAseWlkdW5FbmFibGU6MjEsYW50aVNwYW1Db250ZW50OjIyLGlzSGlzdG9yeWFibGU6MTAwLGlzUm9hbWluZ2FibGU6MTAxLGlzU3luY2FibGU6MTAyLGlzTXV0ZWQ6MTA0LGNjOjEwNSxpc1B1c2hhYmxlOjEwNyxpc09mZmxpbmFibGU6MTA4LGlzVW5yZWFkYWJsZToxMDksbmVlZFB1c2hOaWNrOjExMH0sbXNnUmVjZWlwdDp7dG86MSxmcm9tOjIsdGltZTo3LGlkQ2xpZW50OjExfSxzeXNNc2c6e3RpbWU6MCx0eXBlOjEsdG86Mixmcm9tOjMscHM6NCxhdHRhY2g6NSxpZFNlcnZlcjo2LHNlbmRUb09ubGluZVVzZXJzT25seTo3LGFwbnNUZXh0OjgscHVzaFBheWxvYWQ6OSxkZWxldGVkSWRDbGllbnQ6MTAsZGVsZXRlZElkU2VydmVyOjExLHlpZHVuRW5hYmxlOjEyLGFudGlTcGFtQ29udGVudDoxMyxkZWxldGVkTXNnVGltZToxNCxkZWxldGVkTXNnRnJvbU5pY2s6MTUsY2M6MTA1LGlzUHVzaGFibGU6MTA3LGlzVW5yZWFkYWJsZToxMDksbmVlZFB1c2hOaWNrOjExMH0sZnJpZW5kOnthY2NvdW50OjQsZmxhZzo1LGJlZmxhZzo2LHNvdXJjZTo3LGFsaWFzOjgsYml0czo5LGN1c3RvbToxMCxjcmVhdGVUaW1lOjExLHVwZGF0ZVRpbWU6MTJ9LHVzZXI6e2FjY291bnQ6MSxuaWNrOjMsYXZhdGFyOjQsc2lnbjo1LGdlbmRlcjo2LGVtYWlsOjcsYmlydGg6OCx0ZWw6OSxjdXN0b206MTAsY3JlYXRlVGltZToxMix1cGRhdGVUaW1lOjEzfSxzcGVjaWFsUmVsYXRpb246e2FjY291bnQ6MCxpc011dGVkOjEsaXNCbGFja2VkOjIsY3JlYXRlVGltZTozLHVwZGF0ZVRpbWU6NH0sbXNnRXZlbnQ6e3R5cGU6MSx2YWx1ZToyLGlkQ2xpZW50OjMsY3VzdG9tOjQsdmFsaWRUaW1lOjUsYnJvYWRjYXN0VHlwZTo2LHN5bmM6Nyx2YWxpZFRpbWVUeXBlOjgsZHVyYWJsZTo5LHRpbWU6MTAsaWRTZXJ2ZXI6MTEsY2xpZW50VHlwZToxMixzZXJ2ZXJDb25maWc6MTMsc2VydmVyQ3VzdG9tOjE0LGFwcGlkOjEwMSxhY2NvdW50OjEwMyxlbmFibGVNdWx0aUNsaWVudDoxMDQsY29uc2lkOjEwNn0sbXNnRXZlbnRTdWJzY3JpYmU6e3R5cGU6MSxzdWJzY3JpYmVUaW1lOjIsc3luYzozLHRvOjEwMixmcm9tOjEwNCx0aW1lOjEwNX19fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17aW1Mb2dpbjp7NDpcIm9zXCIsNjpcInNka1ZlcnNpb25cIiw4OlwiYXBwTG9naW5cIiw5OlwicHJvdG9jb2xWZXJzaW9uXCIsMTM6XCJkZXZpY2VJZFwiLDE4OlwiYXBwS2V5XCIsMTk6XCJhY2NvdW50XCIsMjQ6XCJicm93c2VyXCIsMjY6XCJzZXNzaW9uXCIsMTAwMDpcInRva2VuXCJ9LG5vc1Rva2VuOnsxOlwib2JqZWN0TmFtZVwiLDI6XCJ0b2tlblwiLDM6XCJidWNrZXRcIiw0OlwiZXhwaXJlVGltZVwifSxhdWRpb1RvVGV4dDp7MjpcInVybFwifSxpbWFnZU9wOnswOlwidHlwZVwiLDE6XCJzdHJpcG1ldGFcIiwyOlwidHlwZVR5cGVcIiwzOlwiYmx1clJhZGl1c1wiLDQ6XCJibHVyU2lnbWFcIiw1OlwicXVhbGl0eVF1YWxpdHlcIiw2OlwiY3JvcFhcIiw3OlwiY3JvcFlcIiw4OlwiY3JvcFdpZHRoXCIsOTpcImNyb3BIZWlnaHRcIiwxMDpcInJvdGF0ZUFuZ2xlXCIsMTE6XCJwaXhlbFBpeGVsXCIsMTI6XCJ0aHVtYm5haWxNb2RlXCIsMTM6XCJ0aHVtYm5haWxXaWR0aFwiLDE0OlwidGh1bWJuYWlsSGVpZ2h0XCIsMTU6XCJ0aHVtYm5haWxBeGlzWFwiLDE2OlwidGh1bWJuYWlsQXhpc1lcIiwxNzpcInRodW1ibmFpbENlbnRlclhcIiwxODpcInRodW1ibmFpbENlbnRlcllcIiwxOTpcInRodW1ibmFpbEVubGFyZ2VcIiwyMDpcInRodW1ibmFpbFRvU3RhdGljXCIsMjE6XCJ3YXRlcm1hcmtUeXBlXCIsMjI6XCJ3YXRlcm1hcmtHcmF2aXR5XCIsMjM6XCJ3YXRlcm1hcmtEaXNzb2x2ZVwiLDI0Olwid2F0ZXJtYXJrRHhcIiwyNTpcIndhdGVybWFya0R5XCIsMjY6XCJ3YXRlcm1hcmtJbWFnZVwiLDI3Olwid2F0ZXJtYXJrVGV4dFwiLDI4Olwid2F0ZXJtYXJrRm9udFwiLDI5Olwid2F0ZXJtYXJrRm9udFNpemVcIiwzMDpcIndhdGVybWFya0ZvbnRDb2xvclwiLDMxOlwiaW50ZXJsYWNlXCJ9LGxvZ2luOnsxOlwiYXBwS2V5XCIsMjpcImFjY291bnRcIiwzOlwiZGV2aWNlSWRcIiw1OlwiY2hhdHJvb21JZFwiLDIwOlwiY2hhdHJvb21OaWNrXCIsMjE6XCJjaGF0cm9vbUF2YXRhclwiLDIyOlwiY2hhdHJvb21DdXN0b21cIiwyMzpcImNoYXRyb29tRW50ZXJDdXN0b21cIiwyNjpcInNlc3Npb25cIn0sY2hhdHJvb206ezE6XCJpZFwiLDM6XCJuYW1lXCIsNDpcImFubm91bmNlbWVudFwiLDU6XCJicm9hZGNhc3RVcmxcIiwxMjpcImN1c3RvbVwiLDE0OlwiY3JlYXRlVGltZVwiLDE1OlwidXBkYXRlVGltZVwiLDEwMDpcImNyZWF0b3JcIiwxMDE6XCJvbmxpbmVNZW1iZXJOdW1cIiwxMDI6XCJtdXRlXCJ9LG1zZzp7MTpcImlkQ2xpZW50XCIsMjpcInR5cGVcIiwzOlwiYXR0YWNoXCIsNDpcImN1c3RvbVwiLDU6XCJyZXNlbmRcIiw2OlwidXNlclVwZGF0ZVRpbWVcIiw3OlwiZnJvbU5pY2tcIiw4OlwiZnJvbUF2YXRhclwiLDk6XCJmcm9tQ3VzdG9tXCIsMTA6XCJ5aWR1bkVuYWJsZVwiLDExOlwiYW50aVNwYW1Db250ZW50XCIsMjA6XCJ0aW1lXCIsMjE6XCJmcm9tXCIsMjI6XCJjaGF0cm9vbUlkXCIsMjM6XCJmcm9tQ2xpZW50VHlwZVwifSxjaGF0cm9vbU1lbWJlcjp7MTpcImNoYXRyb29tSWRcIiwyOlwiYWNjb3VudFwiLDM6XCJ0eXBlXCIsNDpcImxldmVsXCIsNTpcIm5pY2tcIiw2OlwiYXZhdGFyXCIsNzpcImN1c3RvbVwiLDg6XCJvbmxpbmVcIiw5OlwiZ3Vlc3RcIiwxMDpcImVudGVyVGltZVwiLDEyOlwiYmxhY2tlZFwiLDEzOlwiZ2FnZWRcIiwxNDpcInZhbGlkXCIsMTU6XCJ1cGRhdGVUaW1lXCIsMTY6XCJ0ZW1wTXV0ZWRcIiwxNzpcInRlbXBNdXRlRHVyYXRpb25cIn19fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17bm9zVG9rZW46ezE6XCJvYmplY3ROYW1lXCIsMjpcInRva2VuXCIsMzpcImJ1Y2tldFwiLDQ6XCJleHBpcmVUaW1lXCJ9LGF1ZGlvVG9UZXh0OnsyOlwidXJsXCJ9LGltYWdlT3A6ezA6XCJ0eXBlXCIsMTpcInN0cmlwbWV0YVwiLDI6XCJ0eXBlVHlwZVwiLDM6XCJibHVyUmFkaXVzXCIsNDpcImJsdXJTaWdtYVwiLDU6XCJxdWFsaXR5UXVhbGl0eVwiLDY6XCJjcm9wWFwiLDc6XCJjcm9wWVwiLDg6XCJjcm9wV2lkdGhcIiw5OlwiY3JvcEhlaWdodFwiLDEwOlwicm90YXRlQW5nbGVcIiwxMTpcInBpeGVsUGl4ZWxcIiwxMjpcInRodW1ibmFpbE1vZGVcIiwxMzpcInRodW1ibmFpbFdpZHRoXCIsMTQ6XCJ0aHVtYm5haWxIZWlnaHRcIiwxNTpcInRodW1ibmFpbEF4aXNYXCIsMTY6XCJ0aHVtYm5haWxBeGlzWVwiLDE3OlwidGh1bWJuYWlsQ2VudGVyWFwiLDE4OlwidGh1bWJuYWlsQ2VudGVyWVwiLDE5OlwidGh1bWJuYWlsRW5sYXJnZVwiLDIwOlwidGh1bWJuYWlsVG9TdGF0aWNcIiwyMTpcIndhdGVybWFya1R5cGVcIiwyMjpcIndhdGVybWFya0dyYXZpdHlcIiwyMzpcIndhdGVybWFya0Rpc3NvbHZlXCIsMjQ6XCJ3YXRlcm1hcmtEeFwiLDI1Olwid2F0ZXJtYXJrRHlcIiwyNjpcIndhdGVybWFya0ltYWdlXCIsMjc6XCJ3YXRlcm1hcmtUZXh0XCIsMjg6XCJ3YXRlcm1hcmtGb250XCIsMjk6XCJ3YXRlcm1hcmtGb250U2l6ZVwiLDMwOlwid2F0ZXJtYXJrRm9udENvbG9yXCIsMzE6XCJpbnRlcmxhY2VcIn0sbG9naW46ezQ6XCJvc1wiLDY6XCJzZGtWZXJzaW9uXCIsODpcImFwcExvZ2luXCIsOTpcInByb3RvY29sVmVyc2lvblwiLDEzOlwiZGV2aWNlSWRcIiwxODpcImFwcEtleVwiLDE5OlwiYWNjb3VudFwiLDI0OlwiYnJvd3NlclwiLDI2Olwic2Vzc2lvblwiLDEwMDA6XCJ0b2tlblwifSxsb2dpblJlczp7MTc6XCJsYXN0TG9naW5EZXZpY2VJZFwiLDEwMjpcImNvbm5lY3Rpb25JZFwiLDEwMzpcImlwXCIsMTA0OlwicG9ydFwiLDEwNjpcImNvdW50cnlcIn0sbG9naW5Qb3J0OnszOlwidHlwZVwiLDQ6XCJvc1wiLDU6XCJtYWNcIiwxMzpcImRldmljZUlkXCIsMTk6XCJhY2NvdW50XCIsMTAyOlwiY29ubmVjdGlvbklkXCIsMTAzOlwiaXBcIiwxMDk6XCJ0aW1lXCJ9LHN5bmM6ezE6XCJteUluZm9cIiwyOlwib2ZmbGluZU1zZ3NcIiwzOlwidGVhbXNcIiw3Olwicm9hbWluZ01zZ3NcIiw5OlwicmVsYXRpb25zXCIsMTE6XCJmcmllbmRzXCIsMTI6XCJzZXNzaW9uc1wiLDEzOlwiZnJpZW5kVXNlcnNcIiwxNDpcIm1zZ1JlY2VpcHRzXCIsMTU6XCJteVRlYW1NZW1iZXJzXCIsMTY6XCJkb25ub3BcIiwxNzpcImRlbGV0ZU1zZ1wiLDE4Olwic2Vzc2lvbkFja1wiLDEwMDpcImZpbHRlck1zZ3NcIn0sZG9ubm9wOnsxOlwib3BlblwifSx0ZWFtOnsxOlwidGVhbUlkXCIsMzpcIm5hbWVcIiw0OlwidHlwZVwiLDU6XCJvd25lclwiLDY6XCJsZXZlbFwiLDc6XCJzZWxmQ3VzdG9tXCIsODpcInZhbGlkXCIsOTpcIm1lbWJlck51bVwiLDEwOlwibWVtYmVyVXBkYXRlVGltZVwiLDExOlwiY3JlYXRlVGltZVwiLDEyOlwidXBkYXRlVGltZVwiLDEzOlwidmFsaWRUb0N1cnJlbnRVc2VyXCIsMTQ6XCJpbnRyb1wiLDE1OlwiYW5ub3VuY2VtZW50XCIsMTY6XCJqb2luTW9kZVwiLDE3OlwiYml0c1wiLDE4OlwiY3VzdG9tXCIsMTk6XCJzZXJ2ZXJDdXN0b21cIiwyMDpcImF2YXRhclwiLDIxOlwiYmVJbnZpdGVNb2RlXCIsMjI6XCJpbnZpdGVNb2RlXCIsMjM6XCJ1cGRhdGVUZWFtTW9kZVwiLDI0OlwidXBkYXRlQ3VzdG9tTW9kZVwiLDEwMDpcIm11dGVcIn0sdGVhbU1lbWJlcjp7MTpcInRlYW1JZFwiLDM6XCJhY2NvdW50XCIsNDpcInR5cGVcIiw1Olwibmlja0luVGVhbVwiLDc6XCJiaXRzXCIsODpcImFjdGl2ZVwiLDk6XCJ2YWxpZFwiLDEwOlwiam9pblRpbWVcIiwxMTpcInVwZGF0ZVRpbWVcIiwxMjpcImN1c3RvbVwiLDEzOlwibXV0ZVwifSxtc2c6ezA6XCJzY2VuZVwiLDE6XCJ0b1wiLDI6XCJmcm9tXCIsNDpcImZyb21DbGllbnRUeXBlXCIsNTpcImZyb21EZXZpY2VJZFwiLDY6XCJmcm9tTmlja1wiLDc6XCJ0aW1lXCIsODpcInR5cGVcIiw5OlwiYm9keVwiLDEwOlwiYXR0YWNoXCIsMTE6XCJpZENsaWVudFwiLDEyOlwiaWRTZXJ2ZXJcIiwxMzpcInJlc2VuZFwiLDE0OlwidXNlclVwZGF0ZVRpbWVcIiwxNTpcImN1c3RvbVwiLDE2OlwicHVzaFBheWxvYWRcIiwxNzpcInB1c2hDb250ZW50XCIsMTg6XCJhcG5zQWNjb3VudHNcIiwxOTpcImFwbnNDb250ZW50XCIsMjA6XCJhcG5zRm9yY2VQdXNoXCIsMjE6XCJ5aWR1bkVuYWJsZVwiLDIyOlwiYW50aVNwYW1Db250ZW50XCIsMTAwOlwiaXNIaXN0b3J5YWJsZVwiLDEwMTpcImlzUm9hbWluZ2FibGVcIiwxMDI6XCJpc1N5bmNhYmxlXCIsMTA0OlwiaXNNdXRlZFwiLDEwNTpcImNjXCIsMTA3OlwiaXNQdXNoYWJsZVwiLDEwODpcImlzT2ZmbGluYWJsZVwiLDEwOTpcImlzVW5yZWFkYWJsZVwiLDExMDpcIm5lZWRQdXNoTmlja1wifSxtc2dSZWNlaXB0OnsxOlwidG9cIiwyOlwiZnJvbVwiLDc6XCJ0aW1lXCIsMTE6XCJpZENsaWVudFwifSxzeXNNc2c6ezA6XCJ0aW1lXCIsMTpcInR5cGVcIiwyOlwidG9cIiwzOlwiZnJvbVwiLDQ6XCJwc1wiLDU6XCJhdHRhY2hcIiw2OlwiaWRTZXJ2ZXJcIiw3Olwic2VuZFRvT25saW5lVXNlcnNPbmx5XCIsODpcImFwbnNUZXh0XCIsOTpcInB1c2hQYXlsb2FkXCIsMTA6XCJkZWxldGVkSWRDbGllbnRcIiwxMTpcImRlbGV0ZWRJZFNlcnZlclwiLDEyOlwieWlkdW5FbmFibGVcIiwxMzpcImFudGlTcGFtQ29udGVudFwiLDE0OlwiZGVsZXRlZE1zZ1RpbWVcIiwxNTpcImRlbGV0ZWRNc2dGcm9tTmlja1wiLDEwNTpcImNjXCIsMTA3OlwiaXNQdXNoYWJsZVwiLDEwOTpcImlzVW5yZWFkYWJsZVwiLDExMDpcIm5lZWRQdXNoTmlja1wifSxmcmllbmQ6ezQ6XCJhY2NvdW50XCIsNTpcImZsYWdcIiw2OlwiYmVmbGFnXCIsNzpcInNvdXJjZVwiLDg6XCJhbGlhc1wiLDk6XCJiaXRzXCIsMTA6XCJjdXN0b21cIiwxMTpcImNyZWF0ZVRpbWVcIiwxMjpcInVwZGF0ZVRpbWVcIn0sdXNlcjp7MTpcImFjY291bnRcIiwzOlwibmlja1wiLDQ6XCJhdmF0YXJcIiw1Olwic2lnblwiLDY6XCJnZW5kZXJcIiw3OlwiZW1haWxcIiw4OlwiYmlydGhcIiw5OlwidGVsXCIsMTA6XCJjdXN0b21cIiwxMjpcImNyZWF0ZVRpbWVcIiwxMzpcInVwZGF0ZVRpbWVcIn0sc3BlY2lhbFJlbGF0aW9uOnswOlwiYWNjb3VudFwiLDE6XCJpc011dGVkXCIsMjpcImlzQmxhY2tlZFwiLDM6XCJjcmVhdGVUaW1lXCIsNDpcInVwZGF0ZVRpbWVcIn0sbXNnRXZlbnQ6ezE6XCJ0eXBlXCIsMjpcInZhbHVlXCIsMzpcImlkQ2xpZW50XCIsNDpcImN1c3RvbVwiLDU6XCJ2YWxpZFRpbWVcIiw2OlwiYnJvYWRjYXN0VHlwZVwiLDc6XCJzeW5jXCIsODpcInZhbGlkVGltZVR5cGVcIiw5OlwiZHVyYWJsZVwiLDEwOlwidGltZVwiLDExOlwiaWRTZXJ2ZXJcIiwxMjpcImNsaWVudFR5cGVcIiwxMzpcInNlcnZlckNvbmZpZ1wiLDE0Olwic2VydmVyQ3VzdG9tXCIsMTAxOlwiYXBwaWRcIiwxMDM6XCJhY2NvdW50XCIsMTA0OlwiZW5hYmxlTXVsdGlDbGllbnRcIiwxMDY6XCJjb25zaWRcIn0sbXNnRXZlbnRTdWJzY3JpYmU6ezE6XCJ0eXBlXCIsMjpcInN1YnNjcmliZVRpbWVcIiwzOlwic3luY1wiLDEwMjpcInRvXCIsMTA0OlwiZnJvbVwiLDEwNTpcInRpbWVcIn19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKCF3aW5kb3cuY29uc29sZSwxKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307aS5tZXJnZSh0aGlzLHtvcHRpb25zOmUsZGVidWc6ITEsYXBpOlwibG9nXCIsc3R5bGU6XCJjb2xvcjpibHVlO1wiLGxvZzppLmVtcHR5RnVuYyxpbmZvOmkuZW1wdHlGdW5jLHdhcm46aS5lbXB0eUZ1bmMsZXJyb3I6aS5lbXB0eUZ1bmN9KSx0aGlzLnByZWZpeD1lLnByZWZpeHx8XCJcIix0aGlzLnNldERlYnVnKGUuZGVidWcpfXZhciBvPW4oMTEpLGk9bigxKSxhPXIucHJvdG90eXBlLHM9W1wiQ2hyb21lXCIsXCJTYWZhcmlcIixcIkZpcmVmb3hcIl07YS5zZXREZWJ1Zz1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF0sdD10aGlzO2lmKHQuZGVidWc9ZSxlLnN0eWxlJiYodC5zdHlsZT1lLnN0eWxlKSx0LmRlYnVnJiZpLmV4aXN0KGNvbnNvbGUpKXt2YXIgbj1jb25zb2xlO3QubG9nPWZ1bmN0aW9uKCl7dmFyIGU9dC5mb3JtYXRBcmdzKGFyZ3VtZW50cyk7cy5pbmRleE9mKG8ubmFtZSkhPT0tMSYmaS5pc1N0cmluZyhlWzBdKSYmKGVbMF09XCIlY1wiK2VbMF0sZS5zcGxpY2UoMSwwLHQuc3R5bGUpKSx0Ll9sb2coXCJsb2dcIixlKX0sdC5pbmZvPWZ1bmN0aW9uKCl7dmFyIGU9dC5mb3JtYXRBcmdzKGFyZ3VtZW50cyk7dC5fbG9nKFwiaW5mb1wiLGUpfSx0Lndhcm49ZnVuY3Rpb24oKXt2YXIgZT10LmZvcm1hdEFyZ3MoYXJndW1lbnRzKTt0Ll9sb2coXCJ3YXJuXCIsZSl9LHQuZXJyb3I9ZnVuY3Rpb24oKXt2YXIgZT10LmZvcm1hdEFyZ3MoYXJndW1lbnRzKTt0Ll9sb2coXCJlcnJvclwiLGUpfSx0Ll9sb2c9ZnVuY3Rpb24oZSxyKXt2YXIgbz10Lm9wdGlvbnMubG9nRnVuYztpZihvJiYob1tlXSYmKG89b1tlXSksaS5pc0Z1bmN0aW9uKG8pKSlyZXR1cm4gdm9pZCBvLmFwcGx5KG51bGwscik7aWYobltlXSl0cnl7bltlXS5hcHBseT90LmNocm9tZShlLHIpOnQuaWUoZSxyKX1jYXRjaChlKXt9fSx0LmNocm9tZT1mdW5jdGlvbihlLHIpe3MuaW5kZXhPZihvLm5hbWUpIT09LTE/bltlXS5hcHBseShuLHIpOnQuaWUoZSxyKX0sdC5pZT1mdW5jdGlvbihlLHQpe3QuZm9yRWFjaChmdW5jdGlvbih0KXtuW2VdKEpTT04uc3RyaW5naWZ5KHQsbnVsbCw0KSl9KX19fSxhLmZvcm1hdEFyZ3M9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlPVtdLnNsaWNlLmNhbGwoZSwwKTt2YXIgbj1uZXcgRGF0ZSxyPW4uZ2V0RnVsbFllYXIoKStcIi1cIitjKG4uZ2V0TW9udGgoKSsxKStcIi1cIitjKG4uZ2V0RGF0ZSgpKStcIiBcIitjKG4uZ2V0SG91cnMoKSkrXCI6XCIrYyhuLmdldE1pbnV0ZXMoKSkrXCI6XCIrYyhuLmdldFNlY29uZHMoKSkrXCI6XCIrYyhuLmdldE1pbGxpc2Vjb25kcygpLDMpLG89XCJbTklNIFNESyBMT0cgXCIrcitcIiBcIisgK24rXCIgXCIrdC5wcmVmaXgrXCJdXFx0XCI7cmV0dXJuIGkuaXNTdHJpbmcoZVswXSk/ZVswXT1vK2VbMF06ZS5zcGxpY2UoMCwwLG8pLGUuZm9yRWFjaChmdW5jdGlvbih0LG4peyhpLmlzQXJyYXkodCl8fGkuaXNPYmplY3QodCkpJiYoZVtuXT1pLnNpbXBsZUNsb25lKHQpKX0pLGV9O3ZhciBjPWZ1bmN0aW9uKGUsdCl7dD10fHwyO2Zvcih2YXIgbj1cIlwiK2U7bi5sZW5ndGg8dDspbj1cIjBcIituO3JldHVybiBufTtlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMSksbz17ZmlsZTp7bWQ1OlwiJChFdGFnKVwiLHNpemU6XCIkKE9iamVjdFNpemUpXCJ9LGltYWdlOnttZDU6XCIkKEV0YWcpXCIsc2l6ZTpcIiQoT2JqZWN0U2l6ZSlcIix3OlwiJChJbWFnZUluZm8uV2lkdGgpXCIsaDpcIiQoSW1hZ2VJbmZvLkhlaWdodClcIixvcmllbnRhdGlvbjpcIiQoSW1hZ2VJbmZvLk9yaWVudGF0aW9uKVwifSxhdWRpbzp7bWQ1OlwiJChFdGFnKVwiLHNpemU6XCIkKE9iamVjdFNpemUpXCIsZHVyOlwiJChBVmluZm8uQXVkaW8uRHVyYXRpb24pXCJ9LHZpZGVvOnttZDU6XCIkKEV0YWcpXCIsc2l6ZTpcIiQoT2JqZWN0U2l6ZSlcIixkdXI6XCIkKEFWaW5mby5WaWRlby5EdXJhdGlvbilcIix3OlwiJChBVmluZm8uVmlkZW8uV2lkdGgpXCIsaDpcIiQoQVZpbmZvLlZpZGVvLkhlaWdodClcIn19LGk9e307aS5nZW5SZXNwb25zZUJvZHk9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9ZXx8XCJmaWxlXCIsb1tlXX0saS5wYXJzZVJlc3BvbnNlPWZ1bmN0aW9uKGUsdCl7ci5ub3R1bmRlZihlLnNpemUpJiYoZS5zaXplPStlLnNpemUpLHIubm90dW5kZWYoZS53KSYmKGUudz0rZS53KSxyLm5vdHVuZGVmKGUuaCkmJihlLmg9K2UuaCksci5ub3R1bmRlZihlLmR1cikmJihlLmR1cj0rZS5kdXIpO3ZhciBuPWUub3JpZW50YXRpb247aWYoci5ub3R1bmRlZihuKSYmKGRlbGV0ZSBlLm9yaWVudGF0aW9uLHQmJihcInJpZ2h0LCB0b3BcIj09PW58fFwibGVmdCwgYm90dG9tXCI9PT1uKSkpe3ZhciBvPWUudztlLnc9ZS5oLGUuaD1vfXJldHVybiBlfSxlLmV4cG9ydHM9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMSk7ci5maWxsUHJvcGVydHlXaXRoRGVmYXVsdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuISFyLnVuZGVmKGVbdF0pJiYoZVt0XT1uLCEwKX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3ZhciB0PXRoaXM7dC5vcHRpb25zPW8uY29weShlKSxvLnZlcmlmeU9wdGlvbnMoZSxcInVybCBmaWxlTmFtZVwiKSxvLnZlcmlmeVBhcmFtUHJlc2VudEp1c3RPbmUoZSxcImJsb2IgZmlsZUlucHV0XCIpLG8udmVyaWZ5Q2FsbGJhY2soZSxcImJlZ2ludXBsb2FkIHVwbG9hZHByb2dyZXNzIHVwbG9hZGRvbmVcIiksZS5maWxlSW5wdXQmJihlLmZpbGVJbnB1dD1vLnZlcmlmeUZpbGVJbnB1dChlLmZpbGVJbnB1dCkpLGUudHlwZSYmby52ZXJpZnlGaWxlVHlwZShlLnR5cGUpLGUudGltZW91dD9vLnZlcmlmeVBhcmFtVHlwZShcInRpbWVvdXRcIixlLnRpbWVvdXQsXCJudW1iZXJcIik6ZS50aW1lb3V0PTZlNSxvLnZlcmlmeUZpbGVVcGxvYWRDYWxsYmFjayhlKSxlLmRhdGE9e307dmFyIG49ZS5maWxlTmFtZSxyPWUuZmlsZUlucHV0O2lmKGMpaWYocil7dmFyIHM9ZS50eXBlP28uZmlsdGVyRmlsZXMoci5maWxlcyxlLnR5cGUpOltdLnNsaWNlLmNhbGwoci5maWxlcywwKTtpZighc3x8IXMubGVuZ3RoKXJldHVybiB2b2lkIGUudXBsb2FkZG9uZShpLm5ld1dyb25nRmlsZVR5cGVFcnJvcihcIuacquivu+WPluWIsFwiK2UudHlwZStcIuexu+Wei+eahOaWh+S7tiwg6K+356Gu5L+d5paH5Lu26YCJ5oup6IqC54K555qE5paH5Lu25LiN5Li656m6LCDlubbkuJTor7fnoa7kv53pgInmi6nkuoZcIitlLnR5cGUrXCLnsbvlnovnmoTmlofku7ZcIikpO3ZhciBsPXIuZmlsZXNbMF0uc2l6ZTtpZihsPnUpcmV0dXJuIHZvaWQgZS51cGxvYWRkb25lKGkubmV3RmlsZVRvb0xhcmdlRXJyb3IoXCLmlofku7blpKflsI/otoXov4cxMDBNXCIpKTtlLmRhdGFbbl09c1swXX1lbHNlIGUuYmxvYiYmKGUuZGF0YVtuXT1lLmJsb2IpO2Vsc2Ugby5kYXRhc2V0KHIsXCJuYW1lXCIsbiksZS5kYXRhLmlucHV0PXI7ZS5wYXJhbXMmJm8ubWVyZ2UoZS5kYXRhLGUucGFyYW1zKTt2YXIgcD17ZGF0YTplLmRhdGEsb25hZnRlcnNlbmQ6ZnVuY3Rpb24oKXtlLmJlZ2ludXBsb2FkKHQpfSxvbnVwbG9hZGluZzpmdW5jdGlvbih0KXt2YXIgbj1NYXRoLmZsb29yKDFlNCp0LmxvYWRlZC90LnRvdGFsKS8xMDAscj17dG90YWw6dC50b3RhbCxsb2FkZWQ6dC5sb2FkZWQscGVyY2VudGFnZTpuLHBlcmNlbnRhZ2VUZXh0Om4rXCIlXCJ9O2UuZmlsZUlucHV0JiYoci5maWxlSW5wdXQ9ZS5maWxlSW5wdXQpLGUuYmxvYiYmKHIuYmxvYj1lLmJsb2IpLGUudXBsb2FkcHJvZ3Jlc3Mocil9LG9ubG9hZDpmdW5jdGlvbihuKXtuLkVycm9yP3Qub25FcnJvcihuKTplLnVwbG9hZGRvbmUobnVsbCxuKX0sb25lcnJvcjpmdW5jdGlvbihuKXt0cnl7aWYobi5yZXN1bHQpdmFyIHI9SlNPTi5wYXJzZShuLnJlc3VsdCk7ZWxzZSByPW47dC5vbkVycm9yKHIpfWNhdGNoKGVycm9yKXtlLnVwbG9hZGRvbmUobmV3IGkobi5tZXNzYWdlLG4uY29kZSksdC5vcHRpb25zKX19fTtjfHwocC5tb2RlPVwiaWZyYW1lXCIpLHAucHV0RmlsZUF0RW5kPSEwLHQuc249YShlLnVybCxwKX12YXIgbz1uKDEpLGk9bigzKSxhPW4oMTYpLnVwbG9hZCxzPW4oMTYpLmFib3J0LGM9by5zdXBwb3J0Rm9ybURhdGEsdT0xMDQ4NTc2MDA7ci5wcm90b3R5cGUub25FcnJvcj1mdW5jdGlvbihlKXt2YXIgdCxuLHIsbz10aGlzLGE9by5vcHRpb25zO2U9ZXx8e30sdD1lLkVycm9yfHxlfHx7fSxuPXQuQ29kZXx8dC5jb2RlfHxcInVua25vd25cIixyPXQuTWVzc2FnZXx8dC5tZXNzYWdlfHxcIuacquefpemUmeivr1wiLGEudXBsb2FkZG9uZShuZXcgaShuK1wiKFwiK3IrXCIpXCIsbikpfSxyLnByb3RvdHlwZS5hYm9ydD1mdW5jdGlvbigpe3ModGhpcy5zbil9LGUuZXhwb3J0cz1yfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSl7ZT1lfHx7fSx0aGlzLm1zPWUubWlufHwxMDAsdGhpcy5tYXg9ZS5tYXh8fDFlNCx0aGlzLmZhY3Rvcj1lLmZhY3Rvcnx8Mix0aGlzLmppdHRlcj1lLmppdHRlcj4wJiZlLmppdHRlcjw9MT9lLmppdHRlcjowLHRoaXMuYXR0ZW1wdHM9MH1lLmV4cG9ydHM9bixuLnByb3RvdHlwZS5kdXJhdGlvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubXMqTWF0aC5wb3codGhpcy5mYWN0b3IsdGhpcy5hdHRlbXB0cysrKTtpZih0aGlzLmppdHRlcil7dmFyIHQ9TWF0aC5yYW5kb20oKSxuPU1hdGguZmxvb3IodCp0aGlzLmppdHRlciplKTtlPTA9PSgxJk1hdGguZmxvb3IoMTAqdCkpP2UtbjplK259cmV0dXJuIDB8TWF0aC5taW4oZSx0aGlzLm1heCl9LG4ucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5hdHRlbXB0cz0wfSxuLnByb3RvdHlwZS5zZXRNaW49ZnVuY3Rpb24oZSl7dGhpcy5tcz1lfSxuLnByb3RvdHlwZS5zZXRNYXg9ZnVuY3Rpb24oZSl7dGhpcy5tYXg9ZX0sbi5wcm90b3R5cGUuc2V0Sml0dGVyPWZ1bmN0aW9uKGUpe3RoaXMuaml0dGVyPWV9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLHQpe2Zvcih2YXIgbj1lW2FdW3RdO251bGwhPW47KXtpZihuLmtpbmQ9PT1zKXJldHVybiBuLmxpc3RlbmVyO249bi5uZXh0fXJldHVybiBudWxsfWZ1bmN0aW9uIG8oZSx0LG4pe1wiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJlwib2JqZWN0XCIhPXR5cGVvZiBuJiYobj1udWxsKTtmb3IodmFyIHI9bnVsbCxvPWVbYV1bdF07bnVsbCE9bzspby5raW5kPT09cz9udWxsPT1yP2VbYV1bdF09by5uZXh0OnIubmV4dD1vLm5leHQ6cj1vLG89by5uZXh0O251bGwhPW4mJihudWxsPT1yP2VbYV1bdF09YyhuLHMpOnIubmV4dD1jKG4scykpfXZhciBpPW4oMjMpLGE9aS5MSVNURU5FUlMscz1pLkFUVFJJQlVURSxjPWkubmV3Tm9kZTt0LmRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0PWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbigpe2UuY2FsbCh0aGlzKX12YXIgaT17Y29uc3RydWN0b3I6e3ZhbHVlOm4sY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfX07cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbihlKXtpW1wib25cIitlXT17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxlKX0sc2V0OmZ1bmN0aW9uKHQpe28odGhpcyxlLHQpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19KSxuLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlLGkpLG59fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyMykuY3JlYXRlVW5pcXVlS2V5LG89cihcInN0b3BfaW1tZWRpYXRlX3Byb3BhZ2F0aW9uX2ZsYWdcIiksaT1yKFwiY2FuY2VsZWRfZmxhZ1wiKSxhPXIoXCJvcmlnaW5hbF9ldmVudFwiKSxzPU9iamVjdC5mcmVlemUoe3N0b3BQcm9wYWdhdGlvbjpPYmplY3QuZnJlZXplKHt2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXNbYV07XCJmdW5jdGlvblwiPT10eXBlb2YgZS5zdG9wUHJvcGFnYXRpb24mJmUuc3RvcFByb3BhZ2F0aW9uKCl9LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpPYmplY3QuZnJlZXplKHt2YWx1ZTpmdW5jdGlvbigpe3RoaXNbb109ITA7dmFyIGU9dGhpc1thXTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiYmZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKX0sd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSkscHJldmVudERlZmF1bHQ6T2JqZWN0LmZyZWV6ZSh7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNhbmNlbGFibGU9PT0hMCYmKHRoaXNbaV09ITApO3ZhciBlPXRoaXNbYV07XCJmdW5jdGlvblwiPT10eXBlb2YgZS5wcmV2ZW50RGVmYXVsdCYmZS5wcmV2ZW50RGVmYXVsdCgpfSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxkZWZhdWx0UHJldmVudGVkOk9iamVjdC5mcmVlemUoe2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzW2ldfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfSk7dC5TVE9QX0lNTUVESUFURV9QUk9QQUdBVElPTl9GTEFHPW8sdC5jcmVhdGVFdmVudFdyYXBwZXI9ZnVuY3Rpb24oZSx0KXt2YXIgbj1cIm51bWJlclwiPT10eXBlb2YgZS50aW1lU3RhbXA/ZS50aW1lU3RhbXA6RGF0ZS5ub3coKSxyPXt0eXBlOnt2YWx1ZTplLnR5cGUsZW51bWVyYWJsZTohMH0sdGFyZ2V0Ont2YWx1ZTp0LGVudW1lcmFibGU6ITB9LGN1cnJlbnRUYXJnZXQ6e3ZhbHVlOnQsZW51bWVyYWJsZTohMH0sZXZlbnRQaGFzZTp7dmFsdWU6MixlbnVtZXJhYmxlOiEwfSxidWJibGVzOnt2YWx1ZTpCb29sZWFuKGUuYnViYmxlcyksZW51bWVyYWJsZTohMH0sY2FuY2VsYWJsZTp7dmFsdWU6Qm9vbGVhbihlLmNhbmNlbGFibGUpLGVudW1lcmFibGU6ITB9LHRpbWVTdGFtcDp7dmFsdWU6bixlbnVtZXJhYmxlOiEwfSxpc1RydXN0ZWQ6e3ZhbHVlOiExLGVudW1lcmFibGU6ITB9fTtyZXR1cm4gcltvXT17dmFsdWU6ITEsd3JpdGFibGU6ITB9LHJbaV09e3ZhbHVlOiExLHdyaXRhYmxlOiEwfSxyW2FdPXt2YWx1ZTplfSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5kZXRhaWwmJihyLmRldGFpbD17dmFsdWU6ZS5kZXRhaWwsZW51bWVyYWJsZTohMH0pLE9iamVjdC5jcmVhdGUoT2JqZWN0LmNyZWF0ZShlLHMpLHIpfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gbyhlLHQsbil7dGhpcy5mbj1lLHRoaXMuY29udGV4dD10LHRoaXMub25jZT1ufHwhMX1mdW5jdGlvbiBpKCl7dGhpcy5fZXZlbnRzPW5ldyByLHRoaXMuX2V2ZW50c0NvdW50PTB9dmFyIGE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxzPVwiflwiO09iamVjdC5jcmVhdGUmJihyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG51bGwpLChuZXcgcikuX19wcm90b19ffHwocz0hMSkpLGkucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXt2YXIgZSx0LG49W107aWYoMD09PXRoaXMuX2V2ZW50c0NvdW50KXJldHVybiBuO2Zvcih0IGluIGU9dGhpcy5fZXZlbnRzKWEuY2FsbChlLHQpJiZuLnB1c2gocz90LnNsaWNlKDEpOnQpO3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP24uY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSkpOm59LGkucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlLHQpe3ZhciBuPXM/cytlOmUscj10aGlzLl9ldmVudHNbbl07aWYodClyZXR1cm4hIXI7aWYoIXIpcmV0dXJuW107aWYoci5mbilyZXR1cm5bci5mbl07Zm9yKHZhciBvPTAsaT1yLmxlbmd0aCxhPW5ldyBBcnJheShpKTtvPGk7bysrKWFbb109cltvXS5mbjtyZXR1cm4gYX0saS5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlLHQsbixyLG8saSl7dmFyIGE9cz9zK2U6ZTtpZighdGhpcy5fZXZlbnRzW2FdKXJldHVybiExO3ZhciBjLHUsbD10aGlzLl9ldmVudHNbYV0scD1hcmd1bWVudHMubGVuZ3RoO2lmKGwuZm4pe3N3aXRjaChsLm9uY2UmJnRoaXMucmVtb3ZlTGlzdGVuZXIoZSxsLmZuLHZvaWQgMCwhMCkscCl7Y2FzZSAxOnJldHVybiBsLmZuLmNhbGwobC5jb250ZXh0KSwhMDtjYXNlIDI6cmV0dXJuIGwuZm4uY2FsbChsLmNvbnRleHQsdCksITA7Y2FzZSAzOnJldHVybiBsLmZuLmNhbGwobC5jb250ZXh0LHQsbiksITA7Y2FzZSA0OnJldHVybiBsLmZuLmNhbGwobC5jb250ZXh0LHQsbixyKSwhMDtjYXNlIDU6cmV0dXJuIGwuZm4uY2FsbChsLmNvbnRleHQsdCxuLHIsbyksITA7Y2FzZSA2OnJldHVybiBsLmZuLmNhbGwobC5jb250ZXh0LHQsbixyLG8saSksITB9Zm9yKHU9MSxjPW5ldyBBcnJheShwLTEpO3U8cDt1KyspY1t1LTFdPWFyZ3VtZW50c1t1XTtsLmZuLmFwcGx5KGwuY29udGV4dCxjKX1lbHNle3ZhciBmLGQ9bC5sZW5ndGg7Zm9yKHU9MDt1PGQ7dSsrKXN3aXRjaChsW3VdLm9uY2UmJnRoaXMucmVtb3ZlTGlzdGVuZXIoZSxsW3VdLmZuLHZvaWQgMCwhMCkscCl7Y2FzZSAxOmxbdV0uZm4uY2FsbChsW3VdLmNvbnRleHQpO2JyZWFrO2Nhc2UgMjpsW3VdLmZuLmNhbGwobFt1XS5jb250ZXh0LHQpO2JyZWFrO2Nhc2UgMzpsW3VdLmZuLmNhbGwobFt1XS5jb250ZXh0LHQsbik7YnJlYWs7Y2FzZSA0OmxbdV0uZm4uY2FsbChsW3VdLmNvbnRleHQsdCxuLHIpO2JyZWFrO2RlZmF1bHQ6aWYoIWMpZm9yKGY9MSxjPW5ldyBBcnJheShwLTEpO2Y8cDtmKyspY1tmLTFdPWFyZ3VtZW50c1tmXTtsW3VdLmZuLmFwcGx5KGxbdV0uY29udGV4dCxjKX19cmV0dXJuITB9LGkucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uZXcgbyh0LG58fHRoaXMpLGk9cz9zK2U6ZTtyZXR1cm4gdGhpcy5fZXZlbnRzW2ldP3RoaXMuX2V2ZW50c1tpXS5mbj90aGlzLl9ldmVudHNbaV09W3RoaXMuX2V2ZW50c1tpXSxyXTp0aGlzLl9ldmVudHNbaV0ucHVzaChyKToodGhpcy5fZXZlbnRzW2ldPXIsdGhpcy5fZXZlbnRzQ291bnQrKyksdGhpc30saS5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9bmV3IG8odCxufHx0aGlzLCEwKSxpPXM/cytlOmU7cmV0dXJuIHRoaXMuX2V2ZW50c1tpXT90aGlzLl9ldmVudHNbaV0uZm4/dGhpcy5fZXZlbnRzW2ldPVt0aGlzLl9ldmVudHNbaV0scl06dGhpcy5fZXZlbnRzW2ldLnB1c2gocik6KHRoaXMuX2V2ZW50c1tpXT1yLHRoaXMuX2V2ZW50c0NvdW50KyspLHRoaXN9LGkucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCxuLG8pe3ZhciBpPXM/cytlOmU7aWYoIXRoaXMuX2V2ZW50c1tpXSlyZXR1cm4gdGhpcztpZighdClyZXR1cm4gMD09PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPW5ldyByOmRlbGV0ZSB0aGlzLl9ldmVudHNbaV0sdGhpczt2YXIgYT10aGlzLl9ldmVudHNbaV07aWYoYS5mbilhLmZuIT09dHx8byYmIWEub25jZXx8biYmYS5jb250ZXh0IT09bnx8KDA9PT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1uZXcgcjpkZWxldGUgdGhpcy5fZXZlbnRzW2ldKTtlbHNle2Zvcih2YXIgYz0wLHU9W10sbD1hLmxlbmd0aDtjPGw7YysrKShhW2NdLmZuIT09dHx8byYmIWFbY10ub25jZXx8biYmYVtjXS5jb250ZXh0IT09bikmJnUucHVzaChhW2NdKTt1Lmxlbmd0aD90aGlzLl9ldmVudHNbaV09MT09PXUubGVuZ3RoP3VbMF06dTowPT09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9bmV3IHI6ZGVsZXRlIHRoaXMuX2V2ZW50c1tpXX1yZXR1cm4gdGhpc30saS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlPyh0PXM/cytlOmUsdGhpcy5fZXZlbnRzW3RdJiYoMD09PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPW5ldyByOmRlbGV0ZSB0aGlzLl9ldmVudHNbdF0pKToodGhpcy5fZXZlbnRzPW5ldyByLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXN9LGkucHJvdG90eXBlLm9mZj1pLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixpLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1pLnByb3RvdHlwZS5vbixpLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30saS5wcmVmaXhlZD1zLGkuRXZlbnRFbWl0dGVyPWksZS5leHBvcnRzPWl9LGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUsdCxuKXtpZighcyh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO2FyZ3VtZW50cy5sZW5ndGg8MyYmKG49dGhpcyksXCJbb2JqZWN0IEFycmF5XVwiPT09Yy5jYWxsKGUpP28oZSx0LG4pOlwic3RyaW5nXCI9PXR5cGVvZiBlP2koZSx0LG4pOmEoZSx0LG4pfWZ1bmN0aW9uIG8oZSx0LG4pe2Zvcih2YXIgcj0wLG89ZS5sZW5ndGg7cjxvO3IrKyl1LmNhbGwoZSxyKSYmdC5jYWxsKG4sZVtyXSxyLGUpfWZ1bmN0aW9uIGkoZSx0LG4pe2Zvcih2YXIgcj0wLG89ZS5sZW5ndGg7cjxvO3IrKyl0LmNhbGwobixlLmNoYXJBdChyKSxyLGUpfWZ1bmN0aW9uIGEoZSx0LG4pe2Zvcih2YXIgciBpbiBlKXUuY2FsbChlLHIpJiZ0LmNhbGwobixlW3JdLHIsZSl9dmFyIHM9bigzOCk7ZS5leHBvcnRzPXI7dmFyIGM9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyx1PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHl9LGZ1bmN0aW9uKGUsdCl7KGZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/ZS5leHBvcnRzPXdpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgdD9lLmV4cG9ydHM9dDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9lLmV4cG9ydHM9c2VsZjplLmV4cG9ydHM9e319KS5jYWxsKHQsZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDgxKSxvPW4oNzcpLGk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJue307dmFyIHQ9e307cmV0dXJuIG8ocihlKS5zcGxpdChcIlxcblwiKSxmdW5jdGlvbihlKXt2YXIgbj1lLmluZGV4T2YoXCI6XCIpLG89cihlLnNsaWNlKDAsbikpLnRvTG93ZXJDYXNlKCksYT1yKGUuc2xpY2UobisxKSk7XCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbb10/dFtvXT1hOmkodFtvXSk/dFtvXS5wdXNoKGEpOnRbb109W3Rbb10sYV19KSx0fX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiByKCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIG8oZSl7aWYobD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigobD09PW58fCFsKSYmc2V0VGltZW91dClyZXR1cm4gbD1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGwoZSwwKX1jYXRjaChlKXt0cnl7cmV0dXJuIGwuY2FsbChudWxsLGUsMCl9Y2F0Y2goZSl7cmV0dXJuIGwuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBpKGUpe2lmKHA9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigocD09PXJ8fCFwKSYmY2xlYXJUaW1lb3V0KXJldHVybiBwPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3JldHVybiBwKGUpfWNhdGNoKGUpe3RyeXtyZXR1cm4gcC5jYWxsKG51bGwsZSl9Y2F0Y2goZSl7cmV0dXJuIHAuY2FsbCh0aGlzLGUpfX19ZnVuY3Rpb24gYSgpe3kmJmQmJih5PSExLGQubGVuZ3RoP209ZC5jb25jYXQobSk6aD0tMSxtLmxlbmd0aCYmcygpKX1mdW5jdGlvbiBzKCl7aWYoIXkpe3ZhciBlPW8oYSk7eT0hMDtmb3IodmFyIHQ9bS5sZW5ndGg7dDspe2ZvcihkPW0sbT1bXTsrK2g8dDspZCYmZFtoXS5ydW4oKTtoPS0xLHQ9bS5sZW5ndGh9ZD1udWxsLHk9ITEsaShlKX19ZnVuY3Rpb24gYyhlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIHUoKXt9dmFyIGwscCxmPWUuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7bD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bn1jYXRjaChlKXtsPW59dHJ5e3A9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpyfWNhdGNoKGUpe3A9cn19KCk7dmFyIGQsbT1bXSx5PSExLGg9LTE7Zi5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0W24tMV09YXJndW1lbnRzW25dO20ucHVzaChuZXcgYyhlLHQpKSwxIT09bS5sZW5ndGh8fHl8fG8ocyl9LGMucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LGYudGl0bGU9XCJicm93c2VyXCIsZi5icm93c2VyPSEwLGYuZW52PXt9LGYuYXJndj1bXSxmLnZlcnNpb249XCJcIixmLnZlcnNpb25zPXt9LGYub249dSxmLmFkZExpc3RlbmVyPXUsZi5vbmNlPXUsZi5vZmY9dSxmLnJlbW92ZUxpc3RlbmVyPXUsZi5yZW1vdmVBbGxMaXN0ZW5lcnM9dSxmLmVtaXQ9dSxmLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGYuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LGYuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxmLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUucmVwbGFjZSgvXlxccyp8XFxzKiQvZyxcIlwiKX10PWUuZXhwb3J0cz1uLHQubGVmdD1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9eXFxzKi8sXCJcIil9LHQucmlnaHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxzKiQvLFwiXCIpfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl0KGVbbl0pfWZ1bmN0aW9uIG8oZSl7Zm9yKHZhciB0IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBpKGUsdCxuKXt2YXIgcj1lO3JldHVybiBwKHQpPyhuPXQsXCJzdHJpbmdcIj09dHlwZW9mIGUmJihyPXt1cmk6ZX0pKTpyPWQodCx7dXJpOmV9KSxyLmNhbGxiYWNrPW4scn1mdW5jdGlvbiBhKGUsdCxuKXtyZXR1cm4gdD1pKGUsdCxuKSxzKHQpfWZ1bmN0aW9uIHMoZSl7ZnVuY3Rpb24gdCgpezQ9PT1wLnJlYWR5U3RhdGUmJmkoKX1mdW5jdGlvbiBuKCl7dmFyIGU9dm9pZCAwO2lmKGU9cC5yZXNwb25zZT9wLnJlc3BvbnNlOnAucmVzcG9uc2VUZXh0fHxjKHApLHcpdHJ5e2U9SlNPTi5wYXJzZShlKX1jYXRjaChlKXt9cmV0dXJuIGV9ZnVuY3Rpb24gcihlKXtyZXR1cm4gY2xlYXJUaW1lb3V0KHkpLGUgaW5zdGFuY2VvZiBFcnJvcnx8KGU9bmV3IEVycm9yKFwiXCIrKGV8fFwiVW5rbm93biBYTUxIdHRwUmVxdWVzdCBFcnJvclwiKSkpLGUuc3RhdHVzQ29kZT0wLHUoZSxsKX1mdW5jdGlvbiBpKCl7aWYoIW0pe3ZhciB0O2NsZWFyVGltZW91dCh5KSx0PWUudXNlWERSJiZ2b2lkIDA9PT1wLnN0YXR1cz8yMDA6MTIyMz09PXAuc3RhdHVzPzIwNDpwLnN0YXR1czt2YXIgcj1sLG89bnVsbDtyZXR1cm4gMCE9PXQ/KHI9e2JvZHk6bigpLHN0YXR1c0NvZGU6dCxtZXRob2Q6dixoZWFkZXJzOnt9LHVybDpoLHJhd1JlcXVlc3Q6cH0scC5nZXRBbGxSZXNwb25zZUhlYWRlcnMmJihyLmhlYWRlcnM9ZihwLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkpOm89bmV3IEVycm9yKFwiSW50ZXJuYWwgWE1MSHR0cFJlcXVlc3QgRXJyb3JcIiksdShvLHIsci5ib2R5KX19aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUuY2FsbGJhY2spdGhyb3cgbmV3IEVycm9yKFwiY2FsbGJhY2sgYXJndW1lbnQgbWlzc2luZ1wiKTt2YXIgcz0hMSx1PWZ1bmN0aW9uKHQsbixyKXtzfHwocz0hMCxlLmNhbGxiYWNrKHQsbixyKSl9LGw9e2JvZHk6dm9pZCAwLGhlYWRlcnM6e30sc3RhdHVzQ29kZTowLG1ldGhvZDp2LHVybDpoLHJhd1JlcXVlc3Q6cH0scD1lLnhocnx8bnVsbDtwfHwocD1lLmNvcnN8fGUudXNlWERSP25ldyBhLlhEb21haW5SZXF1ZXN0Om5ldyBhLlhNTEh0dHBSZXF1ZXN0KTt2YXIgZCxtLHksaD1wLnVybD1lLnVyaXx8ZS51cmwsdj1wLm1ldGhvZD1lLm1ldGhvZHx8XCJHRVRcIixnPWUuYm9keXx8ZS5kYXRhfHxudWxsLGI9cC5oZWFkZXJzPWUuaGVhZGVyc3x8e30saz0hIWUuc3luYyx3PSExO2lmKFwianNvblwiaW4gZSYmZS5qc29uIT09ITEmJih3PSEwLGIuYWNjZXB0fHxiLkFjY2VwdHx8KGIuQWNjZXB0PVwiYXBwbGljYXRpb24vanNvblwiKSxcIkdFVFwiIT09diYmXCJIRUFEXCIhPT12JiYoYltcImNvbnRlbnQtdHlwZVwiXXx8YltcIkNvbnRlbnQtVHlwZVwiXXx8KGJbXCJDb250ZW50LVR5cGVcIl09XCJhcHBsaWNhdGlvbi9qc29uXCIpLGc9SlNPTi5zdHJpbmdpZnkoZS5qc29uPT09ITA/ZzplLmpzb24pKSkscC5vbnJlYWR5c3RhdGVjaGFuZ2U9dCxwLm9ubG9hZD1pLHAub25lcnJvcj1yLHAub25wcm9ncmVzcz1mdW5jdGlvbigpe30scC5vbmFib3J0PWZ1bmN0aW9uKCl7bT0hMH0scC5vbnRpbWVvdXQ9cixwLm9wZW4odixoLCFrLGUudXNlcm5hbWUsZS5wYXNzd29yZCksa3x8KHAud2l0aENyZWRlbnRpYWxzPSEhZS53aXRoQ3JlZGVudGlhbHMpLCFrJiZlLnRpbWVvdXQ+MCYmKHk9c2V0VGltZW91dChmdW5jdGlvbigpe2lmKCFtKXttPSEwLHAuYWJvcnQoXCJ0aW1lb3V0XCIpO3ZhciBlPW5ldyBFcnJvcihcIlhNTEh0dHBSZXF1ZXN0IHRpbWVvdXRcIik7ZS5jb2RlPVwiRVRJTUVET1VUXCIscihlKX19LGUudGltZW91dCkpLHAuc2V0UmVxdWVzdEhlYWRlcilmb3IoZCBpbiBiKWIuaGFzT3duUHJvcGVydHkoZCkmJnAuc2V0UmVxdWVzdEhlYWRlcihkLGJbZF0pO2Vsc2UgaWYoZS5oZWFkZXJzJiYhbyhlLmhlYWRlcnMpKXRocm93IG5ldyBFcnJvcihcIkhlYWRlcnMgY2Fubm90IGJlIHNldCBvbiBhbiBYRG9tYWluUmVxdWVzdCBvYmplY3RcIik7cmV0dXJuXCJyZXNwb25zZVR5cGVcImluIGUmJihwLnJlc3BvbnNlVHlwZT1lLnJlc3BvbnNlVHlwZSksXCJiZWZvcmVTZW5kXCJpbiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmJlZm9yZVNlbmQmJmUuYmVmb3JlU2VuZChwKSxwLnNlbmQoZykscH1mdW5jdGlvbiBjKGUpe2lmKFwiZG9jdW1lbnRcIj09PWUucmVzcG9uc2VUeXBlKXJldHVybiBlLnJlc3BvbnNlWE1MO3ZhciB0PTIwND09PWUuc3RhdHVzJiZlLnJlc3BvbnNlWE1MJiZcInBhcnNlcmVycm9yXCI9PT1lLnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZTtyZXR1cm5cIlwiIT09ZS5yZXNwb25zZVR5cGV8fHQ/bnVsbDplLnJlc3BvbnNlWE1MfWZ1bmN0aW9uIHUoKXt9dmFyIGw9big3OCkscD1uKDM4KSxmPW4oNzkpLGQ9big4Myk7ZS5leHBvcnRzPWEsYS5YTUxIdHRwUmVxdWVzdD1sLlhNTEh0dHBSZXF1ZXN0fHx1LGEuWERvbWFpblJlcXVlc3Q9XCJ3aXRoQ3JlZGVudGlhbHNcImluIG5ldyBhLlhNTEh0dHBSZXF1ZXN0P2EuWE1MSHR0cFJlcXVlc3Q6bC5YRG9tYWluUmVxdWVzdCxyKFtcImdldFwiLFwicHV0XCIsXCJwb3N0XCIsXCJwYXRjaFwiLFwiaGVhZFwiLFwiZGVsZXRlXCJdLGZ1bmN0aW9uKGUpe2FbXCJkZWxldGVcIj09PWU/XCJkZWxcIjplXT1mdW5jdGlvbih0LG4scil7cmV0dXJuIG49aSh0LG4sciksbi5tZXRob2Q9ZS50b1VwcGVyQ2FzZSgpLHMobil9fSl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbigpe2Zvcih2YXIgZT17fSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgbyBpbiBuKXIuY2FsbChuLG8pJiYoZVtvXT1uW29dKX1yZXR1cm4gZX1lLmV4cG9ydHM9bjt2YXIgcj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5fSxmdW5jdGlvbihlLHQpe30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMSksbz1yLnVuZGVmLGk9ci52ZXJpZnlPcHRpb25zLGE9ci52ZXJpZnlQYXJhbVR5cGUscz1uKDQ0KSxjPW4oMjYpLmZuO2MudXBkYXRlTXlDaGF0cm9vbU1lbWJlckluZm89ZnVuY3Rpb24oZSl7aShlLFwibWVtYmVyIG5lZWROb3RpZnlcIiksYShcIm5lZWROb3RpZnlcIixlLm5lZWROb3RpZnksXCJib29sZWFuXCIpLGUubmVlZFNhdmU9ZS5uZWVkU2F2ZXx8ITEsYShcIm5lZWRTYXZlXCIsZS5uZWVkU2F2ZSxcImJvb2xlYW5cIiksdGhpcy5wcm9jZXNzQ3VzdG9tKGUpLHRoaXMucHJvY2Vzc0NhbGxiYWNrKGUpLGUuY2hhdHJvb21NZW1iZXI9bmV3IHMoZS5tZW1iZXIpLHRoaXMuc2VuZENtZChcInVwZGF0ZU15Q2hhdHJvb21NZW1iZXJJbmZvXCIsZSl9LGMuZ2V0Q2hhdHJvb21NZW1iZXJzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aShlLFwiZ3Vlc3RcIiksYShcImd1ZXN0XCIsZS5ndWVzdCxcImJvb2xlYW5cIiksbyhlLnRpbWUpP2UudGltZT0wOmEoXCJ0aW1lXCIsZS50aW1lLFwibnVtYmVyXCIpLG8oZS5saW1pdCk/ZS5saW1pdD0xMDA6YShcImxpbWl0XCIsZS5saW1pdCxcIm51bWJlclwiKSx0LnByb2Nlc3NDYWxsYmFjayhlKSxlLnR5cGU9ZS5ndWVzdD8xOjAsIWUuZ3Vlc3QmJmUub25seU9ubGluZSYmKGUudHlwZT0yKSx0LnNlbmRDbWQoXCJnZXRDaGF0cm9vbU1lbWJlcnNcIixlKX0sYy5nZXRDaGF0cm9vbU1lbWJlcnNJbmZvPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aShlLFwiYWNjb3VudHNcIiksYShcImFjY291bnRzXCIsZS5hY2NvdW50cyxcImFycmF5XCIpLHQucHJvY2Vzc0NhbGxiYWNrKGUpLHQuc2VuZENtZChcImdldENoYXRyb29tTWVtYmVyc0luZm9cIixlKX0sYy5tYXJrQ2hhdHJvb21NYW5hZ2VyPWZ1bmN0aW9uKGUpe2UudHlwZT0xLHRoaXMubWFya0NoYXRyb29tTWVtYmVyKGUpfSxjLm1hcmtDaGF0cm9vbUNvbW1vbk1lbWJlcj1mdW5jdGlvbihlKXtlLnR5cGU9Mix0aGlzLm1hcmtDaGF0cm9vbU1lbWJlcihlKX0sYy5tYXJrQ2hhdHJvb21CbGFja2xpc3Q9ZnVuY3Rpb24oZSl7ZS50eXBlPS0xLHRoaXMubWFya0NoYXRyb29tTWVtYmVyKGUpfSxjLm1hcmtDaGF0cm9vbUdhZ2xpc3Q9ZnVuY3Rpb24oZSl7ZS50eXBlPS0yLHRoaXMubWFya0NoYXRyb29tTWVtYmVyKGUpfSxjLm1hcmtDaGF0cm9vbU1lbWJlcj1mdW5jdGlvbihlKXtpKGUsXCJhY2NvdW50IHR5cGUgaXNBZGRcIiksYShcImlzQWRkXCIsZS5pc0FkZCxcImJvb2xlYW5cIiksbyhlLmxldmVsKT9lLmxldmVsPTA6YShcImxldmVsXCIsZS5sZXZlbCxcIm51bWJlclwiKTt2YXIgdD10aGlzO3QucHJvY2Vzc0N1c3RvbShlKSx0LnByb2Nlc3NDYWxsYmFjayhlKSx0LnNlbmRDbWQoXCJtYXJrQ2hhdHJvb21NZW1iZXJcIixlKX0sYy5raWNrQ2hhdHJvb21NZW1iZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpKGUsXCJhY2NvdW50XCIpLHQucHJvY2Vzc0N1c3RvbShlKSx0LnByb2Nlc3NDYWxsYmFjayhlKSx0LnNlbmRDbWQoXCJraWNrQ2hhdHJvb21NZW1iZXJcIixlKX0sYy51cGRhdGVDaGF0cm9vbU1lbWJlclRlbXBNdXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aShlLFwiYWNjb3VudCBkdXJhdGlvbiBuZWVkTm90aWZ5XCIpLGEoXCJkdXJhdGlvblwiLGUuZHVyYXRpb24sXCJudW1iZXJcIiksYShcIm5lZWROb3RpZnlcIixlLm5lZWROb3RpZnksXCJib29sZWFuXCIpLHQucHJvY2Vzc0N1c3RvbShlKSx0LnByb2Nlc3NDYWxsYmFjayhlKSx0LnNlbmRDbWQoXCJ1cGRhdGVDaGF0cm9vbU1lbWJlclRlbXBNdXRlXCIsZSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigxKSxvPXIudW5kZWYsaT1uKDI2KS5mbjtpLmJlZm9yZVNlbmRNc2c9ZnVuY3Rpb24oZSl7ZS5jbWQ9XCJzZW5kTXNnXCJ9LGkuZ2V0SGlzdG9yeU1zZ3M9ZnVuY3Rpb24oZSl7ci52ZXJpZnlPcHRpb25zKGUpLG8oZS50aW1ldGFnKT9lLnRpbWV0YWc9MDpyLnZlcmlmeVBhcmFtVHlwZShcInRpbWV0YWdcIixlLnRpbWV0YWcsXCJudW1iZXJcIiksbyhlLmxpbWl0KT9lLmxpbWl0PTEwMDpyLnZlcmlmeVBhcmFtVHlwZShcImxpbWl0XCIsZS5saW1pdCxcIm51bWJlclwiKSxvKGUucmV2ZXJzZSk/ZS5yZXZlcnNlPSExOnIudmVyaWZ5UGFyYW1UeXBlKFwicmV2ZXJzZVwiLGUucmV2ZXJzZSxcImJvb2xlYW5cIik7dmFyIHQ9dGhpczt0LnByb2Nlc3NDYWxsYmFjayhlKSx0LnNlbmRDbWQoXCJnZXRIaXN0b3J5TXNnc1wiLGUsZS5jYWxsYmFjayl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyNikuZm4sbz1uKDEpO3IucXVldWVPZmZlcj1mdW5jdGlvbihlKXtvLnZlcmlmeU9wdGlvbnMoZSxcImVsZW1lbnRLZXkgZWxlbWVudFZhbHVlXCIpLHRoaXMucHJvY2Vzc0NhbGxiYWNrKGUpLHRoaXMuc2VuZENtZChcInF1ZXVlT2ZmZXJcIixlLGUuY2FsbGJhY2spfSxyLnF1ZXVlUG9sbD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtlLmVsZW1lbnRLZXk9ZS5lbGVtZW50S2V5fHxcIlwiLHRoaXMucHJvY2Vzc0NhbGxiYWNrKGUpLHRoaXMuc2VuZENtZChcInF1ZXVlUG9sbFwiLGUsZS5jYWxsYmFjayl9LHIucXVldWVMaXN0PWZ1bmN0aW9uKGUpe3RoaXMucHJvY2Vzc0NhbGxiYWNrKGUpLHRoaXMuc2VuZENtZChcInF1ZXVlTGlzdFwiLGUsZS5jYWxsYmFjayl9LHIucXVldWVEcm9wPWZ1bmN0aW9uKGUpe3RoaXMucHJvY2Vzc0NhbGxiYWNrKGUpLHRoaXMuc2VuZENtZChcInF1ZXVlRHJvcFwiLGUsZS5jYWxsYmFjayl9fSwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDI2KSxvPW4oNDMpO28ociksZS5leHBvcnRzPXJ9LCxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcigpe312YXIgbz1uKDI3KSxpPW4oMSk7ci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShvLnByb3RvdHlwZSksci52ZXJpZnlGaWxlPWZ1bmN0aW9uKGUpe2kudmVyaWZ5T3B0aW9ucyhlLFwiZHVyXCIsITAsXCJmaWxlLlwiKX0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2kudmVyaWZ5T3B0aW9ucyhlLFwiY29udGVudFwiKSxlLnR5cGU9XCJjdXN0b21cIixvLmNhbGwodGhpcyxlKSx0aGlzLmF0dGFjaD1lLmNvbnRlbnR9dmFyIG89bigxMiksaT1uKDEpO3IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLHIucmV2ZXJzZT1mdW5jdGlvbihlKXt2YXIgdD1vLnJldmVyc2UoZSk7cmV0dXJuIHQuY29udGVudD1lLmF0dGFjaCx0fSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7ZS50eXBlPVwiZ2VvXCIsaS52ZXJpZnlPcHRpb25zKGUsXCJnZW9cIiksaS52ZXJpZnlPcHRpb25zKGUuZ2VvLFwibG5nIGxhdCB0aXRsZVwiLCEwLFwiZ2VvLlwiKSxpLnZlcmlmeVBhcmFtVHlwZShcImdlby5sbmdcIixlLmdlby5sbmcsXCJudW1iZXJcIiksaS52ZXJpZnlQYXJhbVR5cGUoXCJnZW8ubGF0XCIsZS5nZW8ubGF0LFwibnVtYmVyXCIpLGkudmVyaWZ5UGFyYW1UeXBlKFwiZ2VvLnRpdGxlXCIsZS5nZW8udGl0bGUsXCJzdHJpbmdcIiksby5jYWxsKHRoaXMsZSksdGhpcy5hdHRhY2g9SlNPTi5zdHJpbmdpZnkoZS5nZW8pfXZhciBvPW4oMTIpLGk9bigxKTtyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKSxyLnJldmVyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9by5yZXZlcnNlKGUpO3JldHVybiBlLmF0dGFjaD1lLmF0dGFjaD9cIlwiK2UuYXR0YWNoOlwiXCIsdC5nZW89ZS5hdHRhY2g/SlNPTi5wYXJzZShlLmF0dGFjaCk6e30sdH0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKCl7fXZhciBvPW4oMSksaT1uKDI3KTtyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGkucHJvdG90eXBlKSxyLnZlcmlmeUZpbGU9ZnVuY3Rpb24oZSl7by52ZXJpZnlPcHRpb25zKGUsXCJ3IGhcIiwhMCxcImZpbGUuXCIpfSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMSksbz1mdW5jdGlvbihlKXt0aGlzLmFjY291bnQ9ZS5hY2NvdW50fSxpPW8ucHJvdG90eXBlLGE9aS5NZXNzYWdlPW4oMTIpLHM9aS5UZXh0TWVzc2FnZT1uKDEyMiksYz1pLkZpbGVNZXNzYWdlPW4oMjcpLHU9aS5HZW9NZXNzYWdlPW4oMTE4KSxsPWkuTm90aWZpY2F0aW9uTWVzc2FnZT1uKDEyMSkscD1pLkN1c3RvbU1lc3NhZ2U9bigxMTcpLGY9aS5UaXBNZXNzYWdlPW4oMTIzKTtpLnZhbGlkVHlwZXM9YS52YWxpZFR5cGVzLGkucmV2ZXJzZT1mdW5jdGlvbihlKXt2YXIgdCxuPWEuZ2V0VHlwZShlKTtzd2l0Y2gobil7Y2FzZVwidGV4dFwiOnQ9cy5yZXZlcnNlKGUpO2JyZWFrO2Nhc2VcImltYWdlXCI6Y2FzZVwiYXVkaW9cIjpjYXNlXCJ2aWRlb1wiOmNhc2VcImZpbGVcIjp0PWMucmV2ZXJzZShlKTticmVhaztjYXNlXCJnZW9cIjp0PXUucmV2ZXJzZShlKTticmVhaztjYXNlXCJub3RpZmljYXRpb25cIjp0PWwucmV2ZXJzZShlKTticmVhaztjYXNlXCJjdXN0b21cIjp0PXAucmV2ZXJzZShlKTticmVhaztjYXNlXCJ0aXBcIjp0PWYucmV2ZXJzZShlKTticmVhaztkZWZhdWx0OnQ9YS5yZXZlcnNlKGUpfXJldHVybiBhLnNldEV4dHJhKHQsdGhpcy5hY2NvdW50KSx0fSxpLnJldmVyc2VNc2dzPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbyxpPXRoaXM7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlPWkucmV2ZXJzZShlKSx0JiYobj10Lm1vZGlmeU9iaixuJiYoZT1yLm1lcmdlKGUsbikpLG89dC5tYXBwZXIsci5pc0Z1bmN0aW9uKG8pJiYoZT1vKGUpKSksZX0pfSxlLmV4cG9ydHM9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXt9dmFyIG89bigxKSxpPW8ubm90dW5kZWYsYT1uKDEyKSxzPXszMDE6XCJtZW1iZXJFbnRlclwiLDMwMjpcIm1lbWJlckV4aXRcIiwzMDM6XCJibGFja01lbWJlclwiLDMwNDpcInVuYmxhY2tNZW1iZXJcIiwzMDU6XCJnYWdNZW1iZXJcIiwzMDY6XCJ1bmdhZ01lbWJlclwiLDMwNzpcImFkZE1hbmFnZXJcIiwzMDg6XCJyZW1vdmVNYW5hZ2VyXCIsMzA5OlwiYWRkQ29tbW9uXCIsMzEwOlwicmVtb3ZlQ29tbW9uXCIsMzExOlwiY2xvc2VDaGF0cm9vbVwiLDMxMjpcInVwZGF0ZUNoYXRyb29tXCIsMzEzOlwia2lja01lbWJlclwiLDMxNDpcImFkZFRlbXBNdXRlXCIsMzE1OlwicmVtb3ZlVGVtcE11dGVcIiwzMTY6XCJ1cGRhdGVNZW1iZXJJbmZvXCIsMzE3OlwidXBkYXRlUXVldWVcIiwzMTg6XCJtdXRlUm9vbVwiLDMxOTpcInVubXV0ZVJvb21cIn07ci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShhLnByb3RvdHlwZSksci5yZXZlcnNlPWZ1bmN0aW9uKGUpe3ZhciB0PWEucmV2ZXJzZShlKTtpZihlLmF0dGFjaD1lLmF0dGFjaD9cIlwiK2UuYXR0YWNoOlwiXCIsZS5hdHRhY2gpe3ZhciBuPUpTT04ucGFyc2UoZS5hdHRhY2gpO2lmKHQuYXR0YWNoPXt0eXBlOnNbbi5pZF19LGkobi5kYXRhKSl7dmFyIHI9bi5kYXRhO2koci5vcGVyYXRvcikmJih0LmF0dGFjaC5mcm9tPXIub3BlcmF0b3IpLGkoci5vcGVOaWNrKSYmKHQuYXR0YWNoLmZyb21OaWNrPXIub3BlTmljayksaShyLnRhcmdldCkmJih0LmF0dGFjaC50bz1yLnRhcmdldCksaShyLnRhck5pY2spJiYodC5hdHRhY2gudG9OaWNrPXIudGFyTmljayksaShyLm11dGVEdXJhdGlvbikmJih0LmF0dGFjaC5kdXJhdGlvbj1wYXJzZUludChyLm11dGVEdXJhdGlvbiwxMCkpLFwibWVtYmVyRW50ZXJcIj09PXQuYXR0YWNoLnR5cGUmJihpKHIubXV0ZWQpP3QuYXR0YWNoLmdhZ2VkPTE9PT0rci5tdXRlZDp0LmF0dGFjaC5nYWdlZD0hMSxpKHIudGVtcE11dGVkKT90LmF0dGFjaC50ZW1wTXV0ZWQ9MT09PStyLnRlbXBNdXRlZDp0LmF0dGFjaC50ZW1wTXV0ZWQ9ITEsaShyLm11dGVUdGwpP3QuYXR0YWNoLnRlbXBNdXRlRHVyYXRpb249K3IubXV0ZVR0bDp0LmF0dGFjaC50ZW1wTXV0ZUR1cmF0aW9uPTApLGkoci5leHQpJiYodC5hdHRhY2guY3VzdG9tPXIuZXh0KX19ZWxzZSB0LmF0dGFjaD17fTtyZXR1cm4gdH0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2kudmVyaWZ5T3B0aW9ucyhlLFwidGV4dFwiKSxlLnR5cGU9XCJ0ZXh0XCIsby5jYWxsKHRoaXMsZSksdGhpcy5hdHRhY2g9ZS50ZXh0fXZhciBvPW4oMTIpLGk9bigxKTtyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKSxyLnJldmVyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9by5yZXZlcnNlKGUpO3JldHVybiB0LnRleHQ9ZS5hdHRhY2gsdH0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2kudmVyaWZ5T3B0aW9ucyhlLFwidGlwXCIpLGUudHlwZT1cInRpcFwiLG8uY2FsbCh0aGlzLGUpLHRoaXMuYXR0YWNoPWUudGlwfXZhciBvPW4oMTIpLGk9bigxKTtyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKSxyLnJldmVyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9by5yZXZlcnNlKGUpO3JldHVybiB0LnRpcD1lLmF0dGFjaCx0fSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXt9dmFyIG89bigyNyksaT1uKDEpO3IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLHIudmVyaWZ5RmlsZT1mdW5jdGlvbihlKXtpLnZlcmlmeU9wdGlvbnMoZSxcImR1ciB3IGhcIiwhMCxcImZpbGUuXCIpfSxlLmV4cG9ydHM9cn0sLCwsLCwsLCwsLCwsZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMjIpLmZuLG89big5KSxpPW4oMSk7ci5hc3NlbWJsZUxvZ2luPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUub3B0aW9ucyxuPXthcHBLZXk6dC5hcHBLZXksYWNjb3VudDp0LmFjY291bnQsZGV2aWNlSWQ6by5kZXZpY2VJZCxjaGF0cm9vbUlkOnQuY2hhdHJvb21JZCxzZXNzaW9uOmUuZ2VuU2Vzc2lvbktleSgpfTtyZXR1cm4gbj1pLm1lcmdlKG4saS5maWx0ZXJPYmoodCxcImNoYXRyb29tTmljayBjaGF0cm9vbUF2YXRhciBjaGF0cm9vbUN1c3RvbSBjaGF0cm9vbUVudGVyQ3VzdG9tXCIpKSx7dHlwZToxLGxvZ2luOm4saW1Mb2dpbjplLmFzc2VtYmxlSU1Mb2dpbigpfX0sci5hZnRlckxvZ2luPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLmNoYXRyb29tO3QuY2hhdHJvb209bix0Lm5vdGlmeUxvZ2luKCl9LHIua2lja2VkUmVhc29ucz1bXCJcIixcImNoYXRyb29tQ2xvc2VkXCIsXCJtYW5hZ2VyS2lja1wiLFwic2FtZVBsYXRmb3JtS2lja1wiLFwic2lsZW50bHlLaWNrXCIsXCJibGFja2VkXCJdLHIua2lja2VkTWVzc2FnZXM9W1wiXCIsXCLogYrlpKnlrqTlhbPpl63kuoZcIixcIuiiq+aIv+S4u+aIluiAheeuoeeQhuWRmOi4ouWHulwiLFwi5LiN5YWB6K645ZCM5LiA5Liq5biQ5Y+35Zyo5aSa5Liq5Zyw5pa55ZCM5pe255m75b2VXCIsXCLmgoTmgoTooqvouKJcIixcIuiiq+aLiem7keS6hlwiXX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMjIpLmZuO3IucmVmcmVzaFNvY2tldFVybD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5zb2NrZXRVcmxzPWUuc29ja2V0VXJsc0JhY2t1cC5zbGljZSgwKSxlLmNvbm5lY3RUb1VybChlLmdldE5leHRTb2NrZXRVcmwoKSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyMikuZm4sbz1uKDQ0KTtyLm9uQ2hhdHJvb21NZW1iZXJzSW5mbz1yLm9uQ2hhdHJvb21NZW1iZXJzPWZ1bmN0aW9uKGUpe2UuZXJyb3J8fChlLm9iai5tZW1iZXJzPW8ucmV2ZXJzZU1lbWJlcnMoZS5jb250ZW50Lm1lbWJlcnMpKX0sci5vbk1hcmtDaGF0cm9vbU1lbWJlcj1mdW5jdGlvbihlKXtlLmVycm9yfHwoZS5vYmoubWVtYmVyPW8ucmV2ZXJzZShlLmNvbnRlbnQuY2hhdHJvb21NZW1iZXIpKX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDIyKS5mbixvPW4oMSk7ci5jb21wbGV0ZU1zZz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2UuY2hhdHJvb21JZD10LmNoYXRyb29tLmlkLGUuZnJvbT10Lm9wdGlvbnMuYWNjb3VudCxlLmZyb21DbGllbnRUeXBlPVwiV2ViXCIsZS50aW1lfHwoZS50aW1lPStuZXcgRGF0ZSl9LHIub25Nc2c9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXQubWVzc2FnZS5yZXZlcnNlKGUuY29udGVudC5tc2cpO3QuY2hlY2tNc2dVbmlxdWUobikmJih0Lm1zZ0J1ZmZlci5wdXNoKG4pLHQubXNnRmx1c2hUaW1lcnx8dC5zdGFydE1zZ0ZsdXNoVGltZXIoKSl9LHIuc3RhcnRNc2dGbHVzaFRpbWVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUub3B0aW9ucztlLm1zZ0ZsdXNoVGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBuPWUubXNnQnVmZmVyLnNwbGljZSgwLHQubXNnQnVmZmVyU2l6ZSk7ZS5vcHRpb25zLm9ubXNncyhuKSxlLm1zZ0J1ZmZlci5sZW5ndGg/ZS5zdGFydE1zZ0ZsdXNoVGltZXIoKTpkZWxldGUgZS5tc2dGbHVzaFRpbWVyfSx0Lm1zZ0J1ZmZlckludGVydmFsKX0sci5jaGVja01zZ1VuaXF1ZT1vLmdlbkNoZWNrVW5pcXVlRnVuYyhcImlkQ2xpZW50XCIpLHIub25TZW5kTXNnPWZ1bmN0aW9uKGUpe3ZhciB0PWUub2JqLm1zZztlLmVycm9yP3Quc3RhdHVzPVwiZmFpbFwiOih0PWUuY29udGVudC5tc2csdC5zdGF0dXM9XCJzdWNjZXNzXCIpLHQ9dGhpcy5tZXNzYWdlLnJldmVyc2UodCksZS5vYmo9dH0sci5vbkhpc3RvcnlNc2dzPWZ1bmN0aW9uKGUpe2UuZXJyb3J8fChlLm9iai5tc2dzPXRoaXMubWVzc2FnZS5yZXZlcnNlTXNncyhlLmNvbnRlbnQubXNncykpfX1dKX0pO1xyXG4iXX0=