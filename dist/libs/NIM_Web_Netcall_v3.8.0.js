"use strict";

var _promise = require('./../npm/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('./../npm/babel-runtime/core-js/object/keys.js');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('./../npm/babel-runtime/core-js/json/stringify.js');

var _stringify2 = _interopRequireDefault(_stringify);

var _setPrototypeOf = require('./../npm/babel-runtime/core-js/object/set-prototype-of.js');

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _getOwnPropertySymbols = require('./../npm/babel-runtime/core-js/object/get-own-property-symbols.js');

var _getOwnPropertySymbols2 = _interopRequireDefault(_getOwnPropertySymbols);

var _create = require('./../npm/babel-runtime/core-js/object/create.js');

var _create2 = _interopRequireDefault(_create);

var _assign = require('./../npm/babel-runtime/core-js/object/assign.js');

var _assign2 = _interopRequireDefault(_assign);

var _typeof2 = require('./../npm/babel-runtime/helpers/typeof.js');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) && "object" == (typeof module === "undefined" ? "undefined" : (0, _typeof3.default)(module)) ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) ? exports.Netcall = e() : t.Netcall = e();
}(undefined, function () {
  return function (t) {
    function e(i) {
      if (n[i]) return n[i].exports;var o = n[i] = { exports: {}, id: i, loaded: !1 };return t[i].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;
    }var n = {};return e.m = t, e.c = n, e.p = "", e(0);
  }({ 0: function _(t, e, n) {
      "use strict";
      var i = _assign2.default || function (t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = arguments[e];for (var i in n) {
            Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
          }
        }return t;
      },
          o = n(153),
          r = n(154),
          s = n(162),
          a = n(151),
          c = n(130),
          u = n(163),
          l = n(164),
          h = n(165),
          d = void 0,
          p = i({}, c, { webgl: o, install: function install(t, e) {
          r.install(t, e), s.install(t, e), t.parser.mixin({ configMap: u, serializeMap: l, unserializeMap: h }), a.install(t, e);
        }, getInstance: function getInstance(t) {
          return d || (d = new a(t)), d;
        }, destroy: function destroy() {
          d && (d.destroy(), d = null);
        } });t.exports = p;
    }, 5: function _(t, e, n) {
      (function (e) {
        "use strict";
        var n = "'f1962e09b29190c9e61571dfc860f9795159a432",
            i = "f1962e0'",
            o = "3.8.0",
            r = "2.0.0.524",
            s = 35,
            a = 1,
            c = "https://lbs.netease.im/lbs/webconf.jsp",
            u = "development" === e.env.NODE_ENV ? 6e3 : 42e3,
            l = { info: { hash: n, shortHash: i, version: o, sdkVersion: s, protocolVersion: a }, agentVersion: r, lbsUrl: c, connectTimeout: u, xhrTimeout: u, socketTimeout: u, reconnectionDelay: 656.25, reconnectionDelayMax: u, reconnectionJitter: .1, heartbeatInterval: 18e4, cmdTimeout: u };l.formatSocketUrl = function (t) {
          var e = t.url,
              n = t.secure,
              i = n ? "https" : "http";return e.indexOf("http") === -1 ? i + "://" + e : e;
        }, l.fileServerUrl = "https://nos.netease.com", l.replaceUrl = "http://nos.netease.im", l.genUploadUrl = function (t) {
          return l.uploadUrl ? l.uploadUrl + "/" + t : l.fileServerUrl + "/" + t;
        }, l.genDownloadUrl = function (t, e) {
          return l.downloadUrl ? l.replaceUrl + "/" + t + "/" + e : l.fileServerUrl + "/" + t + "/" + e;
        }, t.exports = l;
      }).call(e, n(10));
    }, 10: function _(t, e) {
      function n() {
        throw new Error("setTimeout has not been defined");
      }function i() {
        throw new Error("clearTimeout has not been defined");
      }function o(t) {
        if (l === setTimeout) return setTimeout(t, 0);if ((l === n || !l) && setTimeout) return l = setTimeout, setTimeout(t, 0);try {
          return l(t, 0);
        } catch (e) {
          try {
            return l.call(null, t, 0);
          } catch (e) {
            return l.call(this, t, 0);
          }
        }
      }function r(t) {
        if (h === clearTimeout) return clearTimeout(t);if ((h === i || !h) && clearTimeout) return h = clearTimeout, clearTimeout(t);try {
          return h(t);
        } catch (e) {
          try {
            return h.call(null, t);
          } catch (e) {
            return h.call(this, t);
          }
        }
      }function s() {
        m && p && (m = !1, p.length ? f = p.concat(f) : g = -1, f.length && a());
      }function a() {
        if (!m) {
          var t = o(s);m = !0;for (var e = f.length; e;) {
            for (p = f, f = []; ++g < e;) {
              p && p[g].run();
            }g = -1, e = f.length;
          }p = null, m = !1, r(t);
        }
      }function c(t, e) {
        this.fun = t, this.array = e;
      }function u() {}var l,
          h,
          d = t.exports = {};!function () {
        try {
          l = "function" == typeof setTimeout ? setTimeout : n;
        } catch (e) {
          l = n;
        }try {
          h = "function" == typeof clearTimeout ? clearTimeout : i;
        } catch (e) {
          h = i;
        }
      }();var p,
          f = [],
          m = !1,
          g = -1;d.nextTick = function (t) {
        var e = new Array(arguments.length - 1);if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) {
          e[n - 1] = arguments[n];
        }f.push(new c(t, e)), 1 !== f.length || m || o(a);
      }, c.prototype.run = function () {
        this.fun.apply(null, this.array);
      }, d.title = "browser", d.browser = !0, d.env = {}, d.argv = [], d.version = "", d.versions = {}, d.on = u, d.addListener = u, d.once = u, d.off = u, d.removeListener = u, d.removeAllListeners = u, d.emit = u, d.binding = function (t) {
        throw new Error("process.binding is not supported");
      }, d.cwd = function () {
        return "/";
      }, d.chdir = function (t) {
        throw new Error("process.chdir is not supported");
      }, d.umask = function () {
        return 0;
      };
    }, 26: function _(t, e, n) {
      "use strict";
      function i() {}function o(t, e, n) {
        this.fn = t, this.context = e, this.once = n || !1;
      }function r() {
        this._events = new i(), this._eventsCount = 0;
      }var s = Object.prototype.hasOwnProperty,
          a = "~";_create2.default && (i.prototype = (0, _create2.default)(null), new i().__proto__ || (a = !1)), r.prototype.eventNames = function () {
        var t,
            e,
            n = [];if (0 === this._eventsCount) return n;for (e in t = this._events) {
          s.call(t, e) && n.push(a ? e.slice(1) : e);
        }return _getOwnPropertySymbols2.default ? n.concat((0, _getOwnPropertySymbols2.default)(t)) : n;
      }, r.prototype.listeners = function (t, e) {
        var n = a ? a + t : t,
            i = this._events[n];if (e) return !!i;if (!i) return [];if (i.fn) return [i.fn];for (var o = 0, r = i.length, s = new Array(r); o < r; o++) {
          s[o] = i[o].fn;
        }return s;
      }, r.prototype.emit = function (t, e, n, i, o, r) {
        var s = a ? a + t : t;if (!this._events[s]) return !1;var c,
            u,
            l = this._events[s],
            h = arguments.length;if (l.fn) {
          switch (l.once && this.removeListener(t, l.fn, void 0, !0), h) {case 1:
              return l.fn.call(l.context), !0;case 2:
              return l.fn.call(l.context, e), !0;case 3:
              return l.fn.call(l.context, e, n), !0;case 4:
              return l.fn.call(l.context, e, n, i), !0;case 5:
              return l.fn.call(l.context, e, n, i, o), !0;case 6:
              return l.fn.call(l.context, e, n, i, o, r), !0;}for (u = 1, c = new Array(h - 1); u < h; u++) {
            c[u - 1] = arguments[u];
          }l.fn.apply(l.context, c);
        } else {
          var d,
              p = l.length;for (u = 0; u < p; u++) {
            switch (l[u].once && this.removeListener(t, l[u].fn, void 0, !0), h) {case 1:
                l[u].fn.call(l[u].context);break;case 2:
                l[u].fn.call(l[u].context, e);break;case 3:
                l[u].fn.call(l[u].context, e, n);break;case 4:
                l[u].fn.call(l[u].context, e, n, i);break;default:
                if (!c) for (d = 1, c = new Array(h - 1); d < h; d++) {
                  c[d - 1] = arguments[d];
                }l[u].fn.apply(l[u].context, c);}
          }
        }return !0;
      }, r.prototype.on = function (t, e, n) {
        var i = new o(e, n || this),
            r = a ? a + t : t;return this._events[r] ? this._events[r].fn ? this._events[r] = [this._events[r], i] : this._events[r].push(i) : (this._events[r] = i, this._eventsCount++), this;
      }, r.prototype.once = function (t, e, n) {
        var i = new o(e, n || this, !0),
            r = a ? a + t : t;return this._events[r] ? this._events[r].fn ? this._events[r] = [this._events[r], i] : this._events[r].push(i) : (this._events[r] = i, this._eventsCount++), this;
      }, r.prototype.removeListener = function (t, e, n, o) {
        var r = a ? a + t : t;if (!this._events[r]) return this;if (!e) return 0 === --this._eventsCount ? this._events = new i() : delete this._events[r], this;var s = this._events[r];if (s.fn) s.fn !== e || o && !s.once || n && s.context !== n || (0 === --this._eventsCount ? this._events = new i() : delete this._events[r]);else {
          for (var c = 0, u = [], l = s.length; c < l; c++) {
            (s[c].fn !== e || o && !s[c].once || n && s[c].context !== n) && u.push(s[c]);
          }u.length ? this._events[r] = 1 === u.length ? u[0] : u : 0 === --this._eventsCount ? this._events = new i() : delete this._events[r];
        }return this;
      }, r.prototype.removeAllListeners = function (t) {
        var e;return t ? (e = a ? a + t : t, this._events[e] && (0 === --this._eventsCount ? this._events = new i() : delete this._events[e])) : (this._events = new i(), this._eventsCount = 0), this;
      }, r.prototype.off = r.prototype.removeListener, r.prototype.addListener = r.prototype.on, r.prototype.setMaxListeners = function () {
        return this;
      }, r.prefixed = a, r.EventEmitter = r, t.exports = r;
    }, 130: function _(t, e) {
      "use strict";
      e.__esModule = !0;var n,
          i,
          o = { NETCALL_TYPE_AUDIO: 1, NETCALL_TYPE_VIDEO: 2, NETCALL_CONTROL_COMMAND_NOTIFY_AUDIO_ON: 1, NETCALL_CONTROL_COMMAND_NOTIFY_AUDIO_OFF: 2, NETCALL_CONTROL_COMMAND_NOTIFY_VIDEO_ON: 3, NETCALL_CONTROL_COMMAND_NOTIFY_VIDEO_OFF: 4, NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO: 5, NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO_AGREE: 6, NETCALL_CONTROL_COMMAND_SWITCH_AUDIO_TO_VIDEO_REJECT: 7, NETCALL_CONTROL_COMMAND_SWITCH_VIDEO_TO_AUDIO: 8, NETCALL_CONTROL_COMMAND_BUSY: 9, NETCALL_CONTROL_COMMAND_SELF_CAMERA_INVALID: 10, NETCALL_CONTROL_COMMAND_SELF_ON_BACKGROUND: 11, NETCALL_CONTROL_COMMAND_START_NOTIFY_RECEIVED: 12, NETCALL_CONTROL_COMMAND_NOTIFY_RECORD_START: 13, NETCALL_CONTROL_COMMAND_NOTIFY_RECORD_STOP: 14, DEVICE_TYPE_AUDIO_IN: 0, DEVICE_TYPE_AUDIO_OUT_LOCAL: 1, DEVICE_TYPE_AUDIO_OUT_CHAT: 2, DEVICE_TYPE_VIDEO: 3, DEVICE_STATUS_NO_CHANGE: 0, DEVICE_STATUS_CHANGE: 1, DEVICE_STATUS_WORK_REMOVE: 2, DEVICE_STATUS_RESET: 4, DEVICE_STATUS_START: 8, DEVICE_STATUS_END: 16, CHAT_VIDEO_QUALITY_NORMAL: 0, CHAT_VIDEO_QUALITY_LOW: 1, CHAT_VIDEO_QUALITY_MEDIUM: 2, CHAT_VIDEO_QUALITY_HIGH: 3, CHAT_VIDEO_QUALITY_480P: 4, CHAT_VIDEO_QUALITY_720P: 5, CHAT_VIDEO_FRAME_RATE_NORMAL: 0, CHAT_VIDEO_FRAME_RATE_5: 1, CHAT_VIDEO_FRAME_RATE_10: 2, CHAT_VIDEO_FRAME_RATE_15: 3, CHAT_VIDEO_FRAME_RATE_20: 4, CHAT_VIDEO_FRAME_RATE_25: 5, CHAT_VIDEO_SCALE_None: 0, CHAT_VIDEO_SCALE_1x1: 1, CHAT_VIDEO_SCALE_4x3: 2, CHAT_VIDEO_SCALE_16x9: 3, CHAT_USER_LEFT_TIMEOUT: -1, CHAT_USER_LEFT_NORMAL: 0, CHAT_NET_STATUS_VERY_GOOD: 0, CHAT_NET_STATUS_GOOD: 1, CHAT_NET_STATUS_BAD: 2, CHAT_NET_STATUS_VERY_BAD: 3, CLIENT_TYPE_AOS: 1, CLIENT_TYPE_IOS: 2, CLIENT_TYPE_PC: 4, CLIENT_TYPE_WINPHONE: 8, CLIENT_TYPE_WEB: 16, CLIENT_TYPE_REST: 32, LAYOUT_SPLITBOTTOMHORFLOATING: 0, LAYOUT_SPLITTOPHORFLOATING: 1, LAYOUT_SPLITLATTICETILE: 2, LAYOUT_SPLITLATTICECUTTINGTILE: 3 };o.deviceTypeMap = (n = {}, n[o.DEVICE_TYPE_AUDIO_IN] = "audioIn", n[o.DEVICE_TYPE_AUDIO_OUT_CHAT] = "audioOut", n[o.DEVICE_TYPE_VIDEO] = "video", n), o.getDeviceTypeStr = function (t) {
        return o.deviceTypeMap[t];
      }, o.deviceStatusMap = (i = {}, i[o.DEVICE_STATUS_NO_CHANGE] = "noChange", i[o.DEVICE_STATUS_CHANGE] = "change", i[o.DEVICE_STATUS_WORK_REMOVE] = "workRemove", i[o.DEVICE_STATUS_RESET] = "reset", i[o.DEVICE_STATUS_START] = "start", i[o.DEVICE_STATUS_END] = "end", i), o.getDeviceStatusStr = function (t) {
        return o.deviceStatusMap[t];
      }, e["default"] = o, t.exports = e["default"];
    }, 151: function _(t, e, n) {
      "use strict";
      function i(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
      }function o(t, e) {
        if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "function" != typeof e ? t : e;
      }function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)));t.prototype = (0, _create2.default)(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(t, e) : t.__proto__ = e);
      }var s = _assign2.default || function (t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = arguments[e];for (var i in n) {
            Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
          }
        }return t;
      },
          a = void 0,
          c = void 0,
          u = n(26),
          l = n(158),
          h = n(5),
          d = n(159),
          p = n(160),
          f = n(152),
          m = n(130),
          g = h.agentVersion,
          v = function (t) {
        function e(n) {
          i(this, e);var r = o(this, t.call(this));return r.setUtil(a), a.undef(n.heartbeat) && (n.heartbeat = !0), a.merge(r, n), r.init(), r;
        }return r(e, t), e;
      }(u);v.install = function (t) {
        a = t.util, c = t.Promise, d.install(t), p.install(t), f.install(t);
      };var y = v.prototype;y.init = function () {
        this.signal = null, this.signalInited = !1, this.localStreamInfo = null, this.resetStatus(), this.initProtocol();
      }, y.resetStatus = function () {
        this.channelId = null, this.channelName = null, this.type = null, this.target = null, this.sessionConfig = null, this.isCaller = !1, this.callee = null, this.remoteStreamInfo = {}, this.calling = !1, this.callAccepted = !1, this.callerInfo = null, this.nim.protocol.setCurrentNetcall(), this.needQueryAccountMap = {};
      }, y.initProtocol = function () {
        var t = this.nim;this.account = this.nim.account, t.on("beCalled", this.onBeCalled.bind(this)), t.on("notifyCalleeAck", this.onCalleeAck.bind(this)), t.on("notifyHangup", this.onHangup.bind(this)), t.on("notifyUploadLog", this.uploadLog.bind(this)), t.on("netcallControl", this.onNetcallControl.bind(this)), t.on("notifyCalleeAckSync", this.onCalleeAckSync.bind(this)), t.on("notifyJoin", this.onNotifyJoin.bind(this));
      }, y.getAccount = function () {
        return this.nim.account;
      }, y.isCurrentChannelId = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return this.channelId && this.channelId === t.channelId;
      }, y.notCurrentChannelId = function (t) {
        return !this.isCurrentChannelId(t);
      }, y.rejectWithNoSignal = function () {
        return this.resetWhenHangup(), this.stopSignal(), c.reject({ code: "noConnection" });
      }, y.initSignal = function () {
        var t = this;return this.signalInited ? c.resolve() : (this.signal && this.stopSignal(), new c(function (e, n) {
          var i = t.signal = new d({ url: l.signalUrl, client: t, kickLast: t.kickLast, account: t.getAccount(), heartbeat: t.heartbeat });i.on("init", function (i) {
            return t.log(i), t.checkAgentVersion(i.version) ? (t.localStreamInfo = i, t.signalInited = !0, void e()) : (t.log("插件版本有更新，请下载最新的插件再使用音视频功能"), t.stopSignal(), i.error = "请安装最新版插件，方可使用视频功能", i.errorType = "agent_update", void n(i));
          }), i.on("initError", function (e) {
            t.log(e), e = e || {}, 417 === e.code && (e.error = "设备被别的程序占用中, 请检查重试", e.errorType = "device_busy"), "noPC" === e.code && (e.error = "请安装插件PC Agent，方可使用音视频功能", e.errorType = "agent_empty"), n(e), t.rejectWithNoSignal();
          }), i.on("close", function () {
            t.emit("signalClosed"), t.stopSignal();
          }), i.on("devices", function (e) {
            t.emit("devices", e);
          }), i.on("login", function (e) {
            t.emit("sessionStarted", e);
          }), i.on("deviceStatus", function (e) {
            t.emit("deviceStatus", e);
          }), i.on("userJoined", t.onUserJoin.bind(t)), i.on("userLeft", t.onUserLeft.bind(t)), i.on("logUploaded", t.onLogUploaded.bind(t)), i.on("netStatus", function (e) {
            var n = e.id,
                i = e.status;t.emit("netStatus", { account: t.getAccountWithUid(n), status: i });
          }), i.on("statistics", function (e) {
            t.emit("statistics", e);
          }), i.on("audioVolume", function (e) {
            var n = e.self,
                i = e.receiver,
                o = { self: n };i && i.forEach(function (e) {
              var n = e.id,
                  i = e.status;o[t.getAccountWithUid(n)] = { status: i };
            }), t.emit("audioVolume", o);
          }), i.on("error", t.onError.bind(t)), i.on("recordMp4", t.onRecordMp4.bind(t)), i.on("heartBeatError", t.onError.bind(t));
        }));
      }, y.checkAgentVersion = function () {
        for (var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "0.0.0.0", e = t.split("."), n = g.split("."), i = 0; i < e.length; i++) {
          if (e[i] < n[i]) return !1;
        }return !0;
      }, y.stopSignal = function () {
        this.signal && (this.signal.stopSession(), this.signal.destroy(), this.signal = null, this.signalInited = !1, this.stopLocalStream(), this.stopRemoteStream());
      }, y.initNetcall = function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = e.type,
            i = e.pushConfig;return this.type = n, this.nim.initNetcall({ type: n, accounts: [this.callee], pushConfig: i }).then(function (e) {
          return t.callerInfo = e, t.channelId = e.channelId, c.resolve(e);
        }, function (e) {
          throw t.resetWhenHangup(), e;
        });
      }, y.initSession = function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};if (this.signalInited) {
          var n = this.isCaller ? this.callerInfo : e.beCalledInfo;this.parseAccountUidMap(n.accountUidMap);var i = this.sessionConfig || {};return this.signal.startSession(s({}, n, i)).then(function () {
            return { channelId: t.channelId };
          });
        }return this.rejectWithNoSignal();
      }, y.call = function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return new c(function (n, i) {
          if (!t.signalInited || t.calling) return t.resetStatus(), i({ type: "statusNotMatch" });var o = e.account,
              r = e.type,
              s = e.pushConfig,
              a = e.sessionConfig;return t.calling = !0, t.isCaller = !0, t.callee = t.target = o, t.sessionConfig = a, o ? t.initNetcall({ type: r, pushConfig: s }).then(function (t) {
            n(t);
          })["catch"](function (t) {
            i(t);
          }) : (t.resetStatus(), void i({ code: "noCalleeAccount" }));
        });
      }, y.onBeCalled = function (t) {
        this.log("beCalling", t), this.emit("beCalling", t);
      }, y.response = function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = e.beCalledInfo;if (!n) return c.resolve();var i = n.accepted = e.accepted !== !1;return i ? (this.type = n.type, this.channelId = n.channelId, this.target = n.account, this.calling = !0) : (this.log("rejectNetcall", n), this.packNetcallRecord({ type: n.type, channelId: n.channelId, isCaller: !1, target: n.account, recordType: "rejectNetcall" })), this.nim.calleeAck(n).then(function () {
          if (i) return t.sessionConfig = e.sessionConfig || {}, t.initSession({ beCalledInfo: n });
        }, function (e) {
          throw t.log(e), e;
        });
      }, y.onCalleeAck = function (t) {
        if (!this.notCurrentChannelId(t)) return t.accepted ? this.initSession({ type: t.type }) : (this.log("netcallRejected", t), this.packNetcallRecord({ type: t.type, channelId: t.channelId, isCaller: !0, target: t.account, recordType: "netcallRejected" }), this.resetWhenHangup(), this.emit("callRejected", t), void 0);
      }, y.onUserJoin = function (t) {
        this.log("onUserJoin ", t);var e = t.account,
            n = t.uid;return !e && n && (t.account = e = this.getAccountWithUid(n)), e ? void this.emitUserJoin(t) : (this.needQueryAccountMap[n] = t, void this.nim.queryAccountUidMap(this.channelName, [n]));
      }, y.emitUserJoin = function (t) {
        var e = t.uid,
            n = t.isMeeting;this.remoteStreamInfo[e] = t, n ? this.emit("joinChannel", { type: t.type, uid: t.uid, account: t.account }) : (this.callAccepted || (this.callAccepted = !0), this.emit("callAccepted", { type: t.type, account: t.account, uid: t.uid }));
      }, y.onUserLeft = function (t) {
        var e = this,
            n = t.account,
            i = t.uid,
            o = t.isMeeting;o ? (!n && i && (t.account = this.getAccountWithUid(i)), this.emit("leaveChannel", { account: t.account })) : (this.log("on user left", t), this.calling && setTimeout(function () {
          t.account = e.getAccountWithUid(t.uid), e.onHangup(t);
        }, 1e3));
      }, y.onNetcallControl = function (t) {
        this.emit("control", t);
      }, y.onCalleeAckSync = function (t) {
        this.emit("callerAckSync", t), this.isCurrentChannelId(t) && this.resetWhenHangup();
      }, y.onNotifyJoin = function (t) {
        var e = t.accountUidMap,
            n = this.needQueryAccountMap;this.parseAccountUidMap(e);for (var i in e) {
          var o = i,
              r = e[i];if (r in n) {
            var s = n[r];s.account = o, this.emitUserJoin(s), delete n[r];
          }
        }
      }, y.onHangup = function (t) {
        this.emit("hangup", t), this.isCurrentChannelId(t) && this.resetWhenHangup();
      }, y.hangup = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            e = t.channelId;!e && this.calling && this.channelId && (e = this.channelId), e && this.nim.hangup({ channelId: e }), e === this.channelId && (this.isCaller && !this.callAccepted && (this.log("cancelNetcallBeforeAccept", { channelId: e }), this.packNetcallRecord({ recordType: "cancelNetcallBeforeAccept" })), this.resetWhenHangup());
      }, y.packNetcallRecord = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            e = t.recordType,
            n = a.exist(t.type) ? t.type : this.type,
            i = a.exist(t.channelId) ? t.channelId : this.channelId,
            o = a.exist(t.duration) ? t.duration : 0,
            r = a.exist(t.isCaller) ? t.isCaller : this.isCaller,
            s = a.exist(t.target) ? t.target : this.target,
            c = this.getAccount(),
            u = r ? c : s,
            l = r ? s : c,
            h = +new Date();this.nim.protocol.onMsg({ content: { msg: { attach: (0, _stringify2.default)({ data: { calltype: n, channel: i, duration: o, ids: [c, s], time: h }, id: e }), from: u, fromClientType: r ? 16 : 0, fromDeviceId: "", fromNick: "", idClient: a.guid(), idServer: a.guid(), scene: 0, time: h, to: l, type: 5 } } });
      }, y.resetWhenHangup = function () {
        this.resetStatus(), this.signalInited && this.signal.stopSession();
      }, y.control = function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = e.command,
            i = e.channelId;if (i || (i = this.channelId), n && i) return this.nim.netcallControl({ channelId: i, type: n })["catch"](function (e) {
          throw t.log(e), e;
        });
      }, y.setVideoViewSize = function (t) {
        return this.signalInited ? this.signal.setVideoViewSize(t) : this.rejectWithNoSignal();
      }, y.setVideoViewRemoteSize = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return this.signalInited ? (t.account && (t.id = this.getUidWithAccount(t.account)), this.signal.setVideoViewRemoteSize(t)) : this.rejectWithNoSignal();
      }, y.setVideoScale = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return this.signalInited ? (t.account && (t.id = this.getUidWithAccount(t.account)), this.signal.setVideoScale(t)) : this.rejectWithNoSignal();
      }, y.startLocalStream = function (t) {
        var e = this;if (this.signalInited && !this.stream && this.localStreamInfo) {
          var n = t || this.container,
              i = this.localStreamInfo.port;this.stream = new p({ client: this, url: l.genStreamUrl(i), container: n, mirror: this.mirror }), this.stream.on("resize", function (t) {
            e.emit("streamResize", t);
          }), this.stream.on("error", function (t) {
            e.emit("error", t);
          });
        }
      }, y.stopLocalStream = function () {
        this.stream && (this.stream.destroy(), this.stream = null);
      }, y.startRemoteStream = function (t) {
        var e;t ? (e = t.uid || this.getUidWithAccount(t.account), e || t.node ? this.addRemoteStream(this.remoteStreamInfo[e], t.node) : this.nim.logger.error("不传参数且点对点模式实例化Netcall必须设置remoteContainer与target；传参数必须包含account，node")) : (e = this.getUidWithAccount(this.target), this.remoteContainer || this.target || this.nim.logger.error("不传参数且点对点模式实例化Netcall必须设置remoteContainer与target；传参数必须包含account，node"), !this.getRemoteStream(e) && this.remoteStreamInfo[e] && this.addRemoteStream(this.remoteStreamInfo[e]));
      }, y.stopRemoteStream = function (t) {
        return t ? this.removeRemoteStream(t) : this.removeRemoteStreams();
      }, y.addRemoteStream = function (t, e) {
        var n = this,
            i = t.uid,
            o = t.port;this.remoteStreams || (this.remoteStreams = {});var r = this.remoteStreams[i];r && r.destroy(), r = this.remoteStreams[i] = new p({ client: this, isRemote: !0, url: l.genStreamUrl(o), container: e || this.remoteContainer, mirror: this.mirrorRemote }), r.on("resize", function (t) {
          n.emit("remoteStreamResize", t);
        }), r.on("error", function (t) {
          n.emit("error", t);
        });
      }, y.removeRemoteStreams = function () {
        var t = this;this.remoteStreams && (0, _keys2.default)(this.remoteStreams).forEach(function (e) {
          t.remoteStreams[e].destroy();
        }), this.remoteStreams = {};
      }, y.removeRemoteStream = function (t) {
        var e = this.getUidWithAccount(t);if (!this.remoteStreams[e]) {
          var n = { code: "accountNotMatch" };throw n;
        }this.remoteStreams[e].destroy();
      }, y.getRemoteStream = function (t) {
        var e = this.getUidWithAccount(t);return this.remoteStreams && this.remoteStreams[e];
      }, y.suspendLocalStream = function () {
        this.stream && this.stream.suspend();
      }, y.resumeLocalStream = function () {
        this.stream && this.stream.resume();
      }, y.suspendRemoteStream = function (t) {
        var e = this.getRemoteStream(t || this.target);e && e.suspend();
      }, y.resumeRemoteStream = function (t) {
        var e = this.getRemoteStream(t || this.target);e && e.resume();
      }, y.switchVideoToAudio = function () {
        var t = this;return this.signalInited ? this.signal.switchVideoToAudio().then(function () {
          t.type = m.NETCALL_TYPE_AUDIO;
        }) : this.rejectWithNoSignal();
      }, y.switchAudioToVideo = function () {
        var t = this;return this.signalInited ? this.signal.switchAudioToVideo().then(function () {
          t.type = m.NETCALL_TYPE_VIDEO;
        }) : this.rejectWithNoSignal();
      }, y.getDevicesOfType = function (t) {
        return this.signalInited ? this.signal.getDevicesOfType(t) : this.rejectWithNoSignal();
      }, y.getStoredDevicesOfType = function (t) {
        return this.signalInited ? (t = +t, t === m.DEVICE_TYPE_AUDIO_OUT_LOCAL && (t = m.DEVICE_TYPE_AUDIO_OUT_CHAT), this.signal.devicesMap[t]) : void this.rejectWithNoSignal();
      }, y.hasDevicesOfType = function (t) {
        return this.getStoredDevicesOfType(t);
      }, y.getStartedDeviceOfType = function (t) {
        return this.signalInited ? this.signal.deviceMap[t] : this.rejectWithNoSignal();
      }, y.hasStartedDeviceOfType = function (t) {
        return this.getStartedDeviceOfType(t);
      }, y.stopDevice = function (t) {
        return this.signalInited ? this.hasStartedDeviceOfType(t) ? this.signal.stopDevice(t) : c.resolve() : this.rejectWithNoSignal();
      }, y.startDevice = function (t) {
        var e = t.type,
            n = t.device;if (this.signalInited) {
          if (a.exist(e) && !n) {
            if (this.hasStartedDeviceOfType(e)) return c.resolve();this.hasDevicesOfType(e) && (n = t.device = this.getStoredDevicesOfType(e)[0]);
          }return n ? this.signal.startDevice(t) : c.reject(s({ type: "noDevice" }, t));
        }return this.rejectWithNoSignal();
      }, y.setSessionVideoQuality = function (t) {
        return this.signalInited ? this.signal.setVideoQuality(t) : this.rejectWithNoSignal();
      }, y.setSessionVideoFrameRate = function (t) {
        return this.signalInited ? this.signal.setVideoFrameRate(t) : this.rejectWithNoSignal();
      }, y.setSessionVideoBitrate = function (t) {
        return this.signalInited ? this.signal.setVideoBitrate(t) : this.rejectWithNoSignal();
      }, y.setCaptureVolume = function (t) {
        return this.signalInited ? this.signal.setCaptureVolume(t) : this.rejectWithNoSignal();
      }, y.setPlayVolume = function (t) {
        return this.signalInited ? this.signal.setPlayVolume(t) : this.rejectWithNoSignal();
      }, y.netDetect = function () {
        return this.signalInited ? this.signal.netDetect(this.nim.options.appKey) : this.rejectWithNoSignal();
      }, y.uploadLog = function () {
        var t = this;this.signalInited && this.nim.getSimpleNosToken().then(function (e) {
          t.signal.uploadLog(e);
        }, function (e) {
          t.log(e);
        });
      }, y.onLogUploaded = function (t) {
        this.nim.uploadSdkLogUrl(t);
      }, y.log = function () {
        var t = this.nim.logger;t.log.apply(t, arguments);
      }, y.info = function () {
        var t = this.nim.logger;t.info.apply(t, arguments);
      }, y.parseAccountUidMap = function (t) {
        var e = this;(0, _keys2.default)(t).forEach(function (n) {
          e.addAccountUidMap({ account: n, uid: t[n] });
        });
      }, y.addAccountUidMap = function (t) {
        var e = t.account,
            n = t.uid;this.uidAccountMap || (this.uidAccountMap = {}), this.uidAccountMap[n] = e, this.accountUidMap || (this.accountUidMap = {}), this.accountUidMap[e] = n;
      }, y.getAccountWithUid = function (t) {
        if (this.uidAccountMap) return this.uidAccountMap[t];
      }, y.getUidWithAccount = function (t) {
        if (this.accountUidMap) return this.accountUidMap[t];
      }, y.onError = function (t) {
        this.emit("error", t);
      }, y.setAudioBlack = function (t) {
        var e = this.getUidWithAccount(t);if (e) return this.signal.setAudioBlack(this.getUidWithAccount(t), 1);var n = { code: "accountNotMatch" };c.reject(n);
      }, y.setAudioStart = function (t) {
        var e = this.getUidWithAccount(t);if (e) return this.signal.setAudioBlack(this.getUidWithAccount(t), 0);var n = { code: "accountNotMatch" };c.reject(n);
      }, y.startRecordMp4 = function (t) {
        return a.verifyOptions(t, "path"), this.signal.startRecordMp4(t);
      }, y.stopRecordMp4 = function (t) {
        return this.signal.stopRecordMp4(t);
      }, y.startRecordAac = function (t) {
        return a.verifyOptions(t, "path"), this.signal.startRecordAac(t);
      }, y.stopRecordAac = function (t) {
        return this.signal.stopRecordAac(t);
      }, y.onRecordMp4 = function (t, e) {
        t.type = e, this.emit("recordMp4", t);
      }, y.destroy = function () {}, t.exports = v, n(157);
    }, 152: function _(t, e, n) {
      "use strict";
      function i(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
      }function o(t, e) {
        if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "function" != typeof e ? t : e;
      }function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)));t.prototype = (0, _create2.default)(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(t, e) : t.__proto__ = e);
      }var s = void 0,
          a = n(26),
          c = n(153),
          u = n(168),
          l = n(167),
          h = function (t) {
        function e(n) {
          i(this, e);var r = o(this, t.call(this));return s.merge(r, n), r.init(), r;
        }return r(e, t), e;
      }(a);h.install = function (t) {
        s = t.util;
      };var d = h.prototype;d.init = function () {
        this.reset();
      }, d.reset = function () {
        this.width = 0, this.height = 0;
      }, d.initCanvas = function (t) {
        s.merge(this, t);var e = this.container || document.body,
            n = this.canvas;n || (n = this.canvas = document.createElement("canvas"), e.appendChild(n)), n.width = this.width, n.height = this.height;var i = this.gl;if (i || (i = this.gl = c.getWebGLContext(n)), i) i.viewport(0, 0, this.width, this.height), i.clearColor(0, 0, 0, 1), i.clear(i.COLOR_BUFFER_BIT), c.initShaders(i, u, l), this.initBuffer(i), this.initTextures(i);else {
          var o = { code: "notSupportWebGl" };this.emit("error", o);
        }
      }, d.initBuffer = function (t) {
        this.positionLocation = t.getAttribLocation(t.program, "a_position"), this.texCoordLocation = t.getAttribLocation(t.program, "a_texCoord"), this.texCoordBuffer = t.createBuffer();
      }, d.initTextures = function (t) {
        this.yTexture = this.createTexture(t.TEXTURE0), this.uTexture = this.createTexture(t.TEXTURE1), this.vTexture = this.createTexture(t.TEXTURE2);var e = t.getUniformLocation(t.program, "Ytex");t.uniform1i(e, 0);var n = t.getUniformLocation(t.program, "Utex");t.uniform1i(n, 1);var i = t.getUniformLocation(t.program, "Vtex");t.uniform1i(i, 2);
      }, d.createTexture = function (t) {
        var e = this.gl,
            n = e.createTexture();return e.activeTexture(t), e.bindTexture(e.TEXTURE_2D, n), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), n;
      }, d.destroyTextures = function () {
        var t = this.gl;t && (t.deleteTexture(this.yTexture), t.deleteTexture(this.uTexture), t.deleteTexture(this.vTexture)), this.yTexture = null, this.uTexture = null, this.vTexture = null;
      }, d.destroyBuffer = function () {
        var t = this.gl;t && this.texCoordBuffer && t.deleteBuffer(this.texCoordBuffer), this.texCoordBuffer = null;
      }, d.updateShaders = function () {
        var t = this.gl,
            e = void 0;e = this.mirror ? new Float32Array([-1, 1, 1, 0, -1, -1, 1, 1, 1, 1, 0, 0, 1, -1, 0, 1]) : new Float32Array([-1, 1, 0, 0, -1, -1, 0, 1, 1, 1, 1, 0, 1, -1, 1, 1]), t.bindBuffer(t.ARRAY_BUFFER, this.texCoordBuffer), t.bufferData(t.ARRAY_BUFFER, e, t.STATIC_DRAW);var n = e.BYTES_PER_ELEMENT;t.vertexAttribPointer(this.positionLocation, 2, t.FLOAT, !1, 4 * n, 0), t.vertexAttribPointer(this.texCoordLocation, 2, t.FLOAT, !1, 4 * n, 2 * n), t.enableVertexAttribArray(this.positionLocation), t.enableVertexAttribArray(this.texCoordLocation);
      }, d.updateTextures = function (t) {
        var e = t.y,
            n = t.u,
            i = t.v,
            o = this.gl,
            r = this.width,
            s = this.height;this.updateTexture(o.TEXTURE0, this.yTexture, e, r, s), this.updateTexture(o.TEXTURE1, this.uTexture, n, r / 2, s / 2), this.updateTexture(o.TEXTURE2, this.vTexture, i, r / 2, s / 2), o.finish();
      }, d.updateTexture = function (t, e, n, i, o) {
        var r = this.gl;r.activeTexture(t), r.bindTexture(r.TEXTURE_2D, e), r.texImage2D(r.TEXTURE_2D, 0, r.LUMINANCE, i, o, 0, r.LUMINANCE, r.UNSIGNED_BYTE, n);
      }, d.drawImage = function (t) {
        if (!this.destroyed) {
          var e = t.width,
              n = t.height,
              i = t.y,
              o = t.u,
              r = t.v;e === this.width && n === this.height || (this.width = e, this.height = n, this.clean(), this.initCanvas({ width: e, height: n }), this.emit("resize", { width: e, height: n, isRemote: this.isRemote, container: this.container })), this.updateShaders(), this.updateTextures({ y: i, u: o, v: r });var s = this.gl;s.drawArrays(s.TRIANGLE_STRIP, 0, 4);
        }
      }, d.destroy = function () {
        this.destroyed || (this.destroyed = !0, this.clean(), this.reset());
      }, d.clean = function () {
        this.destroyTextures(), this.destroyBuffer(), this.removeGl();
      }, d.removeGl = function () {
        this.canvas && this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas), this.canvas = null, this.canvasInited = !1, this.gl = null;
      }, t.exports = h;
    }, 153: function _(t, e) {
      "use strict";
      var n = {},
          i = n.create3DContext = function (t, e) {
        for (var n = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"], i = null, o = 0; o < n.length; ++o) {
          try {
            i = t.getContext(n[o], e);
          } catch (e) {}if (i) break;
        }return i;
      };n.initShaders = function (t, e, n) {
        var i = o(t, e, n);return !!i && (t.useProgram(i), t.program = i, !0);
      };var o = n.createProgram = function (t, e, n) {
        var i = r(t, t.VERTEX_SHADER, e),
            o = r(t, t.FRAGMENT_SHADER, n);if (!i || !o) return null;var s = t.createProgram();if (!s) return null;t.attachShader(s, i), t.attachShader(s, o), t.linkProgram(s);var a = t.getProgramParameter(s, t.LINK_STATUS);if (!a) {
          t.getProgramInfoLog(s);return t.deleteProgram(s), t.deleteShader(o), t.deleteShader(i), null;
        }return s;
      },
          r = n.loadShader = function (t, e, n) {
        var i = t.createShader(e);return null == i ? null : (t.shaderSource(i, n), t.compileShader(i), i);
      };n.getWebGLContext = function (t, e) {
        var n = i(t);return n ? n : null;
      }, window.requestAnimationFrame || (window.requestAnimationFrame = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {
          window.setTimeout(t, 1e3 / 60);
        };
      }()), window.cancelAnimationFrame || (window.cancelAnimationFrame = window.cancelRequestAnimationFrame || window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame || window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame || window.clearTimeout), t.exports = n;
    }, 154: function _(t, e, n) {
      "use strict";
      var i = n(156),
          o = {};o.install = function (t) {
        var e = t.fn,
            n = t.util,
            o = n.notundef,
            r = i({ util: n });e.initNetcall = function (t) {
          return n.verifyOptions(t, "type accounts"), t.pushContent = "", t.custom = "", o(t.pushCoinitnfig) && (t.pushConfig = new r(t.pushConfig)), this.cbAndSendCmd("initNetcall", t);
        }, e.keepCalling = function (t) {
          return n.verifyOptions(t, "type accounts channelId"), this.cbAndSendCmd("keepCalling", t);
        }, e.calleeAck = function (t) {
          return n.verifyOptions(t, "account channelId type accepted"), this.cbAndSendCmd("calleeAck", t);
        }, e.hangup = function (t) {
          return n.verifyOptions(t, "channelId"), this.cbAndSendCmd("hangup", t);
        }, e.netcallControl = function (t) {
          return n.verifyOptions(t, "channelId type"), this.cbAndSendCmd("netcallControl", t);
        }, e.createChannel = function (t) {
          return this.cbAndSendCmd("createChannel", t);
        }, e.joinChannel = function (t) {
          return n.verifyOptions(t, "channelName"), n.verifyBooleanWithDefault(t, "liveEnable", !1), this.cbAndSendCmd("joinChannel", { channelName: t.channelName, liveOption: { liveEnable: t.liveEnable ? 1 : 0 } });
        }, e.queryAccountUidMap = function (t, e) {
          return this.cbAndSendCmd("queryAccountUidMap", { channelName: t, uids: e });
        };
      }, t.exports = o;
    }, 156: function _(t, e) {
      "use strict";
      function n(t) {
        i(t.enable) && (this.enable = t.enable ? 1 : 0), i(t.needBadge) && (this.needBadge = t.needBadge ? 1 : 0), i(t.needPushNick) && (this.needPushNick = t.needPushNick ? 1 : 0), i(t.pushContent) && (this.pushContent = "" + t.pushContent), i(t.custom) && (this.custom = "" + t.custom), i(t.pushPayload) && (this.pushPayload = "" + t.pushPayload), i(t.sound) && (this.sound = "" + t.sound);
      }e.__esModule = !0, e["default"] = function (t) {
        var e = t.util;return i = e.notundef, n;
      };var i = void 0;t.exports = e["default"];
    }, 157: function _(t, e, n) {
      "use strict";
      var i = _assign2.default || function (t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = arguments[e];for (var i in n) {
            Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
          }
        }return t;
      },
          o = n(151),
          r = o.prototype,
          s = void 0;r.setUtil = function (t) {
        s = t;
      }, r.createChannel = function (t) {
        return s.verifyOptions(t, "channelName"), t.custom = t.custom || "", this.nim.createChannel(t);
      }, r.joinChannel = function (t) {
        var e = this;s.verifyOptions(t, "channelName type");var n = t.type;if (this.signalInited) return this.nim.joinChannel({ channelName: t.channelName, custom: t.custom || "" }).then(function (o) {
          return e.callerInfo = o, e.channelId = o.channelId, e.channelName = t.channelName, e.parseAccountUidMap(o.accountUidMap), o.uid = e.getUidWithAccount(e.account), e.signal.startSession(i({}, o, { type: n }, t.sessionConfig), !0);
        });var o = { code: "noConnection" };return _promise2.default.reject(o);
      }, r.leaveChannel = function () {
        if (this.signalInited) return this.signal.stopSession();var t = { code: "noConnection" };return _promise2.default.reject(t);
      }, r.changeRoleToPlayer = function () {
        return this.signal.setRole(0);
      }, r.changeRoleToAudience = function () {
        return this.signal.setRole(1);
      }, r.updateRtmpUrl = function (t) {
        return this.signal.updateRtmpUrl(t);
      };
    }, 158: function _(t, e) {
      "use strict";
      var n = "wss://localhost.netease.im:",
          i = { baseUrl: n, signalUrl: n + "30000", streamUrl: n + "40000", genStreamUrl: function genStreamUrl(t) {
          return "" + n + t;
        } };t.exports = i;
    }, 159: function _(t, e, n) {
      "use strict";
      function i(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
      }function o(t, e) {
        if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "function" != typeof e ? t : e;
      }function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)));t.prototype = (0, _create2.default)(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(t, e) : t.__proto__ = e);
      }var s = _assign2.default || function (t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = arguments[e];for (var i in n) {
            Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
          }
        }return t;
      },
          a = void 0,
          c = n(26),
          u = n(130),
          l = n(161),
          h = n(169),
          d = function (t) {
        function e(n) {
          i(this, e);var r = o(this, t.call(this));return a.merge(r, n), r.reset(), window.addEventListener("beforeunload", function () {
            r.destroy();
          }), r;
        }return r(e, t), e;
      }(c);d.install = function (t) {
        a = t.util;
      };var p = d.prototype;p.reset = function () {
        this.inited = !1, this.isMeeting = !1, this.hasInvokePC = !1, this.cmdId = 1, this.cmdTasksMap = {}, this.sessionStopped = !1, this.devicesMap = {}, this.deviceMap = {}, this.initSocket();
      }, p.initSocket = function () {
        var t = this.socket = new WebSocket(this.url);t.onopen = this.onOpen.bind(this), t.onmessage = this.onMessage.bind(this), t.onerror = this.onError.bind(this), t.onclose = this.onClose.bind(this);
      }, p.onOpen = function (t) {
        var e = this,
            n = this.heartbeat ? 1 : 0,
            i = this.getName() + " open -> signal.js";this.inited = !0, this.logToConsole(i), this.log(i), this.emit("open"), this.sendCmd({ type: "on_init", info: { account: this.account, type: this.kickLast ? 1 : 0, heartbeat: n } }).then(this.onInit.bind(this))["catch"](function (t) {
          e.logToConsole("init error -> signal.js", t), e.emit("initError", t);
        });
      }, p.onError = function (t) {
        if (!this.destroyed && this.inited) {
          var e = this.getName() + " error -> signal.js";this.logToConsole(e);
        }
      }, p.onClose = function (t) {
        var e = this;if (!this.destroyed) if (this.inited) {
          var n = this.getName() + " close -> signal.js : " + t.code;this.logToConsole(n), this.inited = !1, this.emit("close");
        } else {
          this.hasInvokePC || (this.hasInvokePC = !0, this.invokePC());var i = this.backoff;i || (i = this.backoff = new h({ min: 1e3, max: 2e3 })), 3 === i.attempts ? this.emit("initError", { code: "noPC" }) : setTimeout(function () {
            e.initSocket();
          }, i.duration());
        }
      }, p.invokePC = function () {
        var t = "NIMWebAgent:invokePC",
            e = document.createElement("iframe");e.src = t, document.body.appendChild(e), setTimeout(function () {
          e.parentNode && e.parentNode.removeChild(e);
        }, 0);
      }, p.onMessage = function (t) {
        if (!this.destroyed) {
          var e = JSON.parse(t.data),
              n = e.cmd_id,
              i = e.cmd_type,
              o = e.cmd_info;this.shouldPrintMsg({ cmdType: i, cmdInfo: o }) && "on_heartbeat_notify" !== i && this.client.info("signal socket msg", e);var r = this.cmdTasksMap[n];if (r) delete this.cmdTasksMap[n], 200 === o.code ? r.resolve(o) : r.reject(o);else switch (i) {case "device_status_notify":
              this.onDeviceStatus(o);break;case "session_notify":
              this.onSessionNotify(o);break;case "upload_log_notify":
              this.onUploadLogNotify(o);}
        }
      }, p.shouldPrintMsg = function (t) {
        var e = t.cmdType,
            n = t.cmdInfo;return "session_notify" !== e || !n.audio_volume && !n.net && !n.static_info;
      }, p.sendCmd = function (t) {
        var e = this;return new _promise2.default(function (n, i) {
          var o = "on_heartbeat" === t.type ? 0 : e.cmdId++,
              r = s({ cmd_id: o, cmd_type: t.type, cmd_info: t.info || {} }, t.extra);e.socket && e.socket.readyState === WebSocket.OPEN ? ("on_heartbeat" !== t.type && e.logToConsole("send signal cmd", r), e.cmdTasksMap[o] = { resolve: n, reject: i }, e.socket.send((0, _stringify2.default)(r))) : i({ code: "noConnection" });
        });
      }, p.onInit = function (t) {
        var e = t.code,
            n = t.version,
            i = t.port,
            o = t.device_list_notify;200 === e && (o.forEach(this.onDevices, this), this.emit("init", { port: i, version: n, code: e }), this.startHeartBeat());
      }, p.startHeartBeat = function () {
        var t = this;this.heartBeatTimer && this.stopHeartBeat(), this.heartBeatTimer = setInterval(function () {
          t.sendCmd({ type: "on_heartbeat", info: {} })["catch"](function () {
            t.emit("heartBeatError", { type: "heartbeatError" });
          });
        }, 15e3);
      }, p.stopHeartBeat = function () {
        clearInterval(this.heartBeatTimer), this.heartBeatTimer = null;
      }, p.setVideoViewSize = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            e = parseInt(t.width) || 0,
            n = parseInt(t.height) || 0,
            i = void 0 === t.cut ? 1 : ~~t.cut;return this.sendCmd({ type: "on_capture_video_size", info: { width: e, height: n, cut: i } });
      }, p.setVideoViewRemoteSize = function (t) {
        var e = parseInt(t.width) || 0,
            n = parseInt(t.height) || 0,
            i = t.id || 0,
            o = void 0 === t.cut ? 1 : ~~t.cut;return this.sendCmd({ type: "on_rec_video_size", info: { id: i, width: e, height: n, cut: o } });
      }, p.setVideoScale = function (t) {
        var e = t.type,
            n = void 0 === e ? u.CHAT_VIDEO_SCALE_None : e,
            i = t.id;return this.sendCmd({ type: "on_send_video_Scale", info: { id: i, type: n } });
      }, p.getDevicesOfType = function (t) {
        var e = this;return this.sendCmd({ type: "on_get_devices", info: { type: t } }).then(function (t) {
          return t.devices = t.devices || [], e.onDevices(t), t;
        })["catch"](function (t) {
          throw t;
        });
      }, p.onDevices = function (t) {
        var e = t.type,
            n = t.devices;if (n && n.length) {
          l.sortDevices(n);var i = u.getDeviceTypeStr(e);i && (this.devicesMap[e] = n, this.emit("devices", { type: e, typeStr: i, devices: n }));
        }
      }, p.startAllDevices = function () {
        var t = this,
            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = e.videoQuality,
            i = e.audioOutType;(0, _keys2.default)(this.devicesMap).forEach(function (e) {
          e = +e, e === u.DEVICE_TYPE_AUDIO_OUT_CHAT && i === u.DEVICE_TYPE_AUDIO_OUT_LOCAL && (e = i);var o = t.devicesMap[e];t.startDevice({ device: o[0], type: e, videoQuality: n });
        });
      }, p.startDevice = function (t) {
        var e = this,
            n = t.device,
            i = t.type,
            o = t.width,
            r = t.height;if (n) {
          i = +i;var s = { type: i, path: n.path };return i === u.DEVICE_TYPE_VIDEO && (s.width = parseInt(o) || 0, s.height = parseInt(r) || 0), this.deviceMap[i] = n, this.sendCmd({ type: "on_start_device", info: s })["catch"](function () {
            throw delete e.deviceMap[i], s;
          });
        }
      }, p.stopDevice = function (t) {
        var e = this,
            n = this.deviceMap[t];return delete this.deviceMap[t], this.sendCmd({ type: "on_stop_device", info: { type: t } })["catch"](function () {
          e.deviceMap[t] = n;
        });
      }, p.onDeviceStatus = function (t) {
        var e = t.type,
            n = t.status,
            i = 1 === (1 & n),
            o = 4 === (4 & n),
            r = 8 === (8 & n),
            a = 16 === (16 & n);r && (this.deviceMap[e] = t, this.emit("deviceStatus", s({}, t, { status: "started" }))), a && (delete this.deviceMap[e], this.emit("deviceStatus", s({}, t, { status: "stopped" }))), o && (this.deviceMap[e] = t, this.emit("deviceStatus", s({}, t, { status: "reset" }))), i && this.emit("deviceStatus", s({}, t, { status: "change" }));
      }, p.startSession = function (t, e) {
        var n = this;this.sessionStopped = !1;var i = a.guid();this.sessionId = i;var o = t.type;this.type = o;var r = { id: t.uid, cid: t.channelId, type: o, p2p_connect: 1, dispatch: t.serverMap, config: t.clientConfig, video_quality: this.normalizeVideoQuality(t.videoQuality), video_record: t.recordVideo ? 1 : 0, record: t.recordAudio ? 1 : 0, high_rate: t.highAudio ? 1 : 0, frame_rate: this.normalizeVideoFrameRate(t.videoFrameRate), max_video_rate: this.normalizeVideoBitrate(t.videoBitrate) };return e && (r.meeting_mode = 1, r.bypass_rtmp = t.bypassRtmp ? 1 : 0, r.rtmp_url = t.rtmpUrl || "", r.rtmp_record = t.rtmpRecord ? 1 : 0, r.split_mode = t.splitMode || 0), this.sendCmd({ type: "on_start_chat", info: r, extra: { session_id: i } }).then(function (t) {
          var i = t.login,
              o = t.error;if (o) throw o;return n.isMeeting = e, { login: i };
        });
      }, p.stopSession = function () {
        return this.sessionStopped ? _promise2.default.resolve() : (this.sessionStopped = !0, this.isMeeting = !1, this.sendCmd({ type: "on_stop_chat" }));
      }, p.clear = function () {
        this.sendCmd({ type: "on_clear" });
      }, p.switchVideoToAudio = function () {
        return this.sendCmd({ type: "on_set_chat_mode", info: { type: u.NETCALL_TYPE_AUDIO } });
      }, p.switchAudioToVideo = function () {
        return this.sendCmd({ type: "on_set_chat_mode", info: { type: u.NETCALL_TYPE_VIDEO } });
      }, p.logToConsole = function () {
        var t = this.client;t && t.log.apply(t, arguments);
      }, p.log = function (t) {
        t && this.doLog({ msg: t, level: 3 });
      }, p.warn = function (t) {
        t && this.doLog({ msg: t, level: 2 });
      }, p.err = function (t) {
        t && this.doLog({ msg: t, level: 1 });
      }, p.doLog = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            e = t.msg,
            n = t.level;return this.sendCmd({ type: "on_log", info: { type: n, content: "" + e } })["catch"](function () {});
      }, p.uploadLog = function (t) {
        var e = t.bucket,
            n = t.objectName,
            i = t.token;return this.sendCmd({ type: "on_upload_log", info: { nos_bucket: e, nos_object: n, nos_header_token: i } })["catch"](function () {});
      }, p.normalizeVideoQuality = function (t) {
        return parseInt(t) || u.CHAT_VIDEO_QUALITY_NORMAL;
      }, p.setVideoQuality = function (t) {
        return this.sendCmd({ type: "on_set_video_quality", info: { type: this.normalizeVideoQuality(t) } });
      }, p.normalizeVideoFrameRate = function (t) {
        return parseInt(t) || u.CHAT_VIDEO_FRAME_RATE_NORMAL;
      }, p.setVideoFrameRate = function (t) {
        return this.sendCmd({ type: "on_set_video_frame_rate", info: { type: this.normalizeVideoFrameRate(t) } });
      }, p.normalizeVideoBitrate = function (t) {
        return parseInt(t) || 0;
      }, p.setVideoBitrate = function (t) {
        return this.sendCmd({ type: "on_set_video_bitrate", info: { code: this.normalizeVideoBitrate(t) } });
      }, p.netDetect = function (t) {
        return this.sendCmd({ type: "on_net_detect", info: { app_key: t } });
      }, p.normalizeVolumn = function (t) {
        return t = +t, a.isNumber(t) && !isNaN(t) || (t = 255), t < 0 && (t = 0), t > 255 && (t = 255), t;
      }, p.setCaptureVolume = function (t) {
        return t = this.normalizeVolumn(t), this.sendCmd({ type: "on_capture_volume", info: { status: t } });
      }, p.setPlayVolume = function (t) {
        return t = this.normalizeVolumn(t), this.sendCmd({ type: "on_play_volume", info: { status: t } });
      }, p.setRole = function (t) {
        return this.sendCmd({ type: "on_set_viewer", info: { status: t } });
      }, p.setAudioBlack = function (t, e) {
        return this.sendCmd({ type: "on_set_audio_black", info: { id: t, status: e } });
      }, p.setVideoBlack = function (t, e) {
        return this.sendCmd({ type: "on_set_video_black", info: { id: t, status: e } });
      }, p.updateRtmpUrl = function (t) {
        return this.sendCmd({ type: "on_update_rtmp_url", info: { content: t } });
      }, p.startRecordMp4 = function (t) {
        var e = t.path,
            n = t.id,
            i = void 0 === n ? "" : n;return this.sendCmd({ type: "on_record_mp4", info: { path: e, id: i } });
      }, p.stopRecordMp4 = function (t) {
        var e = t.id,
            n = void 0 === e ? 0 : e;return this.sendCmd({ type: "on_stop_record_mp4", info: { id: n } });
      }, p.startRecordAac = function (t) {
        var e = t.path;return this.sendCmd({ type: "on_record_aac", info: { path: e } });
      }, p.stopRecordAac = function () {
        return this.sendCmd({ type: "on_stop_record_aac", info: {} });
      }, p.onSessionNotify = function (t) {
        t && (t.user_joined ? this.emit("userJoined", { uid: t.user_joined.id, port: t.user_joined.port, type: this.type, isMeeting: this.isMeeting }) : t.user_left ? this.emit("userLeft", { uid: t.user_left.id, type: t.user_left.status, isMeeting: this.isMeeting }) : t.net ? this.emit("netStatus", t.net) : t.static_info ? this.emit("statistics", t.static_info) : t.audio_volume ? this.emit("audioVolume", t.audio_volume) : t.error ? this.emit("error", t.error) : t.mp4_start ? this.emit("recordMp4", t.mp4_start, "start") : t.mp4_close && this.emit("recordMp4", t.mp4_close, "close"));
      }, p.onUploadLogNotify = function (t) {
        var e = t.code,
            n = t.url;200 === e && this.emit("logUploaded", { url: n });
      }, p.getName = function () {
        return "signal socket " + this.url;
      }, p.destroy = function () {
        this.destroyed = !0, this.stopHeartBeat();var t = "signal close -> signal.js";this.logToConsole(t), this.socket && (this.socket.onopen = null, this.socket.onmessage = null, this.socket.onerror = null, this.socket.onclose = null, this.socket.readyState === WebSocket.OPEN && (this.clear(), this.socket.close()), this.socket = null);
      }, t.exports = d;
    }, 160: function _(t, e, n) {
      "use strict";
      function i(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
      }function o(t, e) {
        if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "function" != typeof e ? t : e;
      }function r(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)));t.prototype = (0, _create2.default)(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (_setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(t, e) : t.__proto__ = e);
      }var s = void 0,
          a = n(26),
          c = n(152),
          u = n(166),
          l = function (t) {
        function e(n) {
          i(this, e);var r = o(this, t.call(this));return s.merge(r, n), r.init(), r;
        }return r(e, t), e;
      }(a);l.install = function (t) {
        s = t.util;
      };var h = l.prototype;h.init = function () {
        this.reset(), this.initRender(), this.initWorker(), window.addEventListener("beforeunload", this.destroy.bind(this));
      }, h.initRender = function () {
        var t = this;this.render = new c({ client: this.client, stream: this, isRemote: this.isRemote, container: this.container, mirror: this.mirror }), this.render.on("resize", function (e) {
          t.emit("resize", e);
        }), this.render.on("error", function (e) {
          t.emit("error", e);
        });
      }, h.reset = function () {
        this.currFrameCount = 0, this.width = 0, this.height = 0, this.timetag = 0, this.worker = null, this.render = null;
      }, h.initWorker = function () {
        var t = this,
            e = new Blob([u], { type: "application/javascript" }),
            n = this.worker = new Worker(URL.createObjectURL(e));n.addEventListener("message", function (e) {
          var n = e.data;switch (n.cmd) {case "open":
              t.onOpen();break;case "error":
              t.onError();break;case "close":
              t.onClose();break;case "message":
              t.onMessage(n);}
        }), this.sendWorkerCmd({ cmd: "init", info: { url: this.url } });
      }, h.destroyWorker = function () {
        this.worker && this.worker.terminate();
      }, h.sendWorkerCmd = function (t) {
        this.worker && this.worker.postMessage(t);
      }, h.getName = function () {
        return (this.isRemote ? "remote " : "") + "stream socket " + this.url;
      }, h.onOpen = function (t) {
        var e = this.getName() + " open -> stream.js";this.logToConsole(e), this.logToPC(e);
      }, h.startStatisticsTimer = function () {
        var t = this;this.statisticsTimer = setInterval(function () {
          var e = t.currFrameCount - t.lastFrameCount;t.sendWorkerCmd({ cmd: "msg", info: { cmd: "statistics", info: { lastFrameCount: t.lastFrameCount, fps: e, latency: t.latency } } }), t.lastFrameCount = t.currFrameCount, t.latency = 0;
        }, 1e3);
      }, h.onError = function (t) {
        if (!this.destroyed) {
          var e = this.getName() + " error -> stream.js";this.logToConsole(e), this.logToPC(e), this.destroy();
        }
      }, h.onClose = function (t) {
        this.destroy(t);
      }, h.onMessage = function (t) {
        var e = t.data;if (!this.destroyed && e instanceof ArrayBuffer) {
          var n = e.byteLength;this.render && !this.suspended && this.renderFrame(e, n);
        }
      }, h.renderFrame = function (t, e) {
        var n = 16,
            i = new DataView(t),
            o = this.width = i.getUint32(0),
            r = this.height = i.getUint32(4),
            s = i.getUint32(8),
            a = i.getUint32(12);this.timetag = 1e3 * s + a;var c = o * r,
            u = c / 4,
            l = c / 4;if (n + c + u + l !== e) {
          var h = "yuv数据长度不匹配: total " + e + ", meta " + n + ", width " + o + ", height " + r + ", yLength " + c + " uLength " + u + " vLength " + l;return this.logToConsole(h), void this.logToPC(h);
        }this.currFrameCount++, this.scheduleRender({ id: this.currFrameCount, width: o, height: r, y: new Uint8Array(t, n, c), u: new Uint8Array(t, n + c, u), v: new Uint8Array(t, n + c + u) });
      }, h.scheduleRender = function (t) {
        this.render && !this.suspended && this.render.drawImage(t);
      }, h.suspend = function () {
        this.suspended = !0;
      }, h.resume = function () {
        this.suspended = !1;
      }, h.destroy = function (t) {
        this.sendWorkerCmd({ cmd: "close", info: { cmd_type: "on_clear_media" } }), this.destroyed = !0, this.render && this.render.destroy(), this.reset();var e = t && t.constructor === Object ? t.code : "",
            n = this.getName() + " destroy: code - " + e + " -> stream.js";this.logToConsole(n), this.logToPC(n);
      }, h.logToConsole = function () {
        var t = this.client;t && t.log.apply(t, arguments);
      }, h.logToPC = function () {
        var t = this.client;if (t) {
          var e = t.signal;e && e.log.apply(e, arguments);
        }
      }, t.exports = l;
    }, 161: function _(t, e) {
      "use strict";
      var n = {};n.sortDevices = function (t) {
        t && t.length > 1 && t.sort(function (t, e) {
          var n = t.name.toLowerCase().indexOf("virtual") !== -1,
              i = t.path.toLowerCase().indexOf("virtual") !== -1,
              o = e.name.toLowerCase().indexOf("virtual") !== -1,
              r = e.path.toLowerCase().indexOf("virtual") !== -1;return i ? 1 : r ? -1 : n && o ? 0 : n ? 1 : o ? -1 : 0;
        });
      }, t.exports = n;
    }, 162: function _(t, e) {
      "use strict";
      var n = {};n.install = function (t) {
        var e = t.Protocol.fn;e.processNetcall = function (t) {
          switch (t.cmd) {case "initNetcall":
              this.onInitNetcall(t);break;case "beCalled":
              this.onBeCalled(t);break;case "keepCalling":
              this.onKeepCalling(t);break;case "calleeAck":
              break;case "notifyCalleeAck":
              this.onNotifyCalleeAck(t);break;case "hangup":
              break;case "notifyHangup":
              this.onNotifyHangup(t);break;case "notifyNetcallControl":
              this.onNetcallControl(t);break;case "notifyCalleeAckSync":
              this.onNotifyCalleeAckSync(t);break;case "notifyNetcallRecord":
              this.onMsg(t);break;case "createChannel":
              break;case "joinChannel":
              this.joinChannel(t);break;case "notifyJoin":
              this.notifyJoin(t);}
        }, e.onInitNetcall = function (t) {
          if (!t.error) {
            var e = t.obj.type;t.obj = t.content, t.obj.type = e, t.obj.accounts = t.obj.keepCallingAccounts, this.setCurrentNetcall(t.obj.channelId), this.keepCalling(t);
          }
        }, e.setCurrentNetcall = function (t) {
          this.currentNetcallChannelId = t;
        }, e.onKeepCalling = function (t) {
          t.error || t.content.accounts.length && this.keepCalling(t);
        }, e.keepCalling = function (t) {
          var e = this,
              n = t.obj,
              i = n.type,
              o = n.accounts,
              r = n.channelId;o && o.length && setTimeout(function () {
            e.currentNetcallChannelId && e.currentNetcallChannelId === r && e.api.keepCalling({ type: i, accounts: o, channelId: r })["catch"](function () {});
          }, 3e3);
        }, e.onBeCalled = function (t) {
          t.error || this.emitAPI({ type: "beCalled", obj: t.content });
        }, e.onNotifyCalleeAck = function (t) {
          t.error || this.emitAPI({ type: "notifyCalleeAck", obj: t.content });
        }, e.onNotifyHangup = function (t) {
          t.error || this.emitAPI({ type: "notifyHangup", obj: t.content });
        }, e.onNetcallControl = function (t) {
          t.error || this.emitAPI({ type: "netcallControl", obj: t.content });
        }, e.onNotifyCalleeAckSync = function (t) {
          t.error || this.emitAPI({ type: "notifyCalleeAckSync", obj: t.content });
        }, e.notifyJoin = function (t) {
          t.error || this.emitAPI({ type: "notifyJoin", obj: t.content });
        }, e.joinChannel = function (t) {
          t.obj = t.content;
        };
      }, t.exports = n;
    }, 163: function _(t, e) {
      "use strict";
      var n = 9,
          i = { netcall: { id: n, initNetcall: 1, keepCalling: 3, calleeAck: 4, notifyCalleeAck: 5, hangup: 6, notifyHangup: 7, netcallControl: 8, notifyNetcallControl: 9, verifyChannelId: 10, createChannel: 13, joinChannel: 14, queryAccountUidMap: 16 } },
          o = { initNetcall: { sid: n, cid: i.netcall.initNetcall, params: [{ type: "byte", name: "type" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "pushContent" }, { type: "String", name: "custom" }, { type: "Property", name: "pushConfig" }] }, keepCalling: { sid: n, cid: i.netcall.keepCalling, params: [{ type: "byte", name: "type" }, { type: "StrArray", name: "accounts" }, { type: "long", name: "channelId" }] }, calleeAck: { sid: n, cid: i.netcall.calleeAck, params: [{ type: "string", name: "account" }, { type: "long", name: "channelId" }, { type: "byte", name: "type" }, { type: "bool", name: "accepted" }] }, hangup: { sid: n, cid: i.netcall.hangup, params: [{ type: "long", name: "channelId" }] }, netcallControl: { sid: n, cid: i.netcall.netcallControl, params: [{ type: "long", name: "channelId" }, { type: "byte", name: "type" }] }, verifyChannelId: { sid: n, cid: i.netcall.verifyChannelId, params: [{ type: "long", name: "channelId" }, { type: "String", name: "account" }] }, createChannel: { sid: n, cid: i.netcall.createChannel, params: [{ type: "String", name: "channelName" }, { type: "String", name: "custom" }] }, joinChannel: { sid: n, cid: i.netcall.joinChannel, params: [{ type: "String", name: "channelName" }, { type: "Property", name: "liveOption" }] }, queryAccountUidMap: { sid: n, cid: i.netcall.queryAccountUidMap, params: [{ type: "String", name: "channelName" }, { type: "LongArray", name: "uids" }] } },
          r = "netcall",
          s = { "9_1": { service: r, cmd: "initNetcall", response: [{ type: "Number", name: "timetag" }, { type: "Number", name: "uid" }, { type: "Number", name: "channelId" }, { type: "StrArray", name: "turnServerList" }, { type: "StrArray", name: "sturnServerList" }, { type: "StrArray", name: "proxyServerList" }, { type: "StrArray", name: "keepCallingAccounts" }, { type: "StrLongMap", name: "accountUidMap" }, { type: "String", name: "clientConfig" }, { type: "String", name: "serverMap" }] }, "9_2": { service: r, cmd: "beCalled", response: [{ type: "Number", name: "timetag" }, { type: "Number", name: "type" }, { type: "Number", name: "channelId" }, { type: "String", name: "account" }, { type: "Number", name: "uid" }, { type: "StrArray", name: "turnServerList" }, { type: "StrArray", name: "sturnServerList" }, { type: "StrArray", name: "proxyServerList" }, { type: "StrLongMap", name: "accountUidMap" }, { type: "String", name: "clientConfig" }, { type: "String", name: "custom" }, { type: "Property", name: "pushConfig" }, { type: "String", name: "serverMap" }] }, "9_3": { service: r, cmd: "keepCalling", response: [{ type: "StrArr", name: "accounts" }] }, "9_4": { service: r, cmd: "calleeAck", response: [] }, "9_5": { service: r, cmd: "notifyCalleeAck", response: [{ type: "String", name: "account" }, { type: "long", name: "channelId" }, { type: "byte", name: "type" }, { type: "bool", name: "accepted" }] }, "9_6": { service: r, cmd: "hangup", response: [] }, "9_7": { service: r, cmd: "notifyHangup", response: [{ type: "long", name: "channelId" }, { type: "String", name: "account" }, { type: "long", name: "timetag" }] }, "9_8": { service: r, cmd: "netcallControl", response: [] }, "9_9": { service: r, cmd: "notifyNetcallControl", response: [{ type: "String", name: "account" }, { type: "byte", name: "type" }, { type: "long", name: "channelId" }] }, "9_10": { service: r, cmd: "verifyChannelId", response: [] }, "9_11": { service: r, cmd: "notifyNetcallRecord", response: [{ type: "Property", name: "msg" }] }, "9_12": { service: r, cmd: "notifyCalleeAckSync", response: [{ type: "String", name: "timetag" }, { type: "long", name: "channelId" }, { type: "byte", name: "type" }, { type: "bool", name: "accepted" }, { type: "byte", name: "fromClientType" }] }, "9_13": { service: r, cmd: "createChannel", response: [{ type: "long", name: "timetag" }] }, "9_14": { service: r, cmd: "joinChannel", response: [{ type: "long", name: "timetag" }, { type: "long", name: "channelId" }, { type: "StrLongMap", name: "accountUidMap" }, { type: "String", name: "serverMap" }, { type: "String", name: "clientConfig" }, { type: "String", name: "custom" }] }, "9_15": { service: r, cmd: "notifyJoin", response: [{ type: "Long", name: "channelId" }, { type: "StrLongMap", name: "accountUidMap" }] }, "9_16": { service: r, cmd: "queryAccountUidMap", response: [] } };t.exports = { idMap: i, cmdConfig: o, packetConfig: s };
    }, 164: function _(t, e) {
      "use strict";
      t.exports = { pushConfig: { enable: 1, needBadge: 2, needPushNick: 3, pushContent: 4, custom: 5, pushPayload: 6, sound: 7 }, liveOption: { liveEnable: 1 } };
    }, 165: function _(t, e) {
      "use strict";
      t.exports = { pushConfig: { 1: "enable", 2: "needBadge", 3: "needPushNick", 4: "pushContent", 5: "custom", 6: "pushPayload", 7: "sound" }, liveOption: { 1: "liveEnable" } };
    }, 166: function _(t, e) {
      t.exports = "'use strict';\n\n/* 该web worker 职能为向 websocket 发送指令及数据*/\n\nvar that = {};\n\nthat.init = function (data) {\n  if (!that.socket) {\n    var url = that.url = data.info.url;\n    var socket = that.socket = new WebSocket(url);\n    socket.onopen = function (event) {\n      postMessage({\n        cmd: 'open'\n      });\n    };\n    socket.onmessage = function (event) {\n      postMessage({\n        cmd: 'message',\n        data: event.data\n      });\n    };\n    socket.onerror = function (event) {\n      postMessage({\n        cmd: 'error'\n      });\n    };\n    socket.onclose = function (event) {\n      postMessage({ // web 端被动结束\n        cmd: 'close'\n      });\n    };\n    socket.binaryType = 'arraybuffer';\n  }\n};\n\nthat.close = function () {\n  if (that.socket) {\n    that.socket.onopen = null;\n    that.socket.onmessage = null;\n    that.socket.onerror = null;\n    that.socket.onclose = null;\n    that.socket.close(); // 结束socket\n    that.socket = null;\n  }\n  self.close(); // 结束worker，web端主动\n};\n\nthat.send = function (obj) {\n  if (that.socket && that.socket.readyState === WebSocket.OPEN) {\n    that.socket.send(JSON.stringify(obj));\n  }\n};\n// 侦听主线程的worker消息\nself.addEventListener('message', function (event) {\n  var data = event.data;\n  switch (data.cmd) {\n    case 'init':\n      // worker第一步2\n      that.init(data);\n      break;\n    case 'close':\n      // web发起，结束worker及相应socket\n      that.send(data.info);\n      that.close(data);\n      break;\n    case 'msg':\n      that.send(data.info);\n      break;\n  }\n});";
    }, 167: function _(t, e) {
      t.exports = "precision mediump float;\r\nuniform sampler2D Ytex, Utex, Vtex;\r\nvarying vec2 v_texCoord;\r\nvoid main(void) {\r\n  float r, g, b, y, u, v;\r\n  vec4 yuv, rgb;\r\n  y = texture2D(Ytex, v_texCoord).r;\r\n  u = texture2D(Utex, v_texCoord).r;\r\n  v = texture2D(Vtex, v_texCoord).r;\r\n  yuv = vec4(y, u, v, 1.0);\r\n  yuv = yuv - vec4(0.0625, 0.5, 0.5, 0.0);\r\n  yuv = mat4(\r\n    1.1643, 0.0, 0.0, 0.0,\r\n    0.0, 1.0, 0.0, 0.0,\r\n    0.0, 0.0, 1.0, 0.0,\r\n    0.0, 0.0, 0.0, 1.0\r\n  ) * yuv;\r\n  rgb = mat4(\r\n    1.0, 1.0, 1.0, 0.0,\r\n    0.0, -0.3917, 2.017, 0.0,\r\n    1.5958, -0.8129, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 1.0\r\n  ) * yuv;\r\n  gl_FragColor = rgb;\r\n  // y = 1.1643 * (y - 0.0625);\r\n  // u = u - 0.5;\r\n  // v = v - 0.5;\r\n  // r = y + 1.5958 * v;\r\n  // g = y - 0.39173 * u - 0.81290 * v;\r\n  // b = y + 2.017 * u;\r\n  // gl_FragColor = vec4(r, g, b, 1.0);\r\n}\r\n";
    }, 168: function _(t, e) {
      t.exports = "attribute vec4 a_position;\r\nattribute vec2 a_texCoord;\r\nvarying vec2 v_texCoord;\r\nvoid main () {\r\n  gl_Position = a_position;\r\n  v_texCoord = a_texCoord;\r\n}\r\n";
    }, 169: function _(t, e) {
      function n(t) {
        t = t || {}, this.ms = t.min || 100, this.max = t.max || 1e4, this.factor = t.factor || 2, this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0, this.attempts = 0;
      }t.exports = n, n.prototype.duration = function () {
        var t = this.ms * Math.pow(this.factor, this.attempts++);if (this.jitter) {
          var e = Math.random(),
              n = Math.floor(e * this.jitter * t);t = 0 == (1 & Math.floor(10 * e)) ? t - n : t + n;
        }return 0 | Math.min(t, this.max);
      }, n.prototype.reset = function () {
        this.attempts = 0;
      };
    } });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,